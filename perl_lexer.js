// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 64544;
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__sub_I_bind_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp1145() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });
  

var memoryInitializer = "perl_lexer.js.mem";




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Add"] = _i64Add;

   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function _pthread_mutex_lock() {}

  
  function _free() {
  }
  Module["_free"] = _free;
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var HEAP, shift;
      if (charSize === 2) {
          HEAP = HEAPU16;
          shift = 1;
      } else if (charSize === 4) {
          HEAP = HEAPU32;
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }

  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 1; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              var ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  
  var _throwInternalError=undefined;function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = requireFunction(downcastSignature, downcast);
      }
      rawDestructor = requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }


  function _pthread_cond_wait() {
      return 0;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _fabs=Math_abs;

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }


  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
embind_init_charCodes()
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
init_emval();
init_ClassHandle()
init_RegisteredPointer()
init_embind();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiii": invoke_iiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viii": invoke_viii, "invoke_viiiiid": invoke_viiiiid, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "___cxa_guard_acquire": ___cxa_guard_acquire, "getLiveInheritedInstances": getLiveInheritedInstances, "___assert_fail": ___assert_fail, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "ClassHandle": ClassHandle, "getShiftFromSize": getShiftFromSize, "__addDays": __addDays, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "runDestructor": runDestructor, "_sysconf": _sysconf, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "__embind_register_std_string": __embind_register_std_string, "init_RegisteredPointer": init_RegisteredPointer, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "_fileno": _fileno, "_llvm_stacksave": _llvm_stacksave, "flushPendingDeletes": flushPendingDeletes, "_fread": _fread, "makeClassHandle": makeClassHandle, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "_write": _write, "__isLeapYear": __isLeapYear, "__embind_register_class_constructor": __embind_register_class_constructor, "___cxa_atexit": ___cxa_atexit, "init_ClassHandle": init_ClassHandle, "_catclose": _catclose, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "_send": _send, "RegisteredClass": RegisteredClass, "_llvm_stackrestore": _llvm_stackrestore, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "__embind_register_emval": __embind_register_emval, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "___setErrNo": ___setErrNo, "___ctype_tolower_loc": ___ctype_tolower_loc, "_newlocale": _newlocale, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "_freelocale": _freelocale, "createNamedFunction": createNamedFunction, "embind_init_charCodes": embind_init_charCodes, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "_pthread_mutex_unlock": _pthread_mutex_unlock, "___ctype_toupper_loc": ___ctype_toupper_loc, "init_embind": init_embind, "ClassHandle_clone": ClassHandle_clone, "heap32VectorToArray": heap32VectorToArray, "ClassHandle_delete": ClassHandle_delete, "_mkport": _mkport, "_read": _read, "RegisteredPointer_destructor": RegisteredPointer_destructor, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "new_": new_, "downcastPointer": downcastPointer, "_catopen": _catopen, "replacePublicSymbol": replacePublicSymbol, "__embind_register_class": __embind_register_class, "ClassHandle_deleteLater": ClassHandle_deleteLater, "__embind_register_integer": __embind_register_integer, "___ctype_b_loc": ___ctype_b_loc, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "ClassHandle_isDeleted": ClassHandle_isDeleted, "_vfprintf": _vfprintf, "__emval_incref": __emval_incref, "___cxa_allocate_exception": ___cxa_allocate_exception, "__emval_take_value": __emval_take_value, "_pwrite": _pwrite, "_uselocale": _uselocale, "getTypeName": getTypeName, "_strftime": _strftime, "RegisteredPointer": RegisteredPointer, "craftInvokerFunction": craftInvokerFunction, "runDestructors": runDestructors, "requireRegisteredType": requireRegisteredType, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "upcastPointer": upcastPointer, "init_emval": init_emval, "_pthread_cond_broadcast": _pthread_cond_broadcast, "shallowCopyInternalPointer": shallowCopyInternalPointer, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "_recv": _recv, "genericPointerToWireType": genericPointerToWireType, "registerType": registerType, "_abort": _abort, "throwBindingError": throwBindingError, "_embind_repr": _embind_repr, "exposePublicSymbol": exposePublicSymbol, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "__embind_register_memory_view": __embind_register_memory_view, "getInheritedInstance": getInheritedInstance, "setDelayFunction": setDelayFunction, "extendError": extendError, "_ungetc": _ungetc, "ensureOverloadTable": ensureOverloadTable, "__embind_register_void": __embind_register_void, "__embind_register_function": __embind_register_function, "_strftime_l": _strftime_l, "_pthread_mutex_lock": _pthread_mutex_lock, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "__emval_register": __emval_register, "_catgets": _catgets, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_class_function": __embind_register_class_function, "throwUnboundTypeError": throwUnboundTypeError, "__arraySum": __arraySum, "_calloc": _calloc, "readLatin1String": readLatin1String, "getBasestPointer": getBasestPointer, "_pread": _pread, "getInheritedInstanceCount": getInheritedInstanceCount, "__embind_register_float": __embind_register_float, "integerReadValueFromPointer": integerReadValueFromPointer, "_getc": _getc, "_fflush": _fflush, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "___cxa_guard_release": ___cxa_guard_release, "_pthread_setspecific": _pthread_setspecific, "_fgetc": _fgetc, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "_strerror": _strerror, "__formatString": __formatString, "_atexit": _atexit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var ___assert_fail=env.___assert_fail;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ClassHandle=env.ClassHandle;
  var getShiftFromSize=env.getShiftFromSize;
  var __addDays=env.__addDays;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var runDestructor=env.runDestructor;
  var _sysconf=env._sysconf;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var __embind_register_std_string=env.__embind_register_std_string;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var _fileno=env._fileno;
  var _llvm_stacksave=env._llvm_stacksave;
  var flushPendingDeletes=env.flushPendingDeletes;
  var _fread=env._fread;
  var makeClassHandle=env.makeClassHandle;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var ___cxa_atexit=env.___cxa_atexit;
  var init_ClassHandle=env.init_ClassHandle;
  var _catclose=env._catclose;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var _send=env._send;
  var RegisteredClass=env.RegisteredClass;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var __embind_register_emval=env.__embind_register_emval;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var ___setErrNo=env.___setErrNo;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _newlocale=env._newlocale;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var _freelocale=env._freelocale;
  var createNamedFunction=env.createNamedFunction;
  var embind_init_charCodes=env.embind_init_charCodes;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var init_embind=env.init_embind;
  var ClassHandle_clone=env.ClassHandle_clone;
  var heap32VectorToArray=env.heap32VectorToArray;
  var ClassHandle_delete=env.ClassHandle_delete;
  var _mkport=env._mkport;
  var _read=env._read;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var new_=env.new_;
  var downcastPointer=env.downcastPointer;
  var _catopen=env._catopen;
  var replacePublicSymbol=env.replacePublicSymbol;
  var __embind_register_class=env.__embind_register_class;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var __embind_register_integer=env.__embind_register_integer;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var _vfprintf=env._vfprintf;
  var __emval_incref=env.__emval_incref;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __emval_take_value=env.__emval_take_value;
  var _pwrite=env._pwrite;
  var _uselocale=env._uselocale;
  var getTypeName=env.getTypeName;
  var _strftime=env._strftime;
  var RegisteredPointer=env.RegisteredPointer;
  var craftInvokerFunction=env.craftInvokerFunction;
  var runDestructors=env.runDestructors;
  var requireRegisteredType=env.requireRegisteredType;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var upcastPointer=env.upcastPointer;
  var init_emval=env.init_emval;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var _recv=env._recv;
  var genericPointerToWireType=env.genericPointerToWireType;
  var registerType=env.registerType;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var _embind_repr=env._embind_repr;
  var exposePublicSymbol=env.exposePublicSymbol;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var getInheritedInstance=env.getInheritedInstance;
  var setDelayFunction=env.setDelayFunction;
  var extendError=env.extendError;
  var _ungetc=env._ungetc;
  var ensureOverloadTable=env.ensureOverloadTable;
  var __embind_register_void=env.__embind_register_void;
  var __embind_register_function=env.__embind_register_function;
  var _strftime_l=env._strftime_l;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var __emval_register=env.__emval_register;
  var _catgets=env._catgets;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var __embind_register_class_function=env.__embind_register_class_function;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var __arraySum=env.__arraySum;
  var _calloc=env._calloc;
  var readLatin1String=env.readLatin1String;
  var getBasestPointer=env.getBasestPointer;
  var _pread=env._pread;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var __embind_register_float=env.__embind_register_float;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var _getc=env._getc;
  var _fflush=env._fflush;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fgetc=env._fgetc;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function __ZN5Lexer8tokenizeEPc($this, $script) {
 $this = $this | 0;
 $script = $script | 0;
 var $$$i$i = 0, $$$i$i$i = 0, $$$i$i$i$i = 0, $$$i$i10$i$i = 0, $$$i$i94 = 0, $$$i11$i = 0, $$$i13$i$i = 0, $$$i19$i$i = 0, $$0$i$i = 0, $$0$i$i$be = 0, $$0$i52 = 0, $$0$i6 = 0, $$01$be$i$i$i$i$i$i = 0, $$01$be$i$i$i$i$i$i$i = 0, $$01$be$i$i$i5$i$i$i = 0, $$01$be$i$i$i5$i$i$i$i = 0, $$014$i$i$i$i$i$i = 0, $$014$i$i$i$i$i$i$i = 0, $$014$i$i$i3$i$i$i = 0, $$014$i$i$i3$i$i$i$i = 0, $$1$ph$i$i = 0, $$12$i$i = 0, $$333 = 0, $$334 = 0, $$idx$val = 0, $$in$i = 0, $$in$lcssa$i = 0, $$lcssa$i = 0, $$lcssa$i$i = 0, $$lcssa$i$i$i = 0, $$lcssa$i$i$i$i = 0, $$lcssa$i$i100 = 0, $$lcssa$i$i119 = 0, $$lcssa$i$i24$i$i = 0, $$lcssa$i$i36$i$i = 0, $$lcssa$i$i37 = 0, $$lcssa$i15$i = 0, $$lcssa$i20$i = 0, $$lcssa$i30$i = 0, $$lcssa$i39$i = 0, $$lcssa$i58$i = 0, $$lcssa$i8$i = 0, $$ph$i = 0, $$ph300 = 0, $$ph306 = 0, $$ph312 = 0, $$ph59$i = 0, $$ph60$i = 0, $$pr$i = 0, $$pr$i$pre = 0, $$pre$i$i = 0, $$pre$i2$i = 0, $$pre$phi$iZ2D = 0, $$pre$phi26$iZ2D = 0, $$pre$phi28$iZ2D = 0, $$pre15$i = 0, $$pre236 = 0, $$pre238 = 0, $$pre240 = 0, $$pre242 = 0, $$size$i$i = 0, $$size$i$i$i = 0, $$size$i$i20$i$i = 0, $$size$i$i31$i$i = 0, $$size$i$i32 = 0, $$size$i$i95 = 0, $$size$i11$i = 0, $$size$i16$i = 0, $$size$i26$i = 0, $$size$i35$i = 0, $$size$i4$i = 0, $$size$i54$i = 0, $0 = 0, $1 = 0, $10 = 0, $1000 = 0, $1001 = 0, $1011 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $102 = 0, $1021 = 0, $1022 = 0, $1025 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $104 = 0, $1045 = 0, $1049 = 0, $105 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $106 = 0, $1063 = 0, $107 = 0, $1071 = 0, $1072 = 0, $1074 = 0, $1076 = 0, $1082 = 0, $1084 = 0, $1085 = 0, $109 = 0, $1091 = 0, $1093 = 0, $1095 = 0, $1098 = 0, $11 = 0, $110 = 0, $1100 = 0, $1104 = 0, $1109 = 0, $1113 = 0, $1114 = 0, $1120 = 0, $1122 = 0, $1124 = 0, $1127 = 0, $1129 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1139 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1148 = 0, $1150 = 0, $1157 = 0, $1158 = 0, $116 = 0, $1164 = 0, $1166 = 0, $1168 = 0, $1171 = 0, $1173 = 0, $118 = 0, $1182 = 0, $1188 = 0, $12 = 0, $120 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1214 = 0, $1215 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $1225 = 0, $1227 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $1240 = 0, $1241 = 0, $1245 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1255 = 0, $1256 = 0, $1260 = 0, $1268 = 0, $1269 = 0, $1270 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1299 = 0, $13 = 0, $1301 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1311 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1318 = 0, $1319 = 0, $1320 = 0, $1326 = 0, $1327 = 0, $1330 = 0, $1331 = 0, $1338 = 0, $1339 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1354 = 0, $1356 = 0, $1358 = 0, $1359 = 0, $1360 = 0, $1366 = 0, $1367 = 0, $1369 = 0, $1371 = 0, $1374 = 0, $1376 = 0, $1379 = 0, $138 = 0, $1381 = 0, $1387 = 0, $1388 = 0, $139 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1425 = 0, $1426 = 0, $1429 = 0, $143 = 0, $1431 = 0, $1432 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $145 = 0, $1454 = 0, $1456 = 0, $1459 = 0, $1460 = 0, $1461 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $1478 = 0, $1482 = 0, $1483 = 0, $1485 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $15 = 0, $1500 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1514 = 0, $1516 = 0, $1518 = 0, $1520 = 0, $1526 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1531 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1561 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $158 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1594 = 0, $1596 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1611 = 0, $1612 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1622 = 0, $1624 = 0, $1628 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1638 = 0, $1640 = 0, $1644 = 0, $1645 = 0, $1649 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1659 = 0, $1660 = 0, $1666 = 0, $1668 = 0, $1669 = 0, $1670 = 0, $1676 = 0, $1678 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1688 = 0, $1689 = 0, $1691 = 0, $1693 = 0, $1694 = 0, $17 = 0, $1700 = 0, $1702 = 0, $1704 = 0, $1707 = 0, $1709 = 0, $171 = 0, $1713 = 0, $1714 = 0, $1720 = 0, $1722 = 0, $1724 = 0, $1727 = 0, $1729 = 0, $1736 = 0, $1738 = 0, $1740 = 0, $1743 = 0, $1747 = 0, $175 = 0, $1759 = 0, $176 = 0, $1761 = 0, $1763 = 0, $1765 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1778 = 0, $1780 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1790 = 0, $1793 = 0, $1799 = 0, $18 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1809 = 0, $1810 = 0, $1811 = 0, $1813 = 0, $1815 = 0, $1817 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1822 = 0, $1829 = 0, $1831 = 0, $1832 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1848 = 0, $1849 = 0, $1850 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $186 = 0, $1860 = 0, $1862 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1868 = 0, $1869 = 0, $1871 = 0, $1873 = 0, $1875 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $1883 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1908 = 0, $191 = 0, $1910 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1918 = 0, $1921 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1928 = 0, $1929 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1939 = 0, $1941 = 0, $1943 = 0, $1946 = 0, $1948 = 0, $1965 = 0, $1972 = 0, $1974 = 0, $1975 = 0, $1981 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1997 = 0, $1999 = 0, $2 = 0, $20 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $202 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2035 = 0, $2042 = 0, $2044 = 0, $2046 = 0, $2052 = 0, $2054 = 0, $2056 = 0, $2062 = 0, $2064 = 0, $2066 = 0, $2079 = 0, $208 = 0, $2081 = 0, $209 = 0, $2092 = 0, $2094 = 0, $21 = 0, $2101 = 0, $211 = 0, $2110 = 0, $2121 = 0, $2129 = 0, $214 = 0, $2145 = 0, $2153 = 0, $2155 = 0, $2157 = 0, $2159 = 0, $216 = 0, $2161 = 0, $2164 = 0, $2167 = 0, $2171 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2178 = 0, $2181 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $219 = 0, $2195 = 0, $22 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2207 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2213 = 0, $2214 = 0, $2216 = 0, $222 = 0, $2226 = 0, $2228 = 0, $223 = 0, $2230 = 0, $2232 = 0, $2234 = 0, $2236 = 0, $2238 = 0, $2242 = 0, $2244 = 0, $2246 = 0, $2248 = 0, $225 = 0, $2252 = 0, $2254 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2290 = 0, $2291 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2305 = 0, $2307 = 0, $2309 = 0, $231 = 0, $2312 = 0, $2314 = 0, $232 = 0, $2325 = 0, $233 = 0, $2330 = 0, $2336 = 0, $2337 = 0, $234 = 0, $2343 = 0, $2345 = 0, $2347 = 0, $235 = 0, $2350 = 0, $2352 = 0, $236 = 0, $2365 = 0, $2367 = 0, $237 = 0, $2372 = 0, $2374 = 0, $2377 = 0, $238 = 0, $2387 = 0, $2388 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $261 = 0, $262 = 0, $264 = 0, $265 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0, $280 = 0, $284 = 0, $286 = 0, $289 = 0, $29 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $304 = 0, $307 = 0, $308 = 0, $31 = 0, $312 = 0, $316 = 0, $32 = 0, $320 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $341 = 0, $343 = 0, $345 = 0, $346 = 0, $347 = 0, $35 = 0, $353 = 0, $354 = 0, $356 = 0, $357 = 0, $358 = 0, $36 = 0, $364 = 0, $365 = 0, $37 = 0, $374 = 0, $375 = 0, $377 = 0, $38 = 0, $380 = 0, $386 = 0, $39 = 0, $394 = 0, $395 = 0, $397 = 0, $4 = 0, $40 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $424 = 0, $427 = 0, $429 = 0, $43 = 0, $431 = 0, $432 = 0, $433 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $445 = 0, $446 = 0, $447 = 0, $453 = 0, $454 = 0, $455 = 0, $461 = 0, $464 = 0, $465 = 0, $466 = 0, $468 = 0, $47 = 0, $477 = 0, $48 = 0, $483 = 0, $497 = 0, $498 = 0, $5 = 0, $500 = 0, $506 = 0, $507 = 0, $51 = 0, $510 = 0, $512 = 0, $513 = 0, $515 = 0, $52 = 0, $522 = 0, $529 = 0, $530 = 0, $532 = 0, $538 = 0, $539 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $546 = 0, $547 = 0, $548 = 0, $55 = 0, $553 = 0, $556 = 0, $558 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $573 = 0, $579 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $586 = 0, $587 = 0, $588 = 0, $59 = 0, $595 = 0, $597 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $607 = 0, $609 = 0, $61 = 0, $616 = 0, $617 = 0, $619 = 0, $62 = 0, $625 = 0, $628 = 0, $629 = 0, $63 = 0, $632 = 0, $633 = 0, $634 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $647 = 0, $65 = 0, $650 = 0, $652 = 0, $654 = 0, $655 = 0, $656 = 0, $66 = 0, $662 = 0, $666 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $676 = 0, $677 = 0, $678 = 0, $68 = 0, $683 = 0, $686 = 0, $688 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $702 = 0, $71 = 0, $710 = 0, $712 = 0, $717 = 0, $72 = 0, $724 = 0, $730 = 0, $731 = 0, $732 = 0, $734 = 0, $746 = 0, $749 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $757 = 0, $758 = 0, $759 = 0, $764 = 0, $767 = 0, $769 = 0, $771 = 0, $772 = 0, $773 = 0, $779 = 0, $78 = 0, $780 = 0, $783 = 0, $784 = 0, $785 = 0, $788 = 0, $789 = 0, $790 = 0, $796 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $804 = 0, $809 = 0, $815 = 0, $82 = 0, $822 = 0, $823 = 0, $824 = 0, $826 = 0, $833 = 0, $834 = 0, $835 = 0, $837 = 0, $843 = 0, $844 = 0, $847 = 0, $848 = 0, $85 = 0, $850 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $865 = 0, $866 = 0, $87 = 0, $872 = 0, $873 = 0, $878 = 0, $879 = 0, $881 = 0, $884 = 0, $886 = 0, $887 = 0, $889 = 0, $891 = 0, $892 = 0, $893 = 0, $899 = 0, $9 = 0, $900 = 0, $903 = 0, $904 = 0, $905 = 0, $911 = 0, $912 = 0, $913 = 0, $919 = 0, $920 = 0, $923 = 0, $925 = 0, $926 = 0, $933 = 0, $934 = 0, $937 = 0, $938 = 0, $945 = 0, $947 = 0, $949 = 0, $950 = 0, $953 = 0, $956 = 0, $961 = 0, $962 = 0, $972 = 0, $974 = 0, $975 = 0, $976 = 0, $98 = 0, $982 = 0, $983 = 0, $986 = 0, $988 = 0, $992 = 0, $995 = 0, $__p$0$i$i = 0, $__p$0$i$i$i = 0, $__p$0$i$i$i$i = 0, $__p$0$i$i102 = 0, $__p$0$i$i38$i$i = 0, $__p$0$i$i39 = 0, $__p$0$i12$i = 0, $__p$0$i2$i = 0, $__p$0$i22$i = 0, $__p$0$i31$i = 0, $__p$0$i50$i = 0, $__p$0$i7$i = 0, $annotator$i = 0, $c$0$i = 0, $c$05$i = 0, $data$i$i = 0, $extract$t6$i = 0, $i$0$lcssa$i = 0, $i$01$i = 0, $i$01$i$i$i$i = 0, $i$01$i114 = 0, $i$04$i$i$i = 0, $i$049$i = 0, $i$075$i = 0, $i1$048$i = 0, $i2$047$i = 0, $i3$046$i = 0, $info$i$i = 0, $n$0$lcssa$i$i = 0, $n$03$i$i = 0, $neg$0$i$i = 0, $neg$1$ph$i$i = 0, $num_buffer$i = 0, $reserved_info$sroa$4$i$i$i = 0, $ret$0$off0$ph$i = 0, $ret$0$off061$i = 0, $ret$1$off0$i = 0, $scanner = 0, $wanted_idx$03$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 $0 = sp + 24 | 0;
 $1 = sp;
 $2 = sp + 320 | 0;
 $3 = sp + 392 | 0;
 $4 = sp + 240 | 0;
 $reserved_info$sroa$4$i$i$i = sp + 48 | 0;
 $info$i$i = sp + 348 | 0;
 $data$i$i = sp + 372 | 0;
 $annotator$i = sp + 72 | 0;
 $5 = sp + 108 | 0;
 $6 = sp + 316 | 0;
 $num_buffer$i = sp + 436 | 0;
 $7 = sp + 212 | 0;
 $8 = sp + 216 | 0;
 $9 = sp + 220 | 0;
 $10 = sp + 224 | 0;
 $11 = sp + 228 | 0;
 $12 = sp + 232 | 0;
 $13 = sp + 368 | 0;
 $14 = sp + 384 | 0;
 $15 = sp + 428 | 0;
 $16 = sp + 264 | 0;
 $17 = sp + 268 | 0;
 $18 = sp + 272 | 0;
 $19 = sp + 276 | 0;
 $20 = sp + 280 | 0;
 $21 = sp + 284 | 0;
 $22 = sp + 288 | 0;
 $23 = sp + 292 | 0;
 $24 = sp + 296 | 0;
 $25 = sp + 300 | 0;
 $26 = sp + 304 | 0;
 $27 = sp + 308 | 0;
 $28 = sp + 68 | 0;
 $29 = sp + 344 | 0;
 $30 = sp + 312 | 0;
 $31 = sp + 236 | 0;
 $32 = sp + 432 | 0;
 $33 = sp + 420 | 0;
 $34 = sp + 424 | 0;
 $35 = sp + 64 | 0;
 $36 = sp + 416 | 0;
 $scanner = sp + 112 | 0;
 $37 = $scanner + 12 | 0;
 HEAP8[$37 >> 0] = 0;
 $38 = $scanner + 13 | 0;
 HEAP8[$38 >> 0] = 0;
 $39 = $scanner + 16 | 0;
 HEAP32[$39 >> 2] = 0;
 $40 = $scanner + 20 | 0;
 HEAP32[$40 >> 2] = 0;
 $41 = $scanner + 24 | 0;
 HEAP32[$41 >> 2] = 0;
 $42 = $scanner + 32 | 0;
 HEAP32[$42 + 0 >> 2] = 0;
 HEAP32[$42 + 4 >> 2] = 0;
 HEAP32[$42 + 8 >> 2] = 0;
 $43 = $scanner + 44 | 0;
 $44 = $scanner + 48 | 0;
 HEAP32[$44 >> 2] = 0;
 HEAP32[$scanner + 52 >> 2] = 0;
 HEAP32[$scanner + 0 >> 2] = 0;
 HEAP32[$scanner + 4 >> 2] = 0;
 HEAP16[$scanner + 8 >> 1] = 0;
 HEAP8[$scanner + 10 >> 0] = 0;
 HEAP32[$43 >> 2] = $scanner + 48;
 $47 = $scanner + 56 | 0;
 $48 = $scanner + 60 | 0;
 HEAP32[$48 >> 2] = 0;
 HEAP32[$scanner + 64 >> 2] = 0;
 HEAP32[$47 >> 2] = $scanner + 60;
 $51 = $scanner + 68 | 0;
 $52 = $scanner + 72 | 0;
 HEAP32[$52 >> 2] = 0;
 HEAP32[$scanner + 76 >> 2] = 0;
 HEAP32[$51 >> 2] = $scanner + 72;
 $55 = $scanner + 84 | 0;
 $56 = $scanner + 88 | 0;
 HEAP32[$56 >> 2] = 0;
 HEAP32[$scanner + 92 >> 2] = 0;
 HEAP32[$55 >> 2] = $scanner + 88;
 $59 = $1 + 12 | 0;
 $60 = $1 + 1 | 0;
 $61 = $59 + 1 | 0;
 $62 = $1 + 8 | 0;
 $63 = $1 + 20 | 0;
 $64 = $1 + 4 | 0;
 $71 = 39296;
 $i$049$i = 0;
 L1 : while (1) {
  $72 = _strlen($71 | 0) | 0;
  if ($72 >>> 0 > 4294967279) {
   label = 4;
   break;
  }
  if ($72 >>> 0 < 11) {
   HEAP8[$1 >> 0] = $72 << 1;
   $__p$0$i$i = $60;
  } else {
   $78 = $72 + 16 & -16;
   $$size$i$i = ($78 | 0) == 0 ? 1 : $78;
   $80 = _malloc($$size$i$i) | 0;
   if (!$80) while (1) {
    $82 = HEAP32[15470] | 0;
    HEAP32[15470] = $82 + 0;
    if (!$82) {
     label = 10;
     break L1;
    }
    FUNCTION_TABLE_v[$82 & 3]();
    $85 = _malloc($$size$i$i) | 0;
    if ($85) {
     $$lcssa$i$i = $85;
     break;
    }
   } else $$lcssa$i$i = $80;
   HEAP32[$62 >> 2] = $$lcssa$i$i;
   HEAP32[$1 >> 2] = $78 | 1;
   HEAP32[$64 >> 2] = $72;
   $__p$0$i$i = $$lcssa$i$i;
  }
  _memcpy($__p$0$i$i | 0, $71 | 0, $72 | 0) | 0;
  HEAP8[$__p$0$i$i + $72 >> 0] = 0;
  HEAP8[$59 >> 0] = 0;
  HEAP8[$61 >> 0] = 0;
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0, $43, $1);
  if (HEAP8[$59 >> 0] & 1) _free(HEAP32[$63 >> 2] | 0);
  if (HEAP8[$1 >> 0] & 1) _free(HEAP32[$62 >> 2] | 0);
  $98 = $i$049$i + 1 | 0;
  if (($98 | 0) == 6) {
   label = 2;
   break;
  } else {
   $71 = HEAP32[1032 + ($98 << 2) >> 2] | 0;
   $i$049$i = $98;
  }
 }
 if ((label | 0) == 2) {
  $65 = $2 + 12 | 0;
  $66 = $2 + 1 | 0;
  $67 = $65 + 1 | 0;
  $68 = $2 + 8 | 0;
  $69 = $2 + 20 | 0;
  $70 = $2 + 4 | 0;
  $i1$048$i = 0;
  L21 : while (1) {
   $109 = HEAP32[1080 + ($i1$048$i << 2) >> 2] | 0;
   $110 = _strlen($109 | 0) | 0;
   if ($110 >>> 0 > 4294967279) {
    label = 19;
    break;
   }
   if ($110 >>> 0 < 11) {
    HEAP8[$2 >> 0] = $110 << 1;
    $__p$0$i12$i = $66;
   } else {
    $116 = $110 + 16 & -16;
    $$size$i16$i = ($116 | 0) == 0 ? 1 : $116;
    $118 = _malloc($$size$i16$i) | 0;
    if (!$118) while (1) {
     $120 = HEAP32[15470] | 0;
     HEAP32[15470] = $120 + 0;
     if (!$120) {
      label = 25;
      break L21;
     }
     FUNCTION_TABLE_v[$120 & 3]();
     $123 = _malloc($$size$i16$i) | 0;
     if ($123) {
      $$lcssa$i20$i = $123;
      break;
     }
    } else $$lcssa$i20$i = $118;
    HEAP32[$68 >> 2] = $$lcssa$i20$i;
    HEAP32[$2 >> 2] = $116 | 1;
    HEAP32[$70 >> 2] = $110;
    $__p$0$i12$i = $$lcssa$i20$i;
   }
   _memcpy($__p$0$i12$i | 0, $109 | 0, $110 | 0) | 0;
   HEAP8[$__p$0$i12$i + $110 >> 0] = 0;
   HEAP8[$65 >> 0] = 0;
   HEAP8[$67 >> 0] = 0;
   __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0, $51, $2);
   if (HEAP8[$65 >> 0] & 1) _free(HEAP32[$69 >> 2] | 0);
   if (HEAP8[$2 >> 0] & 1) _free(HEAP32[$68 >> 2] | 0);
   $i1$048$i = $i1$048$i + 1 | 0;
   if (($i1$048$i | 0) == 3) {
    label = 17;
    break;
   }
  }
  if ((label | 0) == 17) {
   $102 = $3 + 12 | 0;
   $103 = $3 + 1 | 0;
   $104 = $102 + 1 | 0;
   $105 = $3 + 8 | 0;
   $106 = $3 + 20 | 0;
   $107 = $3 + 4 | 0;
   $144 = 39488;
   $i2$047$i = 0;
   L43 : while (1) {
    $145 = _strlen($144 | 0) | 0;
    if ($145 >>> 0 > 4294967279) {
     label = 34;
     break;
    }
    if ($145 >>> 0 < 11) {
     HEAP8[$3 >> 0] = $145 << 1;
     $__p$0$i31$i = $103;
    } else {
     $151 = $145 + 16 & -16;
     $$size$i35$i = ($151 | 0) == 0 ? 1 : $151;
     $153 = _malloc($$size$i35$i) | 0;
     if (!$153) while (1) {
      $155 = HEAP32[15470] | 0;
      HEAP32[15470] = $155 + 0;
      if (!$155) {
       label = 40;
       break L43;
      }
      FUNCTION_TABLE_v[$155 & 3]();
      $158 = _malloc($$size$i35$i) | 0;
      if ($158) {
       $$lcssa$i39$i = $158;
       break;
      }
     } else $$lcssa$i39$i = $153;
     HEAP32[$105 >> 2] = $$lcssa$i39$i;
     HEAP32[$3 >> 2] = $151 | 1;
     HEAP32[$107 >> 2] = $145;
     $__p$0$i31$i = $$lcssa$i39$i;
    }
    _memcpy($__p$0$i31$i | 0, $144 | 0, $145 | 0) | 0;
    HEAP8[$__p$0$i31$i + $145 >> 0] = 0;
    HEAP8[$102 >> 0] = 0;
    HEAP8[$104 >> 0] = 0;
    __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0, $47, $3);
    if (HEAP8[$102 >> 0] & 1) _free(HEAP32[$106 >> 2] | 0);
    if (HEAP8[$3 >> 0] & 1) _free(HEAP32[$105 >> 2] | 0);
    $171 = $i2$047$i + 1 | 0;
    if (($171 | 0) == 3) {
     label = 32;
     break;
    } else {
     $144 = HEAP32[1064 + ($171 << 2) >> 2] | 0;
     $i2$047$i = $171;
    }
   }
   if ((label | 0) == 32) {
    $138 = $4 + 12 | 0;
    $139 = $4 + 1 | 0;
    $140 = $138 + 1 | 0;
    $141 = $4 + 8 | 0;
    $142 = $4 + 20 | 0;
    $143 = $4 + 4 | 0;
    $175 = 37144;
    $i3$046$i = 0;
    L64 : while (1) {
     $176 = _strlen($175 | 0) | 0;
     if ($176 >>> 0 > 4294967279) {
      label = 48;
      break;
     }
     if ($176 >>> 0 < 11) {
      HEAP8[$4 >> 0] = $176 << 1;
      $__p$0$i50$i = $139;
     } else {
      $182 = $176 + 16 & -16;
      $$size$i54$i = ($182 | 0) == 0 ? 1 : $182;
      $184 = _malloc($$size$i54$i) | 0;
      if (!$184) while (1) {
       $186 = HEAP32[15470] | 0;
       HEAP32[15470] = $186 + 0;
       if (!$186) {
        label = 54;
        break L64;
       }
       FUNCTION_TABLE_v[$186 & 3]();
       $189 = _malloc($$size$i54$i) | 0;
       if ($189) {
        $$lcssa$i58$i = $189;
        break;
       }
      } else $$lcssa$i58$i = $184;
      HEAP32[$141 >> 2] = $$lcssa$i58$i;
      HEAP32[$4 >> 2] = $182 | 1;
      HEAP32[$143 >> 2] = $176;
      $__p$0$i50$i = $$lcssa$i58$i;
     }
     _memcpy($__p$0$i50$i | 0, $175 | 0, $176 | 0) | 0;
     HEAP8[$__p$0$i50$i + $176 >> 0] = 0;
     HEAP8[$138 >> 0] = 0;
     HEAP8[$140 >> 0] = 0;
     __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0, $55, $4);
     if (HEAP8[$138 >> 0] & 1) _free(HEAP32[$142 >> 2] | 0);
     if (HEAP8[$4 >> 0] & 1) _free(HEAP32[$141 >> 2] | 0);
     $202 = $i3$046$i + 1 | 0;
     if (($202 | 0) == 98) {
      label = 61;
      break;
     } else {
      $175 = HEAP32[1096 + ($202 << 2) >> 2] | 0;
      $i3$046$i = $202;
     }
    }
    if ((label | 0) == 48) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 54) {
     $191 = ___cxa_allocate_exception(4) | 0;
     HEAP32[$191 >> 2] = 61776;
     ___cxa_throw($191 | 0, 61824, 94);
    } else if ((label | 0) == 61) {
     $208 = $scanner + 96 | 0;
     HEAP8[$208 >> 0] = HEAP8[$this + 32 >> 0] | 0;
     $209 = _malloc(56) | 0;
     L86 : do if (!$209) {
      while (1) {
       $211 = HEAP32[15470] | 0;
       HEAP32[15470] = $211 + 0;
       if (!$211) break;
       FUNCTION_TABLE_v[$211 & 3]();
       $214 = _malloc(56) | 0;
       if ($214) {
        $$lcssa$i = $214;
        break L86;
       }
      }
      $216 = ___cxa_allocate_exception(4) | 0;
      HEAP32[$216 >> 2] = 61776;
      ___cxa_throw($216 | 0, 61824, 94);
     } else $$lcssa$i = $209; while (0);
     __ZN10LexContextC2EPKcPc($$lcssa$i, HEAP32[$this + 28 >> 2] | 0, $script);
     $219 = $this + 36 | 0;
     HEAP32[$219 >> 2] = $$lcssa$i;
     $221 = HEAP32[$$lcssa$i + 4 >> 2] | 0;
     $222 = HEAP32[$$lcssa$i >> 2] | 0;
     $223 = $222 + 12 | 0;
     $225 = $222 + 4 | 0;
     $228 = HEAP8[(HEAP32[$225 >> 2] | 0) + (HEAP32[$223 >> 2] | 0) >> 0] | 0;
     L92 : do if (!($228 << 24 >> 24)) $1831 = $$lcssa$i; else {
      $230 = $222 + 8 | 0;
      $231 = $scanner + 8 | 0;
      $232 = $1 + 1 | 0;
      $233 = $1 + 4 | 0;
      $234 = $scanner + 9 | 0;
      $235 = $2 + 1 | 0;
      $236 = $2 + 8 | 0;
      $237 = $3 + 1 | 0;
      $238 = $3 + 9 | 0;
      $239 = $scanner + 10 | 0;
      $240 = $scanner + 3 | 0;
      $241 = $scanner + 1 | 0;
      $242 = $scanner + 2 | 0;
      $243 = $scanner + 28 | 0;
      $244 = $42 + 1 | 0;
      $245 = $scanner + 36 | 0;
      $246 = $scanner + 40 | 0;
      $247 = $2 + 1 | 0;
      $248 = $3 + 1 | 0;
      $249 = $3 + 8 | 0;
      $250 = $3 + 4 | 0;
      $251 = $4 + 1 | 0;
      $252 = $4 + 8 | 0;
      $253 = $4 + 4 | 0;
      $254 = $2 + 8 | 0;
      $255 = $2 + 4 | 0;
      $256 = $0 + 1 | 0;
      $257 = $0 + 8 | 0;
      $258 = $0 + 4 | 0;
      $259 = $scanner + 4 | 0;
      $261 = $228;
      L94 : while (1) {
       if (!($261 << 24 >> 24)) {
        label = 68;
        break;
       }
       $262 = $261 << 24 >> 24;
       $264 = HEAP32[$219 >> 2] | 0;
       if ($261 << 24 >> 24 == 10) {
        $265 = $264 + 8 | 0;
        HEAP32[$265 >> 2] = (HEAP32[$265 >> 2] | 0) + 1;
       }
       $268 = HEAP16[$231 >> 1] | 0;
       $269 = $268 & 255;
       $270 = HEAP32[$264 >> 2] | 0;
       $271 = $264 + 4 | 0;
       $272 = HEAP32[$271 >> 2] | 0;
       $273 = $270 + 4 | 0;
       $274 = HEAP32[$273 >> 2] | 0;
       $275 = $270 + 12 | 0;
       $276 = HEAP32[$275 >> 2] | 0;
       $277 = $276 + -1 | 0;
       $280 = ($268 & 65535) >>> 8 & 255;
       do if (($277 | 0) > -1) {
        $284 = HEAP8[$274 + $277 >> 0] | 0;
        $286 = HEAP8[$274 + $276 >> 0] | 0;
        $extract$t6$i = $269 << 24 >> 24 != 0;
        if ($284 << 24 >> 24 == 10) if ($286 << 24 >> 24 == 61) {
         $289 = $276 + 1 | 0;
         if ($289 >>> 0 < (HEAP32[$270 + 8 >> 2] | 0) >>> 0) $296 = HEAP8[$274 + $289 >> 0] | 0; else $296 = 0;
         $295 = $296 << 24 >> 24;
         if ((($295 | 32) + -97 | 0) >>> 0 < 26 | ($295 + -48 | 0) >>> 0 < 10) {
          HEAP8[$1 >> 0] = 6;
          HEAP8[$232 + 0 >> 0] = HEAP8[1640] | 0;
          HEAP8[$232 + 1 >> 0] = HEAP8[1641] | 0;
          HEAP8[$232 + 2 >> 0] = HEAP8[1642] | 0;
          HEAP8[$233 >> 0] = 0;
          if (!(__ZN13ScriptManager7compareEiiNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($270, 1, 3, $1) | 0)) {
           HEAP8[$231 >> 0] = 1;
           $380 = 61;
           $ret$0$off061$i = 1;
           label = 95;
           break;
          }
          HEAP32[$264 + 28 >> 2] = 4;
          HEAP8[$231 >> 0] = 0;
          do if (HEAP8[$208 >> 0] | 0) {
           $304 = $264 + 8 | 0;
           HEAP32[$304 >> 2] = (HEAP32[$304 >> 2] | 0) + 1;
           $307 = $264 + 40 | 0;
           $308 = HEAP32[$307 >> 2] | 0;
           $$pre$i$i = $264 + 36 | 0;
           HEAP32[$307 >> 2] = $308 + 1;
           HEAP8[(HEAP32[$$pre$i$i >> 2] | 0) + $308 >> 0] = 61;
           $312 = HEAP32[$307 >> 2] | 0;
           HEAP32[$307 >> 2] = $312 + 1;
           HEAP8[(HEAP32[$$pre$i$i >> 2] | 0) + $312 >> 0] = 99;
           $316 = HEAP32[$307 >> 2] | 0;
           HEAP32[$307 >> 2] = $316 + 1;
           HEAP8[(HEAP32[$$pre$i$i >> 2] | 0) + $316 >> 0] = 117;
           $320 = HEAP32[$307 >> 2] | 0;
           HEAP32[$307 >> 2] = $320 + 1;
           HEAP8[(HEAP32[$$pre$i$i >> 2] | 0) + $320 >> 0] = 116;
           HEAP8[(HEAP32[$$pre$i$i >> 2] | 0) + (HEAP32[$307 >> 2] | 0) >> 0] = 0;
           $327 = HEAP32[$$pre$i$i >> 2] | 0;
           HEAP32[$0 + 0 >> 2] = HEAP32[$304 + 0 >> 2];
           HEAP32[$0 + 4 >> 2] = HEAP32[$304 + 4 >> 2];
           HEAP32[$0 + 8 >> 2] = HEAP32[$304 + 8 >> 2];
           HEAP32[$0 + 12 >> 2] = HEAP32[$304 + 12 >> 2];
           HEAP32[$0 + 16 >> 2] = HEAP32[$304 + 16 >> 2];
           $328 = $272 + 72 | 0;
           $329 = HEAP32[$328 >> 2] | 0;
           HEAP32[$328 >> 2] = $329 + 72;
           HEAP32[$329 >> 2] = 0;
           HEAP32[$329 + 4 >> 2] = 211;
           $332 = $329 + 28 | 0;
           HEAP32[$332 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
           HEAP32[$332 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
           HEAP32[$332 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
           HEAP32[$332 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
           HEAP32[$332 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
           $333 = $329 + 8 | 0;
           $334 = $272 + 48 | 0;
           HEAP32[$333 + 0 >> 2] = HEAP32[$334 + 0 >> 2];
           HEAP32[$333 + 4 >> 2] = HEAP32[$334 + 4 >> 2];
           HEAP32[$333 + 8 >> 2] = HEAP32[$334 + 8 >> 2];
           HEAP32[$333 + 12 >> 2] = HEAP32[$334 + 12 >> 2];
           HEAP32[$333 + 16 >> 2] = HEAP32[$334 + 16 >> 2];
           HEAP32[$329 + 52 >> 2] = $327;
           HEAP32[$329 + 56 >> 2] = 0;
           HEAP32[$329 + 60 >> 2] = 0;
           HEAP32[$329 + 64 >> 2] = 60816;
           _memmove($333 | 0, 44640, 20) | 0;
           $341 = (HEAP32[$$pre$i$i >> 2] | 0) + (HEAP32[$307 >> 2] | 0) | 0;
           HEAP32[$$pre$i$i >> 2] = $341;
           HEAP8[$341 >> 0] = 0;
           HEAP32[$307 >> 2] = 0;
           $343 = (HEAP32[$$pre$i$i >> 2] | 0) + 1 | 0;
           HEAP32[$$pre$i$i >> 2] = $343;
           HEAP8[$343 >> 0] = 0;
           do if ($329) {
            $345 = HEAP32[$272 >> 2] | 0;
            HEAP32[$16 >> 2] = $329;
            $346 = $345 + 4 | 0;
            $347 = HEAP32[$346 >> 2] | 0;
            if (($347 | 0) == (HEAP32[$345 + 8 >> 2] | 0)) {
             __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($345, $16);
             break;
            }
            if (!$347) $353 = 0; else {
             HEAP32[$347 >> 2] = $329;
             $353 = HEAP32[$346 >> 2] | 0;
            }
            HEAP32[$346 >> 2] = $353 + 4;
           } while (0);
           $354 = __ZN7Scanner14scanWhiteSpaceEP10LexContext($scanner, $264) | 0;
           if (!$354) break;
           $356 = HEAP32[$272 >> 2] | 0;
           HEAP32[$15 >> 2] = $354;
           $357 = $356 + 4 | 0;
           $358 = HEAP32[$357 >> 2] | 0;
           if (($358 | 0) == (HEAP32[$356 + 8 >> 2] | 0)) {
            __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($356, $15);
            break;
           }
           if (!$358) $364 = 0; else {
            HEAP32[$358 >> 2] = $354;
            $364 = HEAP32[$357 >> 2] | 0;
           }
           HEAP32[$357 >> 2] = $364 + 4;
          } while (0);
          $365 = $264 + 8 | 0;
          HEAP32[$365 >> 2] = (HEAP32[$365 >> 2] | 0) + 1;
          $$pr$i$pre = HEAP16[$231 >> 1] | 0;
          $$ph$i = 1;
          $$ph59$i = 61;
          $$ph60$i = 10;
          $$pr$i = $$pr$i$pre & 255;
          $386 = ($$pr$i$pre & 65535) >>> 8 & 255;
          $ret$0$off0$ph$i = 0;
          label = 94;
         } else {
          $$ph$i = 1;
          $$ph59$i = 61;
          $$ph60$i = 10;
          $$pr$i = $269;
          $386 = $280;
          $ret$0$off0$ph$i = $extract$t6$i;
          label = 94;
         }
        } else {
         $$ph$i = 1;
         $$ph59$i = $286;
         $$ph60$i = 10;
         $$pr$i = $269;
         $386 = $280;
         $ret$0$off0$ph$i = $extract$t6$i;
         label = 94;
        } else {
         $$ph$i = 0;
         $$ph59$i = $286;
         $$ph60$i = $284;
         $$pr$i = $269;
         $386 = $280;
         $ret$0$off0$ph$i = $extract$t6$i;
         label = 94;
        }
       } else {
        $$ph$i = 0;
        $$ph59$i = HEAP8[$274 + $276 >> 0] | 0;
        $$ph60$i = 0;
        $$pr$i = $269;
        $386 = $280;
        $ret$0$off0$ph$i = $269 << 24 >> 24 != 0;
        label = 94;
       } while (0);
       L131 : do if ((label | 0) == 94) {
        label = 0;
        if (!($$pr$i << 24 >> 24)) {
         do if ($$ph$i & $$ph59$i << 24 >> 24 == 95 & $386 << 24 >> 24 == 0) {
          HEAP8[$2 >> 0] = 14;
          HEAP8[$235 + 0 >> 0] = HEAP8[35760] | 0;
          HEAP8[$235 + 1 >> 0] = HEAP8[35761] | 0;
          HEAP8[$235 + 2 >> 0] = HEAP8[35762] | 0;
          HEAP8[$235 + 3 >> 0] = HEAP8[35763] | 0;
          HEAP8[$235 + 4 >> 0] = HEAP8[35764] | 0;
          HEAP8[$235 + 5 >> 0] = HEAP8[35765] | 0;
          HEAP8[$235 + 6 >> 0] = HEAP8[35766] | 0;
          HEAP8[$236 >> 0] = 0;
          if (__ZN13ScriptManager7compareEiiNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($270, 0, 7, $2) | 0) {
           HEAP32[$264 + 28 >> 2] = (HEAP32[$264 + 44 >> 2] | 0) + ~$276;
           $ret$1$off0$i = 0;
           break;
          }
          if (!(HEAP8[$234 >> 0] | 0)) {
           HEAP8[$3 >> 0] = 16;
           $394 = $237;
           $395 = $394;
           HEAP8[$395 >> 0] = 95;
           HEAP8[$395 + 1 >> 0] = 95;
           HEAP8[$395 + 2 >> 0] = 68;
           HEAP8[$395 + 3 >> 0] = 65;
           $397 = $394 + 4 | 0;
           HEAP8[$397 >> 0] = 84;
           HEAP8[$397 + 1 >> 0] = 65;
           HEAP8[$397 + 2 >> 0] = 95;
           HEAP8[$397 + 3 >> 0] = 95;
           HEAP8[$238 >> 0] = 0;
           if (__ZN13ScriptManager7compareEiiNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($270, 0, 8, $3) | 0) {
            HEAP32[$264 + 28 >> 2] = (HEAP32[$264 + 44 >> 2] | 0) + ~$276;
            $ret$1$off0$i = 0;
           } else $ret$1$off0$i = $ret$0$off0$ph$i;
          } else $ret$1$off0$i = $ret$0$off0$ph$i;
         } else $ret$1$off0$i = $ret$0$off0$ph$i; while (0);
         if (!(HEAP8[$239 >> 0] | 0)) {
          $$0$i6 = $ret$1$off0$i;
          label = 222;
         } else {
          if (HEAP8[$240 >> 0] | 0) {
           if (!($$ph$i & $$ph59$i << 24 >> 24 == 46)) {
            $464 = HEAP8[$274 + $276 >> 0] | 0;
            $465 = $264 + 40 | 0;
            $466 = HEAP32[$465 >> 2] | 0;
            HEAP32[$465 >> 2] = $466 + 1;
            $468 = $264 + 36 | 0;
            HEAP8[(HEAP32[$468 >> 2] | 0) + $466 >> 0] = $464;
            HEAP8[(HEAP32[$468 >> 2] | 0) + (HEAP32[$465 >> 2] | 0) >> 0] = 0;
            break;
           }
           $409 = HEAP32[$271 >> 2] | 0;
           $410 = $264 + 36 | 0;
           $411 = HEAP32[$410 >> 2] | 0;
           $412 = $264 + 8 | 0;
           HEAP32[$0 + 0 >> 2] = HEAP32[$412 + 0 >> 2];
           HEAP32[$0 + 4 >> 2] = HEAP32[$412 + 4 >> 2];
           HEAP32[$0 + 8 >> 2] = HEAP32[$412 + 8 >> 2];
           HEAP32[$0 + 12 >> 2] = HEAP32[$412 + 12 >> 2];
           HEAP32[$0 + 16 >> 2] = HEAP32[$412 + 16 >> 2];
           $413 = $409 + 72 | 0;
           $414 = HEAP32[$413 >> 2] | 0;
           HEAP32[$413 >> 2] = $414 + 72;
           HEAP32[$414 >> 2] = 0;
           HEAP32[$414 + 4 >> 2] = 211;
           $417 = $414 + 28 | 0;
           HEAP32[$417 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
           HEAP32[$417 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
           HEAP32[$417 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
           HEAP32[$417 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
           HEAP32[$417 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
           $418 = $414 + 8 | 0;
           $419 = $409 + 48 | 0;
           HEAP32[$418 + 0 >> 2] = HEAP32[$419 + 0 >> 2];
           HEAP32[$418 + 4 >> 2] = HEAP32[$419 + 4 >> 2];
           HEAP32[$418 + 8 >> 2] = HEAP32[$419 + 8 >> 2];
           HEAP32[$418 + 12 >> 2] = HEAP32[$419 + 12 >> 2];
           HEAP32[$418 + 16 >> 2] = HEAP32[$419 + 16 >> 2];
           HEAP32[$414 + 52 >> 2] = $411;
           HEAP32[$414 + 56 >> 2] = 0;
           HEAP32[$414 + 60 >> 2] = 0;
           HEAP32[$414 + 64 >> 2] = 60816;
           _memmove($418 | 0, 44160, 20) | 0;
           $424 = $264 + 40 | 0;
           $427 = (HEAP32[$410 >> 2] | 0) + (HEAP32[$424 >> 2] | 0) | 0;
           HEAP32[$410 >> 2] = $427;
           HEAP8[$427 >> 0] = 0;
           HEAP32[$424 >> 2] = 0;
           $429 = (HEAP32[$410 >> 2] | 0) + 1 | 0;
           HEAP32[$410 >> 2] = $429;
           HEAP8[$429 >> 0] = 0;
           do if ($414) {
            $431 = HEAP32[$272 >> 2] | 0;
            HEAP32[$13 >> 2] = $414;
            $432 = $431 + 4 | 0;
            $433 = HEAP32[$432 >> 2] | 0;
            if (($433 | 0) == (HEAP32[$431 + 8 >> 2] | 0)) {
             __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($431, $13);
             break;
            }
            if (!$433) $439 = 0; else {
             HEAP32[$433 >> 2] = $414;
             $439 = HEAP32[$432 >> 2] | 0;
            }
            HEAP32[$432 >> 2] = $439 + 4;
           } while (0);
           $440 = HEAP32[$271 >> 2] | 0;
           HEAP32[$0 + 0 >> 2] = HEAP32[$412 + 0 >> 2];
           HEAP32[$0 + 4 >> 2] = HEAP32[$412 + 4 >> 2];
           HEAP32[$0 + 8 >> 2] = HEAP32[$412 + 8 >> 2];
           HEAP32[$0 + 12 >> 2] = HEAP32[$412 + 12 >> 2];
           HEAP32[$0 + 16 >> 2] = HEAP32[$412 + 16 >> 2];
           $441 = $440 + 72 | 0;
           $442 = HEAP32[$441 >> 2] | 0;
           HEAP32[$441 >> 2] = $442 + 72;
           HEAP32[$442 >> 2] = 0;
           HEAP32[$442 + 4 >> 2] = 211;
           $445 = $442 + 28 | 0;
           HEAP32[$445 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
           HEAP32[$445 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
           HEAP32[$445 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
           HEAP32[$445 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
           HEAP32[$445 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
           $446 = $442 + 8 | 0;
           $447 = $440 + 48 | 0;
           HEAP32[$446 + 0 >> 2] = HEAP32[$447 + 0 >> 2];
           HEAP32[$446 + 4 >> 2] = HEAP32[$447 + 4 >> 2];
           HEAP32[$446 + 8 >> 2] = HEAP32[$447 + 8 >> 2];
           HEAP32[$446 + 12 >> 2] = HEAP32[$447 + 12 >> 2];
           HEAP32[$446 + 16 >> 2] = HEAP32[$447 + 16 >> 2];
           HEAP32[$442 + 52 >> 2] = 64424;
           HEAP32[$442 + 56 >> 2] = 0;
           HEAP32[$442 + 60 >> 2] = 0;
           HEAP32[$442 + 64 >> 2] = 60816;
           _memmove($446 | 0, 44180, 20) | 0;
           do if ($442) {
            $453 = HEAP32[$272 >> 2] | 0;
            HEAP32[$14 >> 2] = $442;
            $454 = $453 + 4 | 0;
            $455 = HEAP32[$454 >> 2] | 0;
            if (($455 | 0) == (HEAP32[$453 + 8 >> 2] | 0)) {
             __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($453, $14);
             break;
            }
            if (!$455) $461 = 0; else {
             HEAP32[$455 >> 2] = $442;
             $461 = HEAP32[$454 >> 2] | 0;
            }
            HEAP32[$454 >> 2] = $461 + 4;
           } while (0);
           HEAP32[$264 + 28 >> 2] = 1;
           HEAP8[$240 >> 0] = 0;
           HEAP8[$239 >> 0] = 0;
           label = 223;
           break;
          }
          if (!(HEAP8[$241 >> 0] | 0)) {
           if (HEAP8[$242 >> 0] | 0) {
            $666 = HEAP8[$274 + $276 >> 0] | 0;
            if ($666 << 24 >> 24 != 41) {
             $699 = $264 + 40 | 0;
             $700 = HEAP32[$699 >> 2] | 0;
             HEAP32[$699 >> 2] = $700 + 1;
             $702 = $264 + 36 | 0;
             HEAP8[(HEAP32[$702 >> 2] | 0) + $700 >> 0] = $666;
             HEAP8[(HEAP32[$702 >> 2] | 0) + (HEAP32[$699 >> 2] | 0) >> 0] = 0;
             break;
            }
            $668 = HEAP32[$271 >> 2] | 0;
            $669 = $264 + 36 | 0;
            $670 = HEAP32[$669 >> 2] | 0;
            $671 = $264 + 8 | 0;
            HEAP32[$0 + 0 >> 2] = HEAP32[$671 + 0 >> 2];
            HEAP32[$0 + 4 >> 2] = HEAP32[$671 + 4 >> 2];
            HEAP32[$0 + 8 >> 2] = HEAP32[$671 + 8 >> 2];
            HEAP32[$0 + 12 >> 2] = HEAP32[$671 + 12 >> 2];
            HEAP32[$0 + 16 >> 2] = HEAP32[$671 + 16 >> 2];
            $672 = $668 + 72 | 0;
            $673 = HEAP32[$672 >> 2] | 0;
            HEAP32[$672 >> 2] = $673 + 72;
            HEAP32[$673 >> 2] = 0;
            HEAP32[$673 + 4 >> 2] = 211;
            $676 = $673 + 28 | 0;
            HEAP32[$676 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
            HEAP32[$676 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
            HEAP32[$676 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
            HEAP32[$676 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
            HEAP32[$676 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
            $677 = $673 + 8 | 0;
            $678 = $668 + 48 | 0;
            HEAP32[$677 + 0 >> 2] = HEAP32[$678 + 0 >> 2];
            HEAP32[$677 + 4 >> 2] = HEAP32[$678 + 4 >> 2];
            HEAP32[$677 + 8 >> 2] = HEAP32[$678 + 8 >> 2];
            HEAP32[$677 + 12 >> 2] = HEAP32[$678 + 12 >> 2];
            HEAP32[$677 + 16 >> 2] = HEAP32[$678 + 16 >> 2];
            HEAP32[$673 + 52 >> 2] = $670;
            HEAP32[$673 + 56 >> 2] = 0;
            HEAP32[$673 + 60 >> 2] = 0;
            HEAP32[$673 + 64 >> 2] = 60816;
            _memmove($677 | 0, 43780, 20) | 0;
            $683 = $264 + 40 | 0;
            $686 = (HEAP32[$669 >> 2] | 0) + (HEAP32[$683 >> 2] | 0) | 0;
            HEAP32[$669 >> 2] = $686;
            HEAP8[$686 >> 0] = 0;
            HEAP32[$683 >> 2] = 0;
            $688 = (HEAP32[$669 >> 2] | 0) + 1 | 0;
            HEAP32[$669 >> 2] = $688;
            HEAP8[$688 >> 0] = 0;
            do if ($673) {
             $690 = HEAP32[$272 >> 2] | 0;
             HEAP32[$20 >> 2] = $673;
             $691 = $690 + 4 | 0;
             $692 = HEAP32[$691 >> 2] | 0;
             if (($692 | 0) == (HEAP32[$690 + 8 >> 2] | 0)) {
              __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($690, $20);
              break;
             }
             if (!$692) $698 = 0; else {
              HEAP32[$692 >> 2] = $673;
              $698 = HEAP32[$691 >> 2] | 0;
             }
             HEAP32[$691 >> 2] = $698 + 4;
            } while (0);
            HEAP8[$242 >> 0] = 0;
            HEAP8[$239 >> 0] = 0;
            label = 223;
            break;
           }
           if (!(HEAP8[$234 >> 0] | 0)) {
            $$0$i6 = $ret$1$off0$i;
            label = 222;
            break;
           }
           $710 = HEAP8[$42 >> 0] | 0;
           $712 = ($710 & 1) == 0;
           if ($712) $724 = ($710 & 255) >>> 1; else $724 = HEAP32[$245 >> 2] | 0;
           $717 = (HEAP32[$275 >> 2] | 0) + -1 | 0;
           do if (($717 | 0) > -1) {
            if ((HEAP8[(HEAP32[$273 >> 2] | 0) + $717 >> 0] | 0) != 10) break;
            if (($724 + $276 | 0) >>> 0 >= (HEAP32[$264 + 44 >> 2] | 0) >>> 0) break;
            L193 : do if (!$724) $i$0$lcssa$i = 0; else {
             $730 = ($710 & 255) >>> 1;
             $731 = HEAP32[$246 >> 2] | 0;
             $732 = HEAP32[$245 >> 2] | 0;
             $i$075$i = 0;
             while (1) {
              if (($712 ? $730 : $732) >>> 0 <= $i$075$i >>> 0) {
               label = 195;
               break L94;
              }
              $734 = $i$075$i + 1 | 0;
              if ((HEAP8[$274 + ($i$075$i + $276) >> 0] | 0) != (HEAP8[($712 ? $244 : $731) + $i$075$i >> 0] | 0)) {
               $i$0$lcssa$i = $i$075$i;
               break L193;
              }
              if ($734 >>> 0 < $724 >>> 0) $i$075$i = $734; else {
               $i$0$lcssa$i = $734;
               break;
              }
             }
            } while (0);
            if (($i$0$lcssa$i | 0) != ($724 | 0)) {
             $822 = HEAP8[$274 + $276 >> 0] | 0;
             $823 = $264 + 40 | 0;
             $824 = HEAP32[$823 >> 2] | 0;
             HEAP32[$823 >> 2] = $824 + 1;
             $826 = $264 + 36 | 0;
             HEAP8[(HEAP32[$826 >> 2] | 0) + $824 >> 0] = $822;
             HEAP8[(HEAP32[$826 >> 2] | 0) + (HEAP32[$823 >> 2] | 0) >> 0] = 0;
             break L131;
            }
            HEAP32[$264 + 28 >> 2] = $724;
            if (HEAP8[$208 >> 0] | 0) {
             $746 = $264 + 8 | 0;
             HEAP32[$746 >> 2] = (HEAP32[$746 >> 2] | 0) + 1;
            }
            $749 = HEAP32[$271 >> 2] | 0;
            $750 = $264 + 36 | 0;
            $751 = HEAP32[$750 >> 2] | 0;
            $752 = $264 + 8 | 0;
            HEAP32[$0 + 0 >> 2] = HEAP32[$752 + 0 >> 2];
            HEAP32[$0 + 4 >> 2] = HEAP32[$752 + 4 >> 2];
            HEAP32[$0 + 8 >> 2] = HEAP32[$752 + 8 >> 2];
            HEAP32[$0 + 12 >> 2] = HEAP32[$752 + 12 >> 2];
            HEAP32[$0 + 16 >> 2] = HEAP32[$752 + 16 >> 2];
            $753 = $749 + 72 | 0;
            $754 = HEAP32[$753 >> 2] | 0;
            HEAP32[$753 >> 2] = $754 + 72;
            HEAP32[$754 >> 2] = 0;
            HEAP32[$754 + 4 >> 2] = 211;
            $757 = $754 + 28 | 0;
            HEAP32[$757 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
            HEAP32[$757 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
            HEAP32[$757 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
            HEAP32[$757 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
            HEAP32[$757 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
            $758 = $754 + 8 | 0;
            $759 = $749 + 48 | 0;
            HEAP32[$758 + 0 >> 2] = HEAP32[$759 + 0 >> 2];
            HEAP32[$758 + 4 >> 2] = HEAP32[$759 + 4 >> 2];
            HEAP32[$758 + 8 >> 2] = HEAP32[$759 + 8 >> 2];
            HEAP32[$758 + 12 >> 2] = HEAP32[$759 + 12 >> 2];
            HEAP32[$758 + 16 >> 2] = HEAP32[$759 + 16 >> 2];
            HEAP32[$754 + 52 >> 2] = $751;
            HEAP32[$754 + 56 >> 2] = 0;
            HEAP32[$754 + 60 >> 2] = 0;
            HEAP32[$754 + 64 >> 2] = 60816;
            _memmove($758 | 0, 44100, 20) | 0;
            $764 = $264 + 40 | 0;
            $767 = (HEAP32[$750 >> 2] | 0) + (HEAP32[$764 >> 2] | 0) | 0;
            HEAP32[$750 >> 2] = $767;
            HEAP8[$767 >> 0] = 0;
            HEAP32[$764 >> 2] = 0;
            $769 = (HEAP32[$750 >> 2] | 0) + 1 | 0;
            HEAP32[$750 >> 2] = $769;
            HEAP8[$769 >> 0] = 0;
            do if ($754) {
             $771 = HEAP32[$272 >> 2] | 0;
             HEAP32[$21 >> 2] = $754;
             $772 = $771 + 4 | 0;
             $773 = HEAP32[$772 >> 2] | 0;
             if (($773 | 0) == (HEAP32[$771 + 8 >> 2] | 0)) {
              __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($771, $21);
              break;
             }
             if (!$773) $779 = 0; else {
              HEAP32[$773 >> 2] = $754;
              $779 = HEAP32[$772 >> 2] | 0;
             }
             HEAP32[$772 >> 2] = $779 + 4;
            } while (0);
            $780 = HEAP32[$271 >> 2] | 0;
            $783 = HEAP32[(HEAP32[$243 >> 2] | 0) + 52 >> 2] | 0;
            HEAP32[$0 + 0 >> 2] = HEAP32[$752 + 0 >> 2];
            HEAP32[$0 + 4 >> 2] = HEAP32[$752 + 4 >> 2];
            HEAP32[$0 + 8 >> 2] = HEAP32[$752 + 8 >> 2];
            HEAP32[$0 + 12 >> 2] = HEAP32[$752 + 12 >> 2];
            HEAP32[$0 + 16 >> 2] = HEAP32[$752 + 16 >> 2];
            $784 = $780 + 72 | 0;
            $785 = HEAP32[$784 >> 2] | 0;
            HEAP32[$784 >> 2] = $785 + 72;
            HEAP32[$785 >> 2] = 0;
            HEAP32[$785 + 4 >> 2] = 211;
            $788 = $785 + 28 | 0;
            HEAP32[$788 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
            HEAP32[$788 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
            HEAP32[$788 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
            HEAP32[$788 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
            HEAP32[$788 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
            $789 = $785 + 8 | 0;
            $790 = $780 + 48 | 0;
            HEAP32[$789 + 0 >> 2] = HEAP32[$790 + 0 >> 2];
            HEAP32[$789 + 4 >> 2] = HEAP32[$790 + 4 >> 2];
            HEAP32[$789 + 8 >> 2] = HEAP32[$790 + 8 >> 2];
            HEAP32[$789 + 12 >> 2] = HEAP32[$790 + 12 >> 2];
            HEAP32[$789 + 16 >> 2] = HEAP32[$790 + 16 >> 2];
            HEAP32[$785 + 52 >> 2] = $783;
            HEAP32[$785 + 56 >> 2] = 0;
            HEAP32[$785 + 60 >> 2] = 0;
            HEAP32[$785 + 64 >> 2] = 60816;
            _memmove($789 | 0, 44120, 20) | 0;
            do if ($785) {
             $796 = HEAP32[$272 >> 2] | 0;
             HEAP32[$22 >> 2] = $785;
             $797 = $796 + 4 | 0;
             $798 = HEAP32[$797 >> 2] | 0;
             if (($798 | 0) == (HEAP32[$796 + 8 >> 2] | 0)) {
              __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($796, $22);
              break;
             }
             if (!$798) $804 = 0; else {
              HEAP32[$798 >> 2] = $785;
              $804 = HEAP32[$797 >> 2] | 0;
             }
             HEAP32[$797 >> 2] = $804 + 4;
            } while (0);
            if (!(HEAP8[$208 >> 0] | 0)) HEAP32[$752 >> 2] = (HEAP32[$752 >> 2] | 0) + 1;
            $809 = HEAP8[$42 >> 0] | 0;
            if (!($809 & 1)) $815 = $809; else $815 = HEAP32[$42 >> 2] & 255;
            HEAP8[(($815 & 1) == 0 ? $244 : HEAP32[$246 >> 2] | 0) >> 0] = 0;
            if (!(HEAP8[$42 >> 0] & 1)) HEAP8[$42 >> 0] = 0; else HEAP32[$245 >> 2] = 0;
            HEAP8[$234 >> 0] = 0;
            HEAP8[$239 >> 0] = 0;
            label = 223;
            break L131;
           } while (0);
           $833 = HEAP8[$274 + $276 >> 0] | 0;
           $834 = $264 + 40 | 0;
           $835 = HEAP32[$834 >> 2] | 0;
           HEAP32[$834 >> 2] = $835 + 1;
           $837 = $264 + 36 | 0;
           HEAP8[(HEAP32[$837 >> 2] | 0) + $835 >> 0] = $833;
           HEAP8[(HEAP32[$837 >> 2] | 0) + (HEAP32[$834 >> 2] | 0) >> 0] = 0;
           break;
          }
          $477 = (HEAP32[$275 >> 2] | 0) + -2 | 0;
          if (($477 | 0) > -1) $483 = (HEAP8[(HEAP32[$273 >> 2] | 0) + $477 >> 0] | 0) == 92; else $483 = 0;
          if (!($$ph60$i << 24 >> 24 != 92 | $483)) {
           $497 = $264 + 40 | 0;
           $498 = HEAP32[$497 >> 2] | 0;
           HEAP32[$497 >> 2] = $498 + 1;
           $500 = $264 + 36 | 0;
           HEAP8[(HEAP32[$500 >> 2] | 0) + $498 >> 0] = $$ph59$i;
           HEAP8[(HEAP32[$500 >> 2] | 0) + (HEAP32[$497 >> 2] | 0) >> 0] = 0;
           break;
          }
          switch ($$ph59$i << 24 >> 24 | 0) {
          case 123:
           {
            HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
            break;
           }
          case 125:
           {
            HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + -1;
            break;
           }
          case 91:
           {
            HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 1;
            break;
           }
          case 93:
           {
            HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + -1;
            break;
           }
          case 40:
           {
            HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1;
            break;
           }
          case 41:
           {
            HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + -1;
            break;
           }
          default:
           {}
          }
          $506 = HEAP16[$37 >> 1] | 0;
          $507 = $506 & 255;
          $510 = ($506 & 65535) >>> 8 & 255;
          do if ($$ph59$i << 24 >> 24 == $507 << 24 >> 24) $522 = $510; else {
           if ($$ph59$i << 24 >> 24 == $510 << 24 >> 24) {
            $522 = $$ph59$i;
            break;
           }
           $512 = $264 + 40 | 0;
           $513 = HEAP32[$512 >> 2] | 0;
           HEAP32[$512 >> 2] = $513 + 1;
           $515 = $264 + 36 | 0;
           HEAP8[(HEAP32[$515 >> 2] | 0) + $513 >> 0] = $$ph59$i;
           HEAP8[(HEAP32[$515 >> 2] | 0) + (HEAP32[$512 >> 2] | 0) >> 0] = 0;
           break L131;
          } while (0);
          if ($$ph59$i << 24 >> 24 != $522 << 24 >> 24) {
           if ($507 << 24 >> 24 == 125) {
            if (HEAP32[$39 >> 2] | 0) label = 163;
           } else if ($507 << 24 >> 24 == 41) {
            if (HEAP32[$41 >> 2] | 0) label = 163;
           } else if ($507 << 24 >> 24 == 93) if (HEAP32[$40 >> 2] | 0) label = 163;
           if ((label | 0) == 163) {
            label = 0;
            $616 = $264 + 40 | 0;
            $617 = HEAP32[$616 >> 2] | 0;
            HEAP32[$616 >> 2] = $617 + 1;
            $619 = $264 + 36 | 0;
            HEAP8[(HEAP32[$619 >> 2] | 0) + $617 >> 0] = $$ph59$i;
            HEAP8[(HEAP32[$619 >> 2] | 0) + (HEAP32[$616 >> 2] | 0) >> 0] = 0;
            break;
           }
           $625 = HEAP32[$271 >> 2] | 0;
           $628 = $625 + 72 | 0;
           $629 = HEAP32[$628 >> 2] | 0;
           $$$i$i = (HEAP32[$625 + 68 >> 2] | 0) == ($629 | 0) ? 0 : $629 + -72 | 0;
           $632 = $264 + 36 | 0;
           $633 = HEAP32[$632 >> 2] | 0;
           $634 = $264 + 8 | 0;
           HEAP32[$0 + 0 >> 2] = HEAP32[$634 + 0 >> 2];
           HEAP32[$0 + 4 >> 2] = HEAP32[$634 + 4 >> 2];
           HEAP32[$0 + 8 >> 2] = HEAP32[$634 + 8 >> 2];
           HEAP32[$0 + 12 >> 2] = HEAP32[$634 + 12 >> 2];
           HEAP32[$0 + 16 >> 2] = HEAP32[$634 + 16 >> 2];
           HEAP32[$628 >> 2] = $629 + 72;
           HEAP32[$629 >> 2] = 0;
           HEAP32[$629 + 4 >> 2] = 211;
           $637 = $629 + 28 | 0;
           HEAP32[$637 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
           HEAP32[$637 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
           HEAP32[$637 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
           HEAP32[$637 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
           HEAP32[$637 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
           $638 = $629 + 8 | 0;
           $639 = $625 + 48 | 0;
           HEAP32[$638 + 0 >> 2] = HEAP32[$639 + 0 >> 2];
           HEAP32[$638 + 4 >> 2] = HEAP32[$639 + 4 >> 2];
           HEAP32[$638 + 8 >> 2] = HEAP32[$639 + 8 >> 2];
           HEAP32[$638 + 12 >> 2] = HEAP32[$639 + 12 >> 2];
           HEAP32[$638 + 16 >> 2] = HEAP32[$639 + 16 >> 2];
           HEAP32[$629 + 52 >> 2] = $633;
           HEAP32[$629 + 56 >> 2] = 0;
           HEAP32[$629 + 60 >> 2] = 0;
           HEAP32[$629 + 64 >> 2] = 60816;
           if ((HEAP32[$$$i$i + 8 >> 2] | 0) == 153) {
            HEAP32[$4 + 0 >> 2] = HEAP32[10905];
            HEAP32[$4 + 4 >> 2] = HEAP32[10906];
            HEAP32[$4 + 8 >> 2] = HEAP32[10907];
            HEAP32[$4 + 12 >> 2] = HEAP32[10908];
            HEAP32[$4 + 16 >> 2] = HEAP32[10909];
           } else {
            HEAP32[$4 + 0 >> 2] = HEAP32[11055];
            HEAP32[$4 + 4 >> 2] = HEAP32[11056];
            HEAP32[$4 + 8 >> 2] = HEAP32[11057];
            HEAP32[$4 + 12 >> 2] = HEAP32[11058];
            HEAP32[$4 + 16 >> 2] = HEAP32[11059];
           };
           HEAP32[$638 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
           HEAP32[$638 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
           HEAP32[$638 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
           HEAP32[$638 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
           HEAP32[$638 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
           $647 = $264 + 40 | 0;
           $650 = (HEAP32[$632 >> 2] | 0) + (HEAP32[$647 >> 2] | 0) | 0;
           HEAP32[$632 >> 2] = $650;
           HEAP8[$650 >> 0] = 0;
           HEAP32[$647 >> 2] = 0;
           $652 = (HEAP32[$632 >> 2] | 0) + 1 | 0;
           HEAP32[$632 >> 2] = $652;
           HEAP8[$652 >> 0] = 0;
           do if ($629) {
            $654 = HEAP32[$272 >> 2] | 0;
            HEAP32[$19 >> 2] = $629;
            $655 = $654 + 4 | 0;
            $656 = HEAP32[$655 >> 2] | 0;
            if (($656 | 0) == (HEAP32[$654 + 8 >> 2] | 0)) {
             __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($654, $19);
             break;
            }
            if (!$656) $662 = 0; else {
             HEAP32[$656 >> 2] = $629;
             $662 = HEAP32[$655 >> 2] | 0;
            }
            HEAP32[$655 >> 2] = $662 + 4;
           } while (0);
           HEAP8[$241 >> 0] = 0;
           HEAP8[$239 >> 0] = 0;
           HEAP8[$37 >> 0] = 0;
           HEAP32[$39 >> 2] = 0;
           HEAP32[$41 >> 2] = 0;
           HEAP32[$40 >> 2] = 0;
           label = 223;
           break;
          }
          switch ($$ph59$i << 24 >> 24) {
          case 125:
           {
            if (!(HEAP32[$39 >> 2] | 0)) label = 141; else label = 140;
            break;
           }
          case 41:
           {
            if (!(HEAP32[$41 >> 2] | 0)) label = 141; else label = 140;
            break;
           }
          case 93:
           {
            if (!(HEAP32[$40 >> 2] | 0)) label = 141; else label = 140;
            break;
           }
          case 91:
          case 60:
          case 40:
          case 123:
           break;
          default:
           label = 141;
          }
          if ((label | 0) == 140) {
           label = 0;
           $529 = $264 + 40 | 0;
           $530 = HEAP32[$529 >> 2] | 0;
           HEAP32[$529 >> 2] = $530 + 1;
           $532 = $264 + 36 | 0;
           HEAP8[(HEAP32[$532 >> 2] | 0) + $530 >> 0] = $$ph59$i;
           HEAP8[(HEAP32[$532 >> 2] | 0) + (HEAP32[$529 >> 2] | 0) >> 0] = 0;
           break;
          }
          do if ((label | 0) == 141) {
           label = 0;
           $538 = HEAP32[$271 >> 2] | 0;
           $539 = $264 + 36 | 0;
           $540 = HEAP32[$539 >> 2] | 0;
           $541 = $264 + 8 | 0;
           HEAP32[$0 + 0 >> 2] = HEAP32[$541 + 0 >> 2];
           HEAP32[$0 + 4 >> 2] = HEAP32[$541 + 4 >> 2];
           HEAP32[$0 + 8 >> 2] = HEAP32[$541 + 8 >> 2];
           HEAP32[$0 + 12 >> 2] = HEAP32[$541 + 12 >> 2];
           HEAP32[$0 + 16 >> 2] = HEAP32[$541 + 16 >> 2];
           $542 = $538 + 72 | 0;
           $543 = HEAP32[$542 >> 2] | 0;
           HEAP32[$542 >> 2] = $543 + 72;
           HEAP32[$543 >> 2] = 0;
           HEAP32[$543 + 4 >> 2] = 211;
           $546 = $543 + 28 | 0;
           HEAP32[$546 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
           HEAP32[$546 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
           HEAP32[$546 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
           HEAP32[$546 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
           HEAP32[$546 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
           $547 = $543 + 8 | 0;
           $548 = $538 + 48 | 0;
           HEAP32[$547 + 0 >> 2] = HEAP32[$548 + 0 >> 2];
           HEAP32[$547 + 4 >> 2] = HEAP32[$548 + 4 >> 2];
           HEAP32[$547 + 8 >> 2] = HEAP32[$548 + 8 >> 2];
           HEAP32[$547 + 12 >> 2] = HEAP32[$548 + 12 >> 2];
           HEAP32[$547 + 16 >> 2] = HEAP32[$548 + 16 >> 2];
           HEAP32[$543 + 52 >> 2] = $540;
           HEAP32[$543 + 56 >> 2] = 0;
           HEAP32[$543 + 60 >> 2] = 0;
           HEAP32[$543 + 64 >> 2] = 60816;
           _memmove($547 | 0, 43600, 20) | 0;
           $553 = $264 + 40 | 0;
           $556 = (HEAP32[$539 >> 2] | 0) + (HEAP32[$553 >> 2] | 0) | 0;
           HEAP32[$539 >> 2] = $556;
           HEAP8[$556 >> 0] = 0;
           HEAP32[$553 >> 2] = 0;
           $558 = (HEAP32[$539 >> 2] | 0) + 1 | 0;
           HEAP32[$539 >> 2] = $558;
           HEAP8[$558 >> 0] = 0;
           if (!$543) break;
           $560 = HEAP32[$272 >> 2] | 0;
           HEAP32[$17 >> 2] = $543;
           $561 = $560 + 4 | 0;
           $562 = HEAP32[$561 >> 2] | 0;
           if (($562 | 0) == (HEAP32[$560 + 8 >> 2] | 0)) {
            __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($560, $17);
            break;
           }
           if (!$562) $568 = 0; else {
            HEAP32[$562 >> 2] = $543;
            $568 = HEAP32[$561 >> 2] | 0;
           }
           HEAP32[$561 >> 2] = $568 + 4;
          } while (0);
          $569 = HEAP8[$38 >> 0] | 0;
          $570 = $264 + 40 | 0;
          $571 = HEAP32[$570 >> 2] | 0;
          HEAP32[$570 >> 2] = $571 + 1;
          $573 = $264 + 36 | 0;
          HEAP8[(HEAP32[$573 >> 2] | 0) + $571 >> 0] = $569;
          HEAP8[(HEAP32[$573 >> 2] | 0) + (HEAP32[$570 >> 2] | 0) >> 0] = 0;
          $579 = HEAP32[$271 >> 2] | 0;
          $580 = HEAP32[$573 >> 2] | 0;
          $581 = $264 + 8 | 0;
          HEAP32[$0 + 0 >> 2] = HEAP32[$581 + 0 >> 2];
          HEAP32[$0 + 4 >> 2] = HEAP32[$581 + 4 >> 2];
          HEAP32[$0 + 8 >> 2] = HEAP32[$581 + 8 >> 2];
          HEAP32[$0 + 12 >> 2] = HEAP32[$581 + 12 >> 2];
          HEAP32[$0 + 16 >> 2] = HEAP32[$581 + 16 >> 2];
          $582 = $579 + 72 | 0;
          $583 = HEAP32[$582 >> 2] | 0;
          HEAP32[$582 >> 2] = $583 + 72;
          HEAP32[$583 >> 2] = 0;
          HEAP32[$583 + 4 >> 2] = 211;
          $586 = $583 + 28 | 0;
          HEAP32[$586 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
          HEAP32[$586 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
          HEAP32[$586 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
          HEAP32[$586 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
          HEAP32[$586 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
          $587 = $583 + 8 | 0;
          $588 = $579 + 48 | 0;
          HEAP32[$587 + 0 >> 2] = HEAP32[$588 + 0 >> 2];
          HEAP32[$587 + 4 >> 2] = HEAP32[$588 + 4 >> 2];
          HEAP32[$587 + 8 >> 2] = HEAP32[$588 + 8 >> 2];
          HEAP32[$587 + 12 >> 2] = HEAP32[$588 + 12 >> 2];
          HEAP32[$587 + 16 >> 2] = HEAP32[$588 + 16 >> 2];
          HEAP32[$583 + 52 >> 2] = $580;
          HEAP32[$583 + 56 >> 2] = 0;
          HEAP32[$583 + 60 >> 2] = 0;
          HEAP32[$583 + 64 >> 2] = 60816;
          _memmove($587 | 0, 43540, 20) | 0;
          $595 = (HEAP32[$573 >> 2] | 0) + (HEAP32[$570 >> 2] | 0) | 0;
          HEAP32[$573 >> 2] = $595;
          HEAP8[$595 >> 0] = 0;
          HEAP32[$570 >> 2] = 0;
          $597 = (HEAP32[$573 >> 2] | 0) + 1 | 0;
          HEAP32[$573 >> 2] = $597;
          HEAP8[$597 >> 0] = 0;
          do if ($583) {
           $599 = HEAP32[$272 >> 2] | 0;
           HEAP32[$18 >> 2] = $583;
           $600 = $599 + 4 | 0;
           $601 = HEAP32[$600 >> 2] | 0;
           if (($601 | 0) == (HEAP32[$599 + 8 >> 2] | 0)) {
            __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($599, $18);
            break;
           }
           if (!$601) $607 = 0; else {
            HEAP32[$601 >> 2] = $583;
            $607 = HEAP32[$600 >> 2] | 0;
           }
           HEAP32[$600 >> 2] = $607 + 4;
          } while (0);
          $609 = HEAP8[$38 >> 0] | 0;
          if (($609 | 0) == 125) {
           HEAP8[$38 >> 0] = 123;
           break;
          } else if (($609 | 0) == 41) {
           HEAP8[$38 >> 0] = 40;
           break;
          } else if (($609 | 0) == 62) {
           HEAP8[$38 >> 0] = 60;
           break;
          } else if (($609 | 0) == 93) {
           HEAP8[$38 >> 0] = 91;
           break;
          } else {
           HEAP8[$38 >> 0] = 0;
           break;
          }
         }
        } else {
         $380 = $$ph59$i;
         $ret$0$off061$i = $ret$0$off0$ph$i;
         label = 95;
        }
       } while (0);
       if ((label | 0) == 95) {
        label = 0;
        if (!(HEAP8[$208 >> 0] | 0)) {
         $$0$i6 = $ret$0$off061$i;
         label = 222;
        } else {
         $374 = $264 + 40 | 0;
         $375 = HEAP32[$374 >> 2] | 0;
         HEAP32[$374 >> 2] = $375 + 1;
         $377 = $264 + 36 | 0;
         HEAP8[(HEAP32[$377 >> 2] | 0) + $375 >> 0] = $380;
         HEAP8[(HEAP32[$377 >> 2] | 0) + (HEAP32[$374 >> 2] | 0) >> 0] = 0;
         $$0$i6 = $ret$0$off061$i;
         label = 222;
        }
       }
       if ((label | 0) == 222) {
        label = 0;
        if (!$$0$i6) label = 223;
       }
       L313 : do if ((label | 0) == 223) {
        label = 0;
        $843 = HEAP32[$219 >> 2] | 0;
        $844 = $843 + 28 | 0;
        $847 = (HEAP32[$223 >> 2] | 0) + (HEAP32[$844 >> 2] | 0) | 0;
        HEAP32[$223 >> 2] = $847;
        HEAP32[$844 >> 2] = 0;
        $848 = HEAP32[$225 >> 2] | 0;
        $850 = HEAP8[$848 + $847 >> 0] | 0;
        if (!($850 << 24 >> 24)) {
         $1831 = $843;
         break L92;
        }
        L316 : do switch ($262 | 0) {
        case 96:
        case 39:
        case 34:
         {
          $852 = $843 + 4 | 0;
          $853 = HEAP32[$852 >> 2] | 0;
          $854 = HEAP32[$843 >> 2] | 0;
          $855 = $854 + 12 | 0;
          $856 = HEAP32[$855 >> 2] | 0;
          $857 = $856 + -1 | 0;
          if (($857 | 0) > -1) $873 = HEAP8[(HEAP32[$854 + 4 >> 2] | 0) + $857 >> 0] | 0; else $873 = 0;
          $865 = $853 + 72 | 0;
          $866 = HEAP32[$865 >> 2] | 0;
          if ((HEAP32[$853 + 68 >> 2] | 0) == ($866 | 0)) label = 230; else if ((HEAP32[$866 + -64 >> 2] | 0) == 187) $$0$i52 = __ZN7Scanner10scanSymbolEP10LexContext($scanner, $843) | 0; else label = 230;
          L324 : do if ((label | 0) == 230) {
           label = 0;
           $872 = $873 << 24 >> 24;
           if ((($872 | 32) + -97 | 0) >>> 0 < 26) label = 233; else if (($872 + -48 | 0) >>> 0 < 10 | $873 << 24 >> 24 == 95) label = 233; else {
            $$pre$phi$iZ2D = $854 + 4 | 0;
            $$pre$phi26$iZ2D = $843 + 40 | 0;
            $$pre$phi28$iZ2D = $843 + 36 | 0;
            $1029 = $856;
           }
           do if ((label | 0) == 233) {
            label = 0;
            $878 = $843 + 36 | 0;
            $879 = HEAP32[$878 >> 2] | 0;
            $881 = __ZN18ReservedKeywordMap11in_word_setEPKcj($879, _strlen($879 | 0) | 0) | 0;
            if (!$881) {
             $889 = HEAP32[$853 + 48 >> 2] | 0;
             $891 = HEAP32[$853 + 52 >> 2] | 0;
             $892 = $853 + 56 | 0;
             HEAP32[$1 + 0 >> 2] = HEAP32[$892 + 0 >> 2];
             HEAP32[$1 + 4 >> 2] = HEAP32[$892 + 4 >> 2];
             HEAP32[$1 + 8 >> 2] = HEAP32[$892 + 8 >> 2];
             $899 = $889;
             $949 = $891;
            } else {
             $884 = HEAP32[$881 + 4 >> 2] | 0;
             $886 = HEAP32[$881 + 8 >> 2] | 0;
             $887 = $881 + 12 | 0;
             HEAP32[$1 + 0 >> 2] = HEAP32[$887 + 0 >> 2];
             HEAP32[$1 + 4 >> 2] = HEAP32[$887 + 4 >> 2];
             HEAP32[$1 + 8 >> 2] = HEAP32[$887 + 8 >> 2];
             $899 = $884;
             $949 = $886;
            }
            $893 = $854 + 4 | 0;
            if (($899 | 0) == 211 ? (HEAP8[(HEAP32[$893 >> 2] | 0) + $856 >> 0] | 0) == 39 : 0) {
             $900 = $843 + 8 | 0;
             HEAP32[$0 + 0 >> 2] = HEAP32[$900 + 0 >> 2];
             HEAP32[$0 + 4 >> 2] = HEAP32[$900 + 4 >> 2];
             HEAP32[$0 + 8 >> 2] = HEAP32[$900 + 8 >> 2];
             HEAP32[$0 + 12 >> 2] = HEAP32[$900 + 12 >> 2];
             HEAP32[$0 + 16 >> 2] = HEAP32[$900 + 16 >> 2];
             HEAP32[$865 >> 2] = $866 + 72;
             HEAP32[$866 >> 2] = 0;
             HEAP32[$866 + 4 >> 2] = 211;
             $903 = $866 + 28 | 0;
             HEAP32[$903 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
             HEAP32[$903 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
             HEAP32[$903 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
             HEAP32[$903 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
             HEAP32[$903 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
             $904 = $866 + 8 | 0;
             $905 = $853 + 48 | 0;
             HEAP32[$904 + 0 >> 2] = HEAP32[$905 + 0 >> 2];
             HEAP32[$904 + 4 >> 2] = HEAP32[$905 + 4 >> 2];
             HEAP32[$904 + 8 >> 2] = HEAP32[$905 + 8 >> 2];
             HEAP32[$904 + 12 >> 2] = HEAP32[$905 + 12 >> 2];
             HEAP32[$904 + 16 >> 2] = HEAP32[$905 + 16 >> 2];
             HEAP32[$866 + 52 >> 2] = $879;
             HEAP32[$866 + 56 >> 2] = 0;
             HEAP32[$866 + 60 >> 2] = 0;
             HEAP32[$866 + 64 >> 2] = 60816;
             _memmove($904 | 0, 43020, 20) | 0;
             do if ($866) {
              $911 = HEAP32[$853 >> 2] | 0;
              HEAP32[$12 >> 2] = $866;
              $912 = $911 + 4 | 0;
              $913 = HEAP32[$912 >> 2] | 0;
              if (($913 | 0) == (HEAP32[$911 + 8 >> 2] | 0)) {
               __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($911, $12);
               break;
              }
              if (!$913) $919 = 0; else {
               HEAP32[$913 >> 2] = $866;
               $919 = HEAP32[$912 >> 2] | 0;
              }
              HEAP32[$912 >> 2] = $919 + 4;
             } while (0);
             $920 = $843 + 40 | 0;
             $923 = (HEAP32[$878 >> 2] | 0) + (HEAP32[$920 >> 2] | 0) | 0;
             HEAP32[$878 >> 2] = $923;
             HEAP8[$923 >> 0] = 0;
             HEAP32[$920 >> 2] = 0;
             $925 = (HEAP32[$878 >> 2] | 0) + 1 | 0;
             HEAP32[$878 >> 2] = $925;
             HEAP8[$925 >> 0] = 0;
             $926 = HEAP32[$920 >> 2] | 0;
             HEAP32[$920 >> 2] = $926 + 1;
             HEAP8[(HEAP32[$878 >> 2] | 0) + $926 >> 0] = 39;
             HEAP8[(HEAP32[$878 >> 2] | 0) + (HEAP32[$920 >> 2] | 0) >> 0] = 0;
             $933 = HEAP32[$878 >> 2] | 0;
             HEAP32[$0 + 0 >> 2] = HEAP32[$900 + 0 >> 2];
             HEAP32[$0 + 4 >> 2] = HEAP32[$900 + 4 >> 2];
             HEAP32[$0 + 8 >> 2] = HEAP32[$900 + 8 >> 2];
             HEAP32[$0 + 12 >> 2] = HEAP32[$900 + 12 >> 2];
             HEAP32[$0 + 16 >> 2] = HEAP32[$900 + 16 >> 2];
             $934 = HEAP32[$865 >> 2] | 0;
             HEAP32[$865 >> 2] = $934 + 72;
             HEAP32[$934 >> 2] = 0;
             HEAP32[$934 + 4 >> 2] = 211;
             $937 = $934 + 28 | 0;
             HEAP32[$937 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
             HEAP32[$937 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
             HEAP32[$937 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
             HEAP32[$937 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
             HEAP32[$937 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
             $938 = $934 + 8 | 0;
             HEAP32[$938 + 0 >> 2] = HEAP32[$905 + 0 >> 2];
             HEAP32[$938 + 4 >> 2] = HEAP32[$905 + 4 >> 2];
             HEAP32[$938 + 8 >> 2] = HEAP32[$905 + 8 >> 2];
             HEAP32[$938 + 12 >> 2] = HEAP32[$905 + 12 >> 2];
             HEAP32[$938 + 16 >> 2] = HEAP32[$905 + 16 >> 2];
             HEAP32[$934 + 52 >> 2] = $933;
             HEAP32[$934 + 56 >> 2] = 0;
             HEAP32[$934 + 60 >> 2] = 0;
             HEAP32[$934 + 64 >> 2] = 60816;
             _memmove($938 | 0, 43e3, 20) | 0;
             $945 = (HEAP32[$878 >> 2] | 0) + (HEAP32[$920 >> 2] | 0) | 0;
             HEAP32[$878 >> 2] = $945;
             HEAP8[$945 >> 0] = 0;
             HEAP32[$920 >> 2] = 0;
             $947 = (HEAP32[$878 >> 2] | 0) + 1 | 0;
             HEAP32[$878 >> 2] = $947;
             HEAP8[$947 >> 0] = 0;
             $$0$i52 = $934;
             break L324;
            }
            $950 = $843 + 8 | 0;
            if (($949 & -2 | 0) == 30) {
             HEAP32[$0 + 0 >> 2] = HEAP32[$950 + 0 >> 2];
             HEAP32[$0 + 4 >> 2] = HEAP32[$950 + 4 >> 2];
             HEAP32[$0 + 8 >> 2] = HEAP32[$950 + 8 >> 2];
             HEAP32[$0 + 12 >> 2] = HEAP32[$950 + 12 >> 2];
             HEAP32[$0 + 16 >> 2] = HEAP32[$950 + 16 >> 2];
             HEAP32[$865 >> 2] = $866 + 72;
             HEAP32[$866 >> 2] = 0;
             HEAP32[$866 + 4 >> 2] = 211;
             $953 = $866 + 28 | 0;
             HEAP32[$953 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
             HEAP32[$953 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
             HEAP32[$953 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
             HEAP32[$953 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
             HEAP32[$953 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
             $956 = $853 + 48 | 0;
             $961 = HEAP32[$956 + 4 >> 2] | 0;
             $962 = $866 + 8 | 0;
             HEAP32[$962 >> 2] = HEAP32[$956 >> 2];
             HEAP32[$962 + 4 >> 2] = $961;
             HEAP32[$866 + 52 >> 2] = $879;
             HEAP32[$866 + 56 >> 2] = 0;
             HEAP32[$866 + 60 >> 2] = 0;
             HEAP32[$866 + 64 >> 2] = 60816;
             HEAP32[$866 + 8 >> 2] = $899;
             HEAP32[$866 + 12 >> 2] = $949;
             $972 = $866 + 16 | 0;
             HEAP32[$972 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
             HEAP32[$972 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
             HEAP32[$972 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
             do if ($866) {
              $974 = HEAP32[$853 >> 2] | 0;
              HEAP32[$11 >> 2] = $866;
              $975 = $974 + 4 | 0;
              $976 = HEAP32[$975 >> 2] | 0;
              if (($976 | 0) == (HEAP32[$974 + 8 >> 2] | 0)) {
               __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($974, $11);
               break;
              }
              if (!$976) $982 = 0; else {
               HEAP32[$976 >> 2] = $866;
               $982 = HEAP32[$975 >> 2] | 0;
              }
              HEAP32[$975 >> 2] = $982 + 4;
             } while (0);
             $983 = $843 + 40 | 0;
             $986 = (HEAP32[$878 >> 2] | 0) + (HEAP32[$983 >> 2] | 0) | 0;
             HEAP32[$878 >> 2] = $986;
             HEAP8[$986 >> 0] = 0;
             HEAP32[$983 >> 2] = 0;
             $988 = (HEAP32[$878 >> 2] | 0) + 1 | 0;
             HEAP32[$878 >> 2] = $988;
             HEAP8[$988 >> 0] = 0;
             $$0$i52 = __ZN7Scanner10scanSymbolEP10LexContext($scanner, $843) | 0;
             break L324;
            } else {
             HEAP32[$0 + 0 >> 2] = HEAP32[$950 + 0 >> 2];
             HEAP32[$0 + 4 >> 2] = HEAP32[$950 + 4 >> 2];
             HEAP32[$0 + 8 >> 2] = HEAP32[$950 + 8 >> 2];
             HEAP32[$0 + 12 >> 2] = HEAP32[$950 + 12 >> 2];
             HEAP32[$0 + 16 >> 2] = HEAP32[$950 + 16 >> 2];
             HEAP32[$865 >> 2] = $866 + 72;
             HEAP32[$866 >> 2] = 0;
             HEAP32[$866 + 4 >> 2] = 211;
             $992 = $866 + 28 | 0;
             HEAP32[$992 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
             HEAP32[$992 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
             HEAP32[$992 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
             HEAP32[$992 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
             HEAP32[$992 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
             $995 = $853 + 48 | 0;
             $1000 = HEAP32[$995 + 4 >> 2] | 0;
             $1001 = $866 + 8 | 0;
             HEAP32[$1001 >> 2] = HEAP32[$995 >> 2];
             HEAP32[$1001 + 4 >> 2] = $1000;
             HEAP32[$866 + 52 >> 2] = $879;
             HEAP32[$866 + 56 >> 2] = 0;
             HEAP32[$866 + 60 >> 2] = 0;
             HEAP32[$866 + 64 >> 2] = 60816;
             HEAP32[$866 + 8 >> 2] = $899;
             HEAP32[$866 + 12 >> 2] = $949;
             $1011 = $866 + 16 | 0;
             HEAP32[$1011 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
             HEAP32[$1011 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
             HEAP32[$1011 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
             do if ($866) {
              $1013 = HEAP32[$853 >> 2] | 0;
              HEAP32[$10 >> 2] = $866;
              $1014 = $1013 + 4 | 0;
              $1015 = HEAP32[$1014 >> 2] | 0;
              if (($1015 | 0) == (HEAP32[$1013 + 8 >> 2] | 0)) {
               __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1013, $10);
               break;
              }
              if (!$1015) $1021 = 0; else {
               HEAP32[$1015 >> 2] = $866;
               $1021 = HEAP32[$1014 >> 2] | 0;
              }
              HEAP32[$1014 >> 2] = $1021 + 4;
             } while (0);
             $1022 = $843 + 40 | 0;
             $1025 = (HEAP32[$878 >> 2] | 0) + (HEAP32[$1022 >> 2] | 0) | 0;
             HEAP32[$878 >> 2] = $1025;
             HEAP8[$1025 >> 0] = 0;
             HEAP32[$1022 >> 2] = 0;
             $1027 = (HEAP32[$878 >> 2] | 0) + 1 | 0;
             HEAP32[$878 >> 2] = $1027;
             HEAP8[$1027 >> 0] = 0;
             $$pre$phi$iZ2D = $893;
             $$pre$phi26$iZ2D = $1022;
             $$pre$phi28$iZ2D = $878;
             $1029 = HEAP32[$855 >> 2] | 0;
             break;
            }
           } while (0);
           $1028 = $1029 + 1 | 0;
           HEAP32[$855 >> 2] = $1028;
           $1030 = $843 + 8 | 0;
           $1033 = $1028;
           L369 : while (1) {
            $1031 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
            $1034 = HEAP8[$1031 + $1033 >> 0] | 0;
            do if ($1034 << 24 >> 24 == 10) {
             $1035 = HEAP32[$$pre$phi26$iZ2D >> 2] | 0;
             HEAP32[$$pre$phi26$iZ2D >> 2] = $1035 + 1;
             HEAP8[(HEAP32[$$pre$phi28$iZ2D >> 2] | 0) + $1035 >> 0] = 10;
             HEAP8[(HEAP32[$$pre$phi28$iZ2D >> 2] | 0) + (HEAP32[$$pre$phi26$iZ2D >> 2] | 0) >> 0] = 0;
             HEAP32[$1030 >> 2] = (HEAP32[$1030 >> 2] | 0) + 1;
            } else if (!($1034 << 24 >> 24)) {
             label = 271;
             break L369;
            } else {
             if ($1034 << 24 >> 24 != $261 << 24 >> 24) {
              $1063 = HEAP32[$$pre$phi26$iZ2D >> 2] | 0;
              HEAP32[$$pre$phi26$iZ2D >> 2] = $1063 + 1;
              HEAP8[(HEAP32[$$pre$phi28$iZ2D >> 2] | 0) + $1063 >> 0] = $1034;
              HEAP8[(HEAP32[$$pre$phi28$iZ2D >> 2] | 0) + (HEAP32[$$pre$phi26$iZ2D >> 2] | 0) >> 0] = 0;
              break;
             }
             $1045 = $1033 + -1 | 0;
             if (($1045 | 0) > -1) $1054 = HEAP8[$1031 + $1045 >> 0] | 0; else $1054 = 0;
             $1049 = $1033 + -2 | 0;
             if (($1049 | 0) > -1) $1055 = (HEAP8[$1031 + $1049 >> 0] | 0) != 92; else $1055 = 1;
             if (!($1054 << 24 >> 24 == 92 & $1055)) break L369;
             $1056 = HEAP32[$$pre$phi26$iZ2D >> 2] | 0;
             HEAP32[$$pre$phi26$iZ2D >> 2] = $1056 + 1;
             HEAP8[(HEAP32[$$pre$phi28$iZ2D >> 2] | 0) + $1056 >> 0] = $261;
             HEAP8[(HEAP32[$$pre$phi28$iZ2D >> 2] | 0) + (HEAP32[$$pre$phi26$iZ2D >> 2] | 0) >> 0] = 0;
            } while (0);
            $1071 = (HEAP32[$855 >> 2] | 0) + 1 | 0;
            HEAP32[$855 >> 2] = $1071;
            $1033 = $1071;
           }
           if ((label | 0) == 271) {
            label = 0;
            HEAP32[$855 >> 2] = $1033 + -1;
           }
           $1072 = HEAP32[$852 >> 2] | 0;
           $1074 = HEAP32[$1072 + 68 >> 2] | 0;
           $1076 = HEAP32[$1072 + 72 >> 2] | 0;
           $1082 = (($1076 - $1074 | 0) / 72 | 0) + -2 | 0;
           if (($1074 | 0) == ($1076 | 0)) {
            HEAP8[$2 >> 0] = 0;
            HEAP8[$247 >> 0] = 0;
           } else {
            $1084 = HEAP32[$1076 + -20 >> 2] | 0;
            $1085 = _strlen($1084 | 0) | 0;
            if ($1085 >>> 0 > 4294967279) {
             label = 274;
             break L94;
            }
            if ($1085 >>> 0 < 11) {
             HEAP8[$2 >> 0] = $1085 << 1;
             $__p$0$i$i39 = $247;
            } else {
             $1091 = $1085 + 16 & -16;
             $$size$i$i32 = ($1091 | 0) == 0 ? 1 : $1091;
             $1093 = _malloc($$size$i$i32) | 0;
             if (!$1093) while (1) {
              $1095 = HEAP32[15470] | 0;
              HEAP32[15470] = $1095 + 0;
              if (!$1095) {
               label = 280;
               break L94;
              }
              FUNCTION_TABLE_v[$1095 & 3]();
              $1098 = _malloc($$size$i$i32) | 0;
              if ($1098) {
               $$lcssa$i$i37 = $1098;
               break;
              }
             } else $$lcssa$i$i37 = $1093;
             HEAP32[$254 >> 2] = $$lcssa$i$i37;
             HEAP32[$2 >> 2] = $1091 | 1;
             HEAP32[$255 >> 2] = $1085;
             $__p$0$i$i39 = $$lcssa$i$i37;
            }
            _memcpy($__p$0$i$i39 | 0, $1084 | 0, $1085 | 0) | 0;
            HEAP8[$__p$0$i$i39 + $1085 >> 0] = 0;
           }
           if (($1082 | 0) > -1) {
            $1104 = HEAP32[$852 >> 2] | 0;
            $1109 = HEAP32[$1104 + 72 >> 2] | 0;
            $1113 = HEAP32[(((HEAP32[$1104 + 68 >> 2] | 0) + 144 | 0) >>> 0 > $1109 >>> 0 ? 0 : $1109 + -144 | 0) + 52 >> 2] | 0;
            $1114 = _strlen($1113 | 0) | 0;
            if ($1114 >>> 0 > 4294967279) {
             label = 286;
             break L94;
            }
            if ($1114 >>> 0 < 11) {
             HEAP8[$3 >> 0] = $1114 << 1;
             $__p$0$i7$i = $248;
            } else {
             $1120 = $1114 + 16 & -16;
             $$size$i11$i = ($1120 | 0) == 0 ? 1 : $1120;
             $1122 = _malloc($$size$i11$i) | 0;
             if (!$1122) while (1) {
              $1124 = HEAP32[15470] | 0;
              HEAP32[15470] = $1124 + 0;
              if (!$1124) {
               label = 292;
               break L94;
              }
              FUNCTION_TABLE_v[$1124 & 3]();
              $1127 = _malloc($$size$i11$i) | 0;
              if ($1127) {
               $$lcssa$i15$i = $1127;
               break;
              }
             } else $$lcssa$i15$i = $1122;
             HEAP32[$249 >> 2] = $$lcssa$i15$i;
             HEAP32[$3 >> 2] = $1120 | 1;
             HEAP32[$250 >> 2] = $1114;
             $__p$0$i7$i = $$lcssa$i15$i;
            }
            _memcpy($__p$0$i7$i | 0, $1113 | 0, $1114 | 0) | 0;
            HEAP8[$__p$0$i7$i + $1114 >> 0] = 0;
           } else {
            HEAP8[$3 >> 0] = 0;
            HEAP8[$248 >> 0] = 0;
           }
           $1132 = HEAP32[$$pre$phi28$iZ2D >> 2] | 0;
           $1133 = HEAP32[$852 >> 2] | 0;
           $1134 = $843 + 8 | 0;
           HEAP32[$0 + 0 >> 2] = HEAP32[$1134 + 0 >> 2];
           HEAP32[$0 + 4 >> 2] = HEAP32[$1134 + 4 >> 2];
           HEAP32[$0 + 8 >> 2] = HEAP32[$1134 + 8 >> 2];
           HEAP32[$0 + 12 >> 2] = HEAP32[$1134 + 12 >> 2];
           HEAP32[$0 + 16 >> 2] = HEAP32[$1134 + 16 >> 2];
           $1135 = $1133 + 72 | 0;
           $1136 = HEAP32[$1135 >> 2] | 0;
           HEAP32[$1135 >> 2] = $1136 + 72;
           HEAP32[$1136 >> 2] = 0;
           HEAP32[$1136 + 4 >> 2] = 211;
           $1139 = $1136 + 28 | 0;
           HEAP32[$1139 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
           HEAP32[$1139 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
           HEAP32[$1139 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
           HEAP32[$1139 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
           HEAP32[$1139 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
           $1140 = $1136 + 8 | 0;
           $1141 = $1133 + 48 | 0;
           HEAP32[$1140 + 0 >> 2] = HEAP32[$1141 + 0 >> 2];
           HEAP32[$1140 + 4 >> 2] = HEAP32[$1141 + 4 >> 2];
           HEAP32[$1140 + 8 >> 2] = HEAP32[$1141 + 8 >> 2];
           HEAP32[$1140 + 12 >> 2] = HEAP32[$1141 + 12 >> 2];
           HEAP32[$1140 + 16 >> 2] = HEAP32[$1141 + 16 >> 2];
           $1142 = $1136 + 52 | 0;
           HEAP32[$1142 >> 2] = $1132;
           HEAP32[$1136 + 56 >> 2] = 0;
           HEAP32[$1136 + 60 >> 2] = 0;
           HEAP32[$1136 + 64 >> 2] = 60816;
           if (($262 | 0) == 39) _memmove($1140 | 0, 43940, 20) | 0; else if (($262 | 0) == 34) _memmove($1140 | 0, 43920, 20) | 0; else if (($262 | 0) == 96) _memmove($1140 | 0, 43960, 20) | 0;
           $1148 = (HEAP32[$$pre$phi28$iZ2D >> 2] | 0) + (HEAP32[$$pre$phi26$iZ2D >> 2] | 0) | 0;
           HEAP32[$$pre$phi28$iZ2D >> 2] = $1148;
           HEAP8[$1148 >> 0] = 0;
           HEAP32[$$pre$phi26$iZ2D >> 2] = 0;
           $1150 = (HEAP32[$$pre$phi28$iZ2D >> 2] | 0) + 1 | 0;
           HEAP32[$$pre$phi28$iZ2D >> 2] = $1150;
           HEAP8[$1150 >> 0] = 0;
           do if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($2, 59208) | 0)) label = 303; else {
            if (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($3, 59208) | 0) break;
            if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($2, 36768) | 0)) label = 303;
           } while (0);
           do if ((label | 0) == 303) {
            label = 0;
            $1157 = HEAP32[$1142 >> 2] | 0;
            $1158 = _strlen($1157 | 0) | 0;
            if ($1158 >>> 0 > 4294967279) {
             label = 304;
             break L94;
            }
            if ($1158 >>> 0 < 11) {
             HEAP8[$4 >> 0] = $1158 << 1;
             $__p$0$i22$i = $251;
            } else {
             $1164 = $1158 + 16 & -16;
             $$size$i26$i = ($1164 | 0) == 0 ? 1 : $1164;
             $1166 = _malloc($$size$i26$i) | 0;
             if (!$1166) while (1) {
              $1168 = HEAP32[15470] | 0;
              HEAP32[15470] = $1168 + 0;
              if (!$1168) {
               label = 310;
               break L94;
              }
              FUNCTION_TABLE_v[$1168 & 3]();
              $1171 = _malloc($$size$i26$i) | 0;
              if ($1171) {
               $$lcssa$i30$i = $1171;
               break;
              }
             } else $$lcssa$i30$i = $1166;
             HEAP32[$252 >> 2] = $$lcssa$i30$i;
             HEAP32[$4 >> 2] = $1164 | 1;
             HEAP32[$253 >> 2] = $1158;
             $__p$0$i22$i = $$lcssa$i30$i;
            }
            _memcpy($__p$0$i22$i | 0, $1157 | 0, $1158 | 0) | 0;
            HEAP8[$__p$0$i22$i + $1158 >> 0] = 0;
            if (!(HEAP8[$42 >> 0] & 1)) {
             HEAP8[$244 >> 0] = 0;
             HEAP8[$42 >> 0] = 0;
            } else {
             HEAP8[HEAP32[$246 >> 2] >> 0] = 0;
             HEAP32[$245 >> 2] = 0;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($42);
            HEAP32[$42 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
            HEAP32[$42 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
            HEAP32[$42 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
            HEAP32[$4 + 0 >> 2] = 0;
            HEAP32[$4 + 4 >> 2] = 0;
            HEAP32[$4 + 8 >> 2] = 0;
            HEAP32[$243 >> 2] = $1136;
            if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($42, 60816) | 0)) {
             $1182 = HEAP8[$42 >> 0] | 0;
             if (!($1182 & 1)) $1188 = $1182; else $1188 = HEAP32[$42 >> 2] & 255;
             $$333 = ($1188 & 1) == 0 ? $244 : HEAP32[$246 >> 2] | 0;
             HEAP8[$$333 >> 0] = 10;
             HEAP8[$$333 + 1 >> 0] = 0;
             if (!(HEAP8[$42 >> 0] & 1)) HEAP8[$42 >> 0] = 2; else HEAP32[$245 >> 2] = 1;
             HEAP32[(HEAP32[$243 >> 2] | 0) + 52 >> 2] = 58448;
            }
            if (($262 | 0) == 39) {
             _memmove($1140 | 0, 44020, 20) | 0;
             break;
            } else if (($262 | 0) == 34) {
             _memmove($1140 | 0, 44e3, 20) | 0;
             break;
            } else if (($262 | 0) == 96) {
             _memmove($1140 | 0, 44040, 20) | 0;
             break;
            } else break;
           } while (0);
           if (HEAP8[$3 >> 0] & 1) _free(HEAP32[$249 >> 2] | 0);
           if (!(HEAP8[$2 >> 0] & 1)) {
            $$0$i52 = $1136;
            break;
           }
           _free(HEAP32[$254 >> 2] | 0);
           $$0$i52 = $1136;
          } while (0);
          if (!$$0$i52) break L313;
          $1206 = HEAP32[$221 >> 2] | 0;
          HEAP32[$36 >> 2] = $$0$i52;
          $1207 = $1206 + 4 | 0;
          $1208 = HEAP32[$1207 >> 2] | 0;
          if (($1208 | 0) == (HEAP32[$1206 + 8 >> 2] | 0)) {
           __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1206, $36);
           break L313;
          }
          if (!$1208) $1214 = 0; else {
           HEAP32[$1208 >> 2] = $$0$i52;
           $1214 = HEAP32[$1207 >> 2] | 0;
          }
          HEAP32[$1207 >> 2] = $1214 + 4;
          break L313;
          break;
         }
        case 9:
        case 32:
         {
          $1215 = __ZN7Scanner17scanWordDelimiterEP10LexContext($scanner, $843) | 0;
          do if ($1215) {
           $1217 = HEAP32[$221 >> 2] | 0;
           HEAP32[$35 >> 2] = $1215;
           $1218 = $1217 + 4 | 0;
           $1219 = HEAP32[$1218 >> 2] | 0;
           if (($1219 | 0) == (HEAP32[$1217 + 8 >> 2] | 0)) {
            __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1217, $35);
            break;
           }
           if (!$1219) $1225 = 0; else {
            HEAP32[$1219 >> 2] = $1215;
            $1225 = HEAP32[$1218 >> 2] | 0;
           }
           HEAP32[$1218 >> 2] = $1225 + 4;
          } while (0);
          $1227 = __ZN7Scanner14scanWhiteSpaceEP10LexContext($scanner, HEAP32[$219 >> 2] | 0) | 0;
          if (!$1227) break L313;
          $1229 = HEAP32[$221 >> 2] | 0;
          HEAP32[$34 >> 2] = $1227;
          $1230 = $1229 + 4 | 0;
          $1231 = HEAP32[$1230 >> 2] | 0;
          if (($1231 | 0) == (HEAP32[$1229 + 8 >> 2] | 0)) {
           __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1229, $34);
           break L313;
          }
          if (!$1231) $1237 = 0; else {
           HEAP32[$1231 >> 2] = $1227;
           $1237 = HEAP32[$1230 >> 2] | 0;
          }
          HEAP32[$1230 >> 2] = $1237 + 4;
          break L313;
          break;
         }
        case 35:
         {
          $1238 = HEAP32[$843 >> 2] | 0;
          $1239 = $843 + 4 | 0;
          $1240 = HEAP32[$1239 >> 2] | 0;
          $1241 = $843 + 36 | 0;
          do if (HEAP8[HEAP32[$1241 >> 2] >> 0] | 0) {
           $1245 = __ZN7Scanner14scanPrevSymbolEP10LexContextc($scanner, $843) | 0;
           if ($1245) {
            $1247 = HEAP32[$1240 >> 2] | 0;
            HEAP32[$8 >> 2] = $1245;
            $1248 = $1247 + 4 | 0;
            $1249 = HEAP32[$1248 >> 2] | 0;
            if (($1249 | 0) == (HEAP32[$1247 + 8 >> 2] | 0)) {
             __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1247, $8);
             break;
            }
            if (!$1249) $1255 = 0; else {
             HEAP32[$1249 >> 2] = $1245;
             $1255 = HEAP32[$1248 >> 2] | 0;
            }
            HEAP32[$1248 >> 2] = $1255 + 4;
           }
          } while (0);
          $1256 = HEAP32[$1239 >> 2] | 0;
          $1260 = HEAP32[$1256 + 72 >> 2] | 0;
          if ((HEAP32[$1256 + 68 >> 2] | 0) == ($1260 | 0)) $2387 = 211; else $2387 = HEAP32[$1260 + -64 >> 2] | 0;
          if (!(HEAP8[$241 >> 0] | 0)) if (!(($2387 | 0) == 157 | ($2387 | 0) == 187)) {
           $1268 = $1238 + 12 | 0;
           $1269 = $1238 + 4 | 0;
           L501 : do if (!(HEAP8[$208 >> 0] | 0)) {
            $$pre15$i = HEAP32[$1269 >> 2] | 0;
            $1313 = HEAP32[$1268 >> 2] | 0;
            while (1) {
             $1314 = HEAP8[$$pre15$i + $1313 >> 0] | 0;
             if ($1314 << 24 >> 24 == 0 | $1314 << 24 >> 24 == 10) break L501;
             $1315 = $1313 + 1 | 0;
             HEAP32[$1268 >> 2] = $1315;
             $1313 = $1315;
            }
           } else {
            $1270 = $843 + 40 | 0;
            $1273 = HEAP32[$1268 >> 2] | 0;
            while (1) {
             $1274 = HEAP8[(HEAP32[$1269 >> 2] | 0) + $1273 >> 0] | 0;
             if ($1274 << 24 >> 24 == 0 | $1274 << 24 >> 24 == 10) break;
             $1275 = HEAP32[$1270 >> 2] | 0;
             HEAP32[$1270 >> 2] = $1275 + 1;
             HEAP8[(HEAP32[$1241 >> 2] | 0) + $1275 >> 0] = $1274;
             HEAP8[(HEAP32[$1241 >> 2] | 0) + (HEAP32[$1270 >> 2] | 0) >> 0] = 0;
             $1283 = (HEAP32[$1268 >> 2] | 0) + 1 | 0;
             HEAP32[$1268 >> 2] = $1283;
             $1273 = $1283;
            }
            $1284 = HEAP32[$1241 >> 2] | 0;
            $1285 = $843 + 8 | 0;
            HEAP32[$0 + 0 >> 2] = HEAP32[$1285 + 0 >> 2];
            HEAP32[$0 + 4 >> 2] = HEAP32[$1285 + 4 >> 2];
            HEAP32[$0 + 8 >> 2] = HEAP32[$1285 + 8 >> 2];
            HEAP32[$0 + 12 >> 2] = HEAP32[$1285 + 12 >> 2];
            HEAP32[$0 + 16 >> 2] = HEAP32[$1285 + 16 >> 2];
            $1286 = $1240 + 72 | 0;
            $1287 = HEAP32[$1286 >> 2] | 0;
            HEAP32[$1286 >> 2] = $1287 + 72;
            HEAP32[$1287 >> 2] = 0;
            HEAP32[$1287 + 4 >> 2] = 211;
            $1290 = $1287 + 28 | 0;
            HEAP32[$1290 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
            HEAP32[$1290 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
            HEAP32[$1290 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
            HEAP32[$1290 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
            HEAP32[$1290 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
            $1291 = $1287 + 8 | 0;
            $1292 = $1240 + 48 | 0;
            HEAP32[$1291 + 0 >> 2] = HEAP32[$1292 + 0 >> 2];
            HEAP32[$1291 + 4 >> 2] = HEAP32[$1292 + 4 >> 2];
            HEAP32[$1291 + 8 >> 2] = HEAP32[$1292 + 8 >> 2];
            HEAP32[$1291 + 12 >> 2] = HEAP32[$1292 + 12 >> 2];
            HEAP32[$1291 + 16 >> 2] = HEAP32[$1292 + 16 >> 2];
            HEAP32[$1287 + 52 >> 2] = $1284;
            HEAP32[$1287 + 56 >> 2] = 0;
            HEAP32[$1287 + 60 >> 2] = 0;
            HEAP32[$1287 + 64 >> 2] = 60816;
            _memmove($1291 | 0, 44660, 20) | 0;
            $1299 = (HEAP32[$1241 >> 2] | 0) + (HEAP32[$1270 >> 2] | 0) | 0;
            HEAP32[$1241 >> 2] = $1299;
            HEAP8[$1299 >> 0] = 0;
            HEAP32[$1270 >> 2] = 0;
            $1301 = (HEAP32[$1241 >> 2] | 0) + 1 | 0;
            HEAP32[$1241 >> 2] = $1301;
            HEAP8[$1301 >> 0] = 0;
            if (!$1287) break;
            $1303 = HEAP32[$1240 >> 2] | 0;
            HEAP32[$7 >> 2] = $1287;
            $1304 = $1303 + 4 | 0;
            $1305 = HEAP32[$1304 >> 2] | 0;
            if (($1305 | 0) == (HEAP32[$1303 + 8 >> 2] | 0)) {
             __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1303, $7);
             break;
            }
            if (!$1305) $1311 = 0; else {
             HEAP32[$1305 >> 2] = $1287;
             $1311 = HEAP32[$1304 >> 2] | 0;
            }
            HEAP32[$1304 >> 2] = $1311 + 4;
           } while (0);
           $1316 = __ZN7Scanner14scanWhiteSpaceEP10LexContext($scanner, $843) | 0;
           do if ($1316) {
            $1318 = HEAP32[$1240 >> 2] | 0;
            HEAP32[$9 >> 2] = $1316;
            $1319 = $1318 + 4 | 0;
            $1320 = HEAP32[$1319 >> 2] | 0;
            if (($1320 | 0) == (HEAP32[$1318 + 8 >> 2] | 0)) {
             __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1318, $9);
             break;
            }
            if (!$1320) $1326 = 0; else {
             HEAP32[$1320 >> 2] = $1316;
             $1326 = HEAP32[$1319 >> 2] | 0;
            }
            HEAP32[$1319 >> 2] = $1326 + 4;
           } while (0);
           $1327 = $843 + 8 | 0;
           HEAP32[$1327 >> 2] = (HEAP32[$1327 >> 2] | 0) + 1;
           break L313;
          }
          $1330 = $843 + 40 | 0;
          $1331 = HEAP32[$1330 >> 2] | 0;
          HEAP32[$1330 >> 2] = $1331 + 1;
          HEAP8[(HEAP32[$1241 >> 2] | 0) + $1331 >> 0] = 35;
          HEAP8[(HEAP32[$1241 >> 2] | 0) + (HEAP32[$1330 >> 2] | 0) >> 0] = 0;
          $1338 = HEAP32[$1239 >> 2] | 0;
          $1339 = HEAP32[$1241 >> 2] | 0;
          $1340 = $843 + 8 | 0;
          HEAP32[$0 + 0 >> 2] = HEAP32[$1340 + 0 >> 2];
          HEAP32[$0 + 4 >> 2] = HEAP32[$1340 + 4 >> 2];
          HEAP32[$0 + 8 >> 2] = HEAP32[$1340 + 8 >> 2];
          HEAP32[$0 + 12 >> 2] = HEAP32[$1340 + 12 >> 2];
          HEAP32[$0 + 16 >> 2] = HEAP32[$1340 + 16 >> 2];
          $1341 = $1338 + 72 | 0;
          $1342 = HEAP32[$1341 >> 2] | 0;
          HEAP32[$1341 >> 2] = $1342 + 72;
          HEAP32[$1342 >> 2] = 0;
          HEAP32[$1342 + 4 >> 2] = 211;
          $1345 = $1342 + 28 | 0;
          HEAP32[$1345 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
          HEAP32[$1345 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
          HEAP32[$1345 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
          HEAP32[$1345 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
          HEAP32[$1345 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
          $1346 = $1342 + 8 | 0;
          $1347 = $1338 + 48 | 0;
          HEAP32[$1346 + 0 >> 2] = HEAP32[$1347 + 0 >> 2];
          HEAP32[$1346 + 4 >> 2] = HEAP32[$1347 + 4 >> 2];
          HEAP32[$1346 + 8 >> 2] = HEAP32[$1347 + 8 >> 2];
          HEAP32[$1346 + 12 >> 2] = HEAP32[$1347 + 12 >> 2];
          HEAP32[$1346 + 16 >> 2] = HEAP32[$1347 + 16 >> 2];
          HEAP32[$1342 + 52 >> 2] = $1339;
          HEAP32[$1342 + 56 >> 2] = 0;
          HEAP32[$1342 + 60 >> 2] = 0;
          HEAP32[$1342 + 64 >> 2] = 60816;
          _memmove($1346 | 0, 43500, 20) | 0;
          $1354 = (HEAP32[$1241 >> 2] | 0) + (HEAP32[$1330 >> 2] | 0) | 0;
          HEAP32[$1241 >> 2] = $1354;
          HEAP8[$1354 >> 0] = 0;
          HEAP32[$1330 >> 2] = 0;
          $1356 = (HEAP32[$1241 >> 2] | 0) + 1 | 0;
          HEAP32[$1241 >> 2] = $1356;
          HEAP8[$1356 >> 0] = 0;
          if (!$1342) break L313;
          $1358 = HEAP32[$221 >> 2] | 0;
          HEAP32[$33 >> 2] = $1342;
          $1359 = $1358 + 4 | 0;
          $1360 = HEAP32[$1359 >> 2] | 0;
          if (($1360 | 0) == (HEAP32[$1358 + 8 >> 2] | 0)) {
           __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1358, $33);
           break L313;
          }
          if (!$1360) $1366 = 0; else {
           HEAP32[$1360 >> 2] = $1342;
           $1366 = HEAP32[$1359 >> 2] | 0;
          }
          HEAP32[$1359 >> 2] = $1366 + 4;
          break L313;
          break;
         }
        case 45:
         {
          $1367 = $847 + 1 | 0;
          $1369 = $1367 >>> 0 < (HEAP32[$230 >> 2] | 0) >>> 0;
          L537 : do if ($1369) {
           $1371 = HEAP8[$848 + $1367 >> 0] | 0;
           HEAP16[$num_buffer$i >> 1] = 0;
           do if ($1371 << 24 >> 24) {
            HEAP8[$num_buffer$i >> 0] = $1371;
            $$0$i$i = $num_buffer$i;
            $1374 = $1371;
            while (1) {
             if ($1374 << 24 >> 24 == 32) $$0$i$i$be = $$0$i$i + 1 | 0; else {
              $1376 = $1374 << 24 >> 24;
              $1379 = $$0$i$i + 1 | 0;
              if (($1376 + -9 | 0) >>> 0 < 5) $$0$i$i$be = $1379; else break;
             }
             $$0$i$i = $$0$i$i$be;
             $1374 = HEAP8[$$0$i$i$be >> 0] | 0;
            }
            if (($1376 | 0) == 45) {
             $neg$0$i$i = 1;
             label = 395;
            } else if (($1376 | 0) == 43) {
             $neg$0$i$i = 0;
             label = 395;
            } else {
             $$1$ph$i$i = $$0$i$i;
             $1381 = $1374;
             $neg$1$ph$i$i = 0;
            }
            if ((label | 0) == 395) {
             label = 0;
             $$1$ph$i$i = $1379;
             $1381 = HEAP8[$1379 >> 0] | 0;
             $neg$1$ph$i$i = $neg$0$i$i;
            }
            if ((($1381 << 24 >> 24) + -48 | 0) >>> 0 < 10) {
             $$12$i$i = $$1$ph$i$i;
             $1387 = $1381;
             $n$03$i$i = 0;
             while (1) {
              $$12$i$i = $$12$i$i + 1 | 0;
              $1388 = ($n$03$i$i * 10 | 0) + 48 - ($1387 << 24 >> 24) | 0;
              $1387 = HEAP8[$$12$i$i >> 0] | 0;
              if ((($1387 << 24 >> 24) + -48 | 0) >>> 0 >= 10) {
               $n$0$lcssa$i$i = $1388;
               break;
              } else $n$03$i$i = $1388;
             }
            } else $n$0$lcssa$i$i = 0;
            if (!(((($neg$1$ph$i$i | 0) != 0 ? $n$0$lcssa$i$i : 0 - $n$0$lcssa$i$i | 0) | 0) > 0 | $1371 << 24 >> 24 == 48)) if ($1369) break; else {
             $1478 = 0;
             break L537;
            }
            $1398 = $843 + 36 | 0;
            $1399 = HEAP32[$1398 >> 2] | 0;
            if (!(HEAP8[$1399 >> 0] | 0)) {
             $1468 = $843 + 40 | 0;
             $1469 = HEAP32[$1468 >> 2] | 0;
             HEAP32[$1468 >> 2] = $1469 + 1;
             HEAP8[$1399 + $1469 >> 0] = 45;
             HEAP8[(HEAP32[$1398 >> 2] | 0) + (HEAP32[$1468 >> 2] | 0) >> 0] = 0;
             break L313;
            }
            $1402 = $843 + 4 | 0;
            $1403 = HEAP32[$1402 >> 2] | 0;
            $1404 = $843 + 8 | 0;
            HEAP32[$0 + 0 >> 2] = HEAP32[$1404 + 0 >> 2];
            HEAP32[$0 + 4 >> 2] = HEAP32[$1404 + 4 >> 2];
            HEAP32[$0 + 8 >> 2] = HEAP32[$1404 + 8 >> 2];
            HEAP32[$0 + 12 >> 2] = HEAP32[$1404 + 12 >> 2];
            HEAP32[$0 + 16 >> 2] = HEAP32[$1404 + 16 >> 2];
            $1405 = $1403 + 72 | 0;
            $1406 = HEAP32[$1405 >> 2] | 0;
            HEAP32[$1405 >> 2] = $1406 + 72;
            HEAP32[$1406 >> 2] = 0;
            HEAP32[$1406 + 4 >> 2] = 211;
            $1409 = $1406 + 28 | 0;
            HEAP32[$1409 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
            HEAP32[$1409 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
            HEAP32[$1409 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
            HEAP32[$1409 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
            HEAP32[$1409 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
            $1410 = $1406 + 8 | 0;
            $1411 = $1403 + 48 | 0;
            HEAP32[$1410 + 0 >> 2] = HEAP32[$1411 + 0 >> 2];
            HEAP32[$1410 + 4 >> 2] = HEAP32[$1411 + 4 >> 2];
            HEAP32[$1410 + 8 >> 2] = HEAP32[$1411 + 8 >> 2];
            HEAP32[$1410 + 12 >> 2] = HEAP32[$1411 + 12 >> 2];
            HEAP32[$1410 + 16 >> 2] = HEAP32[$1411 + 16 >> 2];
            HEAP32[$1406 + 52 >> 2] = $1399;
            HEAP32[$1406 + 56 >> 2] = 0;
            HEAP32[$1406 + 60 >> 2] = 0;
            HEAP32[$1406 + 64 >> 2] = 60816;
            do if ($1406) {
             $1417 = HEAP32[$1403 >> 2] | 0;
             HEAP32[$5 >> 2] = $1406;
             $1418 = $1417 + 4 | 0;
             $1419 = HEAP32[$1418 >> 2] | 0;
             if (($1419 | 0) == (HEAP32[$1417 + 8 >> 2] | 0)) {
              __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1417, $5);
              break;
             }
             if (!$1419) $1425 = 0; else {
              HEAP32[$1419 >> 2] = $1406;
              $1425 = HEAP32[$1418 >> 2] | 0;
             }
             HEAP32[$1418 >> 2] = $1425 + 4;
            } while (0);
            $1426 = $843 + 40 | 0;
            $1429 = (HEAP32[$1398 >> 2] | 0) + (HEAP32[$1426 >> 2] | 0) | 0;
            HEAP32[$1398 >> 2] = $1429;
            HEAP8[$1429 >> 0] = 0;
            HEAP32[$1426 >> 2] = 0;
            $1431 = (HEAP32[$1398 >> 2] | 0) + 1 | 0;
            HEAP32[$1398 >> 2] = $1431;
            HEAP8[$1431 >> 0] = 0;
            $1432 = HEAP32[$1426 >> 2] | 0;
            HEAP32[$1426 >> 2] = $1432 + 1;
            HEAP8[(HEAP32[$1398 >> 2] | 0) + $1432 >> 0] = 45;
            HEAP8[(HEAP32[$1398 >> 2] | 0) + (HEAP32[$1426 >> 2] | 0) >> 0] = 0;
            $1439 = HEAP32[$1402 >> 2] | 0;
            $1440 = HEAP32[$1398 >> 2] | 0;
            HEAP32[$0 + 0 >> 2] = HEAP32[$1404 + 0 >> 2];
            HEAP32[$0 + 4 >> 2] = HEAP32[$1404 + 4 >> 2];
            HEAP32[$0 + 8 >> 2] = HEAP32[$1404 + 8 >> 2];
            HEAP32[$0 + 12 >> 2] = HEAP32[$1404 + 12 >> 2];
            HEAP32[$0 + 16 >> 2] = HEAP32[$1404 + 16 >> 2];
            $1441 = $1439 + 72 | 0;
            $1442 = HEAP32[$1441 >> 2] | 0;
            HEAP32[$1441 >> 2] = $1442 + 72;
            HEAP32[$1442 >> 2] = 0;
            HEAP32[$1442 + 4 >> 2] = 211;
            $1445 = $1442 + 28 | 0;
            HEAP32[$1445 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
            HEAP32[$1445 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
            HEAP32[$1445 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
            HEAP32[$1445 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
            HEAP32[$1445 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
            $1446 = $1442 + 8 | 0;
            $1447 = $1439 + 48 | 0;
            HEAP32[$1446 + 0 >> 2] = HEAP32[$1447 + 0 >> 2];
            HEAP32[$1446 + 4 >> 2] = HEAP32[$1447 + 4 >> 2];
            HEAP32[$1446 + 8 >> 2] = HEAP32[$1447 + 8 >> 2];
            HEAP32[$1446 + 12 >> 2] = HEAP32[$1447 + 12 >> 2];
            HEAP32[$1446 + 16 >> 2] = HEAP32[$1447 + 16 >> 2];
            HEAP32[$1442 + 52 >> 2] = $1440;
            HEAP32[$1442 + 56 >> 2] = 0;
            HEAP32[$1442 + 60 >> 2] = 0;
            HEAP32[$1442 + 64 >> 2] = 60816;
            _memmove($1446 | 0, 40520, 20) | 0;
            $1454 = (HEAP32[$1398 >> 2] | 0) + (HEAP32[$1426 >> 2] | 0) | 0;
            HEAP32[$1398 >> 2] = $1454;
            HEAP8[$1454 >> 0] = 0;
            HEAP32[$1426 >> 2] = 0;
            $1456 = (HEAP32[$1398 >> 2] | 0) + 1 | 0;
            HEAP32[$1398 >> 2] = $1456;
            HEAP8[$1456 >> 0] = 0;
            if (!$1442) break L313;
            $1459 = HEAP32[HEAP32[$1402 >> 2] >> 2] | 0;
            HEAP32[$6 >> 2] = $1442;
            $1460 = $1459 + 4 | 0;
            $1461 = HEAP32[$1460 >> 2] | 0;
            if (($1461 | 0) == (HEAP32[$1459 + 8 >> 2] | 0)) {
             __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1459, $6);
             break L313;
            }
            if (!$1461) $1467 = 0; else {
             HEAP32[$1461 >> 2] = $1442;
             $1467 = HEAP32[$1460 >> 2] | 0;
            }
            HEAP32[$1460 >> 2] = $1467 + 4;
            break L313;
           } while (0);
           $1478 = HEAP8[$848 + $1367 >> 0] | 0;
          } else {
           HEAP16[$num_buffer$i >> 1] = 0;
           $1478 = 0;
          } while (0);
          if ((($1478 << 24 >> 24 | 32) + -97 | 0) >>> 0 < 26) {
           $1482 = $843 + 40 | 0;
           $1483 = HEAP32[$1482 >> 2] | 0;
           HEAP32[$1482 >> 2] = $1483 + 1;
           $1485 = $843 + 36 | 0;
           HEAP8[(HEAP32[$1485 >> 2] | 0) + $1483 >> 0] = $850;
           HEAP8[(HEAP32[$1485 >> 2] | 0) + (HEAP32[$1482 >> 2] | 0) >> 0] = 0;
           break L313;
          } else label = 417;
          break;
         }
        case 46:
         {
          label = 417;
          break;
         }
        case 42:
        case 38:
        case 37:
        case 64:
        case 36:
         break;
        case 92:
        case 63:
        case 93:
        case 91:
        case 125:
        case 123:
        case 41:
        case 40:
        case 47:
        case 33:
        case 124:
        case 62:
        case 60:
        case 43:
        case 59:
        case 58:
        case 44:
        case 126:
        case 94:
        case 61:
         {
          $1628 = __ZN7Scanner10scanSymbolEP10LexContext($scanner, $843) | 0;
          do if ($1628) {
           $1630 = HEAP32[$221 >> 2] | 0;
           HEAP32[$26 >> 2] = $1628;
           $1631 = $1630 + 4 | 0;
           $1632 = HEAP32[$1631 >> 2] | 0;
           if (($1632 | 0) == (HEAP32[$1630 + 8 >> 2] | 0)) {
            __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1630, $26);
            break;
           }
           if (!$1632) $1638 = 0; else {
            HEAP32[$1632 >> 2] = $1628;
            $1638 = HEAP32[$1631 >> 2] | 0;
           }
           HEAP32[$1631 >> 2] = $1638 + 4;
          } while (0);
          $1640 = (HEAP32[$219 >> 2] | 0) + 28 | 0;
          HEAP32[$223 >> 2] = (HEAP32[$223 >> 2] | 0) + (HEAP32[$1640 >> 2] | 0);
          HEAP32[$1640 >> 2] = 0;
          break L313;
          break;
         }
        case 120:
         {
          $1644 = $847 + 1 | 0;
          $1645 = HEAP32[$230 >> 2] | 0;
          if ($1644 >>> 0 < $1645 >>> 0) $1654 = HEAP8[$848 + $1644 >> 0] | 0; else $1654 = 0;
          $1649 = $847 + 2 | 0;
          if ($1649 >>> 0 < $1645 >>> 0) $2388 = HEAP8[$848 + $1649 >> 0] | 0; else $2388 = 0;
          $1655 = $843 + 36 | 0;
          $1656 = HEAP32[$1655 >> 2] | 0;
          if ($1654 << 24 >> 24 == 61) if (!(HEAP8[$1656 >> 0] | 0)) if (!($2388 << 24 >> 24 == 61 | $2388 << 24 >> 24 == 62 | $2388 << 24 >> 24 == 126)) {
           $1666 = __ZN7Scanner10scanSymbolEP10LexContext($scanner, $843) | 0;
           do if ($1666) {
            $1668 = HEAP32[$221 >> 2] | 0;
            HEAP32[$23 >> 2] = $1666;
            $1669 = $1668 + 4 | 0;
            $1670 = HEAP32[$1669 >> 2] | 0;
            if (($1670 | 0) == (HEAP32[$1668 + 8 >> 2] | 0)) {
             __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1668, $23);
             break;
            }
            if (!$1670) $1676 = 0; else {
             HEAP32[$1670 >> 2] = $1666;
             $1676 = HEAP32[$1669 >> 2] | 0;
            }
            HEAP32[$1669 >> 2] = $1676 + 4;
           } while (0);
           $1678 = (HEAP32[$219 >> 2] | 0) + 28 | 0;
           HEAP32[$223 >> 2] = (HEAP32[$223 >> 2] | 0) + (HEAP32[$1678 >> 2] | 0);
           HEAP32[$1678 >> 2] = 0;
           break L313;
          }
          $1659 = $843 + 40 | 0;
          $1660 = HEAP32[$1659 >> 2] | 0;
          HEAP32[$1659 >> 2] = $1660 + 1;
          HEAP8[$1656 + $1660 >> 0] = $261;
          HEAP8[(HEAP32[$1655 >> 2] | 0) + (HEAP32[$1659 >> 2] | 0) >> 0] = 0;
          break L313;
          break;
         }
        case 10:
         {
          $1682 = __ZN7Scanner17scanWordDelimiterEP10LexContext($scanner, $843) | 0;
          $1683 = $843 + 4 | 0;
          $1684 = HEAP32[$1683 >> 2] | 0;
          $1688 = HEAP32[$1684 + 72 >> 2] | 0;
          $1689 = (HEAP32[$1684 + 68 >> 2] | 0) == ($1688 | 0);
          $$$i$i94 = $1689 ? 0 : $1688 + -72 | 0;
          $1691 = ($1682 | 0) == 0;
          do if ($1691) {
           if ($1689) {
            HEAP8[$0 >> 0] = 0;
            HEAP8[$256 >> 0] = 0;
            break;
           }
           $1713 = HEAP32[$$$i$i94 + 52 >> 2] | 0;
           $1714 = _strlen($1713 | 0) | 0;
           if ($1714 >>> 0 > 4294967279) {
            label = 489;
            break L94;
           }
           if ($1714 >>> 0 < 11) {
            HEAP8[$0 >> 0] = $1714 << 1;
            $__p$0$i2$i = $256;
           } else {
            $1720 = $1714 + 16 & -16;
            $$size$i4$i = ($1720 | 0) == 0 ? 1 : $1720;
            $1722 = _malloc($$size$i4$i) | 0;
            if (!$1722) while (1) {
             $1724 = HEAP32[15470] | 0;
             HEAP32[15470] = $1724 + 0;
             if (!$1724) {
              label = 495;
              break L94;
             }
             FUNCTION_TABLE_v[$1724 & 3]();
             $1727 = _malloc($$size$i4$i) | 0;
             if ($1727) {
              $$lcssa$i8$i = $1727;
              break;
             }
            } else $$lcssa$i8$i = $1722;
            HEAP32[$257 >> 2] = $$lcssa$i8$i;
            HEAP32[$0 >> 2] = $1720 | 1;
            HEAP32[$258 >> 2] = $1714;
            $__p$0$i2$i = $$lcssa$i8$i;
           }
           _memcpy($__p$0$i2$i | 0, $1713 | 0, $1714 | 0) | 0;
           HEAP8[$__p$0$i2$i + $1714 >> 0] = 0;
          } else {
           $1693 = HEAP32[$1682 + 52 >> 2] | 0;
           $1694 = _strlen($1693 | 0) | 0;
           if ($1694 >>> 0 > 4294967279) {
            label = 478;
            break L94;
           }
           if ($1694 >>> 0 < 11) {
            HEAP8[$0 >> 0] = $1694 << 1;
            $__p$0$i$i102 = $256;
           } else {
            $1700 = $1694 + 16 & -16;
            $$size$i$i95 = ($1700 | 0) == 0 ? 1 : $1700;
            $1702 = _malloc($$size$i$i95) | 0;
            if (!$1702) while (1) {
             $1704 = HEAP32[15470] | 0;
             HEAP32[15470] = $1704 + 0;
             if (!$1704) {
              label = 484;
              break L94;
             }
             FUNCTION_TABLE_v[$1704 & 3]();
             $1707 = _malloc($$size$i$i95) | 0;
             if ($1707) {
              $$lcssa$i$i100 = $1707;
              break;
             }
            } else $$lcssa$i$i100 = $1702;
            HEAP32[$257 >> 2] = $$lcssa$i$i100;
            HEAP32[$0 >> 2] = $1700 | 1;
            HEAP32[$258 >> 2] = $1694;
            $__p$0$i$i102 = $$lcssa$i$i100;
           }
           _memcpy($__p$0$i$i102 | 0, $1693 | 0, $1694 | 0) | 0;
           HEAP8[$__p$0$i$i102 + $1694 >> 0] = 0;
          } while (0);
          if (!(HEAP32[$259 >> 2] | 0)) label = 507; else if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($0, 59088) | 0)) {
           $1736 = HEAP32[$1683 >> 2] | 0;
           $1738 = HEAP32[$1736 + 68 >> 2] | 0;
           $1740 = HEAP32[$1736 + 72 >> 2] | 0;
           $$$i11$i = ($1738 | 0) == ($1740 | 0) ? 0 : $1740 + -72 | 0;
           $1743 = ($1738 | 0) == ($$$i11$i | 0);
           $1747 = $1743 | ($$$i11$i + -72 | 0) == ($1738 | 0) ? 0 : $$$i11$i + -144 | 0;
           do if ($1743) label = 505; else {
            if (!(($1747 | 0) != 0 ? (HEAP32[$$$i11$i + -64 >> 2] | 0) != 183 : 0)) {
             label = 505;
             break;
            }
            if ((HEAP32[$1747 + 8 >> 2] | 0) == 183) {
             label = 505;
             break;
            }
            HEAP32[(HEAP32[$259 >> 2] | 0) + 8 >> 2] = 211;
           } while (0);
           if ((label | 0) == 505) {
            label = 0;
            HEAP8[$240 >> 0] = 1;
            HEAP8[$239 >> 0] = 1;
           }
           HEAP32[$259 >> 2] = 0;
          } else label = 507;
          if ((label | 0) == 507) {
           label = 0;
           if (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($42, 60816) | 0) {
            HEAP8[$234 >> 0] = 1;
            HEAP8[$239 >> 0] = 1;
           }
          }
          $1759 = $843 + 40 | 0;
          $1761 = $843 + 36 | 0;
          $1763 = (HEAP32[$1761 >> 2] | 0) + (HEAP32[$1759 >> 2] | 0) | 0;
          HEAP32[$1761 >> 2] = $1763;
          HEAP8[$1763 >> 0] = 0;
          HEAP32[$1759 >> 2] = 0;
          $1765 = (HEAP32[$1761 >> 2] | 0) + 1 | 0;
          HEAP32[$1761 >> 2] = $1765;
          HEAP8[$1765 >> 0] = 0;
          if (HEAP8[$0 >> 0] & 1) _free(HEAP32[$257 >> 2] | 0);
          do if (!$1691) {
           $1770 = HEAP32[$221 >> 2] | 0;
           HEAP32[$24 >> 2] = $1682;
           $1771 = $1770 + 4 | 0;
           $1772 = HEAP32[$1771 >> 2] | 0;
           if (($1772 | 0) == (HEAP32[$1770 + 8 >> 2] | 0)) {
            __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1770, $24);
            break;
           }
           if (!$1772) $1778 = 0; else {
            HEAP32[$1772 >> 2] = $1682;
            $1778 = HEAP32[$1771 >> 2] | 0;
           }
           HEAP32[$1771 >> 2] = $1778 + 4;
          } while (0);
          $1780 = __ZN7Scanner14scanWhiteSpaceEP10LexContext($scanner, HEAP32[$219 >> 2] | 0) | 0;
          if (!$1780) break L313;
          $1782 = HEAP32[$221 >> 2] | 0;
          HEAP32[$25 >> 2] = $1780;
          $1783 = $1782 + 4 | 0;
          $1784 = HEAP32[$1783 >> 2] | 0;
          if (($1784 | 0) == (HEAP32[$1782 + 8 >> 2] | 0)) {
           __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1782, $25);
           break L313;
          }
          if (!$1784) $1790 = 0; else {
           HEAP32[$1784 >> 2] = $1780;
           $1790 = HEAP32[$1783 >> 2] | 0;
          }
          HEAP32[$1783 >> 2] = $1790 + 4;
          break L313;
          break;
         }
        case 57:
        case 56:
        case 55:
        case 54:
        case 53:
        case 52:
        case 51:
        case 50:
        case 49:
        case 48:
         {
          $1793 = HEAP8[HEAP32[$843 + 36 >> 2] >> 0] | 0;
          if ($1793 << 24 >> 24) if (!($1793 << 24 >> 24 == 45 ? (HEAP32[$843 + 40 >> 2] | 0) == 1 : 0)) {
           label = 532;
           break L316;
          }
          $1799 = __ZN7Scanner10scanNumberEP10LexContext($843) | 0;
          do if ($1799) {
           $1801 = HEAP32[$221 >> 2] | 0;
           HEAP32[$29 >> 2] = $1799;
           $1802 = $1801 + 4 | 0;
           $1803 = HEAP32[$1802 >> 2] | 0;
           if (($1803 | 0) == (HEAP32[$1801 + 8 >> 2] | 0)) {
            __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1801, $29);
            break;
           }
           if (!$1803) $1809 = 0; else {
            HEAP32[$1803 >> 2] = $1799;
            $1809 = HEAP32[$1802 >> 2] | 0;
           }
           HEAP32[$1802 >> 2] = $1809 + 4;
          } while (0);
          $1810 = HEAP32[$219 >> 2] | 0;
          $1811 = $1810 + 40 | 0;
          $1813 = $1810 + 36 | 0;
          $1815 = (HEAP32[$1813 >> 2] | 0) + (HEAP32[$1811 >> 2] | 0) | 0;
          HEAP32[$1813 >> 2] = $1815;
          HEAP8[$1815 >> 0] = 0;
          HEAP32[$1811 >> 2] = 0;
          $1817 = (HEAP32[$1813 >> 2] | 0) + 1 | 0;
          HEAP32[$1813 >> 2] = $1817;
          HEAP8[$1817 >> 0] = 0;
          break L313;
          break;
         }
        default:
         label = 532;
        } while (0);
        if ((label | 0) == 532) {
         label = 0;
         if ($850 << 24 >> 24 == 10) break;
         $1819 = $843 + 40 | 0;
         $1820 = HEAP32[$1819 >> 2] | 0;
         HEAP32[$1819 >> 2] = $1820 + 1;
         $1822 = $843 + 36 | 0;
         HEAP8[(HEAP32[$1822 >> 2] | 0) + $1820 >> 0] = $850;
         HEAP8[(HEAP32[$1822 >> 2] | 0) + (HEAP32[$1819 >> 2] | 0) >> 0] = 0;
         break;
        }
        L691 : do if ((label | 0) == 417) {
         label = 0;
         $1491 = $843 + 36 | 0;
         $1492 = HEAP32[$1491 >> 2] | 0;
         $1493 = HEAP8[$1492 >> 0] | 0;
         do if (!($1493 << 24 >> 24)) {
          $1494 = $847 + 1 | 0;
          if ($1494 >>> 0 >= (HEAP32[$230 >> 2] | 0) >>> 0) break L691;
          if (((HEAP8[$848 + $1494 >> 0] | 0) + -48 << 24 >> 24 & 255) >= 10) if ($1493 << 24 >> 24 == 118) break; else break L691;
          $1500 = __ZN7Scanner10scanNumberEP10LexContext($843) | 0;
          do if ($1500) {
           $1502 = HEAP32[$221 >> 2] | 0;
           HEAP32[$32 >> 2] = $1500;
           $1503 = $1502 + 4 | 0;
           $1504 = HEAP32[$1503 >> 2] | 0;
           if (($1504 | 0) == (HEAP32[$1502 + 8 >> 2] | 0)) {
            __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1502, $32);
            break;
           }
           if (!$1504) $1510 = 0; else {
            HEAP32[$1504 >> 2] = $1500;
            $1510 = HEAP32[$1503 >> 2] | 0;
           }
           HEAP32[$1503 >> 2] = $1510 + 4;
          } while (0);
          $1511 = HEAP32[$219 >> 2] | 0;
          $1512 = $1511 + 40 | 0;
          $1514 = $1511 + 36 | 0;
          $1516 = (HEAP32[$1514 >> 2] | 0) + (HEAP32[$1512 >> 2] | 0) | 0;
          HEAP32[$1514 >> 2] = $1516;
          HEAP8[$1516 >> 0] = 0;
          HEAP32[$1512 >> 2] = 0;
          $1518 = (HEAP32[$1514 >> 2] | 0) + 1 | 0;
          HEAP32[$1514 >> 2] = $1518;
          HEAP8[$1518 >> 0] = 0;
          break L313;
         } else if ($1493 << 24 >> 24 != 118) break L691; while (0);
         $1520 = HEAP8[$1492 + 1 >> 0] | 0;
         if ($1520 << 24 >> 24) {
          $1526 = $1520;
          $i$01$i = 1;
          do {
           $i$01$i = $i$01$i + 1 | 0;
           if (($1526 + -48 << 24 >> 24 & 255) >= 10) break L691;
           $1526 = HEAP8[$1492 + $i$01$i >> 0] | 0;
          } while ($1526 << 24 >> 24 != 0);
         }
         $1528 = $843 + 4 | 0;
         $1529 = HEAP32[$843 >> 2] | 0;
         $1531 = HEAP32[$1529 + 4 >> 2] | 0;
         $1533 = HEAP32[$1529 + 12 >> 2] | 0;
         $1534 = $1531 + $1533 | 0;
         $1535 = HEAP8[$1534 >> 0] | 0;
         $1536 = $843 + 40 | 0;
         $1537 = HEAP32[$1536 >> 2] | 0;
         HEAP32[$1536 >> 2] = $1537 + 1;
         HEAP8[$1492 + $1537 >> 0] = $1535;
         HEAP8[(HEAP32[$1491 >> 2] | 0) + (HEAP32[$1536 >> 2] | 0) >> 0] = 0;
         $c$05$i = HEAP8[$1534 >> 0] | 0;
         if ($c$05$i << 24 >> 24 == 0 | (($c$05$i + -48 << 24 >> 24 & 255) < 10 | $c$05$i << 24 >> 24 == 46 | $c$05$i << 24 >> 24 == 95) ^ 1) $$in$lcssa$i = $1533; else {
          $$in$i = $1533;
          while (1) {
           $1547 = $$in$i + 1 | 0;
           $1548 = $1531 + $1547 | 0;
           $1549 = HEAP8[$1548 >> 0] | 0;
           $1550 = HEAP32[$1536 >> 2] | 0;
           HEAP32[$1536 >> 2] = $1550 + 1;
           HEAP8[(HEAP32[$1491 >> 2] | 0) + $1550 >> 0] = $1549;
           HEAP8[(HEAP32[$1491 >> 2] | 0) + (HEAP32[$1536 >> 2] | 0) >> 0] = 0;
           $c$0$i = HEAP8[$1548 >> 0] | 0;
           if ($c$0$i << 24 >> 24 == 0 | (($c$0$i + -48 << 24 >> 24 & 255) < 10 | $c$0$i << 24 >> 24 == 46 | $c$0$i << 24 >> 24 == 95) ^ 1) {
            $$in$lcssa$i = $1547;
            break;
           } else $$in$i = $1547;
          }
         }
         $1561 = HEAP32[$1491 >> 2] | 0;
         HEAP8[$1561 + ((HEAP32[$1536 >> 2] | 0) + -1) >> 0] = 0;
         $1565 = HEAP32[$1528 >> 2] | 0;
         $1566 = $843 + 8 | 0;
         HEAP32[$0 + 0 >> 2] = HEAP32[$1566 + 0 >> 2];
         HEAP32[$0 + 4 >> 2] = HEAP32[$1566 + 4 >> 2];
         HEAP32[$0 + 8 >> 2] = HEAP32[$1566 + 8 >> 2];
         HEAP32[$0 + 12 >> 2] = HEAP32[$1566 + 12 >> 2];
         HEAP32[$0 + 16 >> 2] = HEAP32[$1566 + 16 >> 2];
         $1567 = $1565 + 72 | 0;
         $1568 = HEAP32[$1567 >> 2] | 0;
         HEAP32[$1567 >> 2] = $1568 + 72;
         HEAP32[$1568 >> 2] = 0;
         HEAP32[$1568 + 4 >> 2] = 211;
         $1571 = $1568 + 28 | 0;
         HEAP32[$1571 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
         HEAP32[$1571 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
         HEAP32[$1571 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
         HEAP32[$1571 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
         HEAP32[$1571 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
         $1572 = $1568 + 8 | 0;
         $1573 = $1565 + 48 | 0;
         HEAP32[$1572 + 0 >> 2] = HEAP32[$1573 + 0 >> 2];
         HEAP32[$1572 + 4 >> 2] = HEAP32[$1573 + 4 >> 2];
         HEAP32[$1572 + 8 >> 2] = HEAP32[$1573 + 8 >> 2];
         HEAP32[$1572 + 12 >> 2] = HEAP32[$1573 + 12 >> 2];
         HEAP32[$1572 + 16 >> 2] = HEAP32[$1573 + 16 >> 2];
         HEAP32[$1568 + 52 >> 2] = $1561;
         HEAP32[$1568 + 56 >> 2] = 0;
         HEAP32[$1568 + 60 >> 2] = 0;
         HEAP32[$1568 + 64 >> 2] = 60816;
         _memmove($1572 | 0, 43980, 20) | 0;
         HEAP32[(HEAP32[$843 >> 2] | 0) + 12 >> 2] = $$in$lcssa$i + -1;
         do if ($1568) {
          $1582 = HEAP32[$221 >> 2] | 0;
          HEAP32[$30 >> 2] = $1568;
          $1583 = $1582 + 4 | 0;
          $1584 = HEAP32[$1583 >> 2] | 0;
          if (($1584 | 0) == (HEAP32[$1582 + 8 >> 2] | 0)) {
           __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1582, $30);
           break;
          }
          if (!$1584) $1590 = 0; else {
           HEAP32[$1584 >> 2] = $1568;
           $1590 = HEAP32[$1583 >> 2] | 0;
          }
          HEAP32[$1583 >> 2] = $1590 + 4;
         } while (0);
         $1591 = HEAP32[$219 >> 2] | 0;
         $1592 = $1591 + 40 | 0;
         $1594 = $1591 + 36 | 0;
         $1596 = (HEAP32[$1594 >> 2] | 0) + (HEAP32[$1592 >> 2] | 0) | 0;
         HEAP32[$1594 >> 2] = $1596;
         HEAP8[$1596 >> 0] = 0;
         HEAP32[$1592 >> 2] = 0;
         $1598 = (HEAP32[$1594 >> 2] | 0) + 1 | 0;
         HEAP32[$1594 >> 2] = $1598;
         HEAP8[$1598 >> 0] = 0;
         break L313;
        } while (0);
        $1599 = __ZN7Scanner11isPostDerefEP10LexContext($843) | 0;
        $1600 = HEAP32[$219 >> 2] | 0;
        do if ($1599) {
         $1601 = __ZN7Scanner13scanPostDerefEP10LexContext($1600) | 0;
         if ($1601) {
          $1603 = HEAP32[$221 >> 2] | 0;
          HEAP32[$28 >> 2] = $1601;
          $1604 = $1603 + 4 | 0;
          $1605 = HEAP32[$1604 >> 2] | 0;
          if (($1605 | 0) == (HEAP32[$1603 + 8 >> 2] | 0)) {
           __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1603, $28);
           break;
          }
          if (!$1605) $1611 = 0; else {
           HEAP32[$1605 >> 2] = $1601;
           $1611 = HEAP32[$1604 >> 2] | 0;
          }
          HEAP32[$1604 >> 2] = $1611 + 4;
         }
        } else {
         $1612 = __ZN7Scanner10scanSymbolEP10LexContext($scanner, $1600) | 0;
         if ($1612) {
          $1614 = HEAP32[$221 >> 2] | 0;
          HEAP32[$27 >> 2] = $1612;
          $1615 = $1614 + 4 | 0;
          $1616 = HEAP32[$1615 >> 2] | 0;
          if (($1616 | 0) == (HEAP32[$1614 + 8 >> 2] | 0)) {
           __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1614, $27);
           break;
          }
          if (!$1616) $1622 = 0; else {
           HEAP32[$1616 >> 2] = $1612;
           $1622 = HEAP32[$1615 >> 2] | 0;
          }
          HEAP32[$1615 >> 2] = $1622 + 4;
         }
        } while (0);
        $1624 = (HEAP32[$219 >> 2] | 0) + 28 | 0;
        HEAP32[$223 >> 2] = (HEAP32[$223 >> 2] | 0) + (HEAP32[$1624 >> 2] | 0);
        HEAP32[$1624 >> 2] = 0;
       } while (0);
       $1829 = (HEAP32[$223 >> 2] | 0) + 1 | 0;
       HEAP32[$223 >> 2] = $1829;
       $261 = HEAP8[(HEAP32[$225 >> 2] | 0) + $1829 >> 0] | 0;
      }
      switch (label | 0) {
      case 68:
       {
        $1831 = HEAP32[$219 >> 2] | 0;
        break L92;
        break;
       }
      case 195:
       {
        __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv();
        break;
       }
      case 274:
       {
        __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
        break;
       }
      case 280:
       {
        $1100 = ___cxa_allocate_exception(4) | 0;
        HEAP32[$1100 >> 2] = 61776;
        ___cxa_throw($1100 | 0, 61824, 94);
        break;
       }
      case 286:
       {
        __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
        break;
       }
      case 292:
       {
        $1129 = ___cxa_allocate_exception(4) | 0;
        HEAP32[$1129 >> 2] = 61776;
        ___cxa_throw($1129 | 0, 61824, 94);
        break;
       }
      case 304:
       {
        __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
        break;
       }
      case 310:
       {
        $1173 = ___cxa_allocate_exception(4) | 0;
        HEAP32[$1173 >> 2] = 61776;
        ___cxa_throw($1173 | 0, 61824, 94);
        break;
       }
      case 478:
       {
        __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
        break;
       }
      case 484:
       {
        $1709 = ___cxa_allocate_exception(4) | 0;
        HEAP32[$1709 >> 2] = 61776;
        ___cxa_throw($1709 | 0, 61824, 94);
        break;
       }
      case 489:
       {
        __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
        break;
       }
      case 495:
       {
        $1729 = ___cxa_allocate_exception(4) | 0;
        HEAP32[$1729 >> 2] = 61776;
        ___cxa_throw($1729 | 0, 61824, 94);
        break;
       }
      }
     } while (0);
     $1832 = HEAP32[$1831 + 36 >> 2] | 0;
     if (!(HEAP8[$1832 >> 0] | 0)) $1886 = $1831; else {
      $1835 = $1831 + 8 | 0;
      HEAP32[$0 + 0 >> 2] = HEAP32[$1835 + 0 >> 2];
      HEAP32[$0 + 4 >> 2] = HEAP32[$1835 + 4 >> 2];
      HEAP32[$0 + 8 >> 2] = HEAP32[$1835 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$1835 + 12 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[$1835 + 16 >> 2];
      $1836 = $221 + 72 | 0;
      $1837 = HEAP32[$1836 >> 2] | 0;
      HEAP32[$1836 >> 2] = $1837 + 72;
      HEAP32[$1837 >> 2] = 0;
      HEAP32[$1837 + 4 >> 2] = 211;
      $1840 = $1837 + 28 | 0;
      HEAP32[$1840 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
      HEAP32[$1840 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
      HEAP32[$1840 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
      HEAP32[$1840 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
      HEAP32[$1840 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
      $1841 = $1837 + 8 | 0;
      $1842 = $221 + 48 | 0;
      HEAP32[$1841 + 0 >> 2] = HEAP32[$1842 + 0 >> 2];
      HEAP32[$1841 + 4 >> 2] = HEAP32[$1842 + 4 >> 2];
      HEAP32[$1841 + 8 >> 2] = HEAP32[$1842 + 8 >> 2];
      HEAP32[$1841 + 12 >> 2] = HEAP32[$1842 + 12 >> 2];
      HEAP32[$1841 + 16 >> 2] = HEAP32[$1842 + 16 >> 2];
      HEAP32[$1837 + 52 >> 2] = $1832;
      HEAP32[$1837 + 56 >> 2] = 0;
      HEAP32[$1837 + 60 >> 2] = 0;
      HEAP32[$1837 + 64 >> 2] = 60816;
      do if ($1837) {
       $1848 = HEAP32[$221 >> 2] | 0;
       HEAP32[$31 >> 2] = $1837;
       $1849 = $1848 + 4 | 0;
       $1850 = HEAP32[$1849 >> 2] | 0;
       if (($1850 | 0) == (HEAP32[$1848 + 8 >> 2] | 0)) {
        __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($1848, $31);
        break;
       }
       if (!$1850) $1856 = 0; else {
        HEAP32[$1850 >> 2] = $1837;
        $1856 = HEAP32[$1849 >> 2] | 0;
       }
       HEAP32[$1849 >> 2] = $1856 + 4;
      } while (0);
      $1857 = HEAP32[$219 >> 2] | 0;
      $1858 = $1857 + 40 | 0;
      $1860 = $1857 + 36 | 0;
      $1862 = (HEAP32[$1860 >> 2] | 0) + (HEAP32[$1858 >> 2] | 0) | 0;
      HEAP32[$1860 >> 2] = $1862;
      HEAP8[$1862 >> 0] = 0;
      HEAP32[$1858 >> 2] = 0;
      $1864 = (HEAP32[$1860 >> 2] | 0) + 1 | 0;
      HEAP32[$1860 >> 2] = $1864;
      HEAP8[$1864 >> 0] = 0;
      $1886 = HEAP32[$219 >> 2] | 0;
     }
     $1865 = HEAP32[$221 >> 2] | 0;
     $1866 = $annotator$i + 4 | 0;
     HEAP32[$1866 >> 2] = 0;
     HEAP32[$annotator$i + 8 >> 2] = 0;
     $1868 = $annotator$i + 4 | 0;
     HEAP32[$annotator$i >> 2] = $1868;
     $1869 = $annotator$i + 16 | 0;
     HEAP32[$1869 >> 2] = 0;
     HEAP32[$annotator$i + 20 >> 2] = 0;
     $1871 = $annotator$i + 16 | 0;
     HEAP32[$annotator$i + 12 >> 2] = $1871;
     $1873 = $annotator$i + 28 | 0;
     HEAP32[$1873 >> 2] = 0;
     HEAP32[$annotator$i + 32 >> 2] = 0;
     $1875 = $annotator$i + 28 | 0;
     HEAP32[$annotator$i + 24 >> 2] = $1875;
     $1877 = $1865 + 4 | 0;
     $1878 = HEAP32[$1877 >> 2] | 0;
     $1879 = HEAP32[$1865 >> 2] | 0;
     $1883 = $1878 - $1879 >> 2;
     do if (!$1883) $2374 = 0; else {
      $1885 = $1886 + 52 | 0;
      $1887 = $data$i$i + 1 | 0;
      $1888 = $data$i$i + 8 | 0;
      $1889 = $1886 + 4 | 0;
      $1890 = $1 + 12 | 0;
      $1891 = $1890 + 1 | 0;
      $1892 = $annotator$i + 12 | 0;
      $1893 = $1 + 8 | 0;
      $1894 = $1 + 20 | 0;
      $1895 = $data$i$i + 4 | 0;
      $1896 = $1 + 1 | 0;
      $1897 = $1 + 4 | 0;
      $1898 = $1 + 12 | 0;
      $1899 = $1898 + 1 | 0;
      $1900 = $annotator$i + 24 | 0;
      $1901 = $1 + 8 | 0;
      $1902 = $1 + 20 | 0;
      $1903 = $1 + 1 | 0;
      $1904 = $1 + 4 | 0;
      $1905 = $info$i$i + 16 | 0;
      $1906 = $info$i$i + 4 | 0;
      $1908 = $1878;
      $1910 = $1879;
      $i$01$i114 = 0;
      L775 : while (1) {
       if ($1908 - $1910 >> 2 >>> 0 <= $i$01$i114 >>> 0) {
        label = 546;
        break;
       }
       $1928 = HEAP32[$1910 + ($i$01$i114 << 2) >> 2] | 0;
       $1929 = $1928 + 8 | 0;
       $1930 = HEAP32[$1929 >> 2] | 0;
       if (($1930 | 0) == 211) {
        HEAP32[$info$i$i >> 2] = 211;
        $1931 = $1928 + 52 | 0;
        $1932 = HEAP32[$1931 >> 2] | 0;
        $1933 = _strlen($1932 | 0) | 0;
        if ($1933 >>> 0 > 4294967279) {
         label = 554;
         break;
        }
        if ($1933 >>> 0 < 11) {
         HEAP8[$data$i$i >> 0] = $1933 << 1;
         $__p$0$i$i$i = $1887;
        } else {
         $1939 = $1933 + 16 & -16;
         $$size$i$i$i = ($1939 | 0) == 0 ? 1 : $1939;
         $1941 = _malloc($$size$i$i$i) | 0;
         if (!$1941) while (1) {
          $1943 = HEAP32[15470] | 0;
          HEAP32[15470] = $1943 + 0;
          if (!$1943) {
           label = 560;
           break L775;
          }
          FUNCTION_TABLE_v[$1943 & 3]();
          $1946 = _malloc($$size$i$i$i) | 0;
          if ($1946) {
           $$lcssa$i$i$i = $1946;
           break;
          }
         } else $$lcssa$i$i$i = $1941;
         HEAP32[$1888 >> 2] = $$lcssa$i$i$i;
         HEAP32[$data$i$i >> 2] = $1939 | 1;
         HEAP32[$1895 >> 2] = $1933;
         $__p$0$i$i$i = $$lcssa$i$i$i;
        }
        _memcpy($__p$0$i$i$i | 0, $1932 | 0, $1933 | 0) | 0;
        HEAP8[$__p$0$i$i$i + $1933 >> 0] = 0;
        L791 : do if ((HEAP32[$1885 >> 2] | 0) == 151) if (((HEAP8[HEAP32[$1931 >> 2] >> 0] | 32) + -97 | 0) >>> 0 < 26) if (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($data$i$i, 36816) | 0) {
         $$334 = (HEAP8[$data$i$i >> 0] & 1) == 0 ? $1887 : HEAP32[$1888 >> 2] | 0;
         $1965 = _strlen($$334 | 0) | 0;
         L795 : do if ($1965) {
          $i$01$i$i$i$i = 0;
          while (1) {
           switch (HEAP8[$$334 + $i$01$i$i$i$i >> 0] | 0) {
           case 120:
           case 117:
           case 115:
           case 114:
           case 112:
           case 111:
           case 108:
           case 109:
           case 105:
           case 103:
           case 101:
           case 100:
           case 99:
           case 97:
            break;
           default:
            break L791;
           }
           $i$01$i$i$i$i = $i$01$i$i$i$i + 1 | 0;
           if ($i$01$i$i$i$i >>> 0 >= $1965 >>> 0) break L795;
          }
         } while (0);
         HEAP32[$info$i$i + 0 >> 2] = HEAP32[10840];
         HEAP32[$info$i$i + 4 >> 2] = HEAP32[10841];
         HEAP32[$info$i$i + 8 >> 2] = HEAP32[10842];
         HEAP32[$info$i$i + 12 >> 2] = HEAP32[10843];
         HEAP32[$info$i$i + 16 >> 2] = HEAP32[10844];
        } while (0);
        $1972 = HEAP32[$info$i$i >> 2] | 0;
        L801 : do if (($1972 | 0) == 211) {
         $1974 = HEAP32[$1889 >> 2] | 0;
         $1975 = $1928 + 72 | 0;
         $$$i$i$i$i = $1975 >>> 0 < (HEAP32[$1974 + 72 >> 2] | 0) >>> 0 ? $1975 : 0;
         L804 : do if (!$$$i$i$i$i) label = 605; else {
          $1981 = HEAP32[$$$i$i$i$i + 52 >> 2] | 0;
          if ((HEAP8[$1981 >> 0] | 0) == 58) {
           if ((HEAP8[$1981 + 1 >> 0] | 0) != 58) {
            label = 605;
            break;
           }
           if ((HEAP32[$$$i$i$i$i + 8 >> 2] & -2 | 0) == 172) {
            label = 605;
            break;
           }
           $1991 = HEAP8[HEAP32[$1931 >> 2] >> 0] | 0;
           $1992 = $1991 << 24 >> 24;
           do if ($1991 << 24 >> 24 == 37 | $1991 << 24 >> 24 == 64 | $1991 << 24 >> 24 == 36) {
            __ZN9Annotator21annotateLocalVariableEP10LexContextRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP5TokenP9TokenInfo($annotator$i, HEAP32[$1885 >> 2] | 0, $data$i$i, $info$i$i);
            $1993 = HEAP32[$info$i$i >> 2] | 0;
            if (($1993 | 0) != 211) {
             $2052 = $1993;
             label = 608;
             break L804;
            }
            __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($3, $annotator$i, $data$i$i);
            if ((HEAP32[$3 >> 2] | 0) == ($1868 | 0)) {
             $$pre242 = HEAP32[$info$i$i >> 2] | 0;
             if (($$pre242 | 0) != 211) {
              $2052 = $$pre242;
              label = 608;
              break L804;
             }
             __ZN9Annotator22annotateGlobalVariableEP10LexContextRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP5TokenP9TokenInfo($annotator$i, $data$i$i, $info$i$i);
             $2035 = HEAP32[$info$i$i >> 2] | 0;
             if (($2035 | 0) == 211) break; else {
              $2052 = $2035;
              label = 608;
              break L804;
             }
            }
            $1997 = HEAP8[$data$i$i >> 0] | 0;
            $1999 = ($1997 & 1) == 0;
            if ($1999) {
             $2005 = ($1997 & 255) >>> 1;
             $2007 = $1887;
            } else {
             $2005 = HEAP32[$1895 >> 2] | 0;
             $2007 = HEAP32[$1888 >> 2] | 0;
            }
            L820 : do if ($2005) {
             $2006 = $2007 + $2005 | 0;
             $2008 = $2007;
             if (($2005 | 0) < 1) break; else $$014$i$i$i3$i$i$i$i = $2007;
             while (1) {
              if ((HEAP8[$$014$i$i$i3$i$i$i$i >> 0] | 0) == 64) break;
              $$01$be$i$i$i5$i$i$i$i = $$014$i$i$i3$i$i$i$i + 1 | 0;
              if (($$01$be$i$i$i5$i$i$i$i | 0) == ($2006 | 0)) break L820; else $$014$i$i$i3$i$i$i$i = $$01$be$i$i$i5$i$i$i$i;
             }
             if (($$014$i$i$i3$i$i$i$i | 0) == ($2006 | 0)) break;
             if (($$014$i$i$i3$i$i$i$i - $2008 | 0) == -1) break;
             HEAP32[$info$i$i + 0 >> 2] = HEAP32[10960];
             HEAP32[$info$i$i + 4 >> 2] = HEAP32[10961];
             HEAP32[$info$i$i + 8 >> 2] = HEAP32[10962];
             HEAP32[$info$i$i + 12 >> 2] = HEAP32[10963];
             HEAP32[$info$i$i + 16 >> 2] = HEAP32[10964];
             $2052 = 168;
             label = 608;
             break L804;
            } while (0);
            if ($1999) {
             $2022 = ($1997 & 255) >>> 1;
             $2024 = $1887;
            } else {
             $2022 = HEAP32[$1895 >> 2] | 0;
             $2024 = HEAP32[$1888 >> 2] | 0;
            }
            L833 : do if ($2022) {
             $2023 = $2024 + $2022 | 0;
             $2025 = $2024;
             if (($2022 | 0) < 1) break; else $$014$i$i$i$i$i$i$i = $2024;
             while (1) {
              if ((HEAP8[$$014$i$i$i$i$i$i$i >> 0] | 0) == 37) break;
              $$01$be$i$i$i$i$i$i$i = $$014$i$i$i$i$i$i$i + 1 | 0;
              if (($$01$be$i$i$i$i$i$i$i | 0) == ($2023 | 0)) break L833; else $$014$i$i$i$i$i$i$i = $$01$be$i$i$i$i$i$i$i;
             }
             if (($$014$i$i$i$i$i$i$i | 0) == ($2023 | 0)) break;
             if (($$014$i$i$i$i$i$i$i - $2025 | 0) == -1) break;
             HEAP32[$info$i$i + 0 >> 2] = HEAP32[10965];
             HEAP32[$info$i$i + 4 >> 2] = HEAP32[10966];
             HEAP32[$info$i$i + 8 >> 2] = HEAP32[10967];
             HEAP32[$info$i$i + 12 >> 2] = HEAP32[10968];
             HEAP32[$info$i$i + 16 >> 2] = HEAP32[10969];
             $2052 = 169;
             label = 608;
             break L804;
            } while (0);
            HEAP32[$info$i$i + 0 >> 2] = HEAP32[10950];
            HEAP32[$info$i$i + 4 >> 2] = HEAP32[10951];
            HEAP32[$info$i$i + 8 >> 2] = HEAP32[10952];
            HEAP32[$info$i$i + 12 >> 2] = HEAP32[10953];
            HEAP32[$info$i$i + 16 >> 2] = HEAP32[10954];
            $2052 = 166;
            label = 608;
            break L804;
           } else {
            if ($1991 << 24 >> 24 <= 0) break;
            if ((($1992 | 32) + -97 | 0) >>> 0 < 26) break;
            if (!(($1992 + -48 | 0) >>> 0 < 10 | $1991 << 24 >> 24 == 95)) {
             label = 609;
             break L804;
            }
           } while (0);
           HEAP32[$info$i$i + 0 >> 2] = HEAP32[10755];
           HEAP32[$info$i$i + 4 >> 2] = HEAP32[10756];
           HEAP32[$info$i$i + 8 >> 2] = HEAP32[10757];
           HEAP32[$info$i$i + 12 >> 2] = HEAP32[10758];
           HEAP32[$info$i$i + 16 >> 2] = HEAP32[10759];
           $2052 = 127;
           label = 608;
          } else label = 605;
         } while (0);
         do if ((label | 0) == 605) {
          label = 0;
          $2042 = HEAP32[$1885 >> 2] | 0;
          if (($2042 | 0) == 126) {
           $2044 = HEAP32[$1931 >> 2] | 0;
           $2046 = __ZN18ReservedKeywordMap11in_word_setEPKcj($2044, _strlen($2044 | 0) | 0) | 0;
           if ((HEAP32[(($2046 | 0) == 0 ? $1974 + 52 | 0 : $2046 + 8 | 0) >> 2] | 0) == 22) {
            label = 609;
            break;
           };
           HEAP32[$info$i$i + 0 >> 2] = HEAP32[10755];
           HEAP32[$info$i$i + 4 >> 2] = HEAP32[10756];
           HEAP32[$info$i$i + 8 >> 2] = HEAP32[10757];
           HEAP32[$info$i$i + 12 >> 2] = HEAP32[10758];
           HEAP32[$info$i$i + 16 >> 2] = HEAP32[10759];
           $2052 = 127;
           label = 608;
          } else $2054 = $2042;
         } while (0);
         if ((label | 0) == 608) {
          label = 0;
          HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
          HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
          HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
          HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
          HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
          HEAP32[$1885 >> 2] = $2052;
          break;
         } else if ((label | 0) == 609) {
          label = 0;
          $2054 = HEAP32[$1885 >> 2] | 0;
         }
         do if (($2054 | 0) == 125) {
          $2056 = HEAP8[HEAP32[$1931 >> 2] >> 0] | 0;
          if (!((($2056 << 24 >> 24 | 32) + -97 | 0) >>> 0 < 26 | $2056 << 24 >> 24 == 95)) break;
          HEAP32[$info$i$i + 0 >> 2] = HEAP32[10440];
          HEAP32[$info$i$i + 4 >> 2] = HEAP32[10441];
          HEAP32[$info$i$i + 8 >> 2] = HEAP32[10442];
          HEAP32[$info$i$i + 12 >> 2] = HEAP32[10443];
          HEAP32[$info$i$i + 16 >> 2] = HEAP32[10444];
          HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
          HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
          HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
          HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
          HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
          HEAP32[$1885 >> 2] = 64;
          break L801;
         } while (0);
         $2062 = HEAP32[$1889 >> 2] | 0;
         $2064 = HEAP32[$2062 + 68 >> 2] | 0;
         $2066 = $1928 + -72 | 0;
         if (($2064 | 0) == ($1928 | 0) | ($2066 | 0) == ($2064 | 0)) {
          $2079 = $1975 >>> 0 < (HEAP32[$2062 + 72 >> 2] | 0) >>> 0 ? $1975 : 0;
          label = 616;
         } else {
          $$$i$i10$i$i = $1975 >>> 0 < (HEAP32[$2062 + 72 >> 2] | 0) >>> 0 ? $1975 : 0;
          if ((HEAP32[$1928 + -136 >> 2] | 0) == 203) {
           $2092 = $$$i$i10$i$i;
           label = 620;
          } else {
           $2079 = $$$i$i10$i$i;
           label = 616;
          }
         }
         do if ((label | 0) == 616) {
          label = 0;
          if (!((HEAP32[$1885 >> 2] | 0) == 109 & ($2079 | 0) != 0)) {
           $2092 = $2079;
           label = 620;
           break;
          }
          $2081 = HEAP8[HEAP32[$1931 >> 2] >> 0] | 0;
          if (!((($2081 << 24 >> 24 | 32) + -97 | 0) >>> 0 < 26 | $2081 << 24 >> 24 == 95)) {
           $2092 = $2079;
           label = 620;
           break;
          }
          if ((HEAP8[HEAP32[$2079 + 52 >> 2] >> 0] | 0) != 125) {
           $2092 = $2079;
           label = 620;
           break;
          };
          HEAP32[$info$i$i + 0 >> 2] = HEAP32[10730];
          HEAP32[$info$i$i + 4 >> 2] = HEAP32[10731];
          HEAP32[$info$i$i + 8 >> 2] = HEAP32[10732];
          HEAP32[$info$i$i + 12 >> 2] = HEAP32[10733];
          HEAP32[$info$i$i + 16 >> 2] = HEAP32[10734];
         } while (0);
         L866 : do if ((label | 0) == 620) {
          label = 0;
          do if ($2092) {
           $2094 = HEAP8[HEAP32[$1931 >> 2] >> 0] | 0;
           if (!((($2094 << 24 >> 24 | 32) + -97 | 0) >>> 0 < 26 | $2094 << 24 >> 24 == 95)) break;
           $2101 = HEAP32[$2092 + 52 >> 2] | 0;
           if ((HEAP8[$2101 >> 0] | 0) != 61) break;
           if ((HEAP8[$2101 + 1 >> 0] | 0) != 62) break;
           HEAP32[$info$i$i + 0 >> 2] = HEAP32[10730];
           HEAP32[$info$i$i + 4 >> 2] = HEAP32[10731];
           HEAP32[$info$i$i + 8 >> 2] = HEAP32[10732];
           HEAP32[$info$i$i + 12 >> 2] = HEAP32[10733];
           HEAP32[$info$i$i + 16 >> 2] = HEAP32[10734];
           break L866;
          } while (0);
          do if ((HEAP32[$1885 >> 2] | 0) == 66) {
           $2110 = HEAP8[HEAP32[$1931 >> 2] >> 0] | 0;
           if (!((($2110 << 24 >> 24 | 32) + -97 | 0) >>> 0 < 26 | $2110 << 24 >> 24 == 95)) break;
           HEAP32[$info$i$i + 0 >> 2] = HEAP32[10730];
           HEAP32[$info$i$i + 4 >> 2] = HEAP32[10731];
           HEAP32[$info$i$i + 8 >> 2] = HEAP32[10732];
           HEAP32[$info$i$i + 12 >> 2] = HEAP32[10733];
           HEAP32[$info$i$i + 16 >> 2] = HEAP32[10734];
           break L866;
          } while (0);
          $$$i$i$i = $1975 >>> 0 < (HEAP32[(HEAP32[$1889 >> 2] | 0) + 72 >> 2] | 0) >>> 0 ? $1975 : 0;
          do if ($$$i$i$i) {
           $2121 = HEAP32[$1931 >> 2] | 0;
           if ((HEAP8[$2121 >> 0] | 0) != 36) break;
           if ((HEAP8[$2121 + 1 >> 0] | 0) != 36) break;
           $2129 = HEAP8[HEAP32[$$$i$i$i + 52 >> 2] >> 0] | 0;
           if (!((($2129 << 24 >> 24 | 32) + -97 | 0) >>> 0 < 26 | $2129 << 24 >> 24 == 95)) break;
           HEAP32[$info$i$i + 0 >> 2] = HEAP32[10705];
           HEAP32[$info$i$i + 4 >> 2] = HEAP32[10706];
           HEAP32[$info$i$i + 8 >> 2] = HEAP32[10707];
           HEAP32[$info$i$i + 12 >> 2] = HEAP32[10708];
           HEAP32[$info$i$i + 16 >> 2] = HEAP32[10709];
           HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
           HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
           HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
           HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
           HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
           HEAP32[$1885 >> 2] = 117;
           break L801;
          } while (0);
          do if ((HEAP32[(HEAP32[$1889 >> 2] | 0) + 68 >> 2] | 0) == ($1928 | 0)) label = 638; else {
           if ((HEAP32[$1928 + -64 >> 2] | 0) != 10) {
            label = 638;
            break;
           }
           if ((HEAP8[HEAP32[$1931 >> 2] >> 0] | 0) != 38) {
            label = 638;
            break;
           };
           HEAP32[$info$i$i + 0 >> 2] = HEAP32[10770];
           HEAP32[$info$i$i + 4 >> 2] = HEAP32[10771];
           HEAP32[$info$i$i + 8 >> 2] = HEAP32[10772];
           HEAP32[$info$i$i + 12 >> 2] = HEAP32[10773];
           HEAP32[$info$i$i + 16 >> 2] = HEAP32[10774];
           $$ph300 = 130;
          } while (0);
          do if ((label | 0) == 638) {
           label = 0;
           $2145 = HEAP32[$1931 >> 2] | 0;
           if ((HEAP8[$2145 >> 0] | 0) == 38) {
            HEAP32[$info$i$i + 0 >> 2] = HEAP32[10195];
            HEAP32[$info$i$i + 4 >> 2] = HEAP32[10196];
            HEAP32[$info$i$i + 8 >> 2] = HEAP32[10197];
            HEAP32[$info$i$i + 12 >> 2] = HEAP32[10198];
            HEAP32[$info$i$i + 16 >> 2] = HEAP32[10199];
            $$ph300 = 15;
            break;
           }
           L893 : do if ((HEAP8[$2145 >> 0] | 0) == 60) {
            $2153 = (HEAP32[(HEAP32[$1889 >> 2] | 0) + 68 >> 2] | 0) == ($1928 | 0);
            $$$i13$i$i = $2153 ? 0 : $2066;
            do if ($2153) {
             $2159 = 211;
             $2161 = 36;
             label = 645;
            } else {
             $2155 = HEAP32[$$$i13$i$i + 12 >> 2] | 0;
             $2157 = HEAP32[$$$i13$i$i + 8 >> 2] | 0;
             if (($2155 | 0) == 2) break;
             if (!(($2157 | 0) == 104 | ($2157 | 0) == 106 | ($2157 | 0) == 107)) {
              $2159 = $2157;
              $2161 = $2155;
              label = 645;
             }
            } while (0);
            if ((label | 0) == 645) {
             label = 0;
             if (!(($2159 + -45 | 0) >>> 0 > 1 & ($2161 | 0) == 1 | ($2161 | 0) == 3)) break;
            };
            HEAP32[$info$i$i + 0 >> 2] = HEAP32[10880];
            HEAP32[$info$i$i + 4 >> 2] = HEAP32[10881];
            HEAP32[$info$i$i + 8 >> 2] = HEAP32[10882];
            HEAP32[$info$i$i + 12 >> 2] = HEAP32[10883];
            HEAP32[$info$i$i + 16 >> 2] = HEAP32[10884];
            $2164 = HEAP32[HEAP32[$1889 >> 2] >> 2] | 0;
            $2167 = HEAP32[$2164 >> 2] | 0;
            $2171 = (HEAP32[$2164 + 4 >> 2] | 0) - $2167 >> 2;
            do if (!$2171) $2203 = 152; else {
             $i$04$i$i$i = 0;
             $wanted_idx$03$i$i$i = -1;
             do {
              if ($2171 >>> 0 <= $i$04$i$i$i >>> 0) {
               label = 648;
               break L775;
              }
              $wanted_idx$03$i$i$i = (HEAP32[$2167 + ($i$04$i$i$i << 2) >> 2] | 0) == ($1928 | 0) ? $i$04$i$i$i + 2 | 0 : $wanted_idx$03$i$i$i;
              $i$04$i$i$i = $i$04$i$i$i + 1 | 0;
             } while (($i$04$i$i$i | 0) != ($2171 | 0));
             if (!(($wanted_idx$03$i$i$i | 0) > -1 & $wanted_idx$03$i$i$i >>> 0 < $2171 >>> 0)) {
              $2203 = 152;
              break;
             }
             $2195 = HEAP32[$2167 + ($wanted_idx$03$i$i$i << 2) >> 2] | 0;
             if (!$2195) {
              $2203 = 152;
              break;
             }
             if ((HEAP8[HEAP32[$2195 + 52 >> 2] >> 0] | 0) != 62) {
              $2203 = 152;
              break;
             }
             _memmove($2195 + 8 | 0, 43520, 20) | 0;
             $$pre236 = HEAP32[$info$i$i >> 2] | 0;
             if (($$pre236 | 0) == 211) break L893; else $2203 = $$pre236;
            } while (0);
            HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
            HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
            HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
            HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
            HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
            HEAP32[$1885 >> 2] = $2203;
            break L801;
           } while (0);
           $2204 = HEAP32[$1889 >> 2] | 0;
           $2205 = HEAP32[$1931 >> 2] | 0;
           $2207 = __ZN18ReservedKeywordMap11in_word_setEPKcj($2205, _strlen($2205 | 0) | 0) | 0;
           if (!$2207) {
            $2213 = HEAP32[$2204 + 48 >> 2] | 0;
            $2214 = $2204 + 52 | 0;
            HEAP32[$reserved_info$sroa$4$i$i$i + 0 >> 2] = HEAP32[$2214 + 0 >> 2];
            HEAP32[$reserved_info$sroa$4$i$i$i + 4 >> 2] = HEAP32[$2214 + 4 >> 2];
            HEAP32[$reserved_info$sroa$4$i$i$i + 8 >> 2] = HEAP32[$2214 + 8 >> 2];
            HEAP32[$reserved_info$sroa$4$i$i$i + 12 >> 2] = HEAP32[$2214 + 12 >> 2];
            $2216 = $2213;
           } else {
            $2210 = HEAP32[$2207 + 4 >> 2] | 0;
            $2211 = $2207 + 8 | 0;
            HEAP32[$reserved_info$sroa$4$i$i$i + 0 >> 2] = HEAP32[$2211 + 0 >> 2];
            HEAP32[$reserved_info$sroa$4$i$i$i + 4 >> 2] = HEAP32[$2211 + 4 >> 2];
            HEAP32[$reserved_info$sroa$4$i$i$i + 8 >> 2] = HEAP32[$2211 + 8 >> 2];
            HEAP32[$reserved_info$sroa$4$i$i$i + 12 >> 2] = HEAP32[$2211 + 12 >> 2];
            $2216 = $2210;
           }
           do if (($2216 | 0) != 211) {
            if ((HEAP32[$1885 >> 2] | 0) == 63) break;
            HEAP32[$info$i$i >> 2] = $2216;
            HEAP32[$1906 + 0 >> 2] = HEAP32[$reserved_info$sroa$4$i$i$i + 0 >> 2];
            HEAP32[$1906 + 4 >> 2] = HEAP32[$reserved_info$sroa$4$i$i$i + 4 >> 2];
            HEAP32[$1906 + 8 >> 2] = HEAP32[$reserved_info$sroa$4$i$i$i + 8 >> 2];
            HEAP32[$1906 + 12 >> 2] = HEAP32[$reserved_info$sroa$4$i$i$i + 12 >> 2];
            if (($2216 | 0) == 211) break;
            HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
            HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
            HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
            HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
            HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
            HEAP32[$1885 >> 2] = $2216;
            break L801;
           } while (0);
           if ((HEAP8[HEAP32[$1931 >> 2] >> 0] | 0) == 42) {
            $2226 = (HEAP32[(HEAP32[$1889 >> 2] | 0) + 68 >> 2] | 0) == ($1928 | 0);
            $$$i19$i$i = $2226 ? 0 : $2066;
            do if ($2226) {
             $2232 = 211;
             $2234 = 36;
             label = 670;
            } else {
             $2228 = HEAP32[$$$i19$i$i + 8 >> 2] | 0;
             $2230 = HEAP32[$$$i19$i$i + 12 >> 2] | 0;
             if (($2230 | 0) == 2) {
              label = 671;
              break;
             }
             switch ($2228 | 0) {
             case 104:
             case 106:
             case 107:
             case 109:
             case 115:
              {
               label = 671;
               break;
              }
             default:
              {
               $2232 = $2228;
               $2234 = $2230;
               label = 670;
              }
             }
            } while (0);
            do if ((label | 0) == 670) {
             label = 0;
             if (($2232 + -45 | 0) >>> 0 > 1 & ($2234 | 0) == 1 | ($2234 | 0) == 3) {
              label = 671;
              break;
             };
             HEAP32[$info$i$i + 0 >> 2] = HEAP32[10135];
             HEAP32[$info$i$i + 4 >> 2] = HEAP32[10136];
             HEAP32[$info$i$i + 8 >> 2] = HEAP32[10137];
             HEAP32[$info$i$i + 12 >> 2] = HEAP32[10138];
             HEAP32[$info$i$i + 16 >> 2] = HEAP32[10139];
             $$ph306 = 3;
            } while (0);
            if ((label | 0) == 671) {
             label = 0;
             HEAP32[$info$i$i + 0 >> 2] = HEAP32[10175];
             HEAP32[$info$i$i + 4 >> 2] = HEAP32[10176];
             HEAP32[$info$i$i + 8 >> 2] = HEAP32[10177];
             HEAP32[$info$i$i + 12 >> 2] = HEAP32[10178];
             HEAP32[$info$i$i + 16 >> 2] = HEAP32[10179];
             $$ph306 = 11;
            };
            HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
            HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
            HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
            HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
            HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
            HEAP32[$1885 >> 2] = $$ph306;
            break L801;
           }
           $2236 = HEAP32[$1885 >> 2] | 0;
           do if (($2236 | 0) == 63) {
            $2238 = HEAP32[$1931 >> 2] | 0;
            if ((HEAP8[$2238 >> 0] | 0) != 123) {
             $$idx$val = 63;
             break;
            }
            $2242 = __ZN18ReservedKeywordMap11in_word_setEPKcj($2238, _strlen($2238 | 0) | 0) | 0;
            if (!$2242) {
             $2246 = (HEAP32[$1889 >> 2] | 0) + 48 | 0;
             HEAP32[$4 + 0 >> 2] = HEAP32[$2246 + 0 >> 2];
             HEAP32[$4 + 4 >> 2] = HEAP32[$2246 + 4 >> 2];
             HEAP32[$4 + 8 >> 2] = HEAP32[$2246 + 8 >> 2];
             HEAP32[$4 + 12 >> 2] = HEAP32[$2246 + 12 >> 2];
             HEAP32[$4 + 16 >> 2] = HEAP32[$2246 + 16 >> 2];
            } else {
             $2244 = $2242 + 4 | 0;
             HEAP32[$4 + 0 >> 2] = HEAP32[$2244 + 0 >> 2];
             HEAP32[$4 + 4 >> 2] = HEAP32[$2244 + 4 >> 2];
             HEAP32[$4 + 8 >> 2] = HEAP32[$2244 + 8 >> 2];
             HEAP32[$4 + 12 >> 2] = HEAP32[$2244 + 12 >> 2];
             HEAP32[$4 + 16 >> 2] = HEAP32[$2244 + 16 >> 2];
            };
            HEAP32[$info$i$i + 0 >> 2] = HEAP32[$4 + 0 >> 2];
            HEAP32[$info$i$i + 4 >> 2] = HEAP32[$4 + 4 >> 2];
            HEAP32[$info$i$i + 8 >> 2] = HEAP32[$4 + 8 >> 2];
            HEAP32[$info$i$i + 12 >> 2] = HEAP32[$4 + 12 >> 2];
            HEAP32[$info$i$i + 16 >> 2] = HEAP32[$4 + 16 >> 2];
            $$pre$i2$i = HEAP32[$info$i$i >> 2] | 0;
            if (($$pre$i2$i | 0) == 211) {
             $$idx$val = HEAP32[$1885 >> 2] | 0;
             break;
            } else {
             HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
             HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
             HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
             HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
             HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
             HEAP32[$1885 >> 2] = $$pre$i2$i;
             break L801;
            }
           } else $$idx$val = $2236; while (0);
           __ZN9Annotator21annotateLocalVariableEP10LexContextRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP5TokenP9TokenInfo($annotator$i, $$idx$val, $data$i$i, $info$i$i);
           $2248 = HEAP32[$info$i$i >> 2] | 0;
           if (($2248 | 0) != 211) {
            HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
            HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
            HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
            HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
            HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
            HEAP32[$1885 >> 2] = $2248;
            break L801;
           }
           __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($0, $annotator$i, $data$i$i);
           L946 : do if ((HEAP32[$0 >> 2] | 0) == ($1868 | 0)) {
            $$pre238 = HEAP32[$info$i$i >> 2] | 0;
            if (($$pre238 | 0) != 211) {
             $2290 = $$pre238;
             break;
            }
            __ZN9Annotator22annotateGlobalVariableEP10LexContextRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP5TokenP9TokenInfo($annotator$i, $data$i$i, $info$i$i);
            $2291 = HEAP32[$info$i$i >> 2] | 0;
            if (($2291 | 0) != 211) {
             HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
             HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
             HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
             HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
             HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
             HEAP32[$1885 >> 2] = $2291;
             break L801;
            }
            do if ((HEAP32[$1885 >> 2] | 0) == 63) {
             HEAP32[$info$i$i + 0 >> 2] = HEAP32[11135];
             HEAP32[$info$i$i + 4 >> 2] = HEAP32[11136];
             HEAP32[$info$i$i + 8 >> 2] = HEAP32[11137];
             HEAP32[$info$i$i + 12 >> 2] = HEAP32[11138];
             HEAP32[$info$i$i + 16 >> 2] = HEAP32[11139];
             if (!(HEAP8[$data$i$i >> 0] & 1)) {
              HEAP32[$1 + 0 >> 2] = HEAP32[$data$i$i + 0 >> 2];
              HEAP32[$1 + 4 >> 2] = HEAP32[$data$i$i + 4 >> 2];
              HEAP32[$1 + 8 >> 2] = HEAP32[$data$i$i + 8 >> 2];
             } else {
              $2298 = HEAP32[$1888 >> 2] | 0;
              $2299 = HEAP32[$1895 >> 2] | 0;
              if ($2299 >>> 0 > 4294967279) {
               label = 714;
               break L775;
              }
              if ($2299 >>> 0 < 11) {
               HEAP8[$1 >> 0] = $2299 << 1;
               $__p$0$i$i$i$i = $1896;
              } else {
               $2305 = $2299 + 16 & -16;
               $$size$i$i20$i$i = ($2305 | 0) == 0 ? 1 : $2305;
               $2307 = _malloc($$size$i$i20$i$i) | 0;
               if (!$2307) while (1) {
                $2309 = HEAP32[15470] | 0;
                HEAP32[15470] = $2309 + 0;
                if (!$2309) {
                 label = 720;
                 break L775;
                }
                FUNCTION_TABLE_v[$2309 & 3]();
                $2312 = _malloc($$size$i$i20$i$i) | 0;
                if ($2312) {
                 $$lcssa$i$i24$i$i = $2312;
                 break;
                }
               } else $$lcssa$i$i24$i$i = $2307;
               HEAP32[$1893 >> 2] = $$lcssa$i$i24$i$i;
               HEAP32[$1 >> 2] = $2305 | 1;
               HEAP32[$1897 >> 2] = $2299;
               $__p$0$i$i$i$i = $$lcssa$i$i24$i$i;
              }
              _memcpy($__p$0$i$i$i$i | 0, $2298 | 0, $2299 | 0) | 0;
              HEAP8[$__p$0$i$i$i$i + $2299 >> 0] = 0;
             }
             HEAP8[$1890 >> 0] = 0;
             HEAP8[$1891 >> 0] = 0;
             __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0, $1892, $1);
             if (HEAP8[$1890 >> 0] & 1) _free(HEAP32[$1894 >> 2] | 0);
             if (!(HEAP8[$1 >> 0] & 1)) break;
             _free(HEAP32[$1893 >> 2] | 0);
            } while (0);
            $2325 = HEAP32[$info$i$i >> 2] | 0;
            if (($2325 | 0) != 211) {
             HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
             HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
             HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
             HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
             HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
             HEAP32[$1885 >> 2] = $2325;
             break L801;
            }
            __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($0, $1892, $data$i$i);
            do if ((HEAP32[$0 >> 2] | 0) == ($1871 | 0)) {
             $$pre240 = HEAP32[$info$i$i >> 2] | 0;
             if (($$pre240 | 0) != 211) {
              $2330 = $$pre240;
              break;
             }
             do if ((HEAP32[$1885 >> 2] | 0) == 128) {
              HEAP32[$info$i$i + 0 >> 2] = HEAP32[10765];
              HEAP32[$info$i$i + 4 >> 2] = HEAP32[10766];
              HEAP32[$info$i$i + 8 >> 2] = HEAP32[10767];
              HEAP32[$info$i$i + 12 >> 2] = HEAP32[10768];
              HEAP32[$info$i$i + 16 >> 2] = HEAP32[10769];
              if (!(HEAP8[$data$i$i >> 0] & 1)) {
               HEAP32[$1 + 0 >> 2] = HEAP32[$data$i$i + 0 >> 2];
               HEAP32[$1 + 4 >> 2] = HEAP32[$data$i$i + 4 >> 2];
               HEAP32[$1 + 8 >> 2] = HEAP32[$data$i$i + 8 >> 2];
              } else {
               $2336 = HEAP32[$1888 >> 2] | 0;
               $2337 = HEAP32[$1895 >> 2] | 0;
               if ($2337 >>> 0 > 4294967279) {
                label = 737;
                break L775;
               }
               if ($2337 >>> 0 < 11) {
                HEAP8[$1 >> 0] = $2337 << 1;
                $__p$0$i$i38$i$i = $1903;
               } else {
                $2343 = $2337 + 16 & -16;
                $$size$i$i31$i$i = ($2343 | 0) == 0 ? 1 : $2343;
                $2345 = _malloc($$size$i$i31$i$i) | 0;
                if (!$2345) while (1) {
                 $2347 = HEAP32[15470] | 0;
                 HEAP32[15470] = $2347 + 0;
                 if (!$2347) {
                  label = 743;
                  break L775;
                 }
                 FUNCTION_TABLE_v[$2347 & 3]();
                 $2350 = _malloc($$size$i$i31$i$i) | 0;
                 if ($2350) {
                  $$lcssa$i$i36$i$i = $2350;
                  break;
                 }
                } else $$lcssa$i$i36$i$i = $2345;
                HEAP32[$1901 >> 2] = $$lcssa$i$i36$i$i;
                HEAP32[$1 >> 2] = $2343 | 1;
                HEAP32[$1904 >> 2] = $2337;
                $__p$0$i$i38$i$i = $$lcssa$i$i36$i$i;
               }
               _memcpy($__p$0$i$i38$i$i | 0, $2336 | 0, $2337 | 0) | 0;
               HEAP8[$__p$0$i$i38$i$i + $2337 >> 0] = 0;
              }
              HEAP8[$1898 >> 0] = 0;
              HEAP8[$1899 >> 0] = 0;
              __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0, $1900, $1);
              if (HEAP8[$1898 >> 0] & 1) _free(HEAP32[$1902 >> 2] | 0);
              if (!(HEAP8[$1 >> 0] & 1)) break;
              _free(HEAP32[$1901 >> 2] | 0);
             } else {
              __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($2, $1900, $data$i$i);
              if ((HEAP32[$2 >> 2] | 0) == ($1875 | 0)) break;
              HEAP32[$info$i$i + 0 >> 2] = HEAP32[10765];
              HEAP32[$info$i$i + 4 >> 2] = HEAP32[10766];
              HEAP32[$info$i$i + 8 >> 2] = HEAP32[10767];
              HEAP32[$info$i$i + 12 >> 2] = HEAP32[10768];
              HEAP32[$info$i$i + 16 >> 2] = HEAP32[10769];
             } while (0);
             $2365 = HEAP32[$info$i$i >> 2] | 0;
             if (($2365 | 0) != 211) {
              HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
              HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
              HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
              HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
              HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
              HEAP32[$1885 >> 2] = $2365;
              break L801;
             }
             $2367 = HEAP32[$1885 >> 2] | 0;
             if (($2367 | 0) == 93) {
              HEAP32[$info$i$i + 0 >> 2] = HEAP32[10590];
              HEAP32[$info$i$i + 4 >> 2] = HEAP32[10591];
              HEAP32[$info$i$i + 8 >> 2] = HEAP32[10592];
              HEAP32[$info$i$i + 12 >> 2] = HEAP32[10593];
              HEAP32[$info$i$i + 16 >> 2] = HEAP32[10594];
              $$ph312 = 94;
             } else if (($2367 | 0) == 71) {
              HEAP32[$info$i$i + 0 >> 2] = HEAP32[10595];
              HEAP32[$info$i$i + 4 >> 2] = HEAP32[10596];
              HEAP32[$info$i$i + 8 >> 2] = HEAP32[10597];
              HEAP32[$info$i$i + 12 >> 2] = HEAP32[10598];
              HEAP32[$info$i$i + 16 >> 2] = HEAP32[10599];
              $$ph312 = 95;
             } else {
              HEAP32[$info$i$i + 0 >> 2] = HEAP32[10730];
              HEAP32[$info$i$i + 4 >> 2] = HEAP32[10731];
              HEAP32[$info$i$i + 8 >> 2] = HEAP32[10732];
              HEAP32[$info$i$i + 12 >> 2] = HEAP32[10733];
              HEAP32[$info$i$i + 16 >> 2] = HEAP32[10734];
              HEAP8[$1905 >> 0] = 1;
              HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
              HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
              HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
              HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
              HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
              HEAP32[$1885 >> 2] = 122;
              break L801;
             };
             HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
             HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
             HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
             HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
             HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
             HEAP32[$1885 >> 2] = $$ph312;
             break L801;
            } else {
             HEAP32[$info$i$i + 0 >> 2] = HEAP32[11140];
             HEAP32[$info$i$i + 4 >> 2] = HEAP32[11141];
             HEAP32[$info$i$i + 8 >> 2] = HEAP32[11142];
             HEAP32[$info$i$i + 12 >> 2] = HEAP32[11143];
             HEAP32[$info$i$i + 16 >> 2] = HEAP32[11144];
             $2330 = 204;
            } while (0);
            HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
            HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
            HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
            HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
            HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
            HEAP32[$1885 >> 2] = $2330;
            break L801;
           } else {
            $2252 = HEAP8[$data$i$i >> 0] | 0;
            $2254 = ($2252 & 1) == 0;
            if ($2254) {
             $2260 = ($2252 & 255) >>> 1;
             $2262 = $1887;
            } else {
             $2260 = HEAP32[$1895 >> 2] | 0;
             $2262 = HEAP32[$1888 >> 2] | 0;
            }
            L952 : do if ($2260) {
             $2261 = $2262 + $2260 | 0;
             $2263 = $2262;
             if (($2260 | 0) < 1) break; else $$014$i$i$i3$i$i$i = $2262;
             while (1) {
              if ((HEAP8[$$014$i$i$i3$i$i$i >> 0] | 0) == 64) break;
              $$01$be$i$i$i5$i$i$i = $$014$i$i$i3$i$i$i + 1 | 0;
              if (($$01$be$i$i$i5$i$i$i | 0) == ($2261 | 0)) break L952; else $$014$i$i$i3$i$i$i = $$01$be$i$i$i5$i$i$i;
             }
             if (($$014$i$i$i3$i$i$i | 0) == ($2261 | 0)) break;
             if (($$014$i$i$i3$i$i$i - $2263 | 0) == -1) break;
             HEAP32[$info$i$i + 0 >> 2] = HEAP32[10960];
             HEAP32[$info$i$i + 4 >> 2] = HEAP32[10961];
             HEAP32[$info$i$i + 8 >> 2] = HEAP32[10962];
             HEAP32[$info$i$i + 12 >> 2] = HEAP32[10963];
             HEAP32[$info$i$i + 16 >> 2] = HEAP32[10964];
             $2290 = 168;
             break L946;
            } while (0);
            if ($2254) {
             $2277 = ($2252 & 255) >>> 1;
             $2279 = $1887;
            } else {
             $2277 = HEAP32[$1895 >> 2] | 0;
             $2279 = HEAP32[$1888 >> 2] | 0;
            }
            L965 : do if ($2277) {
             $2278 = $2279 + $2277 | 0;
             $2280 = $2279;
             if (($2277 | 0) < 1) break; else $$014$i$i$i$i$i$i = $2279;
             while (1) {
              if ((HEAP8[$$014$i$i$i$i$i$i >> 0] | 0) == 37) break;
              $$01$be$i$i$i$i$i$i = $$014$i$i$i$i$i$i + 1 | 0;
              if (($$01$be$i$i$i$i$i$i | 0) == ($2278 | 0)) break L965; else $$014$i$i$i$i$i$i = $$01$be$i$i$i$i$i$i;
             }
             if (($$014$i$i$i$i$i$i | 0) == ($2278 | 0)) break;
             if (($$014$i$i$i$i$i$i - $2280 | 0) == -1) break;
             HEAP32[$info$i$i + 0 >> 2] = HEAP32[10965];
             HEAP32[$info$i$i + 4 >> 2] = HEAP32[10966];
             HEAP32[$info$i$i + 8 >> 2] = HEAP32[10967];
             HEAP32[$info$i$i + 12 >> 2] = HEAP32[10968];
             HEAP32[$info$i$i + 16 >> 2] = HEAP32[10969];
             $2290 = 169;
             break L946;
            } while (0);
            HEAP32[$info$i$i + 0 >> 2] = HEAP32[10950];
            HEAP32[$info$i$i + 4 >> 2] = HEAP32[10951];
            HEAP32[$info$i$i + 8 >> 2] = HEAP32[10952];
            HEAP32[$info$i$i + 12 >> 2] = HEAP32[10953];
            HEAP32[$info$i$i + 16 >> 2] = HEAP32[10954];
            $2290 = 166;
           } while (0);
           HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
           HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
           HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
           HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
           HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
           HEAP32[$1885 >> 2] = $2290;
           break L801;
          } while (0);
          HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
          HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
          HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
          HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
          HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
          HEAP32[$1885 >> 2] = $$ph300;
          break L801;
         } while (0);
         HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
         HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
         HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
         HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
         HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
         HEAP32[$1885 >> 2] = 122;
        } else {
         HEAP32[$1929 + 0 >> 2] = HEAP32[$info$i$i + 0 >> 2];
         HEAP32[$1929 + 4 >> 2] = HEAP32[$info$i$i + 4 >> 2];
         HEAP32[$1929 + 8 >> 2] = HEAP32[$info$i$i + 8 >> 2];
         HEAP32[$1929 + 12 >> 2] = HEAP32[$info$i$i + 12 >> 2];
         HEAP32[$1929 + 16 >> 2] = HEAP32[$info$i$i + 16 >> 2];
         HEAP32[$1885 >> 2] = $1972;
        } while (0);
        if (HEAP8[$data$i$i >> 0] & 1) _free(HEAP32[$1888 >> 2] | 0);
       } else if (($1930 | 0) != 210) HEAP32[$1885 >> 2] = $1930;
       $2372 = $i$01$i114 + 1 | 0;
       if ($2372 >>> 0 >= $1883 >>> 0) {
        label = 763;
        break;
       }
       $1908 = HEAP32[$1877 >> 2] | 0;
       $1910 = HEAP32[$1865 >> 2] | 0;
       $i$01$i114 = $2372;
      }
      if ((label | 0) == 546) {
       $1914 = ___cxa_allocate_exception(8) | 0;
       HEAP32[$1914 >> 2] = 61920;
       $1915 = $1914 + 4 | 0;
       $1916 = _malloc(19) | 0;
       if ($1916) {
        $$lcssa$i$i119 = $1916;
        HEAP32[$$lcssa$i$i119 >> 2] = 6;
        $1924 = $$lcssa$i$i119 + 4 | 0;
        HEAP32[$1924 >> 2] = 6;
        $1925 = $$lcssa$i$i119 + 8 | 0;
        HEAP32[$1925 >> 2] = 0;
        $1926 = $$lcssa$i$i119 + 12 | 0;
        HEAP8[$1926 + 0 >> 0] = HEAP8[50728] | 0;
        HEAP8[$1926 + 1 >> 0] = HEAP8[50729] | 0;
        HEAP8[$1926 + 2 >> 0] = HEAP8[50730] | 0;
        HEAP8[$1926 + 3 >> 0] = HEAP8[50731] | 0;
        HEAP8[$1926 + 4 >> 0] = HEAP8[50732] | 0;
        HEAP8[$1926 + 5 >> 0] = HEAP8[50733] | 0;
        HEAP8[$1926 + 6 >> 0] = HEAP8[50734] | 0;
        HEAP32[$1915 >> 2] = $1926;
        HEAP32[$1914 >> 2] = 62064;
        ___cxa_throw($1914 | 0, 62104, 96);
       }
       while (1) {
        $1918 = HEAP32[15470] | 0;
        HEAP32[15470] = $1918 + 0;
        if (!$1918) {
         label = 549;
         break;
        }
        FUNCTION_TABLE_v[$1918 & 3]();
        $1921 = _malloc(19) | 0;
        if ($1921) {
         $$lcssa$i$i119 = $1921;
         label = 550;
         break;
        }
       }
       if ((label | 0) == 549) {
        $1923 = ___cxa_allocate_exception(4) | 0;
        HEAP32[$1923 >> 2] = 61776;
        ___cxa_throw($1923 | 0, 61824, 94);
       } else if ((label | 0) == 550) {
        HEAP32[$$lcssa$i$i119 >> 2] = 6;
        $1924 = $$lcssa$i$i119 + 4 | 0;
        HEAP32[$1924 >> 2] = 6;
        $1925 = $$lcssa$i$i119 + 8 | 0;
        HEAP32[$1925 >> 2] = 0;
        $1926 = $$lcssa$i$i119 + 12 | 0;
        HEAP8[$1926 + 0 >> 0] = HEAP8[50728] | 0;
        HEAP8[$1926 + 1 >> 0] = HEAP8[50729] | 0;
        HEAP8[$1926 + 2 >> 0] = HEAP8[50730] | 0;
        HEAP8[$1926 + 3 >> 0] = HEAP8[50731] | 0;
        HEAP8[$1926 + 4 >> 0] = HEAP8[50732] | 0;
        HEAP8[$1926 + 5 >> 0] = HEAP8[50733] | 0;
        HEAP8[$1926 + 6 >> 0] = HEAP8[50734] | 0;
        HEAP32[$1915 >> 2] = $1926;
        HEAP32[$1914 >> 2] = 62064;
        ___cxa_throw($1914 | 0, 62104, 96);
       }
      } else if ((label | 0) == 554) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 560) {
       $1948 = ___cxa_allocate_exception(4) | 0;
       HEAP32[$1948 >> 2] = 61776;
       ___cxa_throw($1948 | 0, 61824, 94);
      } else if ((label | 0) == 648) {
       $2174 = ___cxa_allocate_exception(8) | 0;
       HEAP32[$2174 >> 2] = 61920;
       $2175 = $2174 + 4 | 0;
       $2176 = _malloc(19) | 0;
       if ($2176) {
        $$lcssa$i$i$i$i = $2176;
        HEAP32[$$lcssa$i$i$i$i >> 2] = 6;
        $2184 = $$lcssa$i$i$i$i + 4 | 0;
        HEAP32[$2184 >> 2] = 6;
        $2185 = $$lcssa$i$i$i$i + 8 | 0;
        HEAP32[$2185 >> 2] = 0;
        $2186 = $$lcssa$i$i$i$i + 12 | 0;
        HEAP8[$2186 + 0 >> 0] = HEAP8[50728] | 0;
        HEAP8[$2186 + 1 >> 0] = HEAP8[50729] | 0;
        HEAP8[$2186 + 2 >> 0] = HEAP8[50730] | 0;
        HEAP8[$2186 + 3 >> 0] = HEAP8[50731] | 0;
        HEAP8[$2186 + 4 >> 0] = HEAP8[50732] | 0;
        HEAP8[$2186 + 5 >> 0] = HEAP8[50733] | 0;
        HEAP8[$2186 + 6 >> 0] = HEAP8[50734] | 0;
        HEAP32[$2175 >> 2] = $2186;
        HEAP32[$2174 >> 2] = 62064;
        ___cxa_throw($2174 | 0, 62104, 96);
       }
       while (1) {
        $2178 = HEAP32[15470] | 0;
        HEAP32[15470] = $2178 + 0;
        if (!$2178) {
         label = 651;
         break;
        }
        FUNCTION_TABLE_v[$2178 & 3]();
        $2181 = _malloc(19) | 0;
        if ($2181) {
         $$lcssa$i$i$i$i = $2181;
         label = 652;
         break;
        }
       }
       if ((label | 0) == 651) {
        $2183 = ___cxa_allocate_exception(4) | 0;
        HEAP32[$2183 >> 2] = 61776;
        ___cxa_throw($2183 | 0, 61824, 94);
       } else if ((label | 0) == 652) {
        HEAP32[$$lcssa$i$i$i$i >> 2] = 6;
        $2184 = $$lcssa$i$i$i$i + 4 | 0;
        HEAP32[$2184 >> 2] = 6;
        $2185 = $$lcssa$i$i$i$i + 8 | 0;
        HEAP32[$2185 >> 2] = 0;
        $2186 = $$lcssa$i$i$i$i + 12 | 0;
        HEAP8[$2186 + 0 >> 0] = HEAP8[50728] | 0;
        HEAP8[$2186 + 1 >> 0] = HEAP8[50729] | 0;
        HEAP8[$2186 + 2 >> 0] = HEAP8[50730] | 0;
        HEAP8[$2186 + 3 >> 0] = HEAP8[50731] | 0;
        HEAP8[$2186 + 4 >> 0] = HEAP8[50732] | 0;
        HEAP8[$2186 + 5 >> 0] = HEAP8[50733] | 0;
        HEAP8[$2186 + 6 >> 0] = HEAP8[50734] | 0;
        HEAP32[$2175 >> 2] = $2186;
        HEAP32[$2174 >> 2] = 62064;
        ___cxa_throw($2174 | 0, 62104, 96);
       }
      } else if ((label | 0) == 714) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 720) {
       $2314 = ___cxa_allocate_exception(4) | 0;
       HEAP32[$2314 >> 2] = 61776;
       ___cxa_throw($2314 | 0, 61824, 94);
      } else if ((label | 0) == 737) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 743) {
       $2352 = ___cxa_allocate_exception(4) | 0;
       HEAP32[$2352 >> 2] = 61776;
       ___cxa_throw($2352 | 0, 61824, 94);
      } else if ((label | 0) == 763) {
       $2374 = HEAP32[$1873 >> 2] | 0;
       break;
      }
     } while (0);
     __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($2374);
     __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(HEAP32[$1869 >> 2] | 0);
     __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(HEAP32[$1866 >> 2] | 0);
     $2377 = HEAP32[$221 >> 2] | 0;
     __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(HEAP32[$56 >> 2] | 0);
     __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(HEAP32[$52 >> 2] | 0);
     __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(HEAP32[$48 >> 2] | 0);
     __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(HEAP32[$44 >> 2] | 0);
     if (!(HEAP8[$42 >> 0] & 1)) {
      STACKTOP = sp;
      return $2377 | 0;
     }
     _free(HEAP32[$scanner + 40 >> 2] | 0);
     STACKTOP = sp;
     return $2377 | 0;
    }
   } else if ((label | 0) == 34) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 40) {
    $160 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$160 >> 2] = 61776;
    ___cxa_throw($160 | 0, 61824, 94);
   }
  } else if ((label | 0) == 19) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 25) {
   $125 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$125 >> 2] = 61776;
   ___cxa_throw($125 | 0, 61824, 94);
  }
 } else if ((label | 0) == 4) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 10) {
  $87 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$87 >> 2] = 61776;
  ___cxa_throw($87 | 0, 61824, 94);
 }
 return 0;
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i102 = 0, $$0$i$i$i110 = 0, $$0$i$i$i118 = 0, $$0$i$i$i127 = 0, $$0$i$i$i137 = 0, $$0$i$i$i154 = 0, $$0$i$i$i164 = 0, $$0$i$i$i180 = 0, $$0$i$i$i19 = 0, $$0$i$i$i190 = 0, $$0$i$i$i198 = 0, $$0$i$i$i213 = 0, $$0$i$i$i221 = 0, $$0$i$i$i253 = 0, $$0$i$i$i27 = 0, $$0$i$i$i34 = 0, $$0$i$i$i37 = 0, $$0$i$i$i42 = 0, $$0$i$i$i52 = 0, $$0$i$i$i60 = 0, $$0$i$i$i70 = 0, $$0$i$i$i78 = 0, $$0$i$i$i86 = 0, $$0$i$i$i94 = 0, $$0$i38 = 0, $$01$i$i = 0, $$02$i$i$i = 0, $$03$i = 0, $$03$i$i = 0, $$03$i135 = 0, $$03$i152 = 0, $$03$i160 = 0, $$03$i177 = 0, $$03$i205 = 0, $$03$i55 = 0, $$03$i73 = 0, $$08$i = 0, $$1$i$i = 0, $$1$i328 = 0, $$1$i39 = 0, $$12$i$i = 0, $$13$i324$ph = 0, $$14$i$i = 0, $$2$i$i = 0, $$2$i40 = 0, $$in = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i277 = 0, $$pre$i$i$i12$i = 0, $$pre$i$i$i28$i = 0, $$pre$i$i$i32$i = 0, $$pre$i$i$i48$i = 0, $$pre354 = 0, $$pre516$pre = 0, $$sroa$4 = 0, $$sroa$4241 = 0, $$sroa$5 = 0, $$sroa$7 = 0, $0 = 0, $1 = 0, $10 = 0, $1003 = 0, $1004 = 0, $1007 = 0, $1008 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1020 = 0, $1023 = 0, $1027 = 0, $103 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1043 = 0, $1044 = 0, $1049 = 0, $1051 = 0, $1054 = 0, $1058 = 0, $1061 = 0, $1066 = 0, $1067 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1073 = 0, $1074 = 0, $1083 = 0, $1086 = 0, $1090 = 0, $1092 = 0, $1093 = 0, $1095 = 0, $11 = 0, $110 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1110 = 0, $1115 = 0, $1117 = 0, $1120 = 0, $1124 = 0, $1127 = 0, $113 = 0, $1132 = 0, $1133 = 0, $1136 = 0, $1137 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1149 = 0, $1152 = 0, $1156 = 0, $1167 = 0, $1168 = 0, $1173 = 0, $1175 = 0, $1178 = 0, $1182 = 0, $1185 = 0, $1190 = 0, $1191 = 0, $1194 = 0, $1195 = 0, $1197 = 0, $1198 = 0, $12 = 0, $1207 = 0, $1210 = 0, $1216 = 0, $1218 = 0, $122 = 0, $1222 = 0, $1223 = 0, $1225 = 0, $1234 = 0, $1236 = 0, $1239 = 0, $124 = 0, $1243 = 0, $1245 = 0, $1246 = 0, $1249 = 0, $1252 = 0, $1255 = 0, $1256 = 0, $126 = 0, $1264 = 0, $1266 = 0, $1269 = 0, $127 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $128 = 0, $1283 = 0, $1285 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1291 = 0, $1298 = 0, $13 = 0, $130 = 0, $1302 = 0, $1304 = 0, $1305 = 0, $1308 = 0, $1311 = 0, $1314 = 0, $1315 = 0, $132 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1339 = 0, $1341 = 0, $1342 = 0, $1344 = 0, $1349 = 0, $1350 = 0, $1351 = 0, $1361 = 0, $1363 = 0, $1367 = 0, $1375 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1409 = 0, $1415 = 0, $1416 = 0, $1419 = 0, $142 = 0, $1422 = 0, $1431 = 0, $1432 = 0, $1443 = 0, $1449 = 0, $1450 = 0, $1451 = 0, $1457 = 0, $1459 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1465 = 0, $1472 = 0, $1476 = 0, $1478 = 0, $1479 = 0, $1482 = 0, $1485 = 0, $1488 = 0, $1489 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1516 = 0, $1518 = 0, $1519 = 0, $1521 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $153 = 0, $1538 = 0, $1540 = 0, $1544 = 0, $155 = 0, $1552 = 0, $1559 = 0, $1560 = 0, $1561 = 0, $1572 = 0, $1574 = 0, $1575 = 0, $1577 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1586 = 0, $1587 = 0, $1599 = 0, $16 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1608 = 0, $1612 = 0, $1615 = 0, $1619 = 0, $1620 = 0, $1622 = 0, $1625 = 0, $1631 = 0, $1634 = 0, $1646 = 0, $1650 = 0, $1651 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1679 = 0, $1680 = 0, $1689 = 0, $1695 = 0, $1696 = 0, $1699 = 0, $17 = 0, $170 = 0, $1702 = 0, $171 = 0, $1711 = 0, $1712 = 0, $172 = 0, $1723 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1737 = 0, $1739 = 0, $174 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1745 = 0, $175 = 0, $1752 = 0, $1756 = 0, $1758 = 0, $1759 = 0, $1762 = 0, $1765 = 0, $1768 = 0, $1769 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1793 = 0, $1795 = 0, $1796 = 0, $1798 = 0, $18 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1815 = 0, $1817 = 0, $1821 = 0, $1829 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $1840 = 0, $1841 = 0, $1853 = 0, $1854 = 0, $1863 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1873 = 0, $1876 = 0, $188 = 0, $1885 = 0, $1886 = 0, $1897 = 0, $19 = 0, $1903 = 0, $1904 = 0, $1910 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1925 = 0, $1929 = 0, $1931 = 0, $1932 = 0, $1935 = 0, $1938 = 0, $1941 = 0, $1942 = 0, $1949 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1967 = 0, $1968 = 0, $197 = 0, $1977 = 0, $1983 = 0, $1984 = 0, $1987 = 0, $1990 = 0, $1999 = 0, $2 = 0, $20 = 0, $2000 = 0, $2016 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2027 = 0, $2029 = 0, $203 = 0, $2037 = 0, $2038 = 0, $204 = 0, $2040 = 0, $2042 = 0, $2043 = 0, $2052 = 0, $2054 = 0, $2057 = 0, $2061 = 0, $2063 = 0, $2064 = 0, $2067 = 0, $207 = 0, $2070 = 0, $2073 = 0, $2074 = 0, $2082 = 0, $2084 = 0, $2089 = 0, $2091 = 0, $2093 = 0, $2095 = 0, $2096 = 0, $21 = 0, $210 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2110 = 0, $2111 = 0, $2122 = 0, $2124 = 0, $2125 = 0, $2127 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2139 = 0, $2140 = 0, $2152 = 0, $2156 = 0, $2159 = 0, $2161 = 0, $2169 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2175 = 0, $2176 = 0, $2178 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2192 = 0, $22 = 0, $220 = 0, $2203 = 0, $2205 = 0, $2206 = 0, $2214 = 0, $2217 = 0, $2220 = 0, $2222 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2237 = 0, $2238 = 0, $2240 = 0, $2250 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2266 = 0, $2267 = 0, $2269 = 0, $2270 = 0, $2272 = 0, $2275 = 0, $2277 = 0, $2281 = 0, $2283 = 0, $2284 = 0, $2288 = 0, $2290 = 0, $2293 = 0, $2294 = 0, $2296 = 0, $23 = 0, $2306 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2313 = 0, $2322 = 0, $2324 = 0, $2327 = 0, $233 = 0, $2331 = 0, $2333 = 0, $2334 = 0, $2337 = 0, $2340 = 0, $2343 = 0, $2344 = 0, $2352 = 0, $2354 = 0, $236 = 0, $2362 = 0, $2366 = 0, $2370 = 0, $2372 = 0, $2376 = 0, $2377 = 0, $2379 = 0, $238 = 0, $2388 = 0, $2390 = 0, $2393 = 0, $2397 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2403 = 0, $2406 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2418 = 0, $2420 = 0, $2423 = 0, $2425 = 0, $2427 = 0, $2428 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2443 = 0, $2445 = 0, $245 = 0, $2453 = 0, $2454 = 0, $2456 = 0, $2459 = 0, $2460 = 0, $2461 = 0, $2463 = 0, $247 = 0, $2472 = 0, $2474 = 0, $2477 = 0, $248 = 0, $2481 = 0, $2483 = 0, $2484 = 0, $2487 = 0, $2490 = 0, $2493 = 0, $2494 = 0, $25 = 0, $2502 = 0, $2504 = 0, $2509 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2519 = 0, $2520 = 0, $2521 = 0, $2527 = 0, $2529 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2535 = 0, $2542 = 0, $2546 = 0, $2548 = 0, $2549 = 0, $2552 = 0, $2555 = 0, $2558 = 0, $2559 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2584 = 0, $2585 = 0, $259 = 0, $2594 = 0, $26 = 0, $2600 = 0, $2601 = 0, $2604 = 0, $2607 = 0, $261 = 0, $2616 = 0, $2617 = 0, $262 = 0, $2628 = 0, $2632 = 0, $2634 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2641 = 0, $2650 = 0, $2652 = 0, $2655 = 0, $2659 = 0, $2661 = 0, $2662 = 0, $2665 = 0, $2668 = 0, $2671 = 0, $2672 = 0, $2680 = 0, $2682 = 0, $2691 = 0, $2692 = 0, $2694 = 0, $27 = 0, $2700 = 0, $2701 = 0, $2705 = 0, $2709 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2716 = 0, $272 = 0, $2724 = 0, $2725 = 0, $273 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2744 = 0, $2745 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $2751 = 0, $2754 = 0, $2756 = 0, $2760 = 0, $2762 = 0, $2763 = 0, $2767 = 0, $2769 = 0, $2772 = 0, $2773 = 0, $2775 = 0, $2785 = 0, $2788 = 0, $2789 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $28 = 0, $2800 = 0, $2802 = 0, $2806 = 0, $2809 = 0, $2810 = 0, $2812 = 0, $2820 = 0, $2821 = 0, $2839 = 0, $284 = 0, $2841 = 0, $2845 = 0, $2846 = 0, $2848 = 0, $2857 = 0, $2859 = 0, $2862 = 0, $2866 = 0, $2868 = 0, $2869 = 0, $2872 = 0, $2875 = 0, $2878 = 0, $2879 = 0, $2887 = 0, $2889 = 0, $2892 = 0, $2894 = 0, $2898 = 0, $29 = 0, $2900 = 0, $2904 = 0, $2905 = 0, $2907 = 0, $2916 = 0, $2918 = 0, $292 = 0, $2921 = 0, $2925 = 0, $2927 = 0, $2928 = 0, $2931 = 0, $2934 = 0, $2937 = 0, $2938 = 0, $2946 = 0, $2948 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $297 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $303 = 0, $304 = 0, $31 = 0, $315 = 0, $317 = 0, $318 = 0, $32 = 0, $320 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $34 = 0, $340 = 0, $346 = 0, $349 = 0, $35 = 0, $356 = 0, $357 = 0, $36 = 0, $363 = 0, $364 = 0, $364$phi = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $379 = 0, $38 = 0, $380 = 0, $39 = 0, $396 = 0, $4 = 0, $40 = 0, $401 = 0, $402 = 0, $404 = 0, $405 = 0, $41 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $42 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $43 = 0, $430 = 0, $432 = 0, $435 = 0, $439 = 0, $44 = 0, $442 = 0, $447 = 0, $448 = 0, $45 = 0, $451 = 0, $452 = 0, $454 = 0, $455 = 0, $46 = 0, $464 = 0, $467 = 0, $470 = 0, $48 = 0, $481 = 0, $483 = 0, $484 = 0, $486 = 0, $49 = 0, $494 = 0, $495 = 0, $496 = 0, $5 = 0, $506 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $529 = 0, $53 = 0, $534 = 0, $536 = 0, $539 = 0, $543 = 0, $546 = 0, $55 = 0, $551 = 0, $552 = 0, $555 = 0, $556 = 0, $558 = 0, $559 = 0, $568 = 0, $57 = 0, $571 = 0, $575 = 0, $592 = 0, $594 = 0, $598 = 0, $599 = 0, $6 = 0, $601 = 0, $61 = 0, $610 = 0, $612 = 0, $615 = 0, $619 = 0, $62 = 0, $621 = 0, $622 = 0, $625 = 0, $628 = 0, $631 = 0, $632 = 0, $640 = 0, $642 = 0, $645 = 0, $646 = 0, $649 = 0, $650 = 0, $653 = 0, $655 = 0, $658 = 0, $659 = 0, $661 = 0, $670 = 0, $672 = 0, $675 = 0, $679 = 0, $68 = 0, $681 = 0, $682 = 0, $685 = 0, $688 = 0, $69 = 0, $691 = 0, $692 = 0, $7 = 0, $700 = 0, $702 = 0, $706 = 0, $710 = 0, $712 = 0, $714 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $728 = 0, $729 = 0, $732 = 0, $736 = 0, $745 = 0, $746 = 0, $75 = 0, $752 = 0, $756 = 0, $763 = 0, $766 = 0, $768 = 0, $77 = 0, $773 = 0, $774 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $786 = 0, $79 = 0, $791 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $81 = 0, $813 = 0, $815 = 0, $819 = 0, $82 = 0, $820 = 0, $822 = 0, $831 = 0, $833 = 0, $836 = 0, $840 = 0, $842 = 0, $843 = 0, $846 = 0, $849 = 0, $85 = 0, $852 = 0, $853 = 0, $861 = 0, $863 = 0, $866 = 0, $867 = 0, $87 = 0, $870 = 0, $871 = 0, $874 = 0, $876 = 0, $879 = 0, $880 = 0, $882 = 0, $89 = 0, $891 = 0, $893 = 0, $896 = 0, $9 = 0, $900 = 0, $902 = 0, $903 = 0, $906 = 0, $909 = 0, $91 = 0, $912 = 0, $913 = 0, $921 = 0, $923 = 0, $927 = 0, $928 = 0, $930 = 0, $932 = 0, $933 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $949 = 0, $950 = 0, $951 = 0, $952 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $966 = 0, $97 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $981 = 0, $986 = 0, $988 = 0, $991 = 0, $995 = 0, $998 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $__v$i$i$i = 0, $args = 0, $cv$0 = 0, $cv$1 = 0, $cv$2 = 0, $k$0$i418 = 0, $k$0446 = 0, $k11$0436 = 0, $k15$0440 = 0, $k2$0$i419 = 0, $k20$0443 = 0, $k5$0426 = 0, $k8$0430 = 0, $l$04$i = 0, $l$04$i134 = 0, $l$04$i151 = 0, $l$04$i159 = 0, $l$04$i176 = 0, $l$04$i204 = 0, $l$04$i54 = 0, $l$04$i72 = 0, $num1$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $proto = 0, $r$05$i = 0, $r$05$i133 = 0, $r$05$i150 = 0, $r$05$i158 = 0, $r$05$i175 = 0, $r$05$i203 = 0, $r$05$i53 = 0, $r$05$i71 = 0, $ref_qual$0$i$ph$ph = 0, $ref_qual$0$i$ph425 = 0, $t$0$i = 0, $t$1$i$be = 0, $t$1$i$ph$ph = 0, $t$1$i$ph424 = 0, $t$1$i421 = 0, $t12$0$i = 0, $template_args = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752 | 0;
 $__v$i$i$i = sp + 320 | 0;
 $0 = sp + 632 | 0;
 $1 = sp + 4 | 0;
 $2 = sp + 588 | 0;
 $3 = sp + 256 | 0;
 $$sroa$7 = sp + 280 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 556 | 0;
 $num1$i = sp + 56 | 0;
 $6 = sp + 68 | 0;
 $7 = sp + 80 | 0;
 $8 = sp + 92 | 0;
 $9 = sp + 104 | 0;
 $10 = sp + 120 | 0;
 $11 = sp + 128 | 0;
 $12 = sp + 552 | 0;
 $13 = sp + 144 | 0;
 $14 = sp + 160 | 0;
 $15 = sp + 168 | 0;
 $16 = sp + 184 | 0;
 $17 = sp + 192 | 0;
 $18 = sp + 208 | 0;
 $19 = sp + 600 | 0;
 $20 = sp + 616 | 0;
 $21 = sp + 656 | 0;
 $22 = sp + 672 | 0;
 $args = sp + 704 | 0;
 $23 = sp + 304 | 0;
 $24 = sp + 716 | 0;
 $type = sp + 344 | 0;
 $25 = sp + 356 | 0;
 $26 = sp + 528 | 0;
 $$sroa$4241 = sp + 720 | 0;
 $27 = sp + 372 | 0;
 $28 = sp + 384 | 0;
 $proto = sp + 396 | 0;
 $29 = sp + 408 | 0;
 $$sroa$4 = sp + 727 | 0;
 $30 = sp + 448 | 0;
 $31 = sp + 460 | 0;
 $32 = sp + 472 | 0;
 $33 = sp + 488 | 0;
 $$sroa$5 = sp + 734 | 0;
 $34 = sp + 516 | 0;
 $35 = sp + 16 | 0;
 $36 = sp;
 $37 = sp + 568 | 0;
 $38 = sp + 584 | 0;
 $template_args = sp + 212 | 0;
 $39 = sp + 224 | 0;
 $40 = sp + 612 | 0;
 $41 = sp + 240 | 0;
 $42 = sp + 668 | 0;
 $43 = sp + 688 | 0;
 $44 = sp + 512 | 0;
 $45 = sp + 432 | 0;
 $46 = sp + 368 | 0;
 if (($first | 0) == ($last | 0)) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $48 = HEAP8[$first >> 0] | 0;
 $49 = $48 << 24 >> 24;
 if (($49 | 0) == 75 | ($49 | 0) == 86 | ($49 | 0) == 114) {
  if ($48 << 24 >> 24 == 114) {
   $51 = $first + 1 | 0;
   $$0$i38 = $51;
   $53 = HEAP8[$51 >> 0] | 0;
   $cv$0 = 4;
  } else {
   $$0$i38 = $first;
   $53 = $48;
   $cv$0 = 0;
  }
  if ($53 << 24 >> 24 == 86) {
   $55 = $$0$i38 + 1 | 0;
   $$1$i39 = $55;
   $57 = HEAP8[$55 >> 0] | 0;
   $cv$1 = $cv$0 | 2;
  } else {
   $$1$i39 = $$0$i38;
   $57 = $53;
   $cv$1 = $cv$0;
  }
  if ($57 << 24 >> 24 == 75) {
   $$2$i40 = $$1$i39 + 1 | 0;
   $cv$2 = $cv$1 | 1;
  } else {
   $$2$i40 = $$1$i39;
   $cv$2 = $cv$1;
  }
  if (($$2$i40 | 0) == ($first | 0)) {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $61 = HEAP8[$$2$i40 >> 0] | 0;
  $62 = $db + 4 | 0;
  $68 = ((HEAP32[$62 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
  $69 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$2$i40, $last, $db) | 0;
  $75 = ((HEAP32[$62 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
  if (($69 | 0) == ($$2$i40 | 0)) {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $77 = $61 << 24 >> 24 == 70;
  $78 = $db + 20 | 0;
  $79 = HEAP32[$78 >> 2] | 0;
  if ($77) {
   $80 = $79 + -16 | 0;
   $82 = $79;
   do {
    $81 = $82 + -16 | 0;
    HEAP32[$78 >> 2] = $81;
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($81);
    $82 = HEAP32[$78 >> 2] | 0;
   } while (($82 | 0) != ($80 | 0));
   $91 = $80;
  } else $91 = $79;
  $85 = $db + 16 | 0;
  $87 = HEAP32[$db + 12 >> 2] | 0;
  $89 = HEAP32[$db + 24 >> 2] | 0;
  if ($91 >>> 0 < $89 >>> 0) {
   if (!$91) $97 = 0; else {
    HEAP32[$91 >> 2] = 0;
    HEAP32[$91 + 4 >> 2] = 0;
    HEAP32[$91 + 8 >> 2] = 0;
    HEAP32[$91 + 12 >> 2] = $87;
    $97 = HEAP32[$78 >> 2] | 0;
   }
   HEAP32[$78 >> 2] = $97 + 16;
  } else {
   $101 = HEAP32[$85 >> 2] | 0;
   $103 = $91 - $101 >> 4;
   $104 = $103 + 1 | 0;
   if (($104 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   $107 = $89 - $101 | 0;
   if ($107 >> 4 >>> 0 < 1073741823) {
    $110 = $107 >> 3;
    $$0$i$i$i52 = $110 >>> 0 < $104 >>> 0 ? $104 : $110;
   } else $$0$i$i$i52 = 2147483647;
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i52, $103, $db + 28 | 0);
   $113 = $__v$i$i$i + 8 | 0;
   $114 = HEAP32[$113 >> 2] | 0;
   if ($114) {
    HEAP32[$114 >> 2] = 0;
    HEAP32[$114 + 4 >> 2] = 0;
    HEAP32[$114 + 8 >> 2] = 0;
    HEAP32[$114 + 12 >> 2] = $87;
   }
   HEAP32[$113 >> 2] = $114 + 16;
   __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($85, $__v$i$i$i);
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
  }
  if ($68 >>> 0 >= $75 >>> 0) {
   $$0 = $69;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $122 = ($cv$2 & 1 | 0) == 0;
  $124 = ($cv$2 & 2 | 0) == 0;
  $126 = ($cv$2 & 4 | 0) == 0;
  $127 = $__v$i$i$i + 8 | 0;
  $k$0446 = $68;
  while (1) {
   if ($77) {
    $128 = HEAP32[$db >> 2] | 0;
    $129 = $128 + ($k$0446 * 24 | 0) + 12 | 0;
    $130 = HEAP8[$129 >> 0] | 0;
    $132 = ($130 & 1) == 0;
    if ($132) {
     $$in = ($130 & 255) >>> 1;
     $142 = $129 + 1 | 0;
    } else {
     $$in = HEAP32[$128 + ($k$0446 * 24 | 0) + 16 >> 2] | 0;
     $142 = HEAP32[$128 + ($k$0446 * 24 | 0) + 20 >> 2] | 0;
    }
    $140 = $$in + -2 | 0;
    if ((HEAP8[$142 + $140 >> 0] | 0) == 38) $p$0 = $$in + -3 | 0; else {
     if ($132) {
      $153 = ($130 & 255) >>> 1;
      $155 = $129 + 1 | 0;
     } else {
      $153 = HEAP32[$128 + ($k$0446 * 24 | 0) + 16 >> 2] | 0;
      $155 = HEAP32[$128 + ($k$0446 * 24 | 0) + 20 >> 2] | 0;
     }
     $p$0 = (HEAP8[$155 + ($153 + -1) >> 0] | 0) == 38 ? $140 : $$in;
    }
    if ($122) $p$1 = $p$0; else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($129, $p$0, 58848, 6) | 0;
     $p$1 = $p$0 + 6 | 0;
    }
    if ($124) $p$2 = $p$1; else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$db >> 2] | 0) + ($k$0446 * 24 | 0) + 12 | 0, $p$1, 58856, 9) | 0;
     $p$2 = $p$1 + 9 | 0;
    }
    if (!$126) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$db >> 2] | 0) + ($k$0446 * 24 | 0) + 12 | 0, $p$2, 58872, 9) | 0;
   } else {
    if (!$122) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$db >> 2] | 0) + ($k$0446 * 24 | 0) | 0, 58848, 6) | 0;
    if (!$124) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$db >> 2] | 0) + ($k$0446 * 24 | 0) | 0, 58856, 9) | 0;
    if (!$126) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$db >> 2] | 0) + ($k$0446 * 24 | 0) | 0, 58872, 9) | 0;
   }
   $170 = HEAP32[$78 >> 2] | 0;
   $171 = $170 + -16 | 0;
   $172 = HEAP32[$db >> 2] | 0;
   $173 = $172 + ($k$0446 * 24 | 0) | 0;
   $174 = $170 + -12 | 0;
   $175 = HEAP32[$174 >> 2] | 0;
   if (($175 | 0) == (HEAP32[$170 + -8 >> 2] | 0)) {
    $203 = ($175 - (HEAP32[$171 >> 2] | 0) | 0) / 24 | 0;
    $204 = $203 + 1 | 0;
    if (($204 | 0) < 0) {
     label = 60;
     break;
    }
    if ($203 >>> 0 < 1073741823) {
     $207 = $203 << 1;
     $$0$i$i$i60 = $207 >>> 0 < $204 >>> 0 ? $204 : $207;
    } else $$0$i$i$i60 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i60, $203, $170 + -4 | 0);
    $210 = HEAP32[$127 >> 2] | 0;
    do if ($210) {
     if (!(HEAP8[$173 >> 0] & 1)) {
      HEAP32[$210 + 0 >> 2] = HEAP32[$173 + 0 >> 2];
      HEAP32[$210 + 4 >> 2] = HEAP32[$173 + 4 >> 2];
      HEAP32[$210 + 8 >> 2] = HEAP32[$173 + 8 >> 2];
     } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($210, HEAP32[$172 + ($k$0446 * 24 | 0) + 8 >> 2] | 0, HEAP32[$172 + ($k$0446 * 24 | 0) + 4 >> 2] | 0);
     $219 = $210 + 12 | 0;
     $220 = $172 + ($k$0446 * 24 | 0) + 12 | 0;
     if (!(HEAP8[$220 >> 0] & 1)) {
      HEAP32[$219 + 0 >> 2] = HEAP32[$220 + 0 >> 2];
      HEAP32[$219 + 4 >> 2] = HEAP32[$220 + 4 >> 2];
      HEAP32[$219 + 8 >> 2] = HEAP32[$220 + 8 >> 2];
      break;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($219, HEAP32[$172 + ($k$0446 * 24 | 0) + 20 >> 2] | 0, HEAP32[$172 + ($k$0446 * 24 | 0) + 16 >> 2] | 0);
      break;
     }
    } while (0);
    HEAP32[$127 >> 2] = $210 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($171, $__v$i$i$i);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
   } else {
    if (!$175) $197 = 0; else {
     if (!(HEAP8[$173 >> 0] & 1)) {
      HEAP32[$175 + 0 >> 2] = HEAP32[$173 + 0 >> 2];
      HEAP32[$175 + 4 >> 2] = HEAP32[$173 + 4 >> 2];
      HEAP32[$175 + 8 >> 2] = HEAP32[$173 + 8 >> 2];
     } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($175, HEAP32[$172 + ($k$0446 * 24 | 0) + 8 >> 2] | 0, HEAP32[$172 + ($k$0446 * 24 | 0) + 4 >> 2] | 0);
     $187 = $175 + 12 | 0;
     $188 = $172 + ($k$0446 * 24 | 0) + 12 | 0;
     if (!(HEAP8[$188 >> 0] & 1)) {
      HEAP32[$187 + 0 >> 2] = HEAP32[$188 + 0 >> 2];
      HEAP32[$187 + 4 >> 2] = HEAP32[$188 + 4 >> 2];
      HEAP32[$187 + 8 >> 2] = HEAP32[$188 + 8 >> 2];
     } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($187, HEAP32[$172 + ($k$0446 * 24 | 0) + 20 >> 2] | 0, HEAP32[$172 + ($k$0446 * 24 | 0) + 16 >> 2] | 0);
     $197 = HEAP32[$174 >> 2] | 0;
    }
    HEAP32[$174 >> 2] = $197 + 24;
   }
   $k$0446 = $k$0446 + 1 | 0;
   if ($k$0446 >>> 0 >= $75 >>> 0) {
    $$0 = $69;
    label = 920;
    break;
   }
  }
  if ((label | 0) == 60) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 920) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $231 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 if (($231 | 0) != ($first | 0)) {
  $$0 = $231;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $233 = HEAP8[$first >> 0] | 0;
 L113 : do switch ($233 << 24 >> 24 | 0) {
 case 77:
  {
   if ($233 << 24 >> 24 == 77) {
    $927 = $first + 1 | 0;
    $928 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($927, $last, $db) | 0;
    if (($928 | 0) == ($927 | 0)) $$08$i = $first; else {
     $930 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($928, $last, $db) | 0;
     if (($930 | 0) == ($928 | 0)) $$08$i = $first; else {
      $932 = $db + 4 | 0;
      $933 = HEAP32[$932 >> 2] | 0;
      if ((($933 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$08$i = $first; else {
       $940 = $933 + -24 | 0;
       HEAP32[$__v$i$i$i + 0 >> 2] = HEAP32[$940 + 0 >> 2];
       HEAP32[$__v$i$i$i + 4 >> 2] = HEAP32[$940 + 4 >> 2];
       HEAP32[$__v$i$i$i + 8 >> 2] = HEAP32[$940 + 8 >> 2];
       HEAP32[$940 + 0 >> 2] = 0;
       HEAP32[$940 + 4 >> 2] = 0;
       HEAP32[$940 + 8 >> 2] = 0;
       $941 = $__v$i$i$i + 12 | 0;
       $942 = $933 + -12 | 0;
       HEAP32[$941 + 0 >> 2] = HEAP32[$942 + 0 >> 2];
       HEAP32[$941 + 4 >> 2] = HEAP32[$942 + 4 >> 2];
       HEAP32[$941 + 8 >> 2] = HEAP32[$942 + 8 >> 2];
       HEAP32[$942 + 0 >> 2] = 0;
       HEAP32[$942 + 4 >> 2] = 0;
       HEAP32[$942 + 8 >> 2] = 0;
       $943 = HEAP32[$932 >> 2] | 0;
       $944 = $943 + -24 | 0;
       $946 = $943;
       do {
        $945 = $946 + -24 | 0;
        HEAP32[$932 >> 2] = $945;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($945);
        $946 = HEAP32[$932 >> 2] | 0;
       } while (($946 | 0) != ($944 | 0));
       $949 = $943 + -48 | 0;
       HEAP32[$0 + 0 >> 2] = HEAP32[$949 + 0 >> 2];
       HEAP32[$0 + 4 >> 2] = HEAP32[$949 + 4 >> 2];
       HEAP32[$0 + 8 >> 2] = HEAP32[$949 + 8 >> 2];
       HEAP32[$949 + 0 >> 2] = 0;
       HEAP32[$949 + 4 >> 2] = 0;
       HEAP32[$949 + 8 >> 2] = 0;
       $950 = $0 + 12 | 0;
       $951 = $943 + -36 | 0;
       HEAP32[$950 + 0 >> 2] = HEAP32[$951 + 0 >> 2];
       HEAP32[$950 + 4 >> 2] = HEAP32[$951 + 4 >> 2];
       HEAP32[$950 + 8 >> 2] = HEAP32[$951 + 8 >> 2];
       HEAP32[$951 + 0 >> 2] = 0;
       HEAP32[$951 + 4 >> 2] = 0;
       HEAP32[$951 + 8 >> 2] = 0;
       $952 = HEAP16[$941 >> 1] | 0;
       if (!($952 & 1)) $960 = ($952 & 65535) >>> 8 & 255; else $960 = HEAP8[HEAP32[$__v$i$i$i + 20 >> 2] >> 0] | 0;
       $961 = HEAP32[$932 >> 2] | 0;
       $962 = $961 + -24 | 0;
       if ($960 << 24 >> 24 == 40) {
        $963 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($__v$i$i$i, 58944, 1) | 0;
        HEAP32[$3 + 0 >> 2] = HEAP32[$963 + 0 >> 2];
        HEAP32[$3 + 4 >> 2] = HEAP32[$963 + 4 >> 2];
        HEAP32[$3 + 8 >> 2] = HEAP32[$963 + 8 >> 2];
        HEAP32[$963 + 0 >> 2] = 0;
        HEAP32[$963 + 4 >> 2] = 0;
        HEAP32[$963 + 8 >> 2] = 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($$sroa$7, $0);
        $964 = HEAP8[$$sroa$7 >> 0] | 0;
        $966 = ($964 & 1) == 0;
        if ($966) {
         $974 = $$sroa$7 + 1 | 0;
         $975 = ($964 & 255) >>> 1;
        } else {
         $974 = HEAP32[$$sroa$7 + 8 >> 2] | 0;
         $975 = HEAP32[$$sroa$7 + 4 >> 2] | 0;
        }
        $976 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $974, $975) | 0;
        HEAP32[$2 + 0 >> 2] = HEAP32[$976 + 0 >> 2];
        HEAP32[$2 + 4 >> 2] = HEAP32[$976 + 4 >> 2];
        HEAP32[$2 + 8 >> 2] = HEAP32[$976 + 8 >> 2];
        HEAP32[$976 + 0 >> 2] = 0;
        HEAP32[$976 + 4 >> 2] = 0;
        HEAP32[$976 + 8 >> 2] = 0;
        $977 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2, 61032, 3) | 0;
        $978 = HEAP8[$977 >> 0] | 0;
        $979 = $977 + 1 | 0;
        HEAP8[$1 + 0 >> 0] = HEAP8[$979 + 0 >> 0] | 0;
        HEAP8[$1 + 1 >> 0] = HEAP8[$979 + 1 >> 0] | 0;
        HEAP8[$1 + 2 >> 0] = HEAP8[$979 + 2 >> 0] | 0;
        HEAP8[$1 + 3 >> 0] = HEAP8[$979 + 3 >> 0] | 0;
        HEAP8[$1 + 4 >> 0] = HEAP8[$979 + 4 >> 0] | 0;
        HEAP8[$1 + 5 >> 0] = HEAP8[$979 + 5 >> 0] | 0;
        HEAP8[$1 + 6 >> 0] = HEAP8[$979 + 6 >> 0] | 0;
        $981 = HEAP32[$977 + 8 >> 2] | 0;
        HEAP32[$977 + 0 >> 2] = 0;
        HEAP32[$977 + 4 >> 2] = 0;
        HEAP32[$977 + 8 >> 2] = 0;
        do if (!(HEAP8[$962 >> 0] & 1)) {
         HEAP8[$962 + 1 >> 0] = 0;
         HEAP8[$962 >> 0] = 0;
        } else {
         $986 = $961 + -16 | 0;
         HEAP8[HEAP32[$986 >> 2] >> 0] = 0;
         $988 = $961 + -20 | 0;
         HEAP32[$988 >> 2] = 0;
         $$pre$i$i$i$i = HEAP8[$962 >> 0] | 0;
         if (!($$pre$i$i$i$i & 1)) {
          $1004 = 10;
          $995 = $$pre$i$i$i$i;
         } else {
          $991 = HEAP32[$962 >> 2] | 0;
          $1004 = ($991 & -2) + -1 | 0;
          $995 = $991 & 255;
         }
         if (!($995 & 1)) {
          $998 = ($995 & 255) >>> 1;
          if (($995 & 255) < 22) {
           $1003 = 10;
           $1023 = $998;
           $2956 = 1;
          } else {
           $1003 = ($998 + 16 & 240) + -1 | 0;
           $1023 = $998;
           $2956 = 1;
          }
         } else {
          $1003 = 10;
          $1023 = 0;
          $2956 = 0;
         }
         if (($1003 | 0) != ($1004 | 0)) {
          if (($1003 | 0) == 10) {
           $1010 = $962 + 1 | 0;
           $1011 = HEAP32[$986 >> 2] | 0;
           if ($2956) {
            _memcpy($1010 | 0, $1011 | 0, (($995 & 255) >>> 1) + 1 | 0) | 0;
            _free($1011);
           } else {
            HEAP8[$1010 >> 0] = HEAP8[$1011 >> 0] | 0;
            _free($1011);
           }
           HEAP8[$962 >> 0] = $1023 << 1;
           break;
          }
          $1007 = $1003 + 1 | 0;
          $1008 = _malloc($1007) | 0;
          if (!($1003 >>> 0 <= $1004 >>> 0 & ($1008 | 0) == 0)) {
           if ($2956) _memcpy($1008 | 0, $962 + 1 | 0, (($995 & 255) >>> 1) + 1 | 0) | 0; else {
            $1020 = HEAP32[$986 >> 2] | 0;
            HEAP8[$1008 >> 0] = HEAP8[$1020 >> 0] | 0;
            _free($1020);
           }
           HEAP32[$962 >> 2] = $1007 | 1;
           HEAP32[$988 >> 2] = $1023;
           HEAP32[$986 >> 2] = $1008;
          }
         }
        } while (0);
        HEAP8[$961 + -24 >> 0] = $978;
        $1027 = $961 + -23 | 0;
        HEAP8[$1027 + 0 >> 0] = HEAP8[$1 + 0 >> 0] | 0;
        HEAP8[$1027 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
        HEAP8[$1027 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
        HEAP8[$1027 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
        HEAP8[$1027 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0;
        HEAP8[$1027 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0;
        HEAP8[$1027 + 6 >> 0] = HEAP8[$1 + 6 >> 0] | 0;
        HEAP32[$961 + -16 >> 2] = $981;
        HEAP8[$1 + 0 >> 0] = 0;
        HEAP8[$1 + 1 >> 0] = 0;
        HEAP8[$1 + 2 >> 0] = 0;
        HEAP8[$1 + 3 >> 0] = 0;
        HEAP8[$1 + 4 >> 0] = 0;
        HEAP8[$1 + 5 >> 0] = 0;
        HEAP8[$1 + 6 >> 0] = 0;
        if (HEAP8[$2 >> 0] & 1) _free(HEAP32[$2 + 8 >> 2] | 0);
        if (!$966) _free(HEAP32[$$sroa$7 + 8 >> 2] | 0);
        if (HEAP8[$3 >> 0] & 1) _free(HEAP32[$3 + 8 >> 2] | 0);
        $1038 = HEAP32[$932 >> 2] | 0;
        $1039 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($941, 0, 58936, 1) | 0;
        $1040 = HEAP8[$1039 >> 0] | 0;
        $1041 = $1039 + 1 | 0;
        HEAP8[$4 + 0 >> 0] = HEAP8[$1041 + 0 >> 0] | 0;
        HEAP8[$4 + 1 >> 0] = HEAP8[$1041 + 1 >> 0] | 0;
        HEAP8[$4 + 2 >> 0] = HEAP8[$1041 + 2 >> 0] | 0;
        HEAP8[$4 + 3 >> 0] = HEAP8[$1041 + 3 >> 0] | 0;
        HEAP8[$4 + 4 >> 0] = HEAP8[$1041 + 4 >> 0] | 0;
        HEAP8[$4 + 5 >> 0] = HEAP8[$1041 + 5 >> 0] | 0;
        HEAP8[$4 + 6 >> 0] = HEAP8[$1041 + 6 >> 0] | 0;
        $1043 = HEAP32[$1039 + 8 >> 2] | 0;
        HEAP32[$1039 + 0 >> 2] = 0;
        HEAP32[$1039 + 4 >> 2] = 0;
        HEAP32[$1039 + 8 >> 2] = 0;
        $1044 = $1038 + -12 | 0;
        do if (!(HEAP8[$1044 >> 0] & 1)) {
         HEAP8[$1044 + 1 >> 0] = 0;
         HEAP8[$1044 >> 0] = 0;
        } else {
         $1049 = $1038 + -4 | 0;
         HEAP8[HEAP32[$1049 >> 2] >> 0] = 0;
         $1051 = $1038 + -8 | 0;
         HEAP32[$1051 >> 2] = 0;
         $$pre$i$i$i12$i = HEAP8[$1044 >> 0] | 0;
         if (!($$pre$i$i$i12$i & 1)) {
          $1058 = $$pre$i$i$i12$i;
          $1067 = 10;
         } else {
          $1054 = HEAP32[$1044 >> 2] | 0;
          $1058 = $1054 & 255;
          $1067 = ($1054 & -2) + -1 | 0;
         }
         do if (!($1058 & 1)) {
          $1061 = ($1058 & 255) >>> 1;
          if (($1058 & 255) < 22) {
           $1066 = 10;
           $1086 = $1061;
           $2957 = 1;
           break;
          }
          $1066 = ($1061 + 16 & 240) + -1 | 0;
          $1086 = $1061;
          $2957 = 1;
         } else {
          $1066 = 10;
          $1086 = 0;
          $2957 = 0;
         } while (0);
         if (($1066 | 0) == ($1067 | 0)) break;
         if (($1066 | 0) == 10) {
          $1073 = $1044 + 1 | 0;
          $1074 = HEAP32[$1049 >> 2] | 0;
          if ($2957) {
           _memcpy($1073 | 0, $1074 | 0, (($1058 & 255) >>> 1) + 1 | 0) | 0;
           _free($1074);
          } else {
           HEAP8[$1073 >> 0] = HEAP8[$1074 >> 0] | 0;
           _free($1074);
          }
          HEAP8[$1044 >> 0] = $1086 << 1;
          break;
         }
         $1070 = $1066 + 1 | 0;
         $1071 = _malloc($1070) | 0;
         if ($1066 >>> 0 <= $1067 >>> 0 & ($1071 | 0) == 0) break;
         if ($2957) _memcpy($1071 | 0, $1044 + 1 | 0, (($1058 & 255) >>> 1) + 1 | 0) | 0; else {
          $1083 = HEAP32[$1049 >> 2] | 0;
          HEAP8[$1071 >> 0] = HEAP8[$1083 >> 0] | 0;
          _free($1083);
         }
         HEAP32[$1044 >> 2] = $1070 | 1;
         HEAP32[$1051 >> 2] = $1086;
         HEAP32[$1049 >> 2] = $1071;
        } while (0);
        HEAP8[$1038 + -12 >> 0] = $1040;
        $1090 = $1038 + -11 | 0;
        HEAP8[$1090 + 0 >> 0] = HEAP8[$4 + 0 >> 0] | 0;
        HEAP8[$1090 + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
        HEAP8[$1090 + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
        HEAP8[$1090 + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
        HEAP8[$1090 + 4 >> 0] = HEAP8[$4 + 4 >> 0] | 0;
        HEAP8[$1090 + 5 >> 0] = HEAP8[$4 + 5 >> 0] | 0;
        HEAP8[$1090 + 6 >> 0] = HEAP8[$4 + 6 >> 0] | 0;
        HEAP32[$1038 + -4 >> 2] = $1043;
        HEAP8[$4 + 0 >> 0] = 0;
        HEAP8[$4 + 1 >> 0] = 0;
        HEAP8[$4 + 2 >> 0] = 0;
        HEAP8[$4 + 3 >> 0] = 0;
        HEAP8[$4 + 4 >> 0] = 0;
        HEAP8[$4 + 5 >> 0] = 0;
        HEAP8[$4 + 6 >> 0] = 0;
       } else {
        $1092 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($__v$i$i$i, 59016, 1) | 0;
        HEAP32[$6 + 0 >> 2] = HEAP32[$1092 + 0 >> 2];
        HEAP32[$6 + 4 >> 2] = HEAP32[$1092 + 4 >> 2];
        HEAP32[$6 + 8 >> 2] = HEAP32[$1092 + 8 >> 2];
        HEAP32[$1092 + 0 >> 2] = 0;
        HEAP32[$1092 + 4 >> 2] = 0;
        HEAP32[$1092 + 8 >> 2] = 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, $0);
        $1093 = HEAP8[$7 >> 0] | 0;
        $1095 = ($1093 & 1) == 0;
        if ($1095) {
         $1103 = $7 + 1 | 0;
         $1104 = ($1093 & 255) >>> 1;
        } else {
         $1103 = HEAP32[$7 + 8 >> 2] | 0;
         $1104 = HEAP32[$7 + 4 >> 2] | 0;
        }
        $1105 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6, $1103, $1104) | 0;
        HEAP32[$num1$i + 0 >> 2] = HEAP32[$1105 + 0 >> 2];
        HEAP32[$num1$i + 4 >> 2] = HEAP32[$1105 + 4 >> 2];
        HEAP32[$num1$i + 8 >> 2] = HEAP32[$1105 + 8 >> 2];
        HEAP32[$1105 + 0 >> 2] = 0;
        HEAP32[$1105 + 4 >> 2] = 0;
        HEAP32[$1105 + 8 >> 2] = 0;
        $1106 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($num1$i, 61032, 3) | 0;
        $1107 = HEAP8[$1106 >> 0] | 0;
        $1108 = $1106 + 1 | 0;
        HEAP8[$5 + 0 >> 0] = HEAP8[$1108 + 0 >> 0] | 0;
        HEAP8[$5 + 1 >> 0] = HEAP8[$1108 + 1 >> 0] | 0;
        HEAP8[$5 + 2 >> 0] = HEAP8[$1108 + 2 >> 0] | 0;
        HEAP8[$5 + 3 >> 0] = HEAP8[$1108 + 3 >> 0] | 0;
        HEAP8[$5 + 4 >> 0] = HEAP8[$1108 + 4 >> 0] | 0;
        HEAP8[$5 + 5 >> 0] = HEAP8[$1108 + 5 >> 0] | 0;
        HEAP8[$5 + 6 >> 0] = HEAP8[$1108 + 6 >> 0] | 0;
        $1110 = HEAP32[$1106 + 8 >> 2] | 0;
        HEAP32[$1106 + 0 >> 2] = 0;
        HEAP32[$1106 + 4 >> 2] = 0;
        HEAP32[$1106 + 8 >> 2] = 0;
        do if (!(HEAP8[$962 >> 0] & 1)) {
         HEAP8[$962 + 1 >> 0] = 0;
         HEAP8[$962 >> 0] = 0;
        } else {
         $1115 = $961 + -16 | 0;
         HEAP8[HEAP32[$1115 >> 2] >> 0] = 0;
         $1117 = $961 + -20 | 0;
         HEAP32[$1117 >> 2] = 0;
         $$pre$i$i$i32$i = HEAP8[$962 >> 0] | 0;
         if (!($$pre$i$i$i32$i & 1)) {
          $1124 = $$pre$i$i$i32$i;
          $1133 = 10;
         } else {
          $1120 = HEAP32[$962 >> 2] | 0;
          $1124 = $1120 & 255;
          $1133 = ($1120 & -2) + -1 | 0;
         }
         if (!($1124 & 1)) {
          $1127 = ($1124 & 255) >>> 1;
          if (($1124 & 255) < 22) {
           $1132 = 10;
           $1152 = $1127;
           $2958 = 1;
          } else {
           $1132 = ($1127 + 16 & 240) + -1 | 0;
           $1152 = $1127;
           $2958 = 1;
          }
         } else {
          $1132 = 10;
          $1152 = 0;
          $2958 = 0;
         }
         if (($1132 | 0) != ($1133 | 0)) {
          if (($1132 | 0) == 10) {
           $1139 = $962 + 1 | 0;
           $1140 = HEAP32[$1115 >> 2] | 0;
           if ($2958) {
            _memcpy($1139 | 0, $1140 | 0, (($1124 & 255) >>> 1) + 1 | 0) | 0;
            _free($1140);
           } else {
            HEAP8[$1139 >> 0] = HEAP8[$1140 >> 0] | 0;
            _free($1140);
           }
           HEAP8[$962 >> 0] = $1152 << 1;
           break;
          }
          $1136 = $1132 + 1 | 0;
          $1137 = _malloc($1136) | 0;
          if (!($1132 >>> 0 <= $1133 >>> 0 & ($1137 | 0) == 0)) {
           if ($2958) _memcpy($1137 | 0, $962 + 1 | 0, (($1124 & 255) >>> 1) + 1 | 0) | 0; else {
            $1149 = HEAP32[$1115 >> 2] | 0;
            HEAP8[$1137 >> 0] = HEAP8[$1149 >> 0] | 0;
            _free($1149);
           }
           HEAP32[$962 >> 2] = $1136 | 1;
           HEAP32[$1117 >> 2] = $1152;
           HEAP32[$1115 >> 2] = $1137;
          }
         }
        } while (0);
        HEAP8[$961 + -24 >> 0] = $1107;
        $1156 = $961 + -23 | 0;
        HEAP8[$1156 + 0 >> 0] = HEAP8[$5 + 0 >> 0] | 0;
        HEAP8[$1156 + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
        HEAP8[$1156 + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
        HEAP8[$1156 + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
        HEAP8[$1156 + 4 >> 0] = HEAP8[$5 + 4 >> 0] | 0;
        HEAP8[$1156 + 5 >> 0] = HEAP8[$5 + 5 >> 0] | 0;
        HEAP8[$1156 + 6 >> 0] = HEAP8[$5 + 6 >> 0] | 0;
        HEAP32[$961 + -16 >> 2] = $1110;
        HEAP8[$5 + 0 >> 0] = 0;
        HEAP8[$5 + 1 >> 0] = 0;
        HEAP8[$5 + 2 >> 0] = 0;
        HEAP8[$5 + 3 >> 0] = 0;
        HEAP8[$5 + 4 >> 0] = 0;
        HEAP8[$5 + 5 >> 0] = 0;
        HEAP8[$5 + 6 >> 0] = 0;
        if (HEAP8[$num1$i >> 0] & 1) _free(HEAP32[$num1$i + 8 >> 2] | 0);
        if (!$1095) _free(HEAP32[$7 + 8 >> 2] | 0);
        if (HEAP8[$6 >> 0] & 1) _free(HEAP32[$6 + 8 >> 2] | 0);
        $1167 = HEAP32[$932 >> 2] | 0;
        $1168 = $1167 + -12 | 0;
        do if (!(HEAP8[$1168 >> 0] & 1)) {
         HEAP8[$1168 + 1 >> 0] = 0;
         HEAP8[$1168 >> 0] = 0;
        } else {
         $1173 = $1167 + -4 | 0;
         HEAP8[HEAP32[$1173 >> 2] >> 0] = 0;
         $1175 = $1167 + -8 | 0;
         HEAP32[$1175 >> 2] = 0;
         $$pre$i$i$i48$i = HEAP8[$1168 >> 0] | 0;
         if (!($$pre$i$i$i48$i & 1)) {
          $1182 = $$pre$i$i$i48$i;
          $1191 = 10;
         } else {
          $1178 = HEAP32[$1168 >> 2] | 0;
          $1182 = $1178 & 255;
          $1191 = ($1178 & -2) + -1 | 0;
         }
         do if (!($1182 & 1)) {
          $1185 = ($1182 & 255) >>> 1;
          if (($1182 & 255) < 22) {
           $1190 = 10;
           $1210 = $1185;
           $2959 = 1;
           break;
          }
          $1190 = ($1185 + 16 & 240) + -1 | 0;
          $1210 = $1185;
          $2959 = 1;
         } else {
          $1190 = 10;
          $1210 = 0;
          $2959 = 0;
         } while (0);
         if (($1190 | 0) == ($1191 | 0)) break;
         if (($1190 | 0) == 10) {
          $1197 = $1168 + 1 | 0;
          $1198 = HEAP32[$1173 >> 2] | 0;
          if ($2959) {
           _memcpy($1197 | 0, $1198 | 0, (($1182 & 255) >>> 1) + 1 | 0) | 0;
           _free($1198);
          } else {
           HEAP8[$1197 >> 0] = HEAP8[$1198 >> 0] | 0;
           _free($1198);
          }
          HEAP8[$1168 >> 0] = $1210 << 1;
          break;
         }
         $1194 = $1190 + 1 | 0;
         $1195 = _malloc($1194) | 0;
         if ($1190 >>> 0 <= $1191 >>> 0 & ($1195 | 0) == 0) break;
         if ($2959) _memcpy($1195 | 0, $1168 + 1 | 0, (($1182 & 255) >>> 1) + 1 | 0) | 0; else {
          $1207 = HEAP32[$1173 >> 2] | 0;
          HEAP8[$1195 >> 0] = HEAP8[$1207 >> 0] | 0;
          _free($1207);
         }
         HEAP32[$1168 >> 2] = $1194 | 1;
         HEAP32[$1175 >> 2] = $1210;
         HEAP32[$1173 >> 2] = $1195;
        } while (0);
        HEAP32[$1168 + 0 >> 2] = HEAP32[$941 + 0 >> 2];
        HEAP32[$1168 + 4 >> 2] = HEAP32[$941 + 4 >> 2];
        HEAP32[$1168 + 8 >> 2] = HEAP32[$941 + 8 >> 2];
        HEAP32[$941 + 0 >> 2] = 0;
        HEAP32[$941 + 4 >> 2] = 0;
        HEAP32[$941 + 8 >> 2] = 0;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($__v$i$i$i);
       $$08$i = $930;
      }
     }
    }
   } else $$08$i = $first;
   if (($$08$i | 0) == ($first | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1216 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($1216 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1218 = $db + 16 | 0;
   HEAP32[$18 >> 2] = HEAP32[$db + 12 >> 2];
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($17, $1216 + -24 | 0, $18);
   $1222 = $db + 20 | 0;
   $1223 = HEAP32[$1222 >> 2] | 0;
   $1225 = HEAP32[$db + 24 >> 2] | 0;
   if ($1223 >>> 0 < $1225 >>> 0) {
    if (!$1223) $1239 = 0; else {
     HEAP32[$1223 + 12 >> 2] = HEAP32[$17 + 12 >> 2];
     HEAP32[$1223 >> 2] = HEAP32[$17 >> 2];
     $1234 = $17 + 4 | 0;
     HEAP32[$1223 + 4 >> 2] = HEAP32[$1234 >> 2];
     $1236 = $17 + 8 | 0;
     HEAP32[$1223 + 8 >> 2] = HEAP32[$1236 >> 2];
     HEAP32[$1236 >> 2] = 0;
     HEAP32[$1234 >> 2] = 0;
     HEAP32[$17 >> 2] = 0;
     $1239 = HEAP32[$1222 >> 2] | 0;
    }
    HEAP32[$1222 >> 2] = $1239 + 16;
   } else {
    $1243 = HEAP32[$1218 >> 2] | 0;
    $1245 = $1223 - $1243 >> 4;
    $1246 = $1245 + 1 | 0;
    if (($1246 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $1249 = $1225 - $1243 | 0;
    if ($1249 >> 4 >>> 0 < 1073741823) {
     $1252 = $1249 >> 3;
     $$0$i$i$i110 = $1252 >>> 0 < $1246 >>> 0 ? $1246 : $1252;
    } else $$0$i$i$i110 = 2147483647;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i110, $1245, $db + 28 | 0);
    $1255 = $__v$i$i$i + 8 | 0;
    $1256 = HEAP32[$1255 >> 2] | 0;
    if ($1256) {
     HEAP32[$1256 + 12 >> 2] = HEAP32[$17 + 12 >> 2];
     HEAP32[$1256 >> 2] = HEAP32[$17 >> 2];
     $1264 = $17 + 4 | 0;
     HEAP32[$1256 + 4 >> 2] = HEAP32[$1264 >> 2];
     $1266 = $17 + 8 | 0;
     HEAP32[$1256 + 8 >> 2] = HEAP32[$1266 >> 2];
     HEAP32[$1266 >> 2] = 0;
     HEAP32[$1264 >> 2] = 0;
     HEAP32[$17 >> 2] = 0;
    }
    HEAP32[$1255 >> 2] = $1256 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1218, $__v$i$i$i);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($17);
   $$0 = $$08$i;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 71:
  {
   $866 = $first + 1 | 0;
   $867 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($866, $last, $db) | 0;
   if (($867 | 0) == ($866 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $870 = $db + 4 | 0;
   $871 = HEAP32[$870 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($871 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($871 + -24 | 0, 58904, 10) | 0;
   $874 = $db + 16 | 0;
   $876 = (HEAP32[$870 >> 2] | 0) + -24 | 0;
   HEAP32[$16 >> 2] = HEAP32[$db + 12 >> 2];
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($15, $876, $16);
   $879 = $db + 20 | 0;
   $880 = HEAP32[$879 >> 2] | 0;
   $882 = HEAP32[$db + 24 >> 2] | 0;
   if ($880 >>> 0 < $882 >>> 0) {
    if (!$880) $896 = 0; else {
     HEAP32[$880 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
     HEAP32[$880 >> 2] = HEAP32[$15 >> 2];
     $891 = $15 + 4 | 0;
     HEAP32[$880 + 4 >> 2] = HEAP32[$891 >> 2];
     $893 = $15 + 8 | 0;
     HEAP32[$880 + 8 >> 2] = HEAP32[$893 >> 2];
     HEAP32[$893 >> 2] = 0;
     HEAP32[$891 >> 2] = 0;
     HEAP32[$15 >> 2] = 0;
     $896 = HEAP32[$879 >> 2] | 0;
    }
    HEAP32[$879 >> 2] = $896 + 16;
   } else {
    $900 = HEAP32[$874 >> 2] | 0;
    $902 = $880 - $900 >> 4;
    $903 = $902 + 1 | 0;
    if (($903 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $906 = $882 - $900 | 0;
    if ($906 >> 4 >>> 0 < 1073741823) {
     $909 = $906 >> 3;
     $$0$i$i$i102 = $909 >>> 0 < $903 >>> 0 ? $903 : $909;
    } else $$0$i$i$i102 = 2147483647;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i102, $902, $db + 28 | 0);
    $912 = $__v$i$i$i + 8 | 0;
    $913 = HEAP32[$912 >> 2] | 0;
    if ($913) {
     HEAP32[$913 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
     HEAP32[$913 >> 2] = HEAP32[$15 >> 2];
     $921 = $15 + 4 | 0;
     HEAP32[$913 + 4 >> 2] = HEAP32[$921 >> 2];
     $923 = $15 + 8 | 0;
     HEAP32[$913 + 8 >> 2] = HEAP32[$923 >> 2];
     HEAP32[$923 >> 2] = 0;
     HEAP32[$921 >> 2] = 0;
     HEAP32[$15 >> 2] = 0;
    }
    HEAP32[$912 >> 2] = $913 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($874, $__v$i$i$i);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($15);
   $$0 = $867;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 70:
  {
   if ($233 << 24 >> 24 != 70) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $706 = $first + 1 | 0;
   if (($706 | 0) == ($last | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if ((HEAP8[$706 >> 0] | 0) == 89) {
    $710 = $first + 2 | 0;
    if (($710 | 0) == ($last | 0)) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    } else $t$0$i = $710;
   } else $t$0$i = $706;
   $712 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$0$i, $last, $db) | 0;
   if (($712 | 0) == ($t$0$i | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP8[$__v$i$i$i >> 0] = 2;
   $714 = $__v$i$i$i + 1 | 0;
   HEAP8[$714 >> 0] = 40;
   HEAP8[$__v$i$i$i + 2 >> 0] = 0;
   $$pre516$pre = $db + 4 | 0;
   L315 : do if (($712 | 0) == ($last | 0)) label = 230; else {
    $717 = $0 + 1 | 0;
    $718 = $0 + 8 | 0;
    $719 = $0 + 4 | 0;
    $720 = $__v$i$i$i + 4 | 0;
    $ref_qual$0$i$ph425 = 0;
    $t$1$i$ph424 = $712;
    L317 : while (1) {
     $t$1$i421 = $t$1$i$ph424;
     while (1) {
      $728 = HEAP8[$t$1$i421 >> 0] | 0;
      if ($728 << 24 >> 24 == 69) break L317; else if ($728 << 24 >> 24 == 118) $t$1$i$be = $t$1$i421 + 1 | 0; else if ($728 << 24 >> 24 == 82) {
       $732 = $t$1$i421 + 1 | 0;
       if (($732 | 0) == ($last | 0)) label = 240; else if ((HEAP8[$732 >> 0] | 0) == 69) {
        $ref_qual$0$i$ph$ph = 1;
        $t$1$i$ph$ph = $732;
        break;
       } else label = 240;
      } else if ($728 << 24 >> 24 == 79) {
       $736 = $t$1$i421 + 1 | 0;
       if (($736 | 0) == ($last | 0)) label = 240; else if ((HEAP8[$736 >> 0] | 0) == 69) {
        $ref_qual$0$i$ph$ph = 2;
        $t$1$i$ph$ph = $736;
        break;
       } else label = 240;
      } else label = 240;
      if ((label | 0) == 240) {
       label = 0;
       $745 = ((HEAP32[$$pre516$pre >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
       $746 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$1$i421, $last, $db) | 0;
       $752 = ((HEAP32[$$pre516$pre >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
       if (($746 | 0) == ($t$1$i421 | 0) | ($746 | 0) == ($last | 0)) break L315;
       if ($745 >>> 0 < $752 >>> 0) {
        $k$0$i418 = $745;
        do {
         $756 = HEAP8[$__v$i$i$i >> 0] | 0;
         if (!($756 & 1)) $763 = ($756 & 255) >>> 1; else $763 = HEAP32[$720 >> 2] | 0;
         if ($763 >>> 0 > 1) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($__v$i$i$i, 59432, 2) | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, (HEAP32[$db >> 2] | 0) + ($k$0$i418 * 24 | 0) | 0);
         $766 = HEAP8[$0 >> 0] | 0;
         $768 = ($766 & 1) == 0;
         if ($768) {
          $773 = $717;
          $774 = ($766 & 255) >>> 1;
         } else {
          $773 = HEAP32[$718 >> 2] | 0;
          $774 = HEAP32[$719 >> 2] | 0;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($__v$i$i$i, $773, $774) | 0;
         if (!$768) _free(HEAP32[$718 >> 2] | 0);
         $k$0$i418 = $k$0$i418 + 1 | 0;
        } while ($k$0$i418 >>> 0 < $752 >>> 0);
        $779 = HEAP32[$$pre516$pre >> 2] | 0;
        $k2$0$i419 = $745;
        do {
         $781 = $779;
         $779 = $779 + -24 | 0;
         do {
          $780 = $781 + -24 | 0;
          HEAP32[$$pre516$pre >> 2] = $780;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($780);
          $781 = HEAP32[$$pre516$pre >> 2] | 0;
         } while (($781 | 0) != ($779 | 0));
         $k2$0$i419 = $k2$0$i419 + 1 | 0;
        } while (($k2$0$i419 | 0) != ($752 | 0));
        $t$1$i$be = $746;
       } else $t$1$i$be = $746;
      }
      if (($t$1$i$be | 0) == ($last | 0)) {
       label = 230;
       break L315;
      } else $t$1$i421 = $t$1$i$be;
     }
     if (($t$1$i$ph$ph | 0) == ($last | 0)) {
      label = 230;
      break L315;
     } else {
      $ref_qual$0$i$ph425 = $ref_qual$0$i$ph$ph;
      $t$1$i$ph424 = $t$1$i$ph$ph;
     }
    }
    $729 = $t$1$i421 + 1 | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($__v$i$i$i, 58936, 1) | 0;
    if (($ref_qual$0$i$ph425 | 0) == 1) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($__v$i$i$i, 61040, 2) | 0; else if (($ref_qual$0$i$ph425 | 0) == 2) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($__v$i$i$i, 61048, 3) | 0;
    $786 = HEAP32[$$pre516$pre >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) != ($786 | 0)) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($786 + -24 | 0, 59016, 1) | 0;
     $791 = HEAP8[$__v$i$i$i >> 0] | 0;
     if (!($791 & 1)) {
      $799 = $714;
      $800 = ($791 & 255) >>> 1;
     } else {
      $799 = HEAP32[$__v$i$i$i + 8 >> 2] | 0;
      $800 = HEAP32[$720 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$$pre516$pre >> 2] | 0) + -12 | 0, 0, $799, $800) | 0;
     if (HEAP8[$__v$i$i$i >> 0] & 1) _free(HEAP32[$__v$i$i$i + 8 >> 2] | 0);
     if (($729 | 0) == ($first | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $813 = HEAP32[$$pre516$pre >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($813 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $815 = $db + 16 | 0;
     HEAP32[$14 >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($13, $813 + -24 | 0, $14);
     $819 = $db + 20 | 0;
     $820 = HEAP32[$819 >> 2] | 0;
     $822 = HEAP32[$db + 24 >> 2] | 0;
     if ($820 >>> 0 < $822 >>> 0) {
      if (!$820) $836 = 0; else {
       HEAP32[$820 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
       HEAP32[$820 >> 2] = HEAP32[$13 >> 2];
       $831 = $13 + 4 | 0;
       HEAP32[$820 + 4 >> 2] = HEAP32[$831 >> 2];
       $833 = $13 + 8 | 0;
       HEAP32[$820 + 8 >> 2] = HEAP32[$833 >> 2];
       HEAP32[$833 >> 2] = 0;
       HEAP32[$831 >> 2] = 0;
       HEAP32[$13 >> 2] = 0;
       $836 = HEAP32[$819 >> 2] | 0;
      }
      HEAP32[$819 >> 2] = $836 + 16;
     } else {
      $840 = HEAP32[$815 >> 2] | 0;
      $842 = $820 - $840 >> 4;
      $843 = $842 + 1 | 0;
      if (($843 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $846 = $822 - $840 | 0;
      if ($846 >> 4 >>> 0 < 1073741823) {
       $849 = $846 >> 3;
       $$0$i$i$i94 = $849 >>> 0 < $843 >>> 0 ? $843 : $849;
      } else $$0$i$i$i94 = 2147483647;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i94, $842, $db + 28 | 0);
      $852 = $__v$i$i$i + 8 | 0;
      $853 = HEAP32[$852 >> 2] | 0;
      if ($853) {
       HEAP32[$853 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
       HEAP32[$853 >> 2] = HEAP32[$13 >> 2];
       $861 = $13 + 4 | 0;
       HEAP32[$853 + 4 >> 2] = HEAP32[$861 >> 2];
       $863 = $13 + 8 | 0;
       HEAP32[$853 + 8 >> 2] = HEAP32[$863 >> 2];
       HEAP32[$863 >> 2] = 0;
       HEAP32[$861 >> 2] = 0;
       HEAP32[$13 >> 2] = 0;
      }
      HEAP32[$852 >> 2] = $853 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($815, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($13);
     $$0 = $729;
     STACKTOP = sp;
     return $$0 | 0;
    }
   } while (0);
   if ((label | 0) == 230) {
    $722 = HEAP32[$$pre516$pre >> 2] | 0;
    $723 = $722 + -24 | 0;
    $725 = $722;
    do {
     $724 = $725 + -24 | 0;
     HEAP32[$$pre516$pre >> 2] = $724;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($724);
     $725 = HEAP32[$$pre516$pre >> 2] | 0;
    } while (($725 | 0) != ($723 | 0));
   }
   if (!(HEAP8[$__v$i$i$i >> 0] & 1)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   _free(HEAP32[$__v$i$i$i + 8 >> 2] | 0);
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 67:
  {
   $645 = $first + 1 | 0;
   $646 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($645, $last, $db) | 0;
   if (($646 | 0) == ($645 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $649 = $db + 4 | 0;
   $650 = HEAP32[$649 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($650 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($650 + -24 | 0, 58888, 8) | 0;
   $653 = $db + 16 | 0;
   $655 = (HEAP32[$649 >> 2] | 0) + -24 | 0;
   HEAP32[$12 >> 2] = HEAP32[$db + 12 >> 2];
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($11, $655, $12);
   $658 = $db + 20 | 0;
   $659 = HEAP32[$658 >> 2] | 0;
   $661 = HEAP32[$db + 24 >> 2] | 0;
   if ($659 >>> 0 < $661 >>> 0) {
    if (!$659) $675 = 0; else {
     HEAP32[$659 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
     HEAP32[$659 >> 2] = HEAP32[$11 >> 2];
     $670 = $11 + 4 | 0;
     HEAP32[$659 + 4 >> 2] = HEAP32[$670 >> 2];
     $672 = $11 + 8 | 0;
     HEAP32[$659 + 8 >> 2] = HEAP32[$672 >> 2];
     HEAP32[$672 >> 2] = 0;
     HEAP32[$670 >> 2] = 0;
     HEAP32[$11 >> 2] = 0;
     $675 = HEAP32[$658 >> 2] | 0;
    }
    HEAP32[$658 >> 2] = $675 + 16;
   } else {
    $679 = HEAP32[$653 >> 2] | 0;
    $681 = $659 - $679 >> 4;
    $682 = $681 + 1 | 0;
    if (($682 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $685 = $661 - $679 | 0;
    if ($685 >> 4 >>> 0 < 1073741823) {
     $688 = $685 >> 3;
     $$0$i$i$i86 = $688 >>> 0 < $682 >>> 0 ? $682 : $688;
    } else $$0$i$i$i86 = 2147483647;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i86, $681, $db + 28 | 0);
    $691 = $__v$i$i$i + 8 | 0;
    $692 = HEAP32[$691 >> 2] | 0;
    if ($692) {
     HEAP32[$692 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
     HEAP32[$692 >> 2] = HEAP32[$11 >> 2];
     $700 = $11 + 4 | 0;
     HEAP32[$692 + 4 >> 2] = HEAP32[$700 >> 2];
     $702 = $11 + 8 | 0;
     HEAP32[$692 + 8 >> 2] = HEAP32[$702 >> 2];
     HEAP32[$702 >> 2] = 0;
     HEAP32[$700 >> 2] = 0;
     HEAP32[$11 >> 2] = 0;
    }
    HEAP32[$691 >> 2] = $692 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($653, $__v$i$i$i);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($11);
   $$0 = $646;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 65:
  {
   do if ($233 << 24 >> 24 == 65) {
    $236 = $first + 1 | 0;
    if (($236 | 0) == ($last | 0)) $$0$i = $first; else {
     $238 = HEAP8[$236 >> 0] | 0;
     if ($238 << 24 >> 24 == 95) {
      $240 = $first + 2 | 0;
      $241 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($240, $last, $db) | 0;
      if (($241 | 0) == ($240 | 0)) {
       $$0$i = $first;
       break;
      }
      $244 = $db + 4 | 0;
      $245 = HEAP32[$244 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($245 | 0)) {
       $$0$i = $first;
       break;
      }
      $247 = $245 + -12 | 0;
      $248 = HEAP8[$247 >> 0] | 0;
      if (!($248 & 1)) {
       $259 = ($248 & 255) >>> 1;
       $261 = $247 + 1 | 0;
      } else {
       $259 = HEAP32[$245 + -8 >> 2] | 0;
       $261 = HEAP32[$245 + -4 >> 2] | 0;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($__v$i$i$i, $261, $259 >>> 0 < 2 ? $259 : 2);
      $262 = HEAP8[$__v$i$i$i >> 0] | 0;
      $264 = ($262 & 1) == 0;
      if ($264) {
       $273 = ($262 & 255) >>> 1;
       $2951 = $__v$i$i$i + 1 | 0;
      } else {
       $273 = HEAP32[$__v$i$i$i + 4 >> 2] | 0;
       $2951 = HEAP32[$__v$i$i$i + 8 >> 2] | 0;
      }
      $272 = $273 >>> 0 > 2;
      $274 = $272 ? 2 : $273;
      L439 : do if (!$274) $284 = 0; else {
       $$03$i = $274;
       $l$04$i = $2951;
       $r$05$i = 58920;
       while (1) {
        if ((HEAP8[$l$04$i >> 0] | 0) != (HEAP8[$r$05$i >> 0] | 0)) {
         $284 = 1;
         break L439;
        }
        $$03$i = $$03$i + -1 | 0;
        if (!$$03$i) {
         $284 = 0;
         break;
        } else {
         $l$04$i = $l$04$i + 1 | 0;
         $r$05$i = $r$05$i + 1 | 0;
        }
       }
      } while (0);
      if (!$264) _free(HEAP32[$__v$i$i$i + 8 >> 2] | 0);
      if (!($284 | $273 >>> 0 < 2 | $272)) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj((HEAP32[$244 >> 2] | 0) + -12 | 0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$244 >> 2] | 0) + -12 | 0, 0, 61056, 3) | 0;
      $$0$i = $241;
      break;
     }
     if (($238 + -49 << 24 >> 24 & 255) < 9) {
      $292 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($236, $last) | 0;
      if (($292 | 0) == ($last | 0)) {
       $$0$i = $first;
       break;
      }
      if ((HEAP8[$292 >> 0] | 0) != 95) {
       $$0$i = $first;
       break;
      }
      $296 = $292 + 1 | 0;
      $297 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($296, $last, $db) | 0;
      if (($297 | 0) == ($296 | 0)) {
       $$0$i = $first;
       break;
      }
      $300 = $db + 4 | 0;
      $301 = HEAP32[$300 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($301 | 0)) {
       $$0$i = $first;
       break;
      }
      $303 = $301 + -12 | 0;
      $304 = HEAP8[$303 >> 0] | 0;
      if (!($304 & 1)) {
       $315 = ($304 & 255) >>> 1;
       $317 = $303 + 1 | 0;
      } else {
       $315 = HEAP32[$301 + -8 >> 2] | 0;
       $317 = HEAP32[$301 + -4 >> 2] | 0;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $317, $315 >>> 0 < 2 ? $315 : 2);
      $318 = HEAP8[$0 >> 0] | 0;
      $320 = ($318 & 1) == 0;
      if ($320) {
       $2952 = $0 + 1 | 0;
       $329 = ($318 & 255) >>> 1;
      } else {
       $2952 = HEAP32[$0 + 8 >> 2] | 0;
       $329 = HEAP32[$0 + 4 >> 2] | 0;
      }
      $328 = $329 >>> 0 > 2;
      $330 = $328 ? 2 : $329;
      L465 : do if (!$330) $340 = 0; else {
       $$03$i55 = $330;
       $l$04$i54 = $2952;
       $r$05$i53 = 58920;
       while (1) {
        if ((HEAP8[$l$04$i54 >> 0] | 0) != (HEAP8[$r$05$i53 >> 0] | 0)) {
         $340 = 1;
         break L465;
        }
        $$03$i55 = $$03$i55 + -1 | 0;
        if (!$$03$i55) {
         $340 = 0;
         break;
        } else {
         $l$04$i54 = $l$04$i54 + 1 | 0;
         $r$05$i53 = $r$05$i53 + 1 | 0;
        }
       }
      } while (0);
      if (!$320) _free(HEAP32[$0 + 8 >> 2] | 0);
      if (!($340 | $329 >>> 0 < 2 | $328)) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj((HEAP32[$300 >> 2] | 0) + -12 | 0);
      $346 = (HEAP32[$300 >> 2] | 0) + -12 | 0;
      $349 = $292 - $236 | 0;
      if ($349 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
      if ($349 >>> 0 < 11) {
       HEAP8[$3 >> 0] = $349 << 1;
       $__p$0$ph$i$i$i = $3 + 1 | 0;
      } else {
       $356 = $349 + 16 & -16;
       $357 = _malloc($356) | 0;
       HEAP32[$3 + 8 >> 2] = $357;
       HEAP32[$3 >> 2] = $356 | 1;
       HEAP32[$3 + 4 >> 2] = $349;
       $__p$0$ph$i$i$i = $357;
      }
      if (($236 | 0) == ($292 | 0)) $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i; else {
       $$02$i$i$i = $236;
       $364 = $first;
       $__p$01$i$i$i = $__p$0$ph$i$i$i;
       while (1) {
        HEAP8[$__p$01$i$i$i >> 0] = HEAP8[$$02$i$i$i >> 0] | 0;
        $363 = $364 + 2 | 0;
        if (($363 | 0) == ($292 | 0)) break; else {
         $364$phi = $$02$i$i$i;
         $$02$i$i$i = $363;
         $__p$01$i$i$i = $__p$01$i$i$i + 1 | 0;
         $364 = $364$phi;
        }
       }
       $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i + $349 | 0;
      }
      HEAP8[$__p$0$lcssa$i$i$i >> 0] = 0;
      $367 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($3, 0, 58920, 2) | 0;
      HEAP32[$2 + 0 >> 2] = HEAP32[$367 + 0 >> 2];
      HEAP32[$2 + 4 >> 2] = HEAP32[$367 + 4 >> 2];
      HEAP32[$2 + 8 >> 2] = HEAP32[$367 + 8 >> 2];
      HEAP32[$367 + 0 >> 2] = 0;
      HEAP32[$367 + 4 >> 2] = 0;
      HEAP32[$367 + 8 >> 2] = 0;
      $368 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2, 59056, 1) | 0;
      HEAP32[$1 + 0 >> 2] = HEAP32[$368 + 0 >> 2];
      HEAP32[$1 + 4 >> 2] = HEAP32[$368 + 4 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$368 + 8 >> 2];
      HEAP32[$368 + 0 >> 2] = 0;
      HEAP32[$368 + 4 >> 2] = 0;
      HEAP32[$368 + 8 >> 2] = 0;
      $369 = HEAP8[$1 >> 0] | 0;
      if (!($369 & 1)) {
       $379 = $1 + 1 | 0;
       $380 = ($369 & 255) >>> 1;
      } else {
       $379 = HEAP32[$1 + 8 >> 2] | 0;
       $380 = HEAP32[$1 + 4 >> 2] | 0;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($346, 0, $379, $380) | 0;
      if (HEAP8[$1 >> 0] & 1) _free(HEAP32[$1 + 8 >> 2] | 0);
      if (HEAP8[$2 >> 0] & 1) _free(HEAP32[$2 + 8 >> 2] | 0);
      if (!(HEAP8[$3 >> 0] & 1)) {
       $$0$i = $297;
       break;
      }
      _free(HEAP32[$3 + 8 >> 2] | 0);
      $$0$i = $297;
      break;
     }
     $396 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($236, $last, $db) | 0;
     if (($396 | 0) == ($236 | 0) | ($396 | 0) == ($last | 0)) $$0$i = $first; else if ((HEAP8[$396 >> 0] | 0) == 95) {
      $401 = $396 + 1 | 0;
      $402 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($401, $last, $db) | 0;
      if (($402 | 0) == ($401 | 0)) $$0$i = $first; else {
       $404 = $db + 4 | 0;
       $405 = HEAP32[$404 >> 2] | 0;
       if ((($405 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$0$i = $first; else {
        $412 = $405 + -24 | 0;
        HEAP32[$$sroa$7 + 0 >> 2] = HEAP32[$412 + 0 >> 2];
        HEAP32[$$sroa$7 + 4 >> 2] = HEAP32[$412 + 4 >> 2];
        HEAP32[$$sroa$7 + 8 >> 2] = HEAP32[$412 + 8 >> 2];
        HEAP32[$412 + 0 >> 2] = 0;
        HEAP32[$412 + 4 >> 2] = 0;
        HEAP32[$412 + 8 >> 2] = 0;
        $413 = $$sroa$7 + 12 | 0;
        $414 = $405 + -12 | 0;
        HEAP32[$413 + 0 >> 2] = HEAP32[$414 + 0 >> 2];
        HEAP32[$413 + 4 >> 2] = HEAP32[$414 + 4 >> 2];
        HEAP32[$413 + 8 >> 2] = HEAP32[$414 + 8 >> 2];
        HEAP32[$414 + 0 >> 2] = 0;
        HEAP32[$414 + 4 >> 2] = 0;
        HEAP32[$414 + 8 >> 2] = 0;
        $415 = HEAP32[$404 >> 2] | 0;
        $416 = $415 + -24 | 0;
        $418 = $415;
        do {
         $417 = $418 + -24 | 0;
         HEAP32[$404 >> 2] = $417;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($417);
         $418 = HEAP32[$404 >> 2] | 0;
        } while (($418 | 0) != ($416 | 0));
        $421 = $415 + -48 | 0;
        HEAP32[$4 + 0 >> 2] = HEAP32[$421 + 0 >> 2];
        HEAP32[$4 + 4 >> 2] = HEAP32[$421 + 4 >> 2];
        HEAP32[$4 + 8 >> 2] = HEAP32[$421 + 8 >> 2];
        HEAP32[$421 + 0 >> 2] = 0;
        HEAP32[$421 + 4 >> 2] = 0;
        HEAP32[$421 + 8 >> 2] = 0;
        $422 = $4 + 12 | 0;
        $423 = $415 + -36 | 0;
        HEAP32[$422 + 0 >> 2] = HEAP32[$423 + 0 >> 2];
        HEAP32[$422 + 4 >> 2] = HEAP32[$423 + 4 >> 2];
        HEAP32[$422 + 8 >> 2] = HEAP32[$423 + 8 >> 2];
        HEAP32[$423 + 0 >> 2] = 0;
        HEAP32[$423 + 4 >> 2] = 0;
        HEAP32[$423 + 8 >> 2] = 0;
        $424 = HEAP32[$404 >> 2] | 0;
        $425 = $424 + -24 | 0;
        do if (!(HEAP8[$425 >> 0] & 1)) {
         HEAP8[$425 + 1 >> 0] = 0;
         HEAP8[$425 >> 0] = 0;
        } else {
         $430 = $424 + -16 | 0;
         HEAP8[HEAP32[$430 >> 2] >> 0] = 0;
         $432 = $424 + -20 | 0;
         HEAP32[$432 >> 2] = 0;
         $$pre$i$i$i$i277 = HEAP8[$425 >> 0] | 0;
         if (!($$pre$i$i$i$i277 & 1)) {
          $439 = $$pre$i$i$i$i277;
          $448 = 10;
         } else {
          $435 = HEAP32[$425 >> 2] | 0;
          $439 = $435 & 255;
          $448 = ($435 & -2) + -1 | 0;
         }
         if (!($439 & 1)) {
          $442 = ($439 & 255) >>> 1;
          if (($439 & 255) < 22) {
           $2953 = 1;
           $447 = 10;
           $467 = $442;
          } else {
           $2953 = 1;
           $447 = ($442 + 16 & 240) + -1 | 0;
           $467 = $442;
          }
         } else {
          $2953 = 0;
          $447 = 10;
          $467 = 0;
         }
         if (($447 | 0) != ($448 | 0)) {
          if (($447 | 0) == 10) {
           $454 = $425 + 1 | 0;
           $455 = HEAP32[$430 >> 2] | 0;
           if ($2953) {
            _memcpy($454 | 0, $455 | 0, (($439 & 255) >>> 1) + 1 | 0) | 0;
            _free($455);
           } else {
            HEAP8[$454 >> 0] = HEAP8[$455 >> 0] | 0;
            _free($455);
           }
           HEAP8[$425 >> 0] = $467 << 1;
           break;
          }
          $451 = $447 + 1 | 0;
          $452 = _malloc($451) | 0;
          if (!($447 >>> 0 <= $448 >>> 0 & ($452 | 0) == 0)) {
           if ($2953) _memcpy($452 | 0, $425 + 1 | 0, (($439 & 255) >>> 1) + 1 | 0) | 0; else {
            $464 = HEAP32[$430 >> 2] | 0;
            HEAP8[$452 >> 0] = HEAP8[$464 >> 0] | 0;
            _free($464);
           }
           HEAP32[$425 >> 2] = $451 | 1;
           HEAP32[$432 >> 2] = $467;
           HEAP32[$430 >> 2] = $452;
          }
         }
        } while (0);
        HEAP32[$425 + 0 >> 2] = HEAP32[$$sroa$7 + 0 >> 2];
        HEAP32[$425 + 4 >> 2] = HEAP32[$$sroa$7 + 4 >> 2];
        HEAP32[$425 + 8 >> 2] = HEAP32[$$sroa$7 + 8 >> 2];
        HEAP32[$$sroa$7 + 0 >> 2] = 0;
        HEAP32[$$sroa$7 + 4 >> 2] = 0;
        HEAP32[$$sroa$7 + 8 >> 2] = 0;
        $470 = HEAP8[$413 >> 0] | 0;
        if (!($470 & 1)) {
         $481 = ($470 & 255) >>> 1;
         $483 = $413 + 1 | 0;
        } else {
         $481 = HEAP32[$$sroa$7 + 16 >> 2] | 0;
         $483 = HEAP32[$$sroa$7 + 20 >> 2] | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $483, $481 >>> 0 < 2 ? $481 : 2);
        $484 = HEAP8[$5 >> 0] | 0;
        $486 = ($484 & 1) == 0;
        if ($486) {
         $2954 = $5 + 1 | 0;
         $495 = ($484 & 255) >>> 1;
        } else {
         $2954 = HEAP32[$5 + 8 >> 2] | 0;
         $495 = HEAP32[$5 + 4 >> 2] | 0;
        }
        $494 = $495 >>> 0 > 2;
        $496 = $494 ? 2 : $495;
        L539 : do if (!$496) $506 = 0; else {
         $$03$i73 = $496;
         $l$04$i72 = $2954;
         $r$05$i71 = 58920;
         while (1) {
          if ((HEAP8[$l$04$i72 >> 0] | 0) != (HEAP8[$r$05$i71 >> 0] | 0)) {
           $506 = 1;
           break L539;
          }
          $$03$i73 = $$03$i73 + -1 | 0;
          if (!$$03$i73) {
           $506 = 0;
           break;
          } else {
           $l$04$i72 = $l$04$i72 + 1 | 0;
           $r$05$i71 = $r$05$i71 + 1 | 0;
          }
         }
        } while (0);
        if (!$486) _free(HEAP32[$5 + 8 >> 2] | 0);
        if (!($506 | $495 >>> 0 < 2 | $494)) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($413);
        $509 = HEAP32[$404 >> 2] | 0;
        $510 = $509 + -12 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8, $4);
        $511 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($8, 0, 58920, 2) | 0;
        HEAP32[$7 + 0 >> 2] = HEAP32[$511 + 0 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$511 + 4 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$511 + 8 >> 2];
        HEAP32[$511 + 0 >> 2] = 0;
        HEAP32[$511 + 4 >> 2] = 0;
        HEAP32[$511 + 8 >> 2] = 0;
        $512 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, 59056, 1) | 0;
        HEAP32[$6 + 0 >> 2] = HEAP32[$512 + 0 >> 2];
        HEAP32[$6 + 4 >> 2] = HEAP32[$512 + 4 >> 2];
        HEAP32[$6 + 8 >> 2] = HEAP32[$512 + 8 >> 2];
        HEAP32[$512 + 0 >> 2] = 0;
        HEAP32[$512 + 4 >> 2] = 0;
        HEAP32[$512 + 8 >> 2] = 0;
        $513 = HEAP8[$413 >> 0] | 0;
        if (!($513 & 1)) {
         $523 = $413 + 1 | 0;
         $524 = ($513 & 255) >>> 1;
        } else {
         $523 = HEAP32[$$sroa$7 + 20 >> 2] | 0;
         $524 = HEAP32[$$sroa$7 + 16 >> 2] | 0;
        }
        $525 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6, $523, $524) | 0;
        $526 = HEAP8[$525 >> 0] | 0;
        $527 = $525 + 1 | 0;
        HEAP8[$num1$i + 0 >> 0] = HEAP8[$527 + 0 >> 0] | 0;
        HEAP8[$num1$i + 1 >> 0] = HEAP8[$527 + 1 >> 0] | 0;
        HEAP8[$num1$i + 2 >> 0] = HEAP8[$527 + 2 >> 0] | 0;
        HEAP8[$num1$i + 3 >> 0] = HEAP8[$527 + 3 >> 0] | 0;
        HEAP8[$num1$i + 4 >> 0] = HEAP8[$527 + 4 >> 0] | 0;
        HEAP8[$num1$i + 5 >> 0] = HEAP8[$527 + 5 >> 0] | 0;
        HEAP8[$num1$i + 6 >> 0] = HEAP8[$527 + 6 >> 0] | 0;
        $529 = HEAP32[$525 + 8 >> 2] | 0;
        HEAP32[$525 + 0 >> 2] = 0;
        HEAP32[$525 + 4 >> 2] = 0;
        HEAP32[$525 + 8 >> 2] = 0;
        do if (!(HEAP8[$510 >> 0] & 1)) {
         HEAP8[$510 + 1 >> 0] = 0;
         HEAP8[$510 >> 0] = 0;
        } else {
         $534 = $509 + -4 | 0;
         HEAP8[HEAP32[$534 >> 2] >> 0] = 0;
         $536 = $509 + -8 | 0;
         HEAP32[$536 >> 2] = 0;
         $$pre$i$i$i28$i = HEAP8[$510 >> 0] | 0;
         if (!($$pre$i$i$i28$i & 1)) {
          $543 = $$pre$i$i$i28$i;
          $552 = 10;
         } else {
          $539 = HEAP32[$510 >> 2] | 0;
          $543 = $539 & 255;
          $552 = ($539 & -2) + -1 | 0;
         }
         do if (!($543 & 1)) {
          $546 = ($543 & 255) >>> 1;
          if (($543 & 255) < 22) {
           $2955 = 1;
           $551 = 10;
           $571 = $546;
           break;
          }
          $2955 = 1;
          $551 = ($546 + 16 & 240) + -1 | 0;
          $571 = $546;
         } else {
          $2955 = 0;
          $551 = 10;
          $571 = 0;
         } while (0);
         if (($551 | 0) == ($552 | 0)) break;
         if (($551 | 0) == 10) {
          $558 = $510 + 1 | 0;
          $559 = HEAP32[$534 >> 2] | 0;
          if ($2955) {
           _memcpy($558 | 0, $559 | 0, (($543 & 255) >>> 1) + 1 | 0) | 0;
           _free($559);
          } else {
           HEAP8[$558 >> 0] = HEAP8[$559 >> 0] | 0;
           _free($559);
          }
          HEAP8[$510 >> 0] = $571 << 1;
          break;
         }
         $555 = $551 + 1 | 0;
         $556 = _malloc($555) | 0;
         if ($551 >>> 0 <= $552 >>> 0 & ($556 | 0) == 0) break;
         if ($2955) _memcpy($556 | 0, $510 + 1 | 0, (($543 & 255) >>> 1) + 1 | 0) | 0; else {
          $568 = HEAP32[$534 >> 2] | 0;
          HEAP8[$556 >> 0] = HEAP8[$568 >> 0] | 0;
          _free($568);
         }
         HEAP32[$510 >> 2] = $555 | 1;
         HEAP32[$536 >> 2] = $571;
         HEAP32[$534 >> 2] = $556;
        } while (0);
        HEAP8[$509 + -12 >> 0] = $526;
        $575 = $509 + -11 | 0;
        HEAP8[$575 + 0 >> 0] = HEAP8[$num1$i + 0 >> 0] | 0;
        HEAP8[$575 + 1 >> 0] = HEAP8[$num1$i + 1 >> 0] | 0;
        HEAP8[$575 + 2 >> 0] = HEAP8[$num1$i + 2 >> 0] | 0;
        HEAP8[$575 + 3 >> 0] = HEAP8[$num1$i + 3 >> 0] | 0;
        HEAP8[$575 + 4 >> 0] = HEAP8[$num1$i + 4 >> 0] | 0;
        HEAP8[$575 + 5 >> 0] = HEAP8[$num1$i + 5 >> 0] | 0;
        HEAP8[$575 + 6 >> 0] = HEAP8[$num1$i + 6 >> 0] | 0;
        HEAP32[$509 + -4 >> 2] = $529;
        HEAP8[$num1$i + 0 >> 0] = 0;
        HEAP8[$num1$i + 1 >> 0] = 0;
        HEAP8[$num1$i + 2 >> 0] = 0;
        HEAP8[$num1$i + 3 >> 0] = 0;
        HEAP8[$num1$i + 4 >> 0] = 0;
        HEAP8[$num1$i + 5 >> 0] = 0;
        HEAP8[$num1$i + 6 >> 0] = 0;
        if (HEAP8[$6 >> 0] & 1) _free(HEAP32[$6 + 8 >> 2] | 0);
        if (HEAP8[$7 >> 0] & 1) _free(HEAP32[$7 + 8 >> 2] | 0);
        if (HEAP8[$8 >> 0] & 1) _free(HEAP32[$8 + 8 >> 2] | 0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$sroa$7);
        $$0$i = $402;
       }
      }
     } else $$0$i = $first;
    }
   } else $$0$i = $first; while (0);
   if (($$0$i | 0) == ($first | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $592 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($592 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $594 = $db + 16 | 0;
   HEAP32[$10 >> 2] = HEAP32[$db + 12 >> 2];
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($9, $592 + -24 | 0, $10);
   $598 = $db + 20 | 0;
   $599 = HEAP32[$598 >> 2] | 0;
   $601 = HEAP32[$db + 24 >> 2] | 0;
   if ($599 >>> 0 < $601 >>> 0) {
    if (!$599) $615 = 0; else {
     HEAP32[$599 + 12 >> 2] = HEAP32[$9 + 12 >> 2];
     HEAP32[$599 >> 2] = HEAP32[$9 >> 2];
     $610 = $9 + 4 | 0;
     HEAP32[$599 + 4 >> 2] = HEAP32[$610 >> 2];
     $612 = $9 + 8 | 0;
     HEAP32[$599 + 8 >> 2] = HEAP32[$612 >> 2];
     HEAP32[$612 >> 2] = 0;
     HEAP32[$610 >> 2] = 0;
     HEAP32[$9 >> 2] = 0;
     $615 = HEAP32[$598 >> 2] | 0;
    }
    HEAP32[$598 >> 2] = $615 + 16;
   } else {
    $619 = HEAP32[$594 >> 2] | 0;
    $621 = $599 - $619 >> 4;
    $622 = $621 + 1 | 0;
    if (($622 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $625 = $601 - $619 | 0;
    if ($625 >> 4 >>> 0 < 1073741823) {
     $628 = $625 >> 3;
     $$0$i$i$i78 = $628 >>> 0 < $622 >>> 0 ? $622 : $628;
    } else $$0$i$i$i78 = 2147483647;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i78, $621, $db + 28 | 0);
    $631 = $__v$i$i$i + 8 | 0;
    $632 = HEAP32[$631 >> 2] | 0;
    if ($632) {
     HEAP32[$632 + 12 >> 2] = HEAP32[$9 + 12 >> 2];
     HEAP32[$632 >> 2] = HEAP32[$9 >> 2];
     $640 = $9 + 4 | 0;
     HEAP32[$632 + 4 >> 2] = HEAP32[$640 >> 2];
     $642 = $9 + 8 | 0;
     HEAP32[$632 + 8 >> 2] = HEAP32[$642 >> 2];
     HEAP32[$642 >> 2] = 0;
     HEAP32[$640 >> 2] = 0;
     HEAP32[$9 >> 2] = 0;
    }
    HEAP32[$631 >> 2] = $632 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($594, $__v$i$i$i);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($9);
   $$0 = $$0$i;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 79:
  {
   $1269 = $db + 4 | 0;
   $1275 = ((HEAP32[$1269 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   $1276 = $first + 1 | 0;
   $1277 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1276, $last, $db) | 0;
   $1283 = ((HEAP32[$1269 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   if (($1277 | 0) == ($1276 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1285 = $db + 16 | 0;
   $1287 = HEAP32[$db + 12 >> 2] | 0;
   $1288 = $db + 20 | 0;
   $1289 = HEAP32[$1288 >> 2] | 0;
   $1291 = HEAP32[$db + 24 >> 2] | 0;
   if ($1289 >>> 0 < $1291 >>> 0) {
    if (!$1289) $1298 = 0; else {
     HEAP32[$1289 >> 2] = 0;
     HEAP32[$1289 + 4 >> 2] = 0;
     HEAP32[$1289 + 8 >> 2] = 0;
     HEAP32[$1289 + 12 >> 2] = $1287;
     $1298 = HEAP32[$1288 >> 2] | 0;
    }
    HEAP32[$1288 >> 2] = $1298 + 16;
   } else {
    $1302 = HEAP32[$1285 >> 2] | 0;
    $1304 = $1289 - $1302 >> 4;
    $1305 = $1304 + 1 | 0;
    if (($1305 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $1308 = $1291 - $1302 | 0;
    if ($1308 >> 4 >>> 0 < 1073741823) {
     $1311 = $1308 >> 3;
     $$0$i$i$i118 = $1311 >>> 0 < $1305 >>> 0 ? $1305 : $1311;
    } else $$0$i$i$i118 = 2147483647;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i118, $1304, $db + 28 | 0);
    $1314 = $__v$i$i$i + 8 | 0;
    $1315 = HEAP32[$1314 >> 2] | 0;
    if ($1315) {
     HEAP32[$1315 >> 2] = 0;
     HEAP32[$1315 + 4 >> 2] = 0;
     HEAP32[$1315 + 8 >> 2] = 0;
     HEAP32[$1315 + 12 >> 2] = $1287;
    }
    HEAP32[$1314 >> 2] = $1315 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1285, $__v$i$i$i);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
   }
   if ($1275 >>> 0 >= $1283 >>> 0) {
    $$0 = $1277;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1322 = $19 + 1 | 0;
   $1323 = $__v$i$i$i + 8 | 0;
   $1324 = $19 + 8 | 0;
   $1325 = $19 + 4 | 0;
   $k5$0426 = $1275;
   while (1) {
    $1326 = HEAP32[$db >> 2] | 0;
    $1327 = $1326 + ($k5$0426 * 24 | 0) + 12 | 0;
    $1328 = HEAP8[$1327 >> 0] | 0;
    if (!($1328 & 1)) {
     $1339 = ($1328 & 255) >>> 1;
     $1341 = $1327 + 1 | 0;
    } else {
     $1339 = HEAP32[$1326 + ($k5$0426 * 24 | 0) + 16 >> 2] | 0;
     $1341 = HEAP32[$1326 + ($k5$0426 * 24 | 0) + 20 >> 2] | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($19, $1341, $1339 >>> 0 < 2 ? $1339 : 2);
    $1342 = HEAP8[$19 >> 0] | 0;
    $1344 = ($1342 & 1) == 0;
    if ($1344) {
     $1350 = ($1342 & 255) >>> 1;
     $2960 = $1322;
    } else {
     $1350 = HEAP32[$1325 >> 2] | 0;
     $2960 = HEAP32[$1324 >> 2] | 0;
    }
    $1349 = $1350 >>> 0 > 2;
    $1351 = $1349 ? 2 : $1350;
    L644 : do if (!$1351) $1361 = 0; else {
     $$03$i135 = $1351;
     $l$04$i134 = $2960;
     $r$05$i133 = 58920;
     while (1) {
      if ((HEAP8[$l$04$i134 >> 0] | 0) != (HEAP8[$r$05$i133 >> 0] | 0)) {
       $1361 = 1;
       break L644;
      }
      $$03$i135 = $$03$i135 + -1 | 0;
      if (!$$03$i135) {
       $1361 = 0;
       break;
      } else {
       $l$04$i134 = $l$04$i134 + 1 | 0;
       $r$05$i133 = $r$05$i133 + 1 | 0;
      }
     }
    } while (0);
    if (!$1344) _free(HEAP32[$1324 >> 2] | 0);
    $1363 = HEAP32[$db >> 2] | 0;
    if ($1361 | $1350 >>> 0 < 2 | $1349) {
     $1367 = $1363 + ($k5$0426 * 24 | 0) + 12 | 0;
     if (!(HEAP8[$1367 >> 0] & 1)) $1375 = $1367 + 1 | 0; else $1375 = HEAP32[$1363 + ($k5$0426 * 24 | 0) + 20 >> 2] | 0;
     if ((HEAP8[$1375 >> 0] | 0) == 40) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1363 + ($k5$0426 * 24 | 0) | 0, 58944, 1) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$db >> 2] | 0) + ($k5$0426 * 24 | 0) + 12 | 0, 0, 58936, 1) | 0;
     }
    } else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1363 + ($k5$0426 * 24 | 0) | 0, 58928, 2) | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$db >> 2] | 0) + ($k5$0426 * 24 | 0) + 12 | 0, 0, 58936, 1) | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$db >> 2] | 0) + ($k5$0426 * 24 | 0) | 0, 58952, 2) | 0;
    $1382 = HEAP32[$1288 >> 2] | 0;
    $1383 = $1382 + -16 | 0;
    $1384 = HEAP32[$db >> 2] | 0;
    $1385 = $1384 + ($k5$0426 * 24 | 0) | 0;
    $1386 = $1382 + -12 | 0;
    $1387 = HEAP32[$1386 >> 2] | 0;
    if (($1387 | 0) == (HEAP32[$1382 + -8 >> 2] | 0)) {
     $1415 = ($1387 - (HEAP32[$1383 >> 2] | 0) | 0) / 24 | 0;
     $1416 = $1415 + 1 | 0;
     if (($1416 | 0) < 0) {
      label = 455;
      break;
     }
     if ($1415 >>> 0 < 1073741823) {
      $1419 = $1415 << 1;
      $$0$i$i$i127 = $1419 >>> 0 < $1416 >>> 0 ? $1416 : $1419;
     } else $$0$i$i$i127 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i127, $1415, $1382 + -4 | 0);
     $1422 = HEAP32[$1323 >> 2] | 0;
     do if ($1422) {
      if (!(HEAP8[$1385 >> 0] & 1)) {
       HEAP32[$1422 + 0 >> 2] = HEAP32[$1385 + 0 >> 2];
       HEAP32[$1422 + 4 >> 2] = HEAP32[$1385 + 4 >> 2];
       HEAP32[$1422 + 8 >> 2] = HEAP32[$1385 + 8 >> 2];
      } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1422, HEAP32[$1384 + ($k5$0426 * 24 | 0) + 8 >> 2] | 0, HEAP32[$1384 + ($k5$0426 * 24 | 0) + 4 >> 2] | 0);
      $1431 = $1422 + 12 | 0;
      $1432 = $1384 + ($k5$0426 * 24 | 0) + 12 | 0;
      if (!(HEAP8[$1432 >> 0] & 1)) {
       HEAP32[$1431 + 0 >> 2] = HEAP32[$1432 + 0 >> 2];
       HEAP32[$1431 + 4 >> 2] = HEAP32[$1432 + 4 >> 2];
       HEAP32[$1431 + 8 >> 2] = HEAP32[$1432 + 8 >> 2];
       break;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1431, HEAP32[$1384 + ($k5$0426 * 24 | 0) + 20 >> 2] | 0, HEAP32[$1384 + ($k5$0426 * 24 | 0) + 16 >> 2] | 0);
       break;
      }
     } while (0);
     HEAP32[$1323 >> 2] = $1422 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1383, $__v$i$i$i);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
    } else {
     if (!$1387) $1409 = 0; else {
      if (!(HEAP8[$1385 >> 0] & 1)) {
       HEAP32[$1387 + 0 >> 2] = HEAP32[$1385 + 0 >> 2];
       HEAP32[$1387 + 4 >> 2] = HEAP32[$1385 + 4 >> 2];
       HEAP32[$1387 + 8 >> 2] = HEAP32[$1385 + 8 >> 2];
      } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1387, HEAP32[$1384 + ($k5$0426 * 24 | 0) + 8 >> 2] | 0, HEAP32[$1384 + ($k5$0426 * 24 | 0) + 4 >> 2] | 0);
      $1399 = $1387 + 12 | 0;
      $1400 = $1384 + ($k5$0426 * 24 | 0) + 12 | 0;
      if (!(HEAP8[$1400 >> 0] & 1)) {
       HEAP32[$1399 + 0 >> 2] = HEAP32[$1400 + 0 >> 2];
       HEAP32[$1399 + 4 >> 2] = HEAP32[$1400 + 4 >> 2];
       HEAP32[$1399 + 8 >> 2] = HEAP32[$1400 + 8 >> 2];
      } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1399, HEAP32[$1384 + ($k5$0426 * 24 | 0) + 20 >> 2] | 0, HEAP32[$1384 + ($k5$0426 * 24 | 0) + 16 >> 2] | 0);
      $1409 = HEAP32[$1386 >> 2] | 0;
     }
     HEAP32[$1386 >> 2] = $1409 + 24;
    }
    $k5$0426 = $k5$0426 + 1 | 0;
    if ($k5$0426 >>> 0 >= $1283 >>> 0) {
     $$0 = $1277;
     label = 920;
     break;
    }
   }
   if ((label | 0) == 455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 920) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 80:
  {
   $1443 = $db + 4 | 0;
   $1449 = ((HEAP32[$1443 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   $1450 = $first + 1 | 0;
   $1451 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1450, $last, $db) | 0;
   $1457 = ((HEAP32[$1443 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   if (($1451 | 0) == ($1450 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1459 = $db + 16 | 0;
   $1461 = HEAP32[$db + 12 >> 2] | 0;
   $1462 = $db + 20 | 0;
   $1463 = HEAP32[$1462 >> 2] | 0;
   $1465 = HEAP32[$db + 24 >> 2] | 0;
   if ($1463 >>> 0 < $1465 >>> 0) {
    if (!$1463) $1472 = 0; else {
     HEAP32[$1463 >> 2] = 0;
     HEAP32[$1463 + 4 >> 2] = 0;
     HEAP32[$1463 + 8 >> 2] = 0;
     HEAP32[$1463 + 12 >> 2] = $1461;
     $1472 = HEAP32[$1462 >> 2] | 0;
    }
    HEAP32[$1462 >> 2] = $1472 + 16;
   } else {
    $1476 = HEAP32[$1459 >> 2] | 0;
    $1478 = $1463 - $1476 >> 4;
    $1479 = $1478 + 1 | 0;
    if (($1479 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $1482 = $1465 - $1476 | 0;
    if ($1482 >> 4 >>> 0 < 1073741823) {
     $1485 = $1482 >> 3;
     $$0$i$i$i137 = $1485 >>> 0 < $1479 >>> 0 ? $1479 : $1485;
    } else $$0$i$i$i137 = 2147483647;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i137, $1478, $db + 28 | 0);
    $1488 = $__v$i$i$i + 8 | 0;
    $1489 = HEAP32[$1488 >> 2] | 0;
    if ($1489) {
     HEAP32[$1489 >> 2] = 0;
     HEAP32[$1489 + 4 >> 2] = 0;
     HEAP32[$1489 + 8 >> 2] = 0;
     HEAP32[$1489 + 12 >> 2] = $1461;
    }
    HEAP32[$1488 >> 2] = $1489 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1459, $__v$i$i$i);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
   }
   if ($1449 >>> 0 >= $1457 >>> 0) {
    $$0 = $1451;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1496 = $20 + 1 | 0;
   $1497 = $21 + 1 | 0;
   $1498 = $21 + 8 | 0;
   $1499 = $21 + 4 | 0;
   $1500 = $__v$i$i$i + 8 | 0;
   $1501 = $20 + 8 | 0;
   $1502 = $20 + 4 | 0;
   $k8$0430 = $1449;
   while (1) {
    $1503 = HEAP32[$db >> 2] | 0;
    $1504 = $1503 + ($k8$0430 * 24 | 0) + 12 | 0;
    $1505 = HEAP8[$1504 >> 0] | 0;
    if (!($1505 & 1)) {
     $1516 = ($1505 & 255) >>> 1;
     $1518 = $1504 + 1 | 0;
    } else {
     $1516 = HEAP32[$1503 + ($k8$0430 * 24 | 0) + 16 >> 2] | 0;
     $1518 = HEAP32[$1503 + ($k8$0430 * 24 | 0) + 20 >> 2] | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($20, $1518, $1516 >>> 0 < 2 ? $1516 : 2);
    $1519 = HEAP8[$20 >> 0] | 0;
    $1521 = ($1519 & 1) == 0;
    if ($1521) {
     $1527 = ($1519 & 255) >>> 1;
     $2961 = $1496;
    } else {
     $1527 = HEAP32[$1502 >> 2] | 0;
     $2961 = HEAP32[$1501 >> 2] | 0;
    }
    $1526 = $1527 >>> 0 > 2;
    $1528 = $1526 ? 2 : $1527;
    L726 : do if (!$1528) $1538 = 0; else {
     $$03$i152 = $1528;
     $l$04$i151 = $2961;
     $r$05$i150 = 58920;
     while (1) {
      if ((HEAP8[$l$04$i151 >> 0] | 0) != (HEAP8[$r$05$i150 >> 0] | 0)) {
       $1538 = 1;
       break L726;
      }
      $$03$i152 = $$03$i152 + -1 | 0;
      if (!$$03$i152) {
       $1538 = 0;
       break;
      } else {
       $l$04$i151 = $l$04$i151 + 1 | 0;
       $r$05$i150 = $r$05$i150 + 1 | 0;
      }
     }
    } while (0);
    if (!$1521) _free(HEAP32[$1501 >> 2] | 0);
    $1540 = HEAP32[$db >> 2] | 0;
    if ($1538 | $1527 >>> 0 < 2 | $1526) {
     $1544 = $1540 + ($k8$0430 * 24 | 0) + 12 | 0;
     if (!(HEAP8[$1544 >> 0] & 1)) $1552 = $1544 + 1 | 0; else $1552 = HEAP32[$1540 + ($k8$0430 * 24 | 0) + 20 >> 2] | 0;
     if ((HEAP8[$1552 >> 0] | 0) == 40) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1540 + ($k8$0430 * 24 | 0) | 0, 58944, 1) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$db >> 2] | 0) + ($k8$0430 * 24 | 0) + 12 | 0, 0, 58936, 1) | 0;
     }
    } else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1540 + ($k8$0430 * 24 | 0) | 0, 58928, 2) | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$db >> 2] | 0) + ($k8$0430 * 24 | 0) + 12 | 0, 0, 58936, 1) | 0;
    }
    $1559 = HEAP32[$db >> 2] | 0;
    $1560 = $1559 + ($k8$0430 * 24 | 0) | 0;
    do if ((HEAP8[$1450 >> 0] | 0) == 85) {
     $1561 = HEAP8[$1560 >> 0] | 0;
     if (!($1561 & 1)) {
      $1572 = ($1561 & 255) >>> 1;
      $1574 = $1560 + 1 | 0;
     } else {
      $1572 = HEAP32[$1559 + ($k8$0430 * 24 | 0) + 4 >> 2] | 0;
      $1574 = HEAP32[$1559 + ($k8$0430 * 24 | 0) + 8 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($21, $1574, $1572 >>> 0 < 12 ? $1572 : 12);
     $1575 = HEAP8[$21 >> 0] | 0;
     $1577 = ($1575 & 1) == 0;
     if ($1577) {
      $1583 = ($1575 & 255) >>> 1;
      $2962 = $1497;
     } else {
      $1583 = HEAP32[$1499 >> 2] | 0;
      $2962 = HEAP32[$1498 >> 2] | 0;
     }
     $1582 = $1583 >>> 0 > 12;
     $1584 = $1582 ? 12 : $1583;
     L753 : do if (!$1584) label = 510; else {
      $$03$i160 = $1584;
      $l$04$i159 = $2962;
      $r$05$i158 = 58960;
      while (1) {
       $1586 = HEAP8[$l$04$i159 >> 0] | 0;
       $1587 = HEAP8[$r$05$i158 >> 0] | 0;
       if ($1586 << 24 >> 24 != $1587 << 24 >> 24) break;
       $$03$i160 = $$03$i160 + -1 | 0;
       if (!$$03$i160) {
        label = 510;
        break L753;
       } else {
        $l$04$i159 = $l$04$i159 + 1 | 0;
        $r$05$i158 = $r$05$i158 + 1 | 0;
       }
      }
      if ($1586 << 24 >> 24 == $1587 << 24 >> 24) label = 510; else $1599 = ($1586 & 255) - ($1587 & 255) | 0;
     } while (0);
     if ((label | 0) == 510) {
      label = 0;
      $1599 = $1583 >>> 0 < 12 ? -1 : $1582 & 1;
     }
     if (!$1577) _free(HEAP32[$1498 >> 2] | 0);
     $1601 = HEAP32[$db >> 2] | 0;
     $1602 = $1601 + ($k8$0430 * 24 | 0) | 0;
     if (!$1599) {
      $1604 = HEAP8[$1602 >> 0] | 0;
      if (!($1604 & 1)) {
       $1608 = ($1604 & 255) >>> 1;
       $1619 = $1608 >>> 0 < 11 ? $1608 : 11;
       $1620 = $1608;
       $1622 = 10;
       $1625 = $1604;
      } else {
       $1612 = HEAP32[$1601 + ($k8$0430 * 24 | 0) + 4 >> 2] | 0;
       $1615 = HEAP32[$1602 >> 2] | 0;
       $1619 = $1612 >>> 0 < 11 ? $1612 : 11;
       $1620 = $1612;
       $1622 = ($1615 & -2) + -1 | 0;
       $1625 = $1615 & 255;
      }
      if (($1619 - $1620 + $1622 | 0) >>> 0 < 2) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($1602, $1622, 2 - $1619 + $1620 - $1622 | 0, $1620, 0, $1619, 2, 58984);
       break;
      }
      if (!($1625 & 1)) $1634 = $1602 + 1 | 0; else $1634 = HEAP32[$1601 + ($k8$0430 * 24 | 0) + 8 >> 2] | 0;
      do if (($1619 | 0) == 2) {
       $$1$i$i = 0;
       $$12$i$i = 58984;
       $$14$i$i = 2;
       $2963 = 2;
       label = 531;
      } else {
       $1631 = $1620 - $1619 | 0;
       if (($1620 | 0) == ($1619 | 0)) {
        $$1$i$i = 0;
        $$12$i$i = 58984;
        $$14$i$i = 2;
        $2963 = $1619;
        label = 531;
        break;
       }
       if ($1619 >>> 0 > 2) {
        HEAP8[$1634 >> 0] = 105;
        HEAP8[$1634 + 1 >> 0] = 100;
        _memmove($1634 + 2 | 0, $1634 + $1619 | 0, $1631 | 0) | 0;
        $$2$i$i = 2;
        $1650 = $1619;
        break;
       }
       do if ($1634 >>> 0 < 58984 >>> 0 & ($1634 + $1620 | 0) >>> 0 > 58984 >>> 0) if (($1634 + $1619 | 0) >>> 0 > 58984 >>> 0) {
        _memcpy($1634 | 0, 58984, $1619 | 0) | 0;
        $$0$i$i = $1619;
        $$01$i$i = 58986;
        $$03$i$i = 2 - $1619 | 0;
        $1646 = 0;
        break;
       } else {
        $$0$i$i = 0;
        $$01$i$i = 58984 + (2 - $1619) | 0;
        $$03$i$i = 2;
        $1646 = $1619;
        break;
       } else {
        $$0$i$i = 0;
        $$01$i$i = 58984;
        $$03$i$i = 2;
        $1646 = $1619;
       } while (0);
       _memmove($1634 + ($$0$i$i + $$03$i$i) | 0, $1634 + ($$0$i$i + $1646) | 0, $1631 | 0) | 0;
       $$1$i$i = $$0$i$i;
       $$12$i$i = $$01$i$i;
       $$14$i$i = $$03$i$i;
       $2963 = $1646;
       label = 531;
      } while (0);
      if ((label | 0) == 531) {
       label = 0;
       _memmove($1634 + $$1$i$i | 0, $$12$i$i | 0, $$14$i$i | 0) | 0;
       $$2$i$i = $$14$i$i;
       $1650 = $2963;
      }
      $1651 = $$2$i$i - $1650 + $1620 | 0;
      if (!(HEAP8[$1602 >> 0] & 1)) HEAP8[$1602 >> 0] = $1651 << 1; else HEAP32[$1601 + ($k8$0430 * 24 | 0) + 4 >> 2] = $1651;
      HEAP8[$1634 + $1651 >> 0] = 0;
     } else {
      $1603 = $1602;
      label = 514;
     }
    } else {
     $1603 = $1560;
     label = 514;
    } while (0);
    if ((label | 0) == 514) {
     label = 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1603, 58976, 1) | 0;
    }
    $1662 = HEAP32[$1462 >> 2] | 0;
    $1663 = $1662 + -16 | 0;
    $1664 = HEAP32[$db >> 2] | 0;
    $1665 = $1664 + ($k8$0430 * 24 | 0) | 0;
    $1666 = $1662 + -12 | 0;
    $1667 = HEAP32[$1666 >> 2] | 0;
    if (($1667 | 0) == (HEAP32[$1662 + -8 >> 2] | 0)) {
     $1695 = ($1667 - (HEAP32[$1663 >> 2] | 0) | 0) / 24 | 0;
     $1696 = $1695 + 1 | 0;
     if (($1696 | 0) < 0) {
      label = 548;
      break;
     }
     if ($1695 >>> 0 < 1073741823) {
      $1699 = $1695 << 1;
      $$0$i$i$i154 = $1699 >>> 0 < $1696 >>> 0 ? $1696 : $1699;
     } else $$0$i$i$i154 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i154, $1695, $1662 + -4 | 0);
     $1702 = HEAP32[$1500 >> 2] | 0;
     do if ($1702) {
      if (!(HEAP8[$1665 >> 0] & 1)) {
       HEAP32[$1702 + 0 >> 2] = HEAP32[$1665 + 0 >> 2];
       HEAP32[$1702 + 4 >> 2] = HEAP32[$1665 + 4 >> 2];
       HEAP32[$1702 + 8 >> 2] = HEAP32[$1665 + 8 >> 2];
      } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1702, HEAP32[$1664 + ($k8$0430 * 24 | 0) + 8 >> 2] | 0, HEAP32[$1664 + ($k8$0430 * 24 | 0) + 4 >> 2] | 0);
      $1711 = $1702 + 12 | 0;
      $1712 = $1664 + ($k8$0430 * 24 | 0) + 12 | 0;
      if (!(HEAP8[$1712 >> 0] & 1)) {
       HEAP32[$1711 + 0 >> 2] = HEAP32[$1712 + 0 >> 2];
       HEAP32[$1711 + 4 >> 2] = HEAP32[$1712 + 4 >> 2];
       HEAP32[$1711 + 8 >> 2] = HEAP32[$1712 + 8 >> 2];
       break;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1711, HEAP32[$1664 + ($k8$0430 * 24 | 0) + 20 >> 2] | 0, HEAP32[$1664 + ($k8$0430 * 24 | 0) + 16 >> 2] | 0);
       break;
      }
     } while (0);
     HEAP32[$1500 >> 2] = $1702 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1663, $__v$i$i$i);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
    } else {
     if (!$1667) $1689 = 0; else {
      if (!(HEAP8[$1665 >> 0] & 1)) {
       HEAP32[$1667 + 0 >> 2] = HEAP32[$1665 + 0 >> 2];
       HEAP32[$1667 + 4 >> 2] = HEAP32[$1665 + 4 >> 2];
       HEAP32[$1667 + 8 >> 2] = HEAP32[$1665 + 8 >> 2];
      } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1667, HEAP32[$1664 + ($k8$0430 * 24 | 0) + 8 >> 2] | 0, HEAP32[$1664 + ($k8$0430 * 24 | 0) + 4 >> 2] | 0);
      $1679 = $1667 + 12 | 0;
      $1680 = $1664 + ($k8$0430 * 24 | 0) + 12 | 0;
      if (!(HEAP8[$1680 >> 0] & 1)) {
       HEAP32[$1679 + 0 >> 2] = HEAP32[$1680 + 0 >> 2];
       HEAP32[$1679 + 4 >> 2] = HEAP32[$1680 + 4 >> 2];
       HEAP32[$1679 + 8 >> 2] = HEAP32[$1680 + 8 >> 2];
      } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1679, HEAP32[$1664 + ($k8$0430 * 24 | 0) + 20 >> 2] | 0, HEAP32[$1664 + ($k8$0430 * 24 | 0) + 16 >> 2] | 0);
      $1689 = HEAP32[$1666 >> 2] | 0;
     }
     HEAP32[$1666 >> 2] = $1689 + 24;
    }
    $k8$0430 = $k8$0430 + 1 | 0;
    if ($k8$0430 >>> 0 >= $1457 >>> 0) {
     $$0 = $1451;
     label = 920;
     break;
    }
   }
   if ((label | 0) == 548) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 920) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 82:
  {
   $1723 = $db + 4 | 0;
   $1729 = ((HEAP32[$1723 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   $1730 = $first + 1 | 0;
   $1731 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1730, $last, $db) | 0;
   $1737 = ((HEAP32[$1723 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   if (($1731 | 0) == ($1730 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1739 = $db + 16 | 0;
   $1741 = HEAP32[$db + 12 >> 2] | 0;
   $1742 = $db + 20 | 0;
   $1743 = HEAP32[$1742 >> 2] | 0;
   $1745 = HEAP32[$db + 24 >> 2] | 0;
   if ($1743 >>> 0 < $1745 >>> 0) {
    if (!$1743) $1752 = 0; else {
     HEAP32[$1743 >> 2] = 0;
     HEAP32[$1743 + 4 >> 2] = 0;
     HEAP32[$1743 + 8 >> 2] = 0;
     HEAP32[$1743 + 12 >> 2] = $1741;
     $1752 = HEAP32[$1742 >> 2] | 0;
    }
    HEAP32[$1742 >> 2] = $1752 + 16;
   } else {
    $1756 = HEAP32[$1739 >> 2] | 0;
    $1758 = $1743 - $1756 >> 4;
    $1759 = $1758 + 1 | 0;
    if (($1759 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $1762 = $1745 - $1756 | 0;
    if ($1762 >> 4 >>> 0 < 1073741823) {
     $1765 = $1762 >> 3;
     $$0$i$i$i164 = $1765 >>> 0 < $1759 >>> 0 ? $1759 : $1765;
    } else $$0$i$i$i164 = 2147483647;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i164, $1758, $db + 28 | 0);
    $1768 = $__v$i$i$i + 8 | 0;
    $1769 = HEAP32[$1768 >> 2] | 0;
    if ($1769) {
     HEAP32[$1769 >> 2] = 0;
     HEAP32[$1769 + 4 >> 2] = 0;
     HEAP32[$1769 + 8 >> 2] = 0;
     HEAP32[$1769 + 12 >> 2] = $1741;
    }
    HEAP32[$1768 >> 2] = $1769 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1739, $__v$i$i$i);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
   }
   if ($1729 >>> 0 >= $1737 >>> 0) {
    $$0 = $1731;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1776 = $22 + 1 | 0;
   $1777 = $__v$i$i$i + 8 | 0;
   $1778 = $22 + 8 | 0;
   $1779 = $22 + 4 | 0;
   $k11$0436 = $1729;
   while (1) {
    $1780 = HEAP32[$db >> 2] | 0;
    $1781 = $1780 + ($k11$0436 * 24 | 0) + 12 | 0;
    $1782 = HEAP8[$1781 >> 0] | 0;
    if (!($1782 & 1)) {
     $1793 = ($1782 & 255) >>> 1;
     $1795 = $1781 + 1 | 0;
    } else {
     $1793 = HEAP32[$1780 + ($k11$0436 * 24 | 0) + 16 >> 2] | 0;
     $1795 = HEAP32[$1780 + ($k11$0436 * 24 | 0) + 20 >> 2] | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($22, $1795, $1793 >>> 0 < 2 ? $1793 : 2);
    $1796 = HEAP8[$22 >> 0] | 0;
    $1798 = ($1796 & 1) == 0;
    if ($1798) {
     $1804 = ($1796 & 255) >>> 1;
     $2964 = $1776;
    } else {
     $1804 = HEAP32[$1779 >> 2] | 0;
     $2964 = HEAP32[$1778 >> 2] | 0;
    }
    $1803 = $1804 >>> 0 > 2;
    $1805 = $1803 ? 2 : $1804;
    L863 : do if (!$1805) $1815 = 0; else {
     $$03$i177 = $1805;
     $l$04$i176 = $2964;
     $r$05$i175 = 58920;
     while (1) {
      if ((HEAP8[$l$04$i176 >> 0] | 0) != (HEAP8[$r$05$i175 >> 0] | 0)) {
       $1815 = 1;
       break L863;
      }
      $$03$i177 = $$03$i177 + -1 | 0;
      if (!$$03$i177) {
       $1815 = 0;
       break;
      } else {
       $l$04$i176 = $l$04$i176 + 1 | 0;
       $r$05$i175 = $r$05$i175 + 1 | 0;
      }
     }
    } while (0);
    if (!$1798) _free(HEAP32[$1778 >> 2] | 0);
    $1817 = HEAP32[$db >> 2] | 0;
    if ($1815 | $1804 >>> 0 < 2 | $1803) {
     $1821 = $1817 + ($k11$0436 * 24 | 0) + 12 | 0;
     if (!(HEAP8[$1821 >> 0] & 1)) $1829 = $1821 + 1 | 0; else $1829 = HEAP32[$1817 + ($k11$0436 * 24 | 0) + 20 >> 2] | 0;
     if ((HEAP8[$1829 >> 0] | 0) == 40) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1817 + ($k11$0436 * 24 | 0) | 0, 58944, 1) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$db >> 2] | 0) + ($k11$0436 * 24 | 0) + 12 | 0, 0, 58936, 1) | 0;
     }
    } else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1817 + ($k11$0436 * 24 | 0) | 0, 58928, 2) | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$db >> 2] | 0) + ($k11$0436 * 24 | 0) + 12 | 0, 0, 58936, 1) | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$db >> 2] | 0) + ($k11$0436 * 24 | 0) | 0, 58992, 1) | 0;
    $1836 = HEAP32[$1742 >> 2] | 0;
    $1837 = $1836 + -16 | 0;
    $1838 = HEAP32[$db >> 2] | 0;
    $1839 = $1838 + ($k11$0436 * 24 | 0) | 0;
    $1840 = $1836 + -12 | 0;
    $1841 = HEAP32[$1840 >> 2] | 0;
    if (($1841 | 0) == (HEAP32[$1836 + -8 >> 2] | 0)) {
     $1869 = ($1841 - (HEAP32[$1837 >> 2] | 0) | 0) / 24 | 0;
     $1870 = $1869 + 1 | 0;
     if (($1870 | 0) < 0) {
      label = 603;
      break;
     }
     if ($1869 >>> 0 < 1073741823) {
      $1873 = $1869 << 1;
      $$0$i$i$i180 = $1873 >>> 0 < $1870 >>> 0 ? $1870 : $1873;
     } else $$0$i$i$i180 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i180, $1869, $1836 + -4 | 0);
     $1876 = HEAP32[$1777 >> 2] | 0;
     do if ($1876) {
      if (!(HEAP8[$1839 >> 0] & 1)) {
       HEAP32[$1876 + 0 >> 2] = HEAP32[$1839 + 0 >> 2];
       HEAP32[$1876 + 4 >> 2] = HEAP32[$1839 + 4 >> 2];
       HEAP32[$1876 + 8 >> 2] = HEAP32[$1839 + 8 >> 2];
      } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1876, HEAP32[$1838 + ($k11$0436 * 24 | 0) + 8 >> 2] | 0, HEAP32[$1838 + ($k11$0436 * 24 | 0) + 4 >> 2] | 0);
      $1885 = $1876 + 12 | 0;
      $1886 = $1838 + ($k11$0436 * 24 | 0) + 12 | 0;
      if (!(HEAP8[$1886 >> 0] & 1)) {
       HEAP32[$1885 + 0 >> 2] = HEAP32[$1886 + 0 >> 2];
       HEAP32[$1885 + 4 >> 2] = HEAP32[$1886 + 4 >> 2];
       HEAP32[$1885 + 8 >> 2] = HEAP32[$1886 + 8 >> 2];
       break;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1885, HEAP32[$1838 + ($k11$0436 * 24 | 0) + 20 >> 2] | 0, HEAP32[$1838 + ($k11$0436 * 24 | 0) + 16 >> 2] | 0);
       break;
      }
     } while (0);
     HEAP32[$1777 >> 2] = $1876 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1837, $__v$i$i$i);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
    } else {
     if (!$1841) $1863 = 0; else {
      if (!(HEAP8[$1839 >> 0] & 1)) {
       HEAP32[$1841 + 0 >> 2] = HEAP32[$1839 + 0 >> 2];
       HEAP32[$1841 + 4 >> 2] = HEAP32[$1839 + 4 >> 2];
       HEAP32[$1841 + 8 >> 2] = HEAP32[$1839 + 8 >> 2];
      } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1841, HEAP32[$1838 + ($k11$0436 * 24 | 0) + 8 >> 2] | 0, HEAP32[$1838 + ($k11$0436 * 24 | 0) + 4 >> 2] | 0);
      $1853 = $1841 + 12 | 0;
      $1854 = $1838 + ($k11$0436 * 24 | 0) + 12 | 0;
      if (!(HEAP8[$1854 >> 0] & 1)) {
       HEAP32[$1853 + 0 >> 2] = HEAP32[$1854 + 0 >> 2];
       HEAP32[$1853 + 4 >> 2] = HEAP32[$1854 + 4 >> 2];
       HEAP32[$1853 + 8 >> 2] = HEAP32[$1854 + 8 >> 2];
      } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1853, HEAP32[$1838 + ($k11$0436 * 24 | 0) + 20 >> 2] | 0, HEAP32[$1838 + ($k11$0436 * 24 | 0) + 16 >> 2] | 0);
      $1863 = HEAP32[$1840 >> 2] | 0;
     }
     HEAP32[$1840 >> 2] = $1863 + 24;
    }
    $k11$0436 = $k11$0436 + 1 | 0;
    if ($k11$0436 >>> 0 >= $1737 >>> 0) {
     $$0 = $1731;
     label = 920;
     break;
    }
   }
   if ((label | 0) == 603) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 920) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 84:
  {
   $1897 = $db + 4 | 0;
   $1903 = ((HEAP32[$1897 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   $1904 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   $1910 = ((HEAP32[$1897 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   if (($1904 | 0) == ($first | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1912 = $db + 16 | 0;
   $1913 = $db + 12 | 0;
   $1914 = HEAP32[$1913 >> 2] | 0;
   $1915 = $db + 20 | 0;
   $1916 = HEAP32[$1915 >> 2] | 0;
   $1917 = $db + 24 | 0;
   $1918 = HEAP32[$1917 >> 2] | 0;
   if ($1916 >>> 0 < $1918 >>> 0) {
    if (!$1916) $1925 = 0; else {
     HEAP32[$1916 >> 2] = 0;
     HEAP32[$1916 + 4 >> 2] = 0;
     HEAP32[$1916 + 8 >> 2] = 0;
     HEAP32[$1916 + 12 >> 2] = $1914;
     $1925 = HEAP32[$1915 >> 2] | 0;
    }
    HEAP32[$1915 >> 2] = $1925 + 16;
   } else {
    $1929 = HEAP32[$1912 >> 2] | 0;
    $1931 = $1916 - $1929 >> 4;
    $1932 = $1931 + 1 | 0;
    if (($1932 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $1935 = $1918 - $1929 | 0;
    if ($1935 >> 4 >>> 0 < 1073741823) {
     $1938 = $1935 >> 3;
     $$0$i$i$i190 = $1938 >>> 0 < $1932 >>> 0 ? $1932 : $1938;
    } else $$0$i$i$i190 = 2147483647;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i190, $1931, $db + 28 | 0);
    $1941 = $__v$i$i$i + 8 | 0;
    $1942 = HEAP32[$1941 >> 2] | 0;
    if ($1942) {
     HEAP32[$1942 >> 2] = 0;
     HEAP32[$1942 + 4 >> 2] = 0;
     HEAP32[$1942 + 8 >> 2] = 0;
     HEAP32[$1942 + 12 >> 2] = $1914;
    }
    HEAP32[$1941 >> 2] = $1942 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1912, $__v$i$i$i);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
   }
   L932 : do if ($1903 >>> 0 < $1910 >>> 0) {
    $1949 = $__v$i$i$i + 8 | 0;
    $k15$0440 = $1903;
    while (1) {
     $1950 = HEAP32[$1915 >> 2] | 0;
     $1951 = $1950 + -16 | 0;
     $1952 = HEAP32[$db >> 2] | 0;
     $1953 = $1952 + ($k15$0440 * 24 | 0) | 0;
     $1954 = $1950 + -12 | 0;
     $1955 = HEAP32[$1954 >> 2] | 0;
     if (($1955 | 0) == (HEAP32[$1950 + -8 >> 2] | 0)) {
      $1983 = ($1955 - (HEAP32[$1951 >> 2] | 0) | 0) / 24 | 0;
      $1984 = $1983 + 1 | 0;
      if (($1984 | 0) < 0) break;
      if ($1983 >>> 0 < 1073741823) {
       $1987 = $1983 << 1;
       $$0$i$i$i198 = $1987 >>> 0 < $1984 >>> 0 ? $1984 : $1987;
      } else $$0$i$i$i198 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i198, $1983, $1950 + -4 | 0);
      $1990 = HEAP32[$1949 >> 2] | 0;
      do if ($1990) {
       if (!(HEAP8[$1953 >> 0] & 1)) {
        HEAP32[$1990 + 0 >> 2] = HEAP32[$1953 + 0 >> 2];
        HEAP32[$1990 + 4 >> 2] = HEAP32[$1953 + 4 >> 2];
        HEAP32[$1990 + 8 >> 2] = HEAP32[$1953 + 8 >> 2];
       } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1990, HEAP32[$1952 + ($k15$0440 * 24 | 0) + 8 >> 2] | 0, HEAP32[$1952 + ($k15$0440 * 24 | 0) + 4 >> 2] | 0);
       $1999 = $1990 + 12 | 0;
       $2000 = $1952 + ($k15$0440 * 24 | 0) + 12 | 0;
       if (!(HEAP8[$2000 >> 0] & 1)) {
        HEAP32[$1999 + 0 >> 2] = HEAP32[$2000 + 0 >> 2];
        HEAP32[$1999 + 4 >> 2] = HEAP32[$2000 + 4 >> 2];
        HEAP32[$1999 + 8 >> 2] = HEAP32[$2000 + 8 >> 2];
        break;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1999, HEAP32[$1952 + ($k15$0440 * 24 | 0) + 20 >> 2] | 0, HEAP32[$1952 + ($k15$0440 * 24 | 0) + 16 >> 2] | 0);
        break;
       }
      } while (0);
      HEAP32[$1949 >> 2] = $1990 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1951, $__v$i$i$i);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
     } else {
      if (!$1955) $1977 = 0; else {
       if (!(HEAP8[$1953 >> 0] & 1)) {
        HEAP32[$1955 + 0 >> 2] = HEAP32[$1953 + 0 >> 2];
        HEAP32[$1955 + 4 >> 2] = HEAP32[$1953 + 4 >> 2];
        HEAP32[$1955 + 8 >> 2] = HEAP32[$1953 + 8 >> 2];
       } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1955, HEAP32[$1952 + ($k15$0440 * 24 | 0) + 8 >> 2] | 0, HEAP32[$1952 + ($k15$0440 * 24 | 0) + 4 >> 2] | 0);
       $1967 = $1955 + 12 | 0;
       $1968 = $1952 + ($k15$0440 * 24 | 0) + 12 | 0;
       if (!(HEAP8[$1968 >> 0] & 1)) {
        HEAP32[$1967 + 0 >> 2] = HEAP32[$1968 + 0 >> 2];
        HEAP32[$1967 + 4 >> 2] = HEAP32[$1968 + 4 >> 2];
        HEAP32[$1967 + 8 >> 2] = HEAP32[$1968 + 8 >> 2];
       } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1967, HEAP32[$1952 + ($k15$0440 * 24 | 0) + 20 >> 2] | 0, HEAP32[$1952 + ($k15$0440 * 24 | 0) + 16 >> 2] | 0);
       $1977 = HEAP32[$1954 >> 2] | 0;
      }
      HEAP32[$1954 >> 2] = $1977 + 24;
     }
     $k15$0440 = $k15$0440 + 1 | 0;
     if ($k15$0440 >>> 0 >= $1910 >>> 0) break L932;
    }
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   } while (0);
   if (!((HEAP8[$db + 63 >> 0] | 0) != 0 & ($1910 | 0) == ($1903 + 1 | 0))) {
    $$0 = $1904;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $2016 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($1904, $last, $db) | 0;
   if (($2016 | 0) == ($1904 | 0)) {
    $$0 = $1904;
    STACKTOP = sp;
    return $$0 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, (HEAP32[$1897 >> 2] | 0) + -24 | 0);
   $2020 = HEAP32[$1897 >> 2] | 0;
   $2021 = $2020 + -24 | 0;
   $2023 = $2020;
   do {
    $2022 = $2023 + -24 | 0;
    HEAP32[$1897 >> 2] = $2022;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2022);
    $2023 = HEAP32[$1897 >> 2] | 0;
   } while (($2023 | 0) != ($2021 | 0));
   $2027 = HEAP8[$args >> 0] | 0;
   $2029 = ($2027 & 1) == 0;
   if ($2029) {
    $2037 = $args + 1 | 0;
    $2038 = ($2027 & 255) >>> 1;
   } else {
    $2037 = HEAP32[$args + 8 >> 2] | 0;
    $2038 = HEAP32[$args + 4 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2020 + -48 | 0, $2037, $2038) | 0;
   $2040 = (HEAP32[$1897 >> 2] | 0) + -24 | 0;
   HEAP32[$24 >> 2] = HEAP32[$1913 >> 2];
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($23, $2040, $24);
   $2042 = HEAP32[$1915 >> 2] | 0;
   $2043 = HEAP32[$1917 >> 2] | 0;
   if ($2042 >>> 0 < $2043 >>> 0) {
    if (!$2042) $2057 = 0; else {
     HEAP32[$2042 + 12 >> 2] = HEAP32[$23 + 12 >> 2];
     HEAP32[$2042 >> 2] = HEAP32[$23 >> 2];
     $2052 = $23 + 4 | 0;
     HEAP32[$2042 + 4 >> 2] = HEAP32[$2052 >> 2];
     $2054 = $23 + 8 | 0;
     HEAP32[$2042 + 8 >> 2] = HEAP32[$2054 >> 2];
     HEAP32[$2054 >> 2] = 0;
     HEAP32[$2052 >> 2] = 0;
     HEAP32[$23 >> 2] = 0;
     $2057 = HEAP32[$1915 >> 2] | 0;
    }
    HEAP32[$1915 >> 2] = $2057 + 16;
   } else {
    $2061 = HEAP32[$1912 >> 2] | 0;
    $2063 = $2042 - $2061 >> 4;
    $2064 = $2063 + 1 | 0;
    if (($2064 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $2067 = $2043 - $2061 | 0;
    if ($2067 >> 4 >>> 0 < 1073741823) {
     $2070 = $2067 >> 3;
     $$0$i$i$i213 = $2070 >>> 0 < $2064 >>> 0 ? $2064 : $2070;
    } else $$0$i$i$i213 = 2147483647;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i213, $2063, $db + 28 | 0);
    $2073 = $__v$i$i$i + 8 | 0;
    $2074 = HEAP32[$2073 >> 2] | 0;
    if ($2074) {
     HEAP32[$2074 + 12 >> 2] = HEAP32[$23 + 12 >> 2];
     HEAP32[$2074 >> 2] = HEAP32[$23 >> 2];
     $2082 = $23 + 4 | 0;
     HEAP32[$2074 + 4 >> 2] = HEAP32[$2082 >> 2];
     $2084 = $23 + 8 | 0;
     HEAP32[$2074 + 8 >> 2] = HEAP32[$2084 >> 2];
     HEAP32[$2084 >> 2] = 0;
     HEAP32[$2082 >> 2] = 0;
     HEAP32[$23 >> 2] = 0;
    }
    HEAP32[$2073 >> 2] = $2074 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1912, $__v$i$i$i);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($23);
   if ($2029) {
    $$0 = $2016;
    STACKTOP = sp;
    return $$0 | 0;
   }
   _free(HEAP32[$args + 8 >> 2] | 0);
   $$0 = $2016;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 85:
  {
   $2089 = $first + 1 | 0;
   if (($2089 | 0) == ($last | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $2091 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($2089, $last, $db) | 0;
   if (($2091 | 0) == ($2089 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $2093 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2091, $last, $db) | 0;
   if (($2093 | 0) == ($2091 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $2095 = $db + 4 | 0;
   $2096 = HEAP32[$2095 >> 2] | 0;
   if ((($2096 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($type, $2096 + -24 | 0);
   $2104 = HEAP32[$2095 >> 2] | 0;
   $2105 = $2104 + -24 | 0;
   $2107 = $2104;
   do {
    $2106 = $2107 + -24 | 0;
    HEAP32[$2095 >> 2] = $2106;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2106);
    $2107 = HEAP32[$2095 >> 2] | 0;
   } while (($2107 | 0) != ($2105 | 0));
   $2110 = $2104 + -48 | 0;
   $2111 = HEAP8[$2110 >> 0] | 0;
   if (!($2111 & 1)) {
    $2122 = ($2111 & 255) >>> 1;
    $2124 = $2110 + 1 | 0;
   } else {
    $2122 = HEAP32[$2104 + -44 >> 2] | 0;
    $2124 = HEAP32[$2104 + -40 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($25, $2124, $2122 >>> 0 < 9 ? $2122 : 9);
   $2125 = HEAP8[$25 >> 0] | 0;
   $2127 = ($2125 & 1) == 0;
   if ($2127) {
    $2136 = ($2125 & 255) >>> 1;
    $2965 = $25 + 1 | 0;
   } else {
    $2136 = HEAP32[$25 + 4 >> 2] | 0;
    $2965 = HEAP32[$25 + 8 >> 2] | 0;
   }
   $2135 = $2136 >>> 0 > 9;
   $2137 = $2135 ? 9 : $2136;
   L1024 : do if (!$2137) label = 688; else {
    $$03$i205 = $2137;
    $l$04$i204 = $2965;
    $r$05$i203 = 59e3;
    while (1) {
     $2139 = HEAP8[$l$04$i204 >> 0] | 0;
     $2140 = HEAP8[$r$05$i203 >> 0] | 0;
     if ($2139 << 24 >> 24 != $2140 << 24 >> 24) break;
     $$03$i205 = $$03$i205 + -1 | 0;
     if (!$$03$i205) {
      label = 688;
      break L1024;
     } else {
      $l$04$i204 = $l$04$i204 + 1 | 0;
      $r$05$i203 = $r$05$i203 + 1 | 0;
     }
    }
    if ($2139 << 24 >> 24 == $2140 << 24 >> 24) label = 688; else $2152 = ($2139 & 255) - ($2140 & 255) | 0;
   } while (0);
   if ((label | 0) == 688) $2152 = $2136 >>> 0 < 9 ? -1 : $2135 & 1;
   if (!$2127) _free(HEAP32[$25 + 8 >> 2] | 0);
   $2156 = (HEAP32[$2095 >> 2] | 0) + -24 | 0;
   if (!$2152) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($proto, $2156);
    $2186 = HEAP32[$2095 >> 2] | 0;
    $2187 = $2186 + -24 | 0;
    $2189 = $2186;
    do {
     $2188 = $2189 + -24 | 0;
     HEAP32[$2095 >> 2] = $2188;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2188);
     $2189 = HEAP32[$2095 >> 2] | 0;
    } while (($2189 | 0) != ($2187 | 0));
    $2192 = HEAP8[$proto >> 0] | 0;
    if (!($2192 & 1)) {
     $2203 = $proto + 1 | 0;
     $2205 = ($2192 & 255) >>> 1;
    } else {
     $2203 = HEAP32[$proto + 8 >> 2] | 0;
     $2205 = HEAP32[$proto + 4 >> 2] | 0;
    }
    $2206 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($2203 + 9 | 0, $2203 + $2205 | 0, $db) | 0;
    if (!(HEAP8[$proto >> 0] & 1)) $2214 = $proto + 1 | 0; else $2214 = HEAP32[$proto + 8 >> 2] | 0;
    do if (($2206 | 0) == ($2214 + 9 | 0)) {
     __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($34, $type, 59016);
     $2250 = HEAP8[$proto >> 0] | 0;
     if (!($2250 & 1)) {
      $2260 = $proto + 1 | 0;
      $2261 = ($2250 & 255) >>> 1;
     } else {
      $2260 = HEAP32[$proto + 8 >> 2] | 0;
      $2261 = HEAP32[$proto + 4 >> 2] | 0;
     }
     $2262 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($34, $2260, $2261) | 0;
     $2263 = HEAP8[$2262 >> 0] | 0;
     $2264 = $2262 + 1 | 0;
     HEAP8[$$sroa$5 + 0 >> 0] = HEAP8[$2264 + 0 >> 0] | 0;
     HEAP8[$$sroa$5 + 1 >> 0] = HEAP8[$2264 + 1 >> 0] | 0;
     HEAP8[$$sroa$5 + 2 >> 0] = HEAP8[$2264 + 2 >> 0] | 0;
     HEAP8[$$sroa$5 + 3 >> 0] = HEAP8[$2264 + 3 >> 0] | 0;
     HEAP8[$$sroa$5 + 4 >> 0] = HEAP8[$2264 + 4 >> 0] | 0;
     HEAP8[$$sroa$5 + 5 >> 0] = HEAP8[$2264 + 5 >> 0] | 0;
     HEAP8[$$sroa$5 + 6 >> 0] = HEAP8[$2264 + 6 >> 0] | 0;
     $2266 = HEAP32[$2262 + 8 >> 2] | 0;
     HEAP32[$2262 + 0 >> 2] = 0;
     HEAP32[$2262 + 4 >> 2] = 0;
     HEAP32[$2262 + 8 >> 2] = 0;
     HEAP8[$33 >> 0] = $2263;
     $2267 = $33 + 1 | 0;
     HEAP8[$2267 + 0 >> 0] = HEAP8[$$sroa$5 + 0 >> 0] | 0;
     HEAP8[$2267 + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0;
     HEAP8[$2267 + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0;
     HEAP8[$2267 + 3 >> 0] = HEAP8[$$sroa$5 + 3 >> 0] | 0;
     HEAP8[$2267 + 4 >> 0] = HEAP8[$$sroa$5 + 4 >> 0] | 0;
     HEAP8[$2267 + 5 >> 0] = HEAP8[$$sroa$5 + 5 >> 0] | 0;
     HEAP8[$2267 + 6 >> 0] = HEAP8[$$sroa$5 + 6 >> 0] | 0;
     HEAP32[$33 + 8 >> 2] = $2266;
     HEAP8[$$sroa$5 + 0 >> 0] = 0;
     HEAP8[$$sroa$5 + 1 >> 0] = 0;
     HEAP8[$$sroa$5 + 2 >> 0] = 0;
     HEAP8[$$sroa$5 + 3 >> 0] = 0;
     HEAP8[$$sroa$5 + 4 >> 0] = 0;
     HEAP8[$$sroa$5 + 5 >> 0] = 0;
     HEAP8[$$sroa$5 + 6 >> 0] = 0;
     $2269 = $33 + 12 | 0;
     HEAP32[$2269 + 0 >> 2] = 0;
     HEAP32[$2269 + 4 >> 2] = 0;
     HEAP32[$2269 + 8 >> 2] = 0;
     $2270 = HEAP32[$2095 >> 2] | 0;
     $2272 = HEAP32[$db + 8 >> 2] | 0;
     if ($2270 >>> 0 < $2272 >>> 0) {
      if (!$2270) $2277 = 0; else {
       HEAP32[$2270 + 0 >> 2] = HEAP32[$33 + 0 >> 2];
       HEAP32[$2270 + 4 >> 2] = HEAP32[$33 + 4 >> 2];
       HEAP32[$2270 + 8 >> 2] = HEAP32[$33 + 8 >> 2];
       HEAP32[$33 + 0 >> 2] = 0;
       HEAP32[$33 + 4 >> 2] = 0;
       HEAP32[$33 + 8 >> 2] = 0;
       $2275 = $2270 + 12 | 0;
       HEAP32[$2275 + 0 >> 2] = HEAP32[$2269 + 0 >> 2];
       HEAP32[$2275 + 4 >> 2] = HEAP32[$2269 + 4 >> 2];
       HEAP32[$2275 + 8 >> 2] = HEAP32[$2269 + 8 >> 2];
       HEAP32[$2269 + 0 >> 2] = 0;
       HEAP32[$2269 + 4 >> 2] = 0;
       HEAP32[$2269 + 8 >> 2] = 0;
       $2277 = HEAP32[$2095 >> 2] | 0;
      }
      HEAP32[$2095 >> 2] = $2277 + 24;
     } else {
      $2281 = HEAP32[$db >> 2] | 0;
      $2283 = ($2270 - $2281 | 0) / 24 | 0;
      $2284 = $2283 + 1 | 0;
      if (($2284 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $2288 = ($2272 - $2281 | 0) / 24 | 0;
      if ($2288 >>> 0 < 1073741823) {
       $2290 = $2288 << 1;
       $$0$i$i$i253 = $2290 >>> 0 < $2284 >>> 0 ? $2284 : $2290;
      } else $$0$i$i$i253 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i253, $2283, $db + 12 | 0);
      $2293 = $__v$i$i$i + 8 | 0;
      $2294 = HEAP32[$2293 >> 2] | 0;
      if ($2294) {
       HEAP32[$2294 + 0 >> 2] = HEAP32[$33 + 0 >> 2];
       HEAP32[$2294 + 4 >> 2] = HEAP32[$33 + 4 >> 2];
       HEAP32[$2294 + 8 >> 2] = HEAP32[$33 + 8 >> 2];
       HEAP32[$33 + 0 >> 2] = 0;
       HEAP32[$33 + 4 >> 2] = 0;
       HEAP32[$33 + 8 >> 2] = 0;
       $2296 = $2294 + 12 | 0;
       HEAP32[$2296 + 0 >> 2] = HEAP32[$2269 + 0 >> 2];
       HEAP32[$2296 + 4 >> 2] = HEAP32[$2269 + 4 >> 2];
       HEAP32[$2296 + 8 >> 2] = HEAP32[$2269 + 8 >> 2];
       HEAP32[$2269 + 0 >> 2] = 0;
       HEAP32[$2269 + 4 >> 2] = 0;
       HEAP32[$2269 + 8 >> 2] = 0;
      }
      HEAP32[$2293 >> 2] = $2294 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
     if (!(HEAP8[$34 >> 0] & 1)) break;
     _free(HEAP32[$34 + 8 >> 2] | 0);
    } else {
     $2217 = (HEAP32[$2095 >> 2] | 0) + -24 | 0;
     __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($31, $type, 59024);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($32, (HEAP32[$2095 >> 2] | 0) + -24 | 0);
     $2220 = HEAP8[$32 >> 0] | 0;
     $2222 = ($2220 & 1) == 0;
     if ($2222) {
      $2230 = $32 + 1 | 0;
      $2231 = ($2220 & 255) >>> 1;
     } else {
      $2230 = HEAP32[$32 + 8 >> 2] | 0;
      $2231 = HEAP32[$32 + 4 >> 2] | 0;
     }
     $2232 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($31, $2230, $2231) | 0;
     HEAP32[$30 + 0 >> 2] = HEAP32[$2232 + 0 >> 2];
     HEAP32[$30 + 4 >> 2] = HEAP32[$2232 + 4 >> 2];
     HEAP32[$30 + 8 >> 2] = HEAP32[$2232 + 8 >> 2];
     HEAP32[$2232 + 0 >> 2] = 0;
     HEAP32[$2232 + 4 >> 2] = 0;
     HEAP32[$2232 + 8 >> 2] = 0;
     $2233 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($30, 59032, 1) | 0;
     $2234 = HEAP8[$2233 >> 0] | 0;
     $2235 = $2233 + 1 | 0;
     HEAP8[$$sroa$4 + 0 >> 0] = HEAP8[$2235 + 0 >> 0] | 0;
     HEAP8[$$sroa$4 + 1 >> 0] = HEAP8[$2235 + 1 >> 0] | 0;
     HEAP8[$$sroa$4 + 2 >> 0] = HEAP8[$2235 + 2 >> 0] | 0;
     HEAP8[$$sroa$4 + 3 >> 0] = HEAP8[$2235 + 3 >> 0] | 0;
     HEAP8[$$sroa$4 + 4 >> 0] = HEAP8[$2235 + 4 >> 0] | 0;
     HEAP8[$$sroa$4 + 5 >> 0] = HEAP8[$2235 + 5 >> 0] | 0;
     HEAP8[$$sroa$4 + 6 >> 0] = HEAP8[$2235 + 6 >> 0] | 0;
     $2237 = HEAP32[$2233 + 8 >> 2] | 0;
     HEAP32[$2233 + 0 >> 2] = 0;
     HEAP32[$2233 + 4 >> 2] = 0;
     HEAP32[$2233 + 8 >> 2] = 0;
     HEAP8[$29 >> 0] = $2234;
     $2238 = $29 + 1 | 0;
     HEAP8[$2238 + 0 >> 0] = HEAP8[$$sroa$4 + 0 >> 0] | 0;
     HEAP8[$2238 + 1 >> 0] = HEAP8[$$sroa$4 + 1 >> 0] | 0;
     HEAP8[$2238 + 2 >> 0] = HEAP8[$$sroa$4 + 2 >> 0] | 0;
     HEAP8[$2238 + 3 >> 0] = HEAP8[$$sroa$4 + 3 >> 0] | 0;
     HEAP8[$2238 + 4 >> 0] = HEAP8[$$sroa$4 + 4 >> 0] | 0;
     HEAP8[$2238 + 5 >> 0] = HEAP8[$$sroa$4 + 5 >> 0] | 0;
     HEAP8[$2238 + 6 >> 0] = HEAP8[$$sroa$4 + 6 >> 0] | 0;
     HEAP32[$29 + 8 >> 2] = $2237;
     HEAP8[$$sroa$4 + 0 >> 0] = 0;
     HEAP8[$$sroa$4 + 1 >> 0] = 0;
     HEAP8[$$sroa$4 + 2 >> 0] = 0;
     HEAP8[$$sroa$4 + 3 >> 0] = 0;
     HEAP8[$$sroa$4 + 4 >> 0] = 0;
     HEAP8[$$sroa$4 + 5 >> 0] = 0;
     HEAP8[$$sroa$4 + 6 >> 0] = 0;
     $2240 = $29 + 12 | 0;
     HEAP32[$2240 + 0 >> 2] = 0;
     HEAP32[$2240 + 4 >> 2] = 0;
     HEAP32[$2240 + 8 >> 2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2217, $29);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
     if (HEAP8[$30 >> 0] & 1) _free(HEAP32[$30 + 8 >> 2] | 0);
     if (!$2222) _free(HEAP32[$32 + 8 >> 2] | 0);
     if (!(HEAP8[$31 >> 0] & 1)) break;
     _free(HEAP32[$31 + 8 >> 2] | 0);
    } while (0);
    if (HEAP8[$proto >> 0] & 1) _free(HEAP32[$proto + 8 >> 2] | 0);
   } else {
    __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($27, $type, 59016);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($28, (HEAP32[$2095 >> 2] | 0) + -24 | 0);
    $2159 = HEAP8[$28 >> 0] | 0;
    $2161 = ($2159 & 1) == 0;
    if ($2161) {
     $2169 = $28 + 1 | 0;
     $2170 = ($2159 & 255) >>> 1;
    } else {
     $2169 = HEAP32[$28 + 8 >> 2] | 0;
     $2170 = HEAP32[$28 + 4 >> 2] | 0;
    }
    $2171 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($27, $2169, $2170) | 0;
    $2172 = HEAP8[$2171 >> 0] | 0;
    $2173 = $2171 + 1 | 0;
    HEAP8[$$sroa$4241 + 0 >> 0] = HEAP8[$2173 + 0 >> 0] | 0;
    HEAP8[$$sroa$4241 + 1 >> 0] = HEAP8[$2173 + 1 >> 0] | 0;
    HEAP8[$$sroa$4241 + 2 >> 0] = HEAP8[$2173 + 2 >> 0] | 0;
    HEAP8[$$sroa$4241 + 3 >> 0] = HEAP8[$2173 + 3 >> 0] | 0;
    HEAP8[$$sroa$4241 + 4 >> 0] = HEAP8[$2173 + 4 >> 0] | 0;
    HEAP8[$$sroa$4241 + 5 >> 0] = HEAP8[$2173 + 5 >> 0] | 0;
    HEAP8[$$sroa$4241 + 6 >> 0] = HEAP8[$2173 + 6 >> 0] | 0;
    $2175 = HEAP32[$2171 + 8 >> 2] | 0;
    HEAP32[$2171 + 0 >> 2] = 0;
    HEAP32[$2171 + 4 >> 2] = 0;
    HEAP32[$2171 + 8 >> 2] = 0;
    HEAP8[$26 >> 0] = $2172;
    $2176 = $26 + 1 | 0;
    HEAP8[$2176 + 0 >> 0] = HEAP8[$$sroa$4241 + 0 >> 0] | 0;
    HEAP8[$2176 + 1 >> 0] = HEAP8[$$sroa$4241 + 1 >> 0] | 0;
    HEAP8[$2176 + 2 >> 0] = HEAP8[$$sroa$4241 + 2 >> 0] | 0;
    HEAP8[$2176 + 3 >> 0] = HEAP8[$$sroa$4241 + 3 >> 0] | 0;
    HEAP8[$2176 + 4 >> 0] = HEAP8[$$sroa$4241 + 4 >> 0] | 0;
    HEAP8[$2176 + 5 >> 0] = HEAP8[$$sroa$4241 + 5 >> 0] | 0;
    HEAP8[$2176 + 6 >> 0] = HEAP8[$$sroa$4241 + 6 >> 0] | 0;
    HEAP32[$26 + 8 >> 2] = $2175;
    HEAP8[$$sroa$4241 + 0 >> 0] = 0;
    HEAP8[$$sroa$4241 + 1 >> 0] = 0;
    HEAP8[$$sroa$4241 + 2 >> 0] = 0;
    HEAP8[$$sroa$4241 + 3 >> 0] = 0;
    HEAP8[$$sroa$4241 + 4 >> 0] = 0;
    HEAP8[$$sroa$4241 + 5 >> 0] = 0;
    HEAP8[$$sroa$4241 + 6 >> 0] = 0;
    $2178 = $26 + 12 | 0;
    HEAP32[$2178 + 0 >> 2] = 0;
    HEAP32[$2178 + 4 >> 2] = 0;
    HEAP32[$2178 + 8 >> 2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2156, $26);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
    if (!$2161) _free(HEAP32[$28 + 8 >> 2] | 0);
    if (HEAP8[$27 >> 0] & 1) _free(HEAP32[$27 + 8 >> 2] | 0);
   }
   $2306 = (HEAP32[$2095 >> 2] | 0) + -24 | 0;
   HEAP32[$36 >> 2] = HEAP32[$db + 12 >> 2];
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($35, $2306, $36);
   $2309 = $db + 16 | 0;
   $2310 = $db + 20 | 0;
   $2311 = HEAP32[$2310 >> 2] | 0;
   $2313 = HEAP32[$db + 24 >> 2] | 0;
   if ($2311 >>> 0 < $2313 >>> 0) {
    if (!$2311) $2327 = 0; else {
     HEAP32[$2311 + 12 >> 2] = HEAP32[$35 + 12 >> 2];
     HEAP32[$2311 >> 2] = HEAP32[$35 >> 2];
     $2322 = $35 + 4 | 0;
     HEAP32[$2311 + 4 >> 2] = HEAP32[$2322 >> 2];
     $2324 = $35 + 8 | 0;
     HEAP32[$2311 + 8 >> 2] = HEAP32[$2324 >> 2];
     HEAP32[$2324 >> 2] = 0;
     HEAP32[$2322 >> 2] = 0;
     HEAP32[$35 >> 2] = 0;
     $2327 = HEAP32[$2310 >> 2] | 0;
    }
    HEAP32[$2310 >> 2] = $2327 + 16;
   } else {
    $2331 = HEAP32[$2309 >> 2] | 0;
    $2333 = $2311 - $2331 >> 4;
    $2334 = $2333 + 1 | 0;
    if (($2334 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $2337 = $2313 - $2331 | 0;
    if ($2337 >> 4 >>> 0 < 1073741823) {
     $2340 = $2337 >> 3;
     $$0$i$i$i221 = $2340 >>> 0 < $2334 >>> 0 ? $2334 : $2340;
    } else $$0$i$i$i221 = 2147483647;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i221, $2333, $db + 28 | 0);
    $2343 = $__v$i$i$i + 8 | 0;
    $2344 = HEAP32[$2343 >> 2] | 0;
    if ($2344) {
     HEAP32[$2344 + 12 >> 2] = HEAP32[$35 + 12 >> 2];
     HEAP32[$2344 >> 2] = HEAP32[$35 >> 2];
     $2352 = $35 + 4 | 0;
     HEAP32[$2344 + 4 >> 2] = HEAP32[$2352 >> 2];
     $2354 = $35 + 8 | 0;
     HEAP32[$2344 + 8 >> 2] = HEAP32[$2354 >> 2];
     HEAP32[$2354 >> 2] = 0;
     HEAP32[$2352 >> 2] = 0;
     HEAP32[$35 >> 2] = 0;
    }
    HEAP32[$2343 >> 2] = $2344 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2309, $__v$i$i$i);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($35);
   if (!(HEAP8[$type >> 0] & 1)) {
    $$0 = $2093;
    STACKTOP = sp;
    return $$0 | 0;
   }
   _free(HEAP32[$type + 8 >> 2] | 0);
   $$0 = $2093;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 83:
  {
   $2362 = $first + 1 | 0;
   if (($2362 | 0) != ($last | 0)) if ((HEAP8[$2362 >> 0] | 0) == 116) {
    $2366 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    if (($2366 | 0) == ($first | 0)) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $2370 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($2370 | 0)) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $2372 = $db + 16 | 0;
    HEAP32[$38 >> 2] = HEAP32[$db + 12 >> 2];
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($37, $2370 + -24 | 0, $38);
    $2376 = $db + 20 | 0;
    $2377 = HEAP32[$2376 >> 2] | 0;
    $2379 = HEAP32[$db + 24 >> 2] | 0;
    if ($2377 >>> 0 < $2379 >>> 0) {
     if (!$2377) $2393 = 0; else {
      HEAP32[$2377 + 12 >> 2] = HEAP32[$37 + 12 >> 2];
      HEAP32[$2377 >> 2] = HEAP32[$37 >> 2];
      $2388 = $37 + 4 | 0;
      HEAP32[$2377 + 4 >> 2] = HEAP32[$2388 >> 2];
      $2390 = $37 + 8 | 0;
      HEAP32[$2377 + 8 >> 2] = HEAP32[$2390 >> 2];
      HEAP32[$2390 >> 2] = 0;
      HEAP32[$2388 >> 2] = 0;
      HEAP32[$37 >> 2] = 0;
      $2393 = HEAP32[$2376 >> 2] | 0;
     }
     HEAP32[$2376 >> 2] = $2393 + 16;
    } else {
     $2397 = HEAP32[$2372 >> 2] | 0;
     $2399 = $2377 - $2397 >> 4;
     $2400 = $2399 + 1 | 0;
     if (($2400 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $2403 = $2379 - $2397 | 0;
     if ($2403 >> 4 >>> 0 < 1073741823) {
      $2406 = $2403 >> 3;
      $$0$i$i$i70 = $2406 >>> 0 < $2400 >>> 0 ? $2400 : $2406;
     } else $$0$i$i$i70 = 2147483647;
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i70, $2399, $db + 28 | 0);
     $2409 = $__v$i$i$i + 8 | 0;
     $2410 = HEAP32[$2409 >> 2] | 0;
     if ($2410) {
      HEAP32[$2410 + 12 >> 2] = HEAP32[$37 + 12 >> 2];
      HEAP32[$2410 >> 2] = HEAP32[$37 >> 2];
      $2418 = $37 + 4 | 0;
      HEAP32[$2410 + 4 >> 2] = HEAP32[$2418 >> 2];
      $2420 = $37 + 8 | 0;
      HEAP32[$2410 + 8 >> 2] = HEAP32[$2420 >> 2];
      HEAP32[$2420 >> 2] = 0;
      HEAP32[$2418 >> 2] = 0;
      HEAP32[$37 >> 2] = 0;
     }
     HEAP32[$2409 >> 2] = $2410 + 16;
     __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2372, $__v$i$i$i);
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
    }
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($37);
    $$0 = $2366;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $2423 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   if (($2423 | 0) == ($first | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $2425 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($2423, $last, $db) | 0;
   if (($2425 | 0) == ($2423 | 0)) {
    $$0 = $2423;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $2427 = $db + 4 | 0;
   $2428 = HEAP32[$2427 >> 2] | 0;
   if ((($2428 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
    $$0 = $2423;
    STACKTOP = sp;
    return $$0 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($template_args, $2428 + -24 | 0);
   $2436 = HEAP32[$2427 >> 2] | 0;
   $2437 = $2436 + -24 | 0;
   $2439 = $2436;
   do {
    $2438 = $2439 + -24 | 0;
    HEAP32[$2427 >> 2] = $2438;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2438);
    $2439 = HEAP32[$2427 >> 2] | 0;
   } while (($2439 | 0) != ($2437 | 0));
   $2443 = HEAP8[$template_args >> 0] | 0;
   $2445 = ($2443 & 1) == 0;
   if ($2445) {
    $2453 = $template_args + 1 | 0;
    $2454 = ($2443 & 255) >>> 1;
   } else {
    $2453 = HEAP32[$template_args + 8 >> 2] | 0;
    $2454 = HEAP32[$template_args + 4 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2436 + -48 | 0, $2453, $2454) | 0;
   $2456 = (HEAP32[$2427 >> 2] | 0) + -24 | 0;
   HEAP32[$40 >> 2] = HEAP32[$db + 12 >> 2];
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($39, $2456, $40);
   $2459 = $db + 16 | 0;
   $2460 = $db + 20 | 0;
   $2461 = HEAP32[$2460 >> 2] | 0;
   $2463 = HEAP32[$db + 24 >> 2] | 0;
   if ($2461 >>> 0 < $2463 >>> 0) {
    if (!$2461) $2477 = 0; else {
     HEAP32[$2461 + 12 >> 2] = HEAP32[$39 + 12 >> 2];
     HEAP32[$2461 >> 2] = HEAP32[$39 >> 2];
     $2472 = $39 + 4 | 0;
     HEAP32[$2461 + 4 >> 2] = HEAP32[$2472 >> 2];
     $2474 = $39 + 8 | 0;
     HEAP32[$2461 + 8 >> 2] = HEAP32[$2474 >> 2];
     HEAP32[$2474 >> 2] = 0;
     HEAP32[$2472 >> 2] = 0;
     HEAP32[$39 >> 2] = 0;
     $2477 = HEAP32[$2460 >> 2] | 0;
    }
    HEAP32[$2460 >> 2] = $2477 + 16;
   } else {
    $2481 = HEAP32[$2459 >> 2] | 0;
    $2483 = $2461 - $2481 >> 4;
    $2484 = $2483 + 1 | 0;
    if (($2484 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $2487 = $2463 - $2481 | 0;
    if ($2487 >> 4 >>> 0 < 1073741823) {
     $2490 = $2487 >> 3;
     $$0$i$i$i42 = $2490 >>> 0 < $2484 >>> 0 ? $2484 : $2490;
    } else $$0$i$i$i42 = 2147483647;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i42, $2483, $db + 28 | 0);
    $2493 = $__v$i$i$i + 8 | 0;
    $2494 = HEAP32[$2493 >> 2] | 0;
    if ($2494) {
     HEAP32[$2494 + 12 >> 2] = HEAP32[$39 + 12 >> 2];
     HEAP32[$2494 >> 2] = HEAP32[$39 >> 2];
     $2502 = $39 + 4 | 0;
     HEAP32[$2494 + 4 >> 2] = HEAP32[$2502 >> 2];
     $2504 = $39 + 8 | 0;
     HEAP32[$2494 + 8 >> 2] = HEAP32[$2504 >> 2];
     HEAP32[$2504 >> 2] = 0;
     HEAP32[$2502 >> 2] = 0;
     HEAP32[$39 >> 2] = 0;
    }
    HEAP32[$2493 >> 2] = $2494 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2459, $__v$i$i$i);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($39);
   if ($2445) {
    $$0 = $2425;
    STACKTOP = sp;
    return $$0 | 0;
   }
   _free(HEAP32[$template_args + 8 >> 2] | 0);
   $$0 = $2425;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 68:
  {
   $2509 = $first + 1 | 0;
   if (($2509 | 0) != ($last | 0)) {
    $2511 = HEAP8[$2509 >> 0] | 0;
    $2512 = $2511 << 24 >> 24;
    if (($2512 | 0) == 112) {
     $2513 = $db + 4 | 0;
     $2519 = ((HEAP32[$2513 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     $2520 = $first + 2 | 0;
     $2521 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2520, $last, $db) | 0;
     $2527 = ((HEAP32[$2513 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     if (($2521 | 0) == ($2520 | 0)) break L113;
     $2529 = $db + 16 | 0;
     $2531 = HEAP32[$db + 12 >> 2] | 0;
     $2532 = $db + 20 | 0;
     $2533 = HEAP32[$2532 >> 2] | 0;
     $2535 = HEAP32[$db + 24 >> 2] | 0;
     if ($2533 >>> 0 < $2535 >>> 0) {
      if (!$2533) $2542 = 0; else {
       HEAP32[$2533 >> 2] = 0;
       HEAP32[$2533 + 4 >> 2] = 0;
       HEAP32[$2533 + 8 >> 2] = 0;
       HEAP32[$2533 + 12 >> 2] = $2531;
       $2542 = HEAP32[$2532 >> 2] | 0;
      }
      HEAP32[$2532 >> 2] = $2542 + 16;
     } else {
      $2546 = HEAP32[$2529 >> 2] | 0;
      $2548 = $2533 - $2546 >> 4;
      $2549 = $2548 + 1 | 0;
      if (($2549 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $2552 = $2535 - $2546 | 0;
      if ($2552 >> 4 >>> 0 < 1073741823) {
       $2555 = $2552 >> 3;
       $$0$i$i$i37 = $2555 >>> 0 < $2549 >>> 0 ? $2549 : $2555;
      } else $$0$i$i$i37 = 2147483647;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i37, $2548, $db + 28 | 0);
      $2558 = $__v$i$i$i + 8 | 0;
      $2559 = HEAP32[$2558 >> 2] | 0;
      if ($2559) {
       HEAP32[$2559 >> 2] = 0;
       HEAP32[$2559 + 4 >> 2] = 0;
       HEAP32[$2559 + 8 >> 2] = 0;
       HEAP32[$2559 + 12 >> 2] = $2531;
      }
      HEAP32[$2558 >> 2] = $2559 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2529, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     if ($2519 >>> 0 >= $2527 >>> 0) {
      $$0 = $2521;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $2566 = $__v$i$i$i + 8 | 0;
     $k20$0443 = $2519;
     while (1) {
      $2567 = HEAP32[$2532 >> 2] | 0;
      $2568 = $2567 + -16 | 0;
      $2569 = HEAP32[$db >> 2] | 0;
      $2570 = $2569 + ($k20$0443 * 24 | 0) | 0;
      $2571 = $2567 + -12 | 0;
      $2572 = HEAP32[$2571 >> 2] | 0;
      if (($2572 | 0) == (HEAP32[$2567 + -8 >> 2] | 0)) {
       $2600 = ($2572 - (HEAP32[$2568 >> 2] | 0) | 0) / 24 | 0;
       $2601 = $2600 + 1 | 0;
       if (($2601 | 0) < 0) {
        label = 812;
        break;
       }
       if ($2600 >>> 0 < 1073741823) {
        $2604 = $2600 << 1;
        $$0$i$i$i34 = $2604 >>> 0 < $2601 >>> 0 ? $2601 : $2604;
       } else $$0$i$i$i34 = 2147483647;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i34, $2600, $2567 + -4 | 0);
       $2607 = HEAP32[$2566 >> 2] | 0;
       do if ($2607) {
        if (!(HEAP8[$2570 >> 0] & 1)) {
         HEAP32[$2607 + 0 >> 2] = HEAP32[$2570 + 0 >> 2];
         HEAP32[$2607 + 4 >> 2] = HEAP32[$2570 + 4 >> 2];
         HEAP32[$2607 + 8 >> 2] = HEAP32[$2570 + 8 >> 2];
        } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2607, HEAP32[$2569 + ($k20$0443 * 24 | 0) + 8 >> 2] | 0, HEAP32[$2569 + ($k20$0443 * 24 | 0) + 4 >> 2] | 0);
        $2616 = $2607 + 12 | 0;
        $2617 = $2569 + ($k20$0443 * 24 | 0) + 12 | 0;
        if (!(HEAP8[$2617 >> 0] & 1)) {
         HEAP32[$2616 + 0 >> 2] = HEAP32[$2617 + 0 >> 2];
         HEAP32[$2616 + 4 >> 2] = HEAP32[$2617 + 4 >> 2];
         HEAP32[$2616 + 8 >> 2] = HEAP32[$2617 + 8 >> 2];
         break;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2616, HEAP32[$2569 + ($k20$0443 * 24 | 0) + 20 >> 2] | 0, HEAP32[$2569 + ($k20$0443 * 24 | 0) + 16 >> 2] | 0);
         break;
        }
       } while (0);
       HEAP32[$2566 >> 2] = $2607 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($2568, $__v$i$i$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
      } else {
       if (!$2572) $2594 = 0; else {
        if (!(HEAP8[$2570 >> 0] & 1)) {
         HEAP32[$2572 + 0 >> 2] = HEAP32[$2570 + 0 >> 2];
         HEAP32[$2572 + 4 >> 2] = HEAP32[$2570 + 4 >> 2];
         HEAP32[$2572 + 8 >> 2] = HEAP32[$2570 + 8 >> 2];
        } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2572, HEAP32[$2569 + ($k20$0443 * 24 | 0) + 8 >> 2] | 0, HEAP32[$2569 + ($k20$0443 * 24 | 0) + 4 >> 2] | 0);
        $2584 = $2572 + 12 | 0;
        $2585 = $2569 + ($k20$0443 * 24 | 0) + 12 | 0;
        if (!(HEAP8[$2585 >> 0] & 1)) {
         HEAP32[$2584 + 0 >> 2] = HEAP32[$2585 + 0 >> 2];
         HEAP32[$2584 + 4 >> 2] = HEAP32[$2585 + 4 >> 2];
         HEAP32[$2584 + 8 >> 2] = HEAP32[$2585 + 8 >> 2];
        } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2584, HEAP32[$2569 + ($k20$0443 * 24 | 0) + 20 >> 2] | 0, HEAP32[$2569 + ($k20$0443 * 24 | 0) + 16 >> 2] | 0);
        $2594 = HEAP32[$2571 >> 2] | 0;
       }
       HEAP32[$2571 >> 2] = $2594 + 24;
      }
      $k20$0443 = $k20$0443 + 1 | 0;
      if ($k20$0443 >>> 0 >= $2527 >>> 0) {
       $$0 = $2521;
       label = 920;
       break;
      }
     }
     if ((label | 0) == 812) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 920) {
      STACKTOP = sp;
      return $$0 | 0;
     }
    } else if (($2512 | 0) == 84 | ($2512 | 0) == 116) {
     $2628 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     if (($2628 | 0) == ($first | 0)) break L113;
     $2632 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($2632 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $2634 = $db + 16 | 0;
     HEAP32[$42 >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($41, $2632 + -24 | 0, $42);
     $2638 = $db + 20 | 0;
     $2639 = HEAP32[$2638 >> 2] | 0;
     $2641 = HEAP32[$db + 24 >> 2] | 0;
     if ($2639 >>> 0 < $2641 >>> 0) {
      if (!$2639) $2655 = 0; else {
       HEAP32[$2639 + 12 >> 2] = HEAP32[$41 + 12 >> 2];
       HEAP32[$2639 >> 2] = HEAP32[$41 >> 2];
       $2650 = $41 + 4 | 0;
       HEAP32[$2639 + 4 >> 2] = HEAP32[$2650 >> 2];
       $2652 = $41 + 8 | 0;
       HEAP32[$2639 + 8 >> 2] = HEAP32[$2652 >> 2];
       HEAP32[$2652 >> 2] = 0;
       HEAP32[$2650 >> 2] = 0;
       HEAP32[$41 >> 2] = 0;
       $2655 = HEAP32[$2638 >> 2] | 0;
      }
      HEAP32[$2638 >> 2] = $2655 + 16;
     } else {
      $2659 = HEAP32[$2634 >> 2] | 0;
      $2661 = $2639 - $2659 >> 4;
      $2662 = $2661 + 1 | 0;
      if (($2662 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $2665 = $2641 - $2659 | 0;
      if ($2665 >> 4 >>> 0 < 1073741823) {
       $2668 = $2665 >> 3;
       $$0$i$i$i27 = $2668 >>> 0 < $2662 >>> 0 ? $2662 : $2668;
      } else $$0$i$i$i27 = 2147483647;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i27, $2661, $db + 28 | 0);
      $2671 = $__v$i$i$i + 8 | 0;
      $2672 = HEAP32[$2671 >> 2] | 0;
      if ($2672) {
       HEAP32[$2672 + 12 >> 2] = HEAP32[$41 + 12 >> 2];
       HEAP32[$2672 >> 2] = HEAP32[$41 >> 2];
       $2680 = $41 + 4 | 0;
       HEAP32[$2672 + 4 >> 2] = HEAP32[$2680 >> 2];
       $2682 = $41 + 8 | 0;
       HEAP32[$2672 + 8 >> 2] = HEAP32[$2682 >> 2];
       HEAP32[$2682 >> 2] = 0;
       HEAP32[$2680 >> 2] = 0;
       HEAP32[$41 >> 2] = 0;
      }
      HEAP32[$2671 >> 2] = $2672 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2634, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($41);
     $$0 = $2628;
     STACKTOP = sp;
     return $$0 | 0;
    } else if (($2512 | 0) == 118) {
     do if (($last - $first | 0) > 3 & $233 << 24 >> 24 == 68 & $2511 << 24 >> 24 == 118) {
      $2691 = $first + 2 | 0;
      $2692 = HEAP8[$2691 >> 0] | 0;
      if (($2692 + -49 << 24 >> 24 & 255) >= 9) {
       HEAP32[$num1$i + 0 >> 2] = 0;
       HEAP32[$num1$i + 4 >> 2] = 0;
       HEAP32[$num1$i + 8 >> 2] = 0;
       if ($2692 << 24 >> 24 == 95) $t12$0$i = $2691; else {
        $2785 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2691, $last, $db) | 0;
        if (($2785 | 0) == ($2691 | 0)) $t12$0$i = $2691; else {
         $2788 = $db + 4 | 0;
         $2789 = HEAP32[$2788 >> 2] | 0;
         if ((HEAP32[$db >> 2] | 0) == ($2789 | 0)) {
          $$1$i328 = $first;
          break;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $2789 + -24 | 0);
         HEAP32[$num1$i + 0 >> 2] = HEAP32[$6 + 0 >> 2];
         HEAP32[$num1$i + 4 >> 2] = HEAP32[$6 + 4 >> 2];
         HEAP32[$num1$i + 8 >> 2] = HEAP32[$6 + 8 >> 2];
         HEAP32[$6 + 0 >> 2] = 0;
         HEAP32[$6 + 4 >> 2] = 0;
         HEAP32[$6 + 8 >> 2] = 0;
         $$pre354 = HEAP32[$2788 >> 2] | 0;
         $2792 = $$pre354 + -24 | 0;
         $2794 = $$pre354;
         do {
          $2793 = $2794 + -24 | 0;
          HEAP32[$2788 >> 2] = $2793;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2793);
          $2794 = HEAP32[$2788 >> 2] | 0;
         } while (($2794 | 0) != ($2792 | 0));
         $t12$0$i = $2785;
        }
       }
       if (($t12$0$i | 0) == ($last | 0)) $$13$i324$ph = $first; else if ((HEAP8[$t12$0$i >> 0] | 0) == 95) {
        $2800 = $t12$0$i + 1 | 0;
        if (($2800 | 0) == ($last | 0)) $$13$i324$ph = $first; else {
         $2802 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2800, $last, $db) | 0;
         if (($2802 | 0) == ($2800 | 0)) $$13$i324$ph = $first; else {
          $2806 = HEAP32[$db + 4 >> 2] | 0;
          if ((HEAP32[$db >> 2] | 0) == ($2806 | 0)) {
           if (!(HEAP8[$num1$i >> 0] & 1)) {
            $$1$i328 = $first;
            break;
           }
           _free(HEAP32[$num1$i + 8 >> 2] | 0);
           $$1$i328 = $first;
           break;
          }
          __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($8, 59040, $num1$i);
          $2809 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($8, 59056, 1) | 0;
          HEAP32[$7 + 0 >> 2] = HEAP32[$2809 + 0 >> 2];
          HEAP32[$7 + 4 >> 2] = HEAP32[$2809 + 4 >> 2];
          HEAP32[$7 + 8 >> 2] = HEAP32[$2809 + 8 >> 2];
          HEAP32[$2809 + 0 >> 2] = 0;
          HEAP32[$2809 + 4 >> 2] = 0;
          HEAP32[$2809 + 8 >> 2] = 0;
          $2810 = HEAP8[$7 >> 0] | 0;
          $2812 = ($2810 & 1) == 0;
          if ($2812) {
           $2820 = $7 + 1 | 0;
           $2821 = ($2810 & 255) >>> 1;
          } else {
           $2820 = HEAP32[$7 + 8 >> 2] | 0;
           $2821 = HEAP32[$7 + 4 >> 2] | 0;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2806 + -24 | 0, $2820, $2821) | 0;
          if (!$2812) _free(HEAP32[$7 + 8 >> 2] | 0);
          if (!(HEAP8[$8 >> 0] & 1)) $$13$i324$ph = $2802; else {
           _free(HEAP32[$8 + 8 >> 2] | 0);
           $$13$i324$ph = $2802;
          }
         }
        }
       } else $$13$i324$ph = $first;
       if (!(HEAP8[$num1$i >> 0] & 1)) {
        $$1$i328 = $$13$i324$ph;
        break;
       }
       _free(HEAP32[$num1$i + 8 >> 2] | 0);
       $$1$i328 = $$13$i324$ph;
       break;
      }
      $2694 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($2691, $last) | 0;
      if (($2694 | 0) == ($last | 0)) $$1$i328 = $first; else if ((HEAP8[$2694 >> 0] | 0) == 95) {
       $2700 = $2694 - $2691 | 0;
       $2701 = $2694 + 1 | 0;
       if (($2701 | 0) == ($last | 0)) $$1$i328 = $first; else {
        if ((HEAP8[$2701 >> 0] | 0) != 112) {
         $2705 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2701, $last, $db) | 0;
         if (($2705 | 0) == ($2701 | 0)) {
          $$1$i328 = $first;
          break;
         }
         $2709 = HEAP32[$db + 4 >> 2] | 0;
         if ((HEAP32[$db >> 2] | 0) == ($2709 | 0)) {
          $$1$i328 = $first;
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2, $2691, $2700);
         $2712 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($2, 0, 59040, 8) | 0;
         HEAP32[$1 + 0 >> 2] = HEAP32[$2712 + 0 >> 2];
         HEAP32[$1 + 4 >> 2] = HEAP32[$2712 + 4 >> 2];
         HEAP32[$1 + 8 >> 2] = HEAP32[$2712 + 8 >> 2];
         HEAP32[$2712 + 0 >> 2] = 0;
         HEAP32[$2712 + 4 >> 2] = 0;
         HEAP32[$2712 + 8 >> 2] = 0;
         $2713 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1, 59056, 1) | 0;
         HEAP32[$0 + 0 >> 2] = HEAP32[$2713 + 0 >> 2];
         HEAP32[$0 + 4 >> 2] = HEAP32[$2713 + 4 >> 2];
         HEAP32[$0 + 8 >> 2] = HEAP32[$2713 + 8 >> 2];
         HEAP32[$2713 + 0 >> 2] = 0;
         HEAP32[$2713 + 4 >> 2] = 0;
         HEAP32[$2713 + 8 >> 2] = 0;
         $2714 = HEAP8[$0 >> 0] | 0;
         $2716 = ($2714 & 1) == 0;
         if ($2716) {
          $2724 = $0 + 1 | 0;
          $2725 = ($2714 & 255) >>> 1;
         } else {
          $2724 = HEAP32[$0 + 8 >> 2] | 0;
          $2725 = HEAP32[$0 + 4 >> 2] | 0;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2709 + -24 | 0, $2724, $2725) | 0;
         if (!$2716) _free(HEAP32[$0 + 8 >> 2] | 0);
         if (HEAP8[$1 >> 0] & 1) _free(HEAP32[$1 + 8 >> 2] | 0);
         if (!(HEAP8[$2 >> 0] & 1)) {
          $$1$i328 = $2705;
          break;
         }
         _free(HEAP32[$2 + 8 >> 2] | 0);
         $$1$i328 = $2705;
         break;
        }
        $2738 = $2694 + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $2691, $2700);
        $2739 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($5, 0, 59064, 13) | 0;
        HEAP32[$4 + 0 >> 2] = HEAP32[$2739 + 0 >> 2];
        HEAP32[$4 + 4 >> 2] = HEAP32[$2739 + 4 >> 2];
        HEAP32[$4 + 8 >> 2] = HEAP32[$2739 + 8 >> 2];
        HEAP32[$2739 + 0 >> 2] = 0;
        HEAP32[$2739 + 4 >> 2] = 0;
        HEAP32[$2739 + 8 >> 2] = 0;
        $2740 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4, 59056, 1) | 0;
        $2741 = HEAP8[$2740 >> 0] | 0;
        $2742 = $2740 + 1 | 0;
        HEAP8[$$sroa$7 + 0 >> 0] = HEAP8[$2742 + 0 >> 0] | 0;
        HEAP8[$$sroa$7 + 1 >> 0] = HEAP8[$2742 + 1 >> 0] | 0;
        HEAP8[$$sroa$7 + 2 >> 0] = HEAP8[$2742 + 2 >> 0] | 0;
        HEAP8[$$sroa$7 + 3 >> 0] = HEAP8[$2742 + 3 >> 0] | 0;
        HEAP8[$$sroa$7 + 4 >> 0] = HEAP8[$2742 + 4 >> 0] | 0;
        HEAP8[$$sroa$7 + 5 >> 0] = HEAP8[$2742 + 5 >> 0] | 0;
        HEAP8[$$sroa$7 + 6 >> 0] = HEAP8[$2742 + 6 >> 0] | 0;
        $2744 = HEAP32[$2740 + 8 >> 2] | 0;
        HEAP32[$2740 + 0 >> 2] = 0;
        HEAP32[$2740 + 4 >> 2] = 0;
        HEAP32[$2740 + 8 >> 2] = 0;
        HEAP8[$3 >> 0] = $2741;
        $2745 = $3 + 1 | 0;
        HEAP8[$2745 + 0 >> 0] = HEAP8[$$sroa$7 + 0 >> 0] | 0;
        HEAP8[$2745 + 1 >> 0] = HEAP8[$$sroa$7 + 1 >> 0] | 0;
        HEAP8[$2745 + 2 >> 0] = HEAP8[$$sroa$7 + 2 >> 0] | 0;
        HEAP8[$2745 + 3 >> 0] = HEAP8[$$sroa$7 + 3 >> 0] | 0;
        HEAP8[$2745 + 4 >> 0] = HEAP8[$$sroa$7 + 4 >> 0] | 0;
        HEAP8[$2745 + 5 >> 0] = HEAP8[$$sroa$7 + 5 >> 0] | 0;
        HEAP8[$2745 + 6 >> 0] = HEAP8[$$sroa$7 + 6 >> 0] | 0;
        HEAP32[$3 + 8 >> 2] = $2744;
        HEAP8[$$sroa$7 + 0 >> 0] = 0;
        HEAP8[$$sroa$7 + 1 >> 0] = 0;
        HEAP8[$$sroa$7 + 2 >> 0] = 0;
        HEAP8[$$sroa$7 + 3 >> 0] = 0;
        HEAP8[$$sroa$7 + 4 >> 0] = 0;
        HEAP8[$$sroa$7 + 5 >> 0] = 0;
        HEAP8[$$sroa$7 + 6 >> 0] = 0;
        $2747 = $3 + 12 | 0;
        HEAP32[$2747 + 0 >> 2] = 0;
        HEAP32[$2747 + 4 >> 2] = 0;
        HEAP32[$2747 + 8 >> 2] = 0;
        $2748 = $db + 4 | 0;
        $2749 = HEAP32[$2748 >> 2] | 0;
        $2751 = HEAP32[$db + 8 >> 2] | 0;
        if ($2749 >>> 0 < $2751 >>> 0) {
         if (!$2749) $2756 = 0; else {
          HEAP32[$2749 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
          HEAP32[$2749 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
          HEAP32[$2749 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
          HEAP32[$3 + 0 >> 2] = 0;
          HEAP32[$3 + 4 >> 2] = 0;
          HEAP32[$3 + 8 >> 2] = 0;
          $2754 = $2749 + 12 | 0;
          HEAP32[$2754 + 0 >> 2] = HEAP32[$2747 + 0 >> 2];
          HEAP32[$2754 + 4 >> 2] = HEAP32[$2747 + 4 >> 2];
          HEAP32[$2754 + 8 >> 2] = HEAP32[$2747 + 8 >> 2];
          HEAP32[$2747 + 0 >> 2] = 0;
          HEAP32[$2747 + 4 >> 2] = 0;
          HEAP32[$2747 + 8 >> 2] = 0;
          $2756 = HEAP32[$2748 >> 2] | 0;
         }
         HEAP32[$2748 >> 2] = $2756 + 24;
        } else {
         $2760 = HEAP32[$db >> 2] | 0;
         $2762 = ($2749 - $2760 | 0) / 24 | 0;
         $2763 = $2762 + 1 | 0;
         if (($2763 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
         $2767 = ($2751 - $2760 | 0) / 24 | 0;
         if ($2767 >>> 0 < 1073741823) {
          $2769 = $2767 << 1;
          $$0$i$i$i$i = $2769 >>> 0 < $2763 >>> 0 ? $2763 : $2769;
         } else $$0$i$i$i$i = 2147483647;
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i$i, $2762, $db + 12 | 0);
         $2772 = $__v$i$i$i + 8 | 0;
         $2773 = HEAP32[$2772 >> 2] | 0;
         if ($2773) {
          HEAP32[$2773 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
          HEAP32[$2773 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
          HEAP32[$2773 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
          HEAP32[$3 + 0 >> 2] = 0;
          HEAP32[$3 + 4 >> 2] = 0;
          HEAP32[$3 + 8 >> 2] = 0;
          $2775 = $2773 + 12 | 0;
          HEAP32[$2775 + 0 >> 2] = HEAP32[$2747 + 0 >> 2];
          HEAP32[$2775 + 4 >> 2] = HEAP32[$2747 + 4 >> 2];
          HEAP32[$2775 + 8 >> 2] = HEAP32[$2747 + 8 >> 2];
          HEAP32[$2747 + 0 >> 2] = 0;
          HEAP32[$2747 + 4 >> 2] = 0;
          HEAP32[$2747 + 8 >> 2] = 0;
         }
         HEAP32[$2772 >> 2] = $2773 + 24;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
        if (HEAP8[$4 >> 0] & 1) _free(HEAP32[$4 + 8 >> 2] | 0);
        if (!(HEAP8[$5 >> 0] & 1)) $$1$i328 = $2738; else {
         _free(HEAP32[$5 + 8 >> 2] | 0);
         $$1$i328 = $2738;
        }
       }
      } else $$1$i328 = $first;
     } else $$1$i328 = $first; while (0);
     if (($$1$i328 | 0) == ($first | 0)) break L113;
     $2839 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($2839 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $2841 = $db + 16 | 0;
     HEAP32[$44 >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($43, $2839 + -24 | 0, $44);
     $2845 = $db + 20 | 0;
     $2846 = HEAP32[$2845 >> 2] | 0;
     $2848 = HEAP32[$db + 24 >> 2] | 0;
     if ($2846 >>> 0 < $2848 >>> 0) {
      if (!$2846) $2862 = 0; else {
       HEAP32[$2846 + 12 >> 2] = HEAP32[$43 + 12 >> 2];
       HEAP32[$2846 >> 2] = HEAP32[$43 >> 2];
       $2857 = $43 + 4 | 0;
       HEAP32[$2846 + 4 >> 2] = HEAP32[$2857 >> 2];
       $2859 = $43 + 8 | 0;
       HEAP32[$2846 + 8 >> 2] = HEAP32[$2859 >> 2];
       HEAP32[$2859 >> 2] = 0;
       HEAP32[$2857 >> 2] = 0;
       HEAP32[$43 >> 2] = 0;
       $2862 = HEAP32[$2845 >> 2] | 0;
      }
      HEAP32[$2845 >> 2] = $2862 + 16;
     } else {
      $2866 = HEAP32[$2841 >> 2] | 0;
      $2868 = $2846 - $2866 >> 4;
      $2869 = $2868 + 1 | 0;
      if (($2869 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $2872 = $2848 - $2866 | 0;
      if ($2872 >> 4 >>> 0 < 1073741823) {
       $2875 = $2872 >> 3;
       $$0$i$i$i19 = $2875 >>> 0 < $2869 >>> 0 ? $2869 : $2875;
      } else $$0$i$i$i19 = 2147483647;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i19, $2868, $db + 28 | 0);
      $2878 = $__v$i$i$i + 8 | 0;
      $2879 = HEAP32[$2878 >> 2] | 0;
      if ($2879) {
       HEAP32[$2879 + 12 >> 2] = HEAP32[$43 + 12 >> 2];
       HEAP32[$2879 >> 2] = HEAP32[$43 >> 2];
       $2887 = $43 + 4 | 0;
       HEAP32[$2879 + 4 >> 2] = HEAP32[$2887 >> 2];
       $2889 = $43 + 8 | 0;
       HEAP32[$2879 + 8 >> 2] = HEAP32[$2889 >> 2];
       HEAP32[$2889 >> 2] = 0;
       HEAP32[$2887 >> 2] = 0;
       HEAP32[$43 >> 2] = 0;
      }
      HEAP32[$2878 >> 2] = $2879 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2841, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($43);
     $$0 = $$1$i328;
     STACKTOP = sp;
     return $$0 | 0;
    } else break L113;
   }
   break;
  }
 default:
  {}
 } while (0);
 $2892 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 if (($2892 | 0) != ($first | 0)) {
  $$0 = $2892;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2894 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 if (($2894 | 0) == ($first | 0)) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2898 = HEAP32[$db + 4 >> 2] | 0;
 if ((HEAP32[$db >> 2] | 0) == ($2898 | 0)) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2900 = $db + 16 | 0;
 HEAP32[$46 >> 2] = HEAP32[$db + 12 >> 2];
 __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($45, $2898 + -24 | 0, $46);
 $2904 = $db + 20 | 0;
 $2905 = HEAP32[$2904 >> 2] | 0;
 $2907 = HEAP32[$db + 24 >> 2] | 0;
 if ($2905 >>> 0 < $2907 >>> 0) {
  if (!$2905) $2921 = 0; else {
   HEAP32[$2905 + 12 >> 2] = HEAP32[$45 + 12 >> 2];
   HEAP32[$2905 >> 2] = HEAP32[$45 >> 2];
   $2916 = $45 + 4 | 0;
   HEAP32[$2905 + 4 >> 2] = HEAP32[$2916 >> 2];
   $2918 = $45 + 8 | 0;
   HEAP32[$2905 + 8 >> 2] = HEAP32[$2918 >> 2];
   HEAP32[$2918 >> 2] = 0;
   HEAP32[$2916 >> 2] = 0;
   HEAP32[$45 >> 2] = 0;
   $2921 = HEAP32[$2904 >> 2] | 0;
  }
  HEAP32[$2904 >> 2] = $2921 + 16;
 } else {
  $2925 = HEAP32[$2900 >> 2] | 0;
  $2927 = $2905 - $2925 >> 4;
  $2928 = $2927 + 1 | 0;
  if (($2928 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
  $2931 = $2907 - $2925 | 0;
  if ($2931 >> 4 >>> 0 < 1073741823) {
   $2934 = $2931 >> 3;
   $$0$i$i$i = $2934 >>> 0 < $2928 >>> 0 ? $2928 : $2934;
  } else $$0$i$i$i = 2147483647;
  __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i, $2927, $db + 28 | 0);
  $2937 = $__v$i$i$i + 8 | 0;
  $2938 = HEAP32[$2937 >> 2] | 0;
  if ($2938) {
   HEAP32[$2938 + 12 >> 2] = HEAP32[$45 + 12 >> 2];
   HEAP32[$2938 >> 2] = HEAP32[$45 >> 2];
   $2946 = $45 + 4 | 0;
   HEAP32[$2938 + 4 >> 2] = HEAP32[$2946 >> 2];
   $2948 = $45 + 8 | 0;
   HEAP32[$2938 + 8 >> 2] = HEAP32[$2948 >> 2];
   HEAP32[$2948 >> 2] = 0;
   HEAP32[$2946 >> 2] = 0;
   HEAP32[$45 >> 2] = 0;
  }
  HEAP32[$2937 >> 2] = $2938 + 16;
  __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2900, $__v$i$i$i);
  __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
 }
 __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($45);
 $$0 = $2894;
 STACKTOP = sp;
 return $$0 | 0;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$$5$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i6 = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i109 = 0, $$01$i110$i = 0, $$01$i120 = 0, $$01$i131 = 0, $$01$i134$i = 0, $$01$i142 = 0, $$01$i149$i = 0, $$01$i153 = 0, $$01$i164 = 0, $$01$i175 = 0, $$01$i186 = 0, $$01$i197 = 0, $$01$i20 = 0, $$01$i208 = 0, $$01$i219 = 0, $$01$i230 = 0, $$01$i241 = 0, $$01$i252 = 0, $$01$i263 = 0, $$01$i274 = 0, $$01$i285 = 0, $$01$i296 = 0, $$01$i3 = 0, $$01$i307 = 0, $$01$i31 = 0, $$01$i318 = 0, $$01$i340 = 0, $$01$i351 = 0, $$01$i362 = 0, $$01$i373 = 0, $$01$i395 = 0, $$01$i406 = 0, $$01$i417 = 0, $$01$i42 = 0, $$01$i428 = 0, $$01$i439 = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i450 = 0, $$01$i461 = 0, $$01$i472 = 0, $$01$i483 = 0, $$01$i494 = 0, $$01$i505 = 0, $$01$i516 = 0, $$01$i52$i = 0, $$01$i527 = 0, $$01$i538 = 0, $$01$i54 = 0, $$01$i549 = 0, $$01$i560 = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i65 = 0, $$01$i67 = 0, $$01$i69$i = 0, $$01$i74 = 0, $$01$i75$i = 0, $$01$i76 = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$i87 = 0, $$01$i98 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$019$i4 = 0, $$02$i = 0, $$02$i108 = 0, $$02$i119 = 0, $$02$i130 = 0, $$02$i141 = 0, $$02$i152 = 0, $$02$i163 = 0, $$02$i174 = 0, $$02$i185 = 0, $$02$i19 = 0, $$02$i196 = 0, $$02$i207 = 0, $$02$i218 = 0, $$02$i229 = 0, $$02$i240 = 0, $$02$i251 = 0, $$02$i262 = 0, $$02$i273 = 0, $$02$i284 = 0, $$02$i295 = 0, $$02$i30 = 0, $$02$i306 = 0, $$02$i317 = 0, $$02$i339 = 0, $$02$i350 = 0, $$02$i361 = 0, $$02$i372 = 0, $$02$i394 = 0, $$02$i405 = 0, $$02$i41 = 0, $$02$i416 = 0, $$02$i427 = 0, $$02$i438 = 0, $$02$i449 = 0, $$02$i460 = 0, $$02$i471 = 0, $$02$i482 = 0, $$02$i493 = 0, $$02$i504 = 0, $$02$i515 = 0, $$02$i526 = 0, $$02$i53 = 0, $$02$i537 = 0, $$02$i548 = 0, $$02$i559 = 0, $$02$i64 = 0, $$02$i75 = 0, $$02$i86 = 0, $$02$i97 = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$100 = 0, $$110$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i118$i = 0, $$12$i127$i = 0, $$12$i142$i = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$216$i = 0, $$24$i = 0, $$26$i = 0, $$26$us$i = 0, $$28$i = 0.0, $$29$i = 0, $$3$i = 0.0, $$3$i10 = 0, $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us310$i = 0, $$a$3312$i = 0, $$fl$4 = 0, $$lcssa$i = 0, $$lcssa283$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre308$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1003 = 0, $1005 = 0, $1007 = 0, $1009 = 0, $1016 = 0, $1025 = 0, $103 = 0, $1031 = 0, $1034 = 0, $1038 = 0, $104 = 0, $1042 = 0, $1044 = 0, $1046 = 0, $1048 = 0, $105 = 0, $1055 = 0, $1064 = 0, $1067 = 0, $1070 = 0, $1074 = 0, $1078 = 0, $1080 = 0, $1082 = 0, $1084 = 0, $1091 = 0, $11 = 0, $110 = 0, $1100 = 0, $1104 = 0, $1108 = 0, $111 = 0, $1111 = 0, $1115 = 0, $1119 = 0, $1121 = 0, $1123 = 0, $1125 = 0, $1132 = 0, $1141 = 0, $1147 = 0, $1150 = 0, $1154 = 0, $1158 = 0, $1160 = 0, $1162 = 0, $1164 = 0, $1171 = 0, $1180 = 0, $1183 = 0, $1184 = 0, $1187 = 0, $1191 = 0, $1195 = 0, $1197 = 0, $1199 = 0, $12 = 0, $1201 = 0, $1208 = 0, $1217 = 0, $1220 = 0, $1222 = 0, $1227 = 0, $1230 = 0, $1234 = 0, $1238 = 0, $1240 = 0, $1242 = 0, $1244 = 0, $1251 = 0, $1260 = 0, $1266 = 0, $1269 = 0, $1273 = 0, $1277 = 0, $1279 = 0, $1281 = 0, $1283 = 0, $1290 = 0, $1299 = 0, $13 = 0, $130 = 0, $1302 = 0, $1305 = 0, $1309 = 0, $1313 = 0, $1315 = 0, $1317 = 0, $1319 = 0, $1335 = 0, $1339 = 0, $1343 = 0, $1346 = 0, $1350 = 0, $1354 = 0, $1356 = 0, $1358 = 0, $1360 = 0, $1367 = 0, $1376 = 0, $138 = 0, $1382 = 0, $1385 = 0, $1389 = 0, $1393 = 0, $1395 = 0, $1397 = 0, $1399 = 0, $14 = 0, $1406 = 0, $1415 = 0, $1421 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1433 = 0, $1434 = 0, $1437 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1445 = 0, $1445$phi = 0, $1448 = 0, $145 = 0, $1450 = 0, $1454 = 0, $1459 = 0, $1461 = 0, $1463 = 0, $147 = 0, $1482 = 0, $1484 = 0, $1487 = 0, $1492 = 0, $1499 = 0, $15 = 0, $1500 = 0, $1501 = 0, $1526 = 0, $1527 = 0, $1530 = 0, $1535 = 0, $1537 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1549 = 0, $1550 = 0, $1551 = 0, $1558 = 0, $1568 = 0, $1571 = 0, $1573 = 0, $1575 = 0, $1577 = 0, $1582 = 0, $1583 = 0, $1586 = 0, $1588 = 0, $1590 = 0, $1592 = 0, $16 = 0, $1606 = 0, $1611 = 0, $1620 = 0, $1621 = 0, $1625 = 0, $1628 = 0, $1631 = 0, $1632 = 0, $1634 = 0, $1638 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $166 = 0, $1660 = 0, $1666 = 0, $1676 = 0, $1681 = 0, $1682 = 0, $1684 = 0, $1685 = 0, $1689 = 0, $169 = 0, $1692 = 0, $1696 = 0, $17 = 0, $170 = 0, $1700 = 0, $1702 = 0, $1704 = 0, $1706 = 0, $171 = 0, $171$phi = 0, $1713 = 0, $1722 = 0, $1728 = 0, $1731 = 0, $1735 = 0, $1739 = 0, $174 = 0, $1741 = 0, $1743 = 0, $1745 = 0, $1752 = 0, $176 = 0, $1761 = 0, $1764 = 0, $1767 = 0, $1771 = 0, $1775 = 0, $1777 = 0, $1779 = 0, $178 = 0, $1781 = 0, $1788 = 0, $1797 = 0, $18 = 0, $180 = 0, $1801 = 0, $1805 = 0, $1808 = 0, $181 = 0, $1812 = 0, $1816 = 0, $1818 = 0, $1820 = 0, $1822 = 0, $1829 = 0, $1838 = 0, $1844 = 0, $1847 = 0, $1851 = 0, $1855 = 0, $1857 = 0, $1859 = 0, $186 = 0, $1861 = 0, $1868 = 0, $1877 = 0, $1881 = 0, $1882 = 0, $1884 = 0, $1886 = 0, $189 = 0, $1891 = 0, $1896 = 0, $19 = 0, $1900 = 0, $1901 = 0, $1904 = 0, $1908 = 0, $1912 = 0, $1914 = 0, $1916 = 0, $1918 = 0, $1925 = 0, $1934 = 0, $1942 = 0, $1945 = 0, $1948 = 0, $1952 = 0, $1956 = 0, $1958 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1967 = 0, $1972 = 0, $1976 = 0, $1978 = 0, $198 = 0, $1983 = 0, $1984 = 0, $1987 = 0, $1991 = 0, $1995 = 0, $1997 = 0, $1999 = 0, $2 = 0, $20 = 0, $2001 = 0, $2008 = 0, $201 = 0, $2010 = 0, $2018 = 0, $202 = 0, $2021 = 0, $2022 = 0, $2022$phi = 0, $2023 = 0, $2030 = 0, $2033 = 0, $2037 = 0, $204 = 0, $2041 = 0, $2043 = 0, $2045 = 0, $2047 = 0, $2054 = 0, $2063 = 0, $2069 = 0, $207 = 0, $2072 = 0, $2076 = 0, $208 = 0, $2080 = 0, $2082 = 0, $2084 = 0, $2086 = 0, $2093 = 0, $21 = 0, $2102 = 0, $2108 = 0, $2109 = 0, $2114 = 0, $2120 = 0, $2122 = 0, $2125 = 0, $2129 = 0, $2133 = 0, $2135 = 0, $2137 = 0, $2138 = 0, $214 = 0, $2143 = 0, $215 = 0, $2152 = 0, $2156 = 0, $2159 = 0, $2163 = 0, $2167 = 0, $2169 = 0, $2171 = 0, $2172 = 0, $2177 = 0, $2179 = 0, $2182 = 0, $2186 = 0, $2190 = 0, $2192 = 0, $2194 = 0, $2196 = 0, $22 = 0, $2203 = 0, $221 = 0, $2212 = 0, $222 = 0.0, $2223 = 0, $2226 = 0, $2230 = 0, $2234 = 0, $2236 = 0, $2238 = 0, $2240 = 0, $2247 = 0, $225 = 0.0, $2256 = 0, $2262 = 0, $2265 = 0, $2269 = 0, $2273 = 0, $2275 = 0, $2277 = 0, $2279 = 0, $228 = 0, $2286 = 0, $229 = 0, $2295 = 0, $2299 = 0, $23 = 0, $2300 = 0, $2303 = 0, $2307 = 0, $2311 = 0, $2313 = 0, $2315 = 0, $2317 = 0, $2324 = 0, $2333 = 0, $2337 = 0, $2341 = 0, $2344 = 0, $2348 = 0, $2352 = 0, $2354 = 0, $2356 = 0, $2358 = 0, $236 = 0, $2365 = 0, $2374 = 0, $238 = 0, $2380 = 0, $2383 = 0, $2387 = 0, $2391 = 0, $2393 = 0, $2395 = 0, $2397 = 0, $24 = 0, $2404 = 0, $2413 = 0, $2418 = 0, $2420 = 0, $2422 = 0, $2424 = 0, $2425 = 0, $2429 = 0, $243 = 0, $2432 = 0, $2436 = 0, $2440 = 0, $2442 = 0, $2443 = 0, $2445 = 0, $2453 = 0, $2462 = 0, $2468 = 0, $2471 = 0, $2475 = 0, $2479 = 0, $2481 = 0, $2482 = 0, $2484 = 0, $2492 = 0, $25 = 0, $2501 = 0, $2504 = 0, $2507 = 0, $2511 = 0, $2515 = 0, $2517 = 0, $2518 = 0, $2520 = 0, $2528 = 0, $2537 = 0, $2541 = 0, $2545 = 0, $2548 = 0, $255 = 0, $2552 = 0, $2556 = 0, $2558 = 0, $2559 = 0, $2561 = 0, $2569 = 0, $2578 = 0, $2584 = 0, $2587 = 0, $2591 = 0, $2595 = 0, $2597 = 0, $2598 = 0, $26 = 0, $2600 = 0, $2608 = 0, $2617 = 0, $262 = 0, $2621 = 0, $2625 = 0, $2628 = 0, $2632 = 0, $2636 = 0, $2638 = 0, $2639 = 0, $2641 = 0, $2649 = 0, $265 = 0, $2658 = 0, $2664 = 0, $2667 = 0, $2671 = 0, $2675 = 0, $2677 = 0, $2678 = 0, $268 = 0, $2680 = 0, $2688 = 0, $2697 = 0, $27 = 0, $2700 = 0, $2703 = 0, $2707 = 0, $2711 = 0, $2713 = 0, $2714 = 0, $2716 = 0, $2724 = 0, $2733 = 0, $2737 = 0, $2741 = 0, $2744 = 0, $2748 = 0, $275 = 0, $2752 = 0, $2754 = 0, $2755 = 0, $2757 = 0, $2765 = 0, $2774 = 0, $2780 = 0, $2783 = 0, $2787 = 0, $2791 = 0, $2793 = 0, $2794 = 0, $2796 = 0, $2804 = 0, $2813 = 0, $2819 = 0, $2821 = 0, $2823 = 0, $2824 = 0, $2827 = 0, $2831 = 0, $2832 = 0, $2836 = 0, $2838 = 0, $2841 = 0, $2842 = 0, $2846 = 0, $2848 = 0, $2851 = 0, $2855 = 0, $2856 = 0, $2860 = 0, $2862 = 0, $2865 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2874 = 0.0, $2875 = 0.0, $2879 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $292 = 0, $293 = 0, $3 = 0, $303 = 0, $307 = 0, $310 = 0, $312 = 0, $316 = 0, $317 = 0, $318 = 0, $33 = 0, $334 = 0, $340 = 0, $342 = 0, $343 = 0, $349 = 0, $35 = 0, $357 = 0, $360 = 0, $363 = 0, $364 = 0, $368 = 0, $370 = 0, $376 = 0, $377 = 0, $382 = 0, $386 = 0, $39 = 0, $391 = 0, $393 = 0, $395 = 0, $4 = 0, $40 = 0, $400 = 0, $403 = 0, $405 = 0, $406 = 0, $410 = 0, $413 = 0, $417 = 0, $421 = 0, $423 = 0, $424 = 0, $426 = 0, $434 = 0, $443 = 0, $449 = 0, $45 = 0, $452 = 0, $456 = 0, $46 = 0, $460 = 0, $462 = 0, $463 = 0, $465 = 0, $473 = 0, $482 = 0, $486 = 0, $488 = 0, $49 = 0, $492 = 0, $495 = 0, $499 = 0, $5 = 0, $503 = 0, $505 = 0, $507 = 0, $509 = 0, $516 = 0, $525 = 0, $53 = 0, $530 = 0, $534 = 0, $537 = 0, $541 = 0, $545 = 0, $547 = 0, $548 = 0, $550 = 0, $558 = 0, $567 = 0, $57 = 0, $573 = 0, $576 = 0, $580 = 0, $584 = 0, $586 = 0, $587 = 0, $589 = 0, $59 = 0, $597 = 0, $6 = 0, $60 = 0, $606 = 0, $610 = 0.0, $615 = 0, $619 = 0, $62 = 0, $626 = 0, $630 = 0, $633 = 0, $634 = 0, $638 = 0, $641 = 0, $645 = 0, $649 = 0, $651 = 0, $652 = 0, $654 = 0, $662 = 0, $671 = 0, $677 = 0, $680 = 0, $684 = 0, $688 = 0, $690 = 0, $691 = 0, $693 = 0, $7 = 0, $70 = 0, $701 = 0, $710 = 0, $713 = 0, $716 = 0, $720 = 0, $724 = 0, $726 = 0, $727 = 0, $729 = 0, $737 = 0, $746 = 0, $749 = 0, $752 = 0, $756 = 0, $760 = 0, $762 = 0, $763 = 0, $765 = 0, $773 = 0, $782 = 0, $787 = 0, $79 = 0, $791 = 0, $794 = 0, $798 = 0, $8 = 0, $802 = 0, $804 = 0, $805 = 0, $807 = 0, $815 = 0, $824 = 0, $83 = 0, $830 = 0, $833 = 0, $837 = 0, $84 = 0, $841 = 0, $843 = 0, $844 = 0, $846 = 0, $854 = 0, $863 = 0, $867 = 0.0, $868 = 0, $871 = 0, $873 = 0, $876 = 0, $88 = 0, $891 = 0, $894 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $91 = 0, $916 = 0, $928 = 0, $931 = 0, $937 = 0, $946 = 0, $95 = 0, $952 = 0, $961 = 0, $967 = 0, $979 = 0, $984 = 0, $985 = 0, $987 = 0, $988 = 0, $992 = 0, $995 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0, $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0, $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0, $fl$0115 = 0, $fl$0175 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt88$lcssa = 0, $fmt88167 = 0, $fmt89 = 0, $fmt90 = 0, $fmt91 = 0, $fmt93 = 0, $fmt94 = 0, $i$0$i = 0, $i$0$i104 = 0, $i$0$i115 = 0, $i$0$i126 = 0, $i$0$i137 = 0, $i$0$i148 = 0, $i$0$i15 = 0, $i$0$i159 = 0, $i$0$i170 = 0, $i$0$i181 = 0, $i$0$i192 = 0, $i$0$i203 = 0, $i$0$i214 = 0, $i$0$i225 = 0, $i$0$i236 = 0, $i$0$i247 = 0, $i$0$i258 = 0, $i$0$i26 = 0, $i$0$i269 = 0, $i$0$i280 = 0, $i$0$i291 = 0, $i$0$i302 = 0, $i$0$i313 = 0, $i$0$i335 = 0, $i$0$i346 = 0, $i$0$i357 = 0, $i$0$i368 = 0, $i$0$i37 = 0, $i$0$i390 = 0, $i$0$i401 = 0, $i$0$i412 = 0, $i$0$i423 = 0, $i$0$i434 = 0, $i$0$i445 = 0, $i$0$i456 = 0, $i$0$i467 = 0, $i$0$i478 = 0, $i$0$i489 = 0, $i$0$i49 = 0, $i$0$i500 = 0, $i$0$i511 = 0, $i$0$i522 = 0, $i$0$i533 = 0, $i$0$i544 = 0, $i$0$i555 = 0, $i$0$i60 = 0, $i$0$i71 = 0, $i$0$i82 = 0, $i$0$i93 = 0, $i$0$lcssa = 0, $i$0$lcssa275 = 0, $i$0180 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1191 = 0, $i$1230$i = 0, $i$2166 = 0, $i$2217$i = 0, $i$3164 = 0, $i$3213$i = 0, $isdigittmp = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1179 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or$cond19 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4274 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$lcssa$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$020$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$15$i = 0, $s$2$i = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s8$0188$i$ph = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8113 = 0, $storemerge8174 = 0, $t$0 = 0, $t$1 = 0, $uglygep296$i = 0, $uglygep300301$i = 0, $umax$i = 0, $w$0 = 0, $w$0$lcssa$i = 0, $w$011$i = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0181 = 0, $ws$1192 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0168 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0, sp = 0, $898$looptemp = 0, $1642$looptemp = 0, $316$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 $big$i = sp + 16 | 0;
 $e2$i = sp + 8 | 0;
 $buf$i = sp + 560 | 0;
 $0 = $buf$i;
 $ebuf0$i = sp + 840 | 0;
 $pad$i = sp + 584 | 0;
 $buf = sp + 520 | 0;
 $wc = sp;
 $mb = sp + 852 | 0;
 $1 = ($f | 0) != 0;
 $2 = $buf + 40 | 0;
 $3 = $2;
 $4 = $buf + 39 | 0;
 $5 = $wc + 4 | 0;
 $6 = $wc;
 $7 = $ebuf0$i + 12 | 0;
 $8 = $ebuf0$i + 11 | 0;
 $9 = $7;
 $10 = $9 - $0 | 0;
 $11 = -2 - $0 | 0;
 $12 = $9 + 2 | 0;
 $13 = $big$i + 288 | 0;
 $14 = $buf$i + 9 | 0;
 $15 = $14;
 $16 = $buf$i + 8 | 0;
 $17 = $f + 16 | 0;
 $18 = $f + 74 | 0;
 $19 = $f + 8 | 0;
 $20 = $f + 4 | 0;
 $21 = $f + 44 | 0;
 $22 = $f + 28 | 0;
 $23 = $f + 20 | 0;
 $24 = $f + 48 | 0;
 $25 = $f + 36 | 0;
 $26 = $f + 75 | 0;
 $27 = ~$0;
 $2880 = 0;
 $2881 = 0;
 $cnt$0 = 0;
 $fmt90 = $fmt;
 $l$0 = 0;
 $l10n$0 = 0;
 L1 : while (1) {
  do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   $cnt$1 = -1;
   break;
  } else {
   $cnt$1 = $l$0 + $cnt$0 | 0;
   break;
  } else $cnt$1 = $cnt$0; while (0);
  $33 = HEAP8[$fmt90 >> 0] | 0;
  if (!($33 << 24 >> 24)) {
   label = 975;
   break;
  } else {
   $2882 = $33;
   $fmt89 = $fmt90;
  }
  while (1) {
   if ($2882 << 24 >> 24 == 37) {
    $fmt88167 = $fmt89;
    $z$0168 = $fmt89;
    label = 9;
    break;
   } else if (!($2882 << 24 >> 24)) {
    $fmt88$lcssa = $fmt89;
    $z$0$lcssa = $fmt89;
    break;
   }
   $35 = $fmt89 + 1 | 0;
   $2882 = HEAP8[$35 >> 0] | 0;
   $fmt89 = $35;
  }
  L12 : do if ((label | 0) == 9) while (1) {
   label = 0;
   if ((HEAP8[$fmt88167 + 1 >> 0] | 0) != 37) {
    $fmt88$lcssa = $fmt88167;
    $z$0$lcssa = $z$0168;
    break L12;
   }
   $39 = $z$0168 + 1 | 0;
   $40 = $fmt88167 + 2 | 0;
   if ((HEAP8[$40 >> 0] | 0) == 37) {
    $fmt88167 = $40;
    $z$0168 = $39;
    label = 9;
   } else {
    $fmt88$lcssa = $40;
    $z$0$lcssa = $39;
    break;
   }
  } while (0);
  $45 = $z$0$lcssa - $fmt90 | 0;
  L17 : do if ($1) {
   $46 = HEAP32[$17 >> 2] | 0;
   do if (!$46) {
    $49 = HEAP8[$18 >> 0] | 0;
    HEAP8[$18 >> 0] = $49 + 255 | $49;
    $53 = HEAP32[$f >> 2] | 0;
    if (!($53 & 8)) {
     HEAP32[$19 >> 2] = 0;
     HEAP32[$20 >> 2] = 0;
     $57 = HEAP32[$21 >> 2] | 0;
     HEAP32[$22 >> 2] = $57;
     HEAP32[$23 >> 2] = $57;
     $59 = $57 + (HEAP32[$24 >> 2] | 0) | 0;
     HEAP32[$17 >> 2] = $59;
     $62 = $59;
     break;
    } else {
     HEAP32[$f >> 2] = $53 | 32;
     break L17;
    }
   } else $62 = $46; while (0);
   $60 = HEAP32[$23 >> 2] | 0;
   if (($62 - $60 | 0) >>> 0 < $45 >>> 0) {
    FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $fmt90, $45) | 0;
    break;
   }
   L28 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
    $i$0$i = $45;
    while (1) {
     if (!$i$0$i) {
      $$01$i3 = $45;
      $$02$i = $fmt90;
      $79 = $60;
      break L28;
     }
     $70 = $i$0$i + -1 | 0;
     if ((HEAP8[$fmt90 + $70 >> 0] | 0) == 10) break; else $i$0$i = $70;
    }
    if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $fmt90, $i$0$i) | 0) >>> 0 < $i$0$i >>> 0) break L17;
    $$01$i3 = $45 - $i$0$i | 0;
    $$02$i = $fmt90 + $i$0$i | 0;
    $79 = HEAP32[$23 >> 2] | 0;
   } else {
    $$01$i3 = $45;
    $$02$i = $fmt90;
    $79 = $60;
   } while (0);
   _memcpy($79 | 0, $$02$i | 0, $$01$i3 | 0) | 0;
   HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i3;
  } while (0);
  if (($z$0$lcssa | 0) != ($fmt90 | 0)) {
   $cnt$0 = $cnt$1;
   $fmt90 = $fmt88$lcssa;
   $l$0 = $45;
   continue;
  }
  $83 = $fmt88$lcssa + 1 | 0;
  $84 = HEAP8[$83 >> 0] | 0;
  $isdigittmp = ($84 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $88 = (HEAP8[$fmt88$lcssa + 2 >> 0] | 0) == 36;
   $$100 = $88 ? $fmt88$lcssa + 3 | 0 : $83;
   $91 = HEAP8[$$100 >> 0] | 0;
   $argpos$0 = $88 ? $isdigittmp : -1;
   $l10n$1 = $88 ? 1 : $l10n$0;
   $storemerge = $$100;
  } else {
   $91 = $84;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $83;
  }
  $90 = $91 << 24 >> 24;
  L40 : do if (($90 & -32 | 0) == 32) {
   $100 = $91;
   $95 = $90;
   $fl$0175 = 0;
   $storemerge8174 = $storemerge;
   while (1) {
    if (!(1 << $95 + -32 & 75913)) {
     $110 = $100;
     $fl$0115 = $fl$0175;
     $storemerge8113 = $storemerge8174;
     break L40;
    }
    $103 = 1 << ($100 << 24 >> 24) + -32 | $fl$0175;
    $104 = $storemerge8174 + 1 | 0;
    $105 = HEAP8[$104 >> 0] | 0;
    $95 = $105 << 24 >> 24;
    if (($95 & -32 | 0) != 32) {
     $110 = $105;
     $fl$0115 = $103;
     $storemerge8113 = $104;
     break;
    } else {
     $100 = $105;
     $fl$0175 = $103;
     $storemerge8174 = $104;
    }
   }
  } else {
   $110 = $91;
   $fl$0115 = 0;
   $storemerge8113 = $storemerge;
  } while (0);
  do if ($110 << 24 >> 24 == 42) {
   $111 = $storemerge8113 + 1 | 0;
   $isdigittmp11 = (HEAP8[$111 >> 0] | 0) + -48 | 0;
   if ($isdigittmp11 >>> 0 < 10) if ((HEAP8[$storemerge8113 + 2 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp11 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge13 = $storemerge8113 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$111 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else label = 34; else label = 34;
   if ((label | 0) == 34) {
    label = 0;
    if ($l10n$1) {
     $$0 = -1;
     label = 994;
     break L1;
    }
    if (!$1) {
     $fl$1 = $fl$0115;
     $fmt91 = $111;
     $l10n$3 = 0;
     $w$1 = 0;
     break;
    }
    $arglist_current = HEAP32[$ap >> 2] | 0;
    $130 = HEAP32[$arglist_current >> 2] | 0;
    HEAP32[$ap >> 2] = $arglist_current + 4;
    $l10n$2 = 0;
    $storemerge13 = $111;
    $w$0 = $130;
   }
   if (($w$0 | 0) < 0) {
    $fl$1 = $fl$0115 | 8192;
    $fmt91 = $storemerge13;
    $l10n$3 = $l10n$2;
    $w$1 = 0 - $w$0 | 0;
   } else {
    $fl$1 = $fl$0115;
    $fmt91 = $storemerge13;
    $l10n$3 = $l10n$2;
    $w$1 = $w$0;
   }
  } else {
   $isdigittmp1$i = ($110 << 24 >> 24) + -48 | 0;
   if ($isdigittmp1$i >>> 0 < 10) {
    $138 = $storemerge8113;
    $i$03$i = 0;
    $isdigittmp4$i = $isdigittmp1$i;
    do {
     $i$03$i = ($i$03$i * 10 | 0) + $isdigittmp4$i | 0;
     $138 = $138 + 1 | 0;
     $isdigittmp4$i = (HEAP8[$138 >> 0] | 0) + -48 | 0;
    } while ($isdigittmp4$i >>> 0 < 10);
    if (($i$03$i | 0) < 0) {
     $$0 = -1;
     label = 994;
     break L1;
    } else {
     $fl$1 = $fl$0115;
     $fmt91 = $138;
     $l10n$3 = $l10n$1;
     $w$1 = $i$03$i;
    }
   } else {
    $fl$1 = $fl$0115;
    $fmt91 = $storemerge8113;
    $l10n$3 = $l10n$1;
    $w$1 = 0;
   }
  } while (0);
  L61 : do if ((HEAP8[$fmt91 >> 0] | 0) == 46) {
   $144 = $fmt91 + 1 | 0;
   $145 = HEAP8[$144 >> 0] | 0;
   if ($145 << 24 >> 24 != 42) {
    $isdigittmp1$i28 = ($145 << 24 >> 24) + -48 | 0;
    if ($isdigittmp1$i28 >>> 0 < 10) {
     $171 = $fmt91;
     $2883 = $144;
     $i$03$i31 = 0;
     $isdigittmp4$i30 = $isdigittmp1$i28;
    } else {
     $fmt94 = $144;
     $p$0 = 0;
     break;
    }
    while (1) {
     $169 = ($i$03$i31 * 10 | 0) + $isdigittmp4$i30 | 0;
     $170 = $171 + 2 | 0;
     $isdigittmp4$i30 = (HEAP8[$170 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i30 >>> 0 >= 10) {
      $fmt94 = $170;
      $p$0 = $169;
      break L61;
     } else {
      $171$phi = $2883;
      $2883 = $170;
      $i$03$i31 = $169;
      $171 = $171$phi;
     }
    }
   }
   $147 = $fmt91 + 2 | 0;
   $isdigittmp9 = (HEAP8[$147 >> 0] | 0) + -48 | 0;
   if ($isdigittmp9 >>> 0 < 10) if ((HEAP8[$fmt91 + 3 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp9 << 2) >> 2] = 10;
    $fmt94 = $fmt91 + 4 | 0;
    $p$0 = HEAP32[$nl_arg + ((HEAP8[$147 >> 0] | 0) + -48 << 3) >> 2] | 0;
    break;
   }
   if ($l10n$3) {
    $$0 = -1;
    label = 994;
    break L1;
   }
   if ($1) {
    $arglist_current2 = HEAP32[$ap >> 2] | 0;
    $166 = HEAP32[$arglist_current2 >> 2] | 0;
    HEAP32[$ap >> 2] = $arglist_current2 + 4;
    $fmt94 = $147;
    $p$0 = $166;
   } else {
    $fmt94 = $147;
    $p$0 = 0;
   }
  } else {
   $fmt94 = $fmt91;
   $p$0 = -1;
  } while (0);
  $fmt93 = $fmt94;
  $st$0 = 0;
  while (1) {
   $174 = HEAP8[$fmt93 >> 0] | 0;
   $176 = ($174 << 24 >> 24) + -65 | 0;
   if ($176 >>> 0 > 57) {
    $$0 = -1;
    label = 994;
    break L1;
   }
   $178 = $fmt93 + 1 | 0;
   $180 = HEAP8[63864 + ($st$0 * 58 | 0) + $176 >> 0] | 0;
   $181 = $180 & 255;
   if (($181 + -1 | 0) >>> 0 < 8) {
    $fmt93 = $178;
    $st$0 = $181;
   } else break;
  }
  if (!($180 << 24 >> 24)) {
   $$0 = -1;
   label = 994;
   break;
  }
  $186 = ($argpos$0 | 0) > -1;
  L80 : do if ($180 << 24 >> 24 == 19) if ($186) {
   $$0 = -1;
   label = 994;
   break L1;
  } else {
   $2884 = $2880;
   $2885 = $2881;
   label = 73;
  } else {
   if ($186) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $181;
    $189 = $nl_arg + ($argpos$0 << 3) | 0;
    $2884 = HEAP32[$189 >> 2] | 0;
    $2885 = HEAP32[$189 + 4 >> 2] | 0;
    label = 73;
    break;
   }
   if (!$1) {
    $$0 = 0;
    label = 994;
    break L1;
   }
   if (($180 & 255) > 20) {
    $229 = $174;
    $238 = $2880;
    $265 = $2881;
   } else do switch ($181 | 0) {
   case 10:
    {
     $arglist_current8 = HEAP32[$ap >> 2] | 0;
     $198 = HEAP32[$arglist_current8 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current8 + 4;
     $2886 = (($198 | 0) < 0) << 31 >> 31;
     $2887 = $198;
     label = 74;
     break L80;
     break;
    }
   case 17:
    {
     $arglist_current29 = HEAP32[$ap >> 2] | 0;
     HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current29 >> 2];
     HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current29 + 4 >> 2];
     $222 = +HEAPF64[tempDoublePtr >> 3];
     HEAP32[$ap >> 2] = $arglist_current29 + 8;
     HEAPF64[tempDoublePtr >> 3] = $222;
     $2886 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     $2887 = HEAP32[tempDoublePtr >> 2] | 0;
     label = 74;
     break L80;
     break;
    }
   case 14:
    {
     $arglist_current20 = HEAP32[$ap >> 2] | 0;
     $214 = HEAP32[$arglist_current20 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current20 + 4;
     $2886 = 0;
     $2887 = $214 & 65535;
     label = 74;
     break L80;
     break;
    }
   case 12:
    {
     $arglist_current14 = HEAP32[$ap >> 2] | 0;
     $202 = $arglist_current14;
     $204 = HEAP32[$202 >> 2] | 0;
     $207 = HEAP32[$202 + 4 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current14 + 8;
     $2886 = $207;
     $2887 = $204;
     label = 74;
     break L80;
     break;
    }
   case 18:
    {
     $arglist_current32 = HEAP32[$ap >> 2] | 0;
     HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current32 >> 2];
     HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current32 + 4 >> 2];
     $225 = +HEAPF64[tempDoublePtr >> 3];
     HEAP32[$ap >> 2] = $arglist_current32 + 8;
     HEAPF64[tempDoublePtr >> 3] = $225;
     $2886 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     $2887 = HEAP32[tempDoublePtr >> 2] | 0;
     label = 74;
     break L80;
     break;
    }
   case 13:
    {
     $arglist_current17 = HEAP32[$ap >> 2] | 0;
     $208 = HEAP32[$arglist_current17 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current17 + 4;
     $2886 = ((($208 & 65535) << 16 >> 16 | 0) < 0) << 31 >> 31;
     $2887 = $208 << 16 >> 16;
     label = 74;
     break L80;
     break;
    }
   case 11:
    {
     $arglist_current11 = HEAP32[$ap >> 2] | 0;
     $201 = HEAP32[$arglist_current11 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current11 + 4;
     $2886 = 0;
     $2887 = $201;
     label = 74;
     break L80;
     break;
    }
   case 16:
    {
     $arglist_current26 = HEAP32[$ap >> 2] | 0;
     $221 = HEAP32[$arglist_current26 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current26 + 4;
     $2886 = 0;
     $2887 = $221 & 255;
     label = 74;
     break L80;
     break;
    }
   case 9:
    {
     $arglist_current5 = HEAP32[$ap >> 2] | 0;
     $196 = HEAP32[$arglist_current5 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current5 + 4;
     $2886 = $2881;
     $2887 = $196;
     label = 74;
     break L80;
     break;
    }
   case 15:
    {
     $arglist_current23 = HEAP32[$ap >> 2] | 0;
     $215 = HEAP32[$arglist_current23 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current23 + 4;
     $2886 = ((($215 & 255) << 24 >> 24 | 0) < 0) << 31 >> 31;
     $2887 = $215 << 24 >> 24;
     label = 74;
     break L80;
     break;
    }
   default:
    {
     $2886 = $2881;
     $2887 = $2880;
     label = 74;
     break L80;
    }
   } while (0);
  } while (0);
  if ((label | 0) == 73) {
   label = 0;
   if ($1) {
    $2886 = $2885;
    $2887 = $2884;
    label = 74;
   } else {
    $2880 = $2884;
    $2881 = $2885;
    $cnt$0 = $cnt$1;
    $fmt90 = $178;
    $l$0 = $45;
    $l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label | 0) == 74) {
   label = 0;
   $229 = HEAP8[$fmt93 >> 0] | 0;
   $238 = $2887;
   $265 = $2886;
  }
  $228 = $229 << 24 >> 24;
  $t$0 = ($st$0 | 0) != 0 & ($228 & 15 | 0) == 3 ? $228 & -33 : $228;
  $236 = $fl$1 & -65537;
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $236;
  L104 : do switch ($t$0 | 0) {
  case 115:
   {
    $a$1 = ($238 | 0) == 0 ? 64344 : $238;
    label = 106;
    break;
   }
  case 99:
   {
    HEAP8[$4 >> 0] = $238;
    $2888 = $238;
    $2889 = $265;
    $a$2 = $4;
    $fl$6 = $236;
    $p$5 = 1;
    $pl$2 = 0;
    $prefix$2 = 64328;
    $z$2 = $2;
    break;
   }
  case 109:
   {
    $a$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    label = 106;
    break;
   }
  case 83:
   {
    $391 = $238;
    if (!$p$0) {
     $2892 = $238;
     $2893 = $391;
     $i$0$lcssa275 = 0;
     label = 127;
    } else {
     $2890 = $391;
     $2891 = $238;
     $p$4274 = $p$0;
     label = 122;
    }
    break;
   }
  case 117:
   {
    $310 = $265;
    $312 = $238;
    $pl$0 = 0;
    $prefix$0 = 64328;
    label = 96;
    break;
   }
  case 105:
  case 100:
   {
    if (($265 | 0) < 0) {
     $303 = _i64Subtract(0, 0, $238 | 0, $265 | 0) | 0;
     $310 = tempRet0;
     $312 = $303;
     $pl$0 = 1;
     $prefix$0 = 64328;
     label = 96;
     break L104;
    }
    if (!($fl$1$ & 2048)) {
     $307 = $fl$1$ & 1;
     $310 = $265;
     $312 = $238;
     $pl$0 = $307;
     $prefix$0 = ($307 | 0) == 0 ? 64328 : 64330;
     label = 96;
    } else {
     $310 = $265;
     $312 = $238;
     $pl$0 = 1;
     $prefix$0 = 64329;
     label = 96;
    }
    break;
   }
  case 111:
   {
    $287 = ($238 | 0) == 0 & ($265 | 0) == 0;
    if ($287) $$0$lcssa$i52 = $2; else {
     $$03$i49 = $2;
     $289 = $238;
     $293 = $265;
     while (1) {
      $292 = $$03$i49 + -1 | 0;
      HEAP8[$292 >> 0] = $289 & 7 | 48;
      $289 = _bitshift64Lshr($289 | 0, $293 | 0, 3) | 0;
      $293 = tempRet0;
      if (($289 | 0) == 0 & ($293 | 0) == 0) {
       $$0$lcssa$i52 = $292;
       break;
      } else $$03$i49 = $292;
     }
    }
    $or$cond19 = ($fl$1$ & 8 | 0) == 0 | $287;
    $340 = $238;
    $342 = $265;
    $a$0 = $$0$lcssa$i52;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $or$cond19 & 1 ^ 1;
    $prefix$1 = $or$cond19 ? 64328 : 64333;
    label = 101;
    break;
   }
  case 67:
   {
    HEAP32[$wc >> 2] = $238;
    HEAP32[$5 >> 2] = 0;
    $2890 = $wc;
    $2891 = $6;
    $p$4274 = -1;
    label = 122;
    break;
   }
  case 112:
   {
    $fl$3 = $fl$1$ | 8;
    $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
    $t$1 = 120;
    label = 85;
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    HEAP32[tempDoublePtr >> 2] = $238;
    HEAP32[tempDoublePtr + 4 >> 2] = $265;
    $610 = +HEAPF64[tempDoublePtr >> 3];
    HEAP32[$e2$i >> 2] = 0;
    if (($265 | 0) < 0) {
     $$013$i = -$610;
     $pl$0$i = 1;
     $prefix$0$i = 64352;
    } else if (!($fl$1$ & 2048)) {
     $615 = $fl$1$ & 1;
     $$013$i = $610;
     $pl$0$i = $615;
     $prefix$0$i = ($615 | 0) == 0 ? 64353 : 64358;
    } else {
     $$013$i = $610;
     $pl$0$i = 1;
     $prefix$0$i = 64355;
    }
    HEAPF64[tempDoublePtr >> 3] = $$013$i;
    $619 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    if (!($619 >>> 0 < 2146435072 | ($619 | 0) == 2146435072 & 0 < 0)) {
     $626 = ($t$0 & 32 | 0) != 0;
     if ($$013$i != $$013$i | 0.0 != 0.0) {
      $pl$1$i = 0;
      $s1$0$i = $626 ? 64392 : 64400;
     } else {
      $pl$1$i = $pl$0$i;
      $s1$0$i = $626 ? 64376 : 64384;
     }
     $630 = $pl$1$i + 3 | 0;
     $633 = ($w$1 | 0) > ($630 | 0);
     L132 : do if (($fl$1$ & 8192 | 0) == 0 & $633) {
      $634 = $w$1 - $630 | 0;
      _memset($pad$i | 0, 32, ($634 >>> 0 > 256 ? 256 : $634) | 0) | 0;
      if ($634 >>> 0 > 255) {
       $$01$i45$i = $634;
       do {
        $638 = HEAP32[$17 >> 2] | 0;
        do if (!$638) {
         $641 = HEAP8[$18 >> 0] | 0;
         HEAP8[$18 >> 0] = $641 + 255 | $641;
         $645 = HEAP32[$f >> 2] | 0;
         if (!($645 & 8)) {
          HEAP32[$19 >> 2] = 0;
          HEAP32[$20 >> 2] = 0;
          $649 = HEAP32[$21 >> 2] | 0;
          HEAP32[$22 >> 2] = $649;
          HEAP32[$23 >> 2] = $649;
          $651 = $649 + (HEAP32[$24 >> 2] | 0) | 0;
          HEAP32[$17 >> 2] = $651;
          $654 = $651;
          label = 214;
          break;
         } else {
          HEAP32[$f >> 2] = $645 | 32;
          break;
         }
        } else {
         $654 = $638;
         label = 214;
        } while (0);
        L142 : do if ((label | 0) == 214) {
         label = 0;
         $652 = HEAP32[$23 >> 2] | 0;
         if (($654 - $652 | 0) >>> 0 < 256) {
          FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
          break;
         }
         L147 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
          $i$0$i71 = 256;
          while (1) {
           if (!$i$0$i71) {
            $$01$i76 = 256;
            $$02$i75 = $pad$i;
            $671 = $652;
            break L147;
           }
           $662 = $i$0$i71 + -1 | 0;
           if ((HEAP8[$pad$i + $662 >> 0] | 0) == 10) break; else $i$0$i71 = $662;
          }
          if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i71) | 0) >>> 0 < $i$0$i71 >>> 0) break L142;
          $$01$i76 = 256 - $i$0$i71 | 0;
          $$02$i75 = $pad$i + $i$0$i71 | 0;
          $671 = HEAP32[$23 >> 2] | 0;
         } else {
          $$01$i76 = 256;
          $$02$i75 = $pad$i;
          $671 = $652;
         } while (0);
         _memcpy($671 | 0, $$02$i75 | 0, $$01$i76 | 0) | 0;
         HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i76;
        } while (0);
        $$01$i45$i = $$01$i45$i + -256 | 0;
       } while ($$01$i45$i >>> 0 > 255);
       $$0$lcssa$i47$i = $634 & 255;
      } else $$0$lcssa$i47$i = $634;
      $677 = HEAP32[$17 >> 2] | 0;
      do if (!$677) {
       $680 = HEAP8[$18 >> 0] | 0;
       HEAP8[$18 >> 0] = $680 + 255 | $680;
       $684 = HEAP32[$f >> 2] | 0;
       if (!($684 & 8)) {
        HEAP32[$19 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        $688 = HEAP32[$21 >> 2] | 0;
        HEAP32[$22 >> 2] = $688;
        HEAP32[$23 >> 2] = $688;
        $690 = $688 + (HEAP32[$24 >> 2] | 0) | 0;
        HEAP32[$17 >> 2] = $690;
        $693 = $690;
        break;
       } else {
        HEAP32[$f >> 2] = $684 | 32;
        break L132;
       }
      } else $693 = $677; while (0);
      $691 = HEAP32[$23 >> 2] | 0;
      if (($693 - $691 | 0) >>> 0 < $$0$lcssa$i47$i >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i47$i) | 0;
       break;
      }
      L166 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i82 = $$0$lcssa$i47$i;
       while (1) {
        if (!$i$0$i82) {
         $$01$i87 = $$0$lcssa$i47$i;
         $$02$i86 = $pad$i;
         $710 = $691;
         break L166;
        }
        $701 = $i$0$i82 + -1 | 0;
        if ((HEAP8[$pad$i + $701 >> 0] | 0) == 10) break; else $i$0$i82 = $701;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i82) | 0) >>> 0 < $i$0$i82 >>> 0) break L132;
       $$01$i87 = $$0$lcssa$i47$i - $i$0$i82 | 0;
       $$02$i86 = $pad$i + $i$0$i82 | 0;
       $710 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i87 = $$0$lcssa$i47$i;
       $$02$i86 = $pad$i;
       $710 = $691;
      } while (0);
      _memcpy($710 | 0, $$02$i86 | 0, $$01$i87 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i87;
     } while (0);
     $713 = HEAP32[$17 >> 2] | 0;
     do if (!$713) {
      $716 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $716 + 255 | $716;
      $720 = HEAP32[$f >> 2] | 0;
      if (!($720 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $724 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $724;
       HEAP32[$23 >> 2] = $724;
       $726 = $724 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $726;
       $729 = $726;
       label = 240;
       break;
      } else {
       HEAP32[$f >> 2] = $720 | 32;
       break;
      }
     } else {
      $729 = $713;
      label = 240;
     } while (0);
     L179 : do if ((label | 0) == 240) {
      label = 0;
      $727 = HEAP32[$23 >> 2] | 0;
      if (($729 - $727 | 0) >>> 0 < $pl$1$i >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $prefix$0$i, $pl$1$i) | 0;
       break;
      }
      L184 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i93 = $pl$1$i;
       while (1) {
        if (!$i$0$i93) {
         $$01$i98 = $pl$1$i;
         $$02$i97 = $prefix$0$i;
         $746 = $727;
         break L184;
        }
        $737 = $i$0$i93 + -1 | 0;
        if ((HEAP8[$prefix$0$i + $737 >> 0] | 0) == 10) break; else $i$0$i93 = $737;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $prefix$0$i, $i$0$i93) | 0) >>> 0 < $i$0$i93 >>> 0) break L179;
       $$01$i98 = $pl$1$i - $i$0$i93 | 0;
       $$02$i97 = $prefix$0$i + $i$0$i93 | 0;
       $746 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i98 = $pl$1$i;
       $$02$i97 = $prefix$0$i;
       $746 = $727;
      } while (0);
      _memcpy($746 | 0, $$02$i97 | 0, $$01$i98 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i98;
     } while (0);
     $749 = HEAP32[$17 >> 2] | 0;
     do if (!$749) {
      $752 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $752 + 255 | $752;
      $756 = HEAP32[$f >> 2] | 0;
      if (!($756 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $760 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $760;
       HEAP32[$23 >> 2] = $760;
       $762 = $760 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $762;
       $765 = $762;
       label = 252;
       break;
      } else {
       HEAP32[$f >> 2] = $756 | 32;
       break;
      }
     } else {
      $765 = $749;
      label = 252;
     } while (0);
     L197 : do if ((label | 0) == 252) {
      label = 0;
      $763 = HEAP32[$23 >> 2] | 0;
      if (($765 - $763 | 0) >>> 0 < 3) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $s1$0$i, 3) | 0;
       break;
      }
      L202 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i104 = 3;
       while (1) {
        if (!$i$0$i104) {
         $$01$i109 = 3;
         $$02$i108 = $s1$0$i;
         $782 = $763;
         break L202;
        }
        $773 = $i$0$i104 + -1 | 0;
        if ((HEAP8[$s1$0$i + $773 >> 0] | 0) == 10) break; else $i$0$i104 = $773;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $s1$0$i, $i$0$i104) | 0) >>> 0 < $i$0$i104 >>> 0) break L197;
       $$01$i109 = 3 - $i$0$i104 | 0;
       $$02$i108 = $s1$0$i + $i$0$i104 | 0;
       $782 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i109 = 3;
       $$02$i108 = $s1$0$i;
       $782 = $763;
      } while (0);
      _memcpy($782 | 0, $$02$i108 | 0, $$01$i109 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i109;
     } while (0);
     L210 : do if (($fl$1$ & 73728 | 0) == 8192 & $633) {
      $787 = $w$1 - $630 | 0;
      _memset($pad$i | 0, 32, ($787 >>> 0 > 256 ? 256 : $787) | 0) | 0;
      if ($787 >>> 0 > 255) {
       $$01$i52$i = $787;
       do {
        $791 = HEAP32[$17 >> 2] | 0;
        do if (!$791) {
         $794 = HEAP8[$18 >> 0] | 0;
         HEAP8[$18 >> 0] = $794 + 255 | $794;
         $798 = HEAP32[$f >> 2] | 0;
         if (!($798 & 8)) {
          HEAP32[$19 >> 2] = 0;
          HEAP32[$20 >> 2] = 0;
          $802 = HEAP32[$21 >> 2] | 0;
          HEAP32[$22 >> 2] = $802;
          HEAP32[$23 >> 2] = $802;
          $804 = $802 + (HEAP32[$24 >> 2] | 0) | 0;
          HEAP32[$17 >> 2] = $804;
          $807 = $804;
          label = 266;
          break;
         } else {
          HEAP32[$f >> 2] = $798 | 32;
          break;
         }
        } else {
         $807 = $791;
         label = 266;
        } while (0);
        L220 : do if ((label | 0) == 266) {
         label = 0;
         $805 = HEAP32[$23 >> 2] | 0;
         if (($807 - $805 | 0) >>> 0 < 256) {
          FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
          break;
         }
         L225 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
          $i$0$i115 = 256;
          while (1) {
           if (!$i$0$i115) {
            $$01$i120 = 256;
            $$02$i119 = $pad$i;
            $824 = $805;
            break L225;
           }
           $815 = $i$0$i115 + -1 | 0;
           if ((HEAP8[$pad$i + $815 >> 0] | 0) == 10) break; else $i$0$i115 = $815;
          }
          if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i115) | 0) >>> 0 < $i$0$i115 >>> 0) break L220;
          $$01$i120 = 256 - $i$0$i115 | 0;
          $$02$i119 = $pad$i + $i$0$i115 | 0;
          $824 = HEAP32[$23 >> 2] | 0;
         } else {
          $$01$i120 = 256;
          $$02$i119 = $pad$i;
          $824 = $805;
         } while (0);
         _memcpy($824 | 0, $$02$i119 | 0, $$01$i120 | 0) | 0;
         HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i120;
        } while (0);
        $$01$i52$i = $$01$i52$i + -256 | 0;
       } while ($$01$i52$i >>> 0 > 255);
       $$0$lcssa$i54$i = $787 & 255;
      } else $$0$lcssa$i54$i = $787;
      $830 = HEAP32[$17 >> 2] | 0;
      do if (!$830) {
       $833 = HEAP8[$18 >> 0] | 0;
       HEAP8[$18 >> 0] = $833 + 255 | $833;
       $837 = HEAP32[$f >> 2] | 0;
       if (!($837 & 8)) {
        HEAP32[$19 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        $841 = HEAP32[$21 >> 2] | 0;
        HEAP32[$22 >> 2] = $841;
        HEAP32[$23 >> 2] = $841;
        $843 = $841 + (HEAP32[$24 >> 2] | 0) | 0;
        HEAP32[$17 >> 2] = $843;
        $846 = $843;
        break;
       } else {
        HEAP32[$f >> 2] = $837 | 32;
        break L210;
       }
      } else $846 = $830; while (0);
      $844 = HEAP32[$23 >> 2] | 0;
      if (($846 - $844 | 0) >>> 0 < $$0$lcssa$i54$i >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i54$i) | 0;
       break;
      }
      L244 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i126 = $$0$lcssa$i54$i;
       while (1) {
        if (!$i$0$i126) {
         $$01$i131 = $$0$lcssa$i54$i;
         $$02$i130 = $pad$i;
         $863 = $844;
         break L244;
        }
        $854 = $i$0$i126 + -1 | 0;
        if ((HEAP8[$pad$i + $854 >> 0] | 0) == 10) break; else $i$0$i126 = $854;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i126) | 0) >>> 0 < $i$0$i126 >>> 0) break L210;
       $$01$i131 = $$0$lcssa$i54$i - $i$0$i126 | 0;
       $$02$i130 = $pad$i + $i$0$i126 | 0;
       $863 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i131 = $$0$lcssa$i54$i;
       $$02$i130 = $pad$i;
       $863 = $844;
      } while (0);
      _memcpy($863 | 0, $$02$i130 | 0, $$01$i131 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i131;
     } while (0);
     $2880 = $238;
     $2881 = $265;
     $cnt$0 = $cnt$1;
     $fmt90 = $178;
     $l$0 = $633 ? $w$1 : $630;
     $l10n$0 = $l10n$3;
     continue L1;
    }
    $867 = +_frexp($$013$i, $e2$i) * 2.0;
    $868 = $867 != 0.0;
    if ($868) HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1;
    $871 = $t$0 | 32;
    if (($871 | 0) == 97) {
     $873 = $t$0 & 32;
     $prefix$0$$i = ($873 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0;
     $876 = $pl$0$i | 2;
     $re$0$i = $p$0 >>> 0 > 11 ? 0 : 12 - $p$0 | 0;
     do if (!$re$0$i) $$1$i = $867; else {
      $re$1187$i = $re$0$i;
      $round$0186$i = 8.0;
      do {
       $re$1187$i = $re$1187$i + -1 | 0;
       $round$0186$i = $round$0186$i * 16.0;
      } while (($re$1187$i | 0) != 0);
      if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
       $$1$i = -($round$0186$i + (-$867 - $round$0186$i));
       break;
      } else {
       $$1$i = $867 + $round$0186$i - $round$0186$i;
       break;
      }
     } while (0);
     $891 = HEAP32[$e2$i >> 2] | 0;
     $894 = ($891 | 0) < 0 ? 0 - $891 | 0 : $891;
     if (($894 | 0) < 0) {
      $$05$i$i = $7;
      $898 = $894;
      $899 = (($894 | 0) < 0) << 31 >> 31;
      while (1) {
       $900 = ___uremdi3($898 | 0, $899 | 0, 10, 0) | 0;
       $$05$i$i = $$05$i$i + -1 | 0;
       HEAP8[$$05$i$i >> 0] = $900 | 48;
       $898$looptemp = $898;
       $898 = ___udivdi3($898 | 0, $899 | 0, 10, 0) | 0;
       if (!($899 >>> 0 > 9 | ($899 | 0) == 9 & $898$looptemp >>> 0 > 4294967295)) break; else $899 = tempRet0;
      }
      $$0$lcssa$i56$i = $$05$i$i;
      $$01$lcssa$off0$i$i = $898;
     } else {
      $$0$lcssa$i56$i = $7;
      $$01$lcssa$off0$i$i = $894;
     }
     if (!$$01$lcssa$off0$i$i) $$1$lcssa$i$i = $$0$lcssa$i56$i; else {
      $$12$i$i = $$0$lcssa$i56$i;
      $y$03$i$i = $$01$lcssa$off0$i$i;
      while (1) {
       $916 = $$12$i$i + -1 | 0;
       HEAP8[$916 >> 0] = ($y$03$i$i >>> 0) % 10 | 0 | 48;
       if ($y$03$i$i >>> 0 < 10) {
        $$1$lcssa$i$i = $916;
        break;
       } else {
        $$12$i$i = $916;
        $y$03$i$i = ($y$03$i$i >>> 0) / 10 | 0;
       }
      }
     }
     if (($$1$lcssa$i$i | 0) == ($7 | 0)) {
      HEAP8[$8 >> 0] = 48;
      $estr$0$i = $8;
     } else $estr$0$i = $$1$lcssa$i$i;
     HEAP8[$estr$0$i + -1 >> 0] = (HEAP32[$e2$i >> 2] >> 31 & 2) + 43;
     $928 = $estr$0$i + -2 | 0;
     HEAP8[$928 >> 0] = $t$0 + 15;
     if (($p$0 | 0) < 1) if (!($fl$1$ & 8)) {
      $$2$us$us$i = $$1$i;
      $s$0$us$us$i = $buf$i;
      while (1) {
       $931 = ~~$$2$us$us$i;
       $937 = $s$0$us$us$i + 1 | 0;
       HEAP8[$s$0$us$us$i >> 0] = HEAPU8[64408 + $931 >> 0] | $873;
       $$2$us$us$i = ($$2$us$us$i - +($931 | 0)) * 16.0;
       if (($937 - $0 | 0) != 1 | $$2$us$us$i == 0.0) $s$1$us$us$i = $937; else {
        HEAP8[$937 >> 0] = 46;
        $s$1$us$us$i = $s$0$us$us$i + 2 | 0;
       }
       if (!($$2$us$us$i != 0.0)) {
        $s$1$lcssa$i = $s$1$us$us$i;
        break;
       } else $s$0$us$us$i = $s$1$us$us$i;
      }
     } else {
      $$2$us$i = $$1$i;
      $s$0$us$i = $buf$i;
      while (1) {
       $946 = ~~$$2$us$i;
       $952 = $s$0$us$i + 1 | 0;
       HEAP8[$s$0$us$i >> 0] = HEAPU8[64408 + $946 >> 0] | $873;
       $$2$us$i = ($$2$us$i - +($946 | 0)) * 16.0;
       if (($952 - $0 | 0) == 1) {
        HEAP8[$952 >> 0] = 46;
        $s$1$us$i = $s$0$us$i + 2 | 0;
       } else $s$1$us$i = $952;
       if (!($$2$us$i != 0.0)) {
        $s$1$lcssa$i = $s$1$us$i;
        break;
       } else $s$0$us$i = $s$1$us$i;
      }
     } else {
      $$2$i = $$1$i;
      $s$0$i = $buf$i;
      while (1) {
       $961 = ~~$$2$i;
       $967 = $s$0$i + 1 | 0;
       HEAP8[$s$0$i >> 0] = HEAPU8[64408 + $961 >> 0] | $873;
       $$2$i = ($$2$i - +($961 | 0)) * 16.0;
       if (($967 - $0 | 0) == 1) {
        HEAP8[$967 >> 0] = 46;
        $s$1$i = $s$0$i + 2 | 0;
       } else $s$1$i = $967;
       if (!($$2$i != 0.0)) {
        $s$1$lcssa$i = $s$1$i;
        break;
       } else $s$0$i = $s$1$i;
      }
     }
     $$pre308$i = $s$1$lcssa$i;
     $979 = $928;
     if (($p$0 | 0) != 0 & ($11 + $$pre308$i | 0) < ($p$0 | 0)) $l$0$i = $12 + $p$0 - $979 | 0; else $l$0$i = $10 - $979 + $$pre308$i | 0;
     $984 = $l$0$i + $876 | 0;
     $985 = $fl$1$ & 73728;
     $987 = ($w$1 | 0) > ($984 | 0);
     L302 : do if (($985 | 0) == 0 & $987) {
      $988 = $w$1 - $984 | 0;
      _memset($pad$i | 0, 32, ($988 >>> 0 > 256 ? 256 : $988) | 0) | 0;
      if ($988 >>> 0 > 255) {
       $$01$i62$i = $988;
       do {
        $992 = HEAP32[$17 >> 2] | 0;
        do if (!$992) {
         $995 = HEAP8[$18 >> 0] | 0;
         HEAP8[$18 >> 0] = $995 + 255 | $995;
         $999 = HEAP32[$f >> 2] | 0;
         if (!($999 & 8)) {
          HEAP32[$19 >> 2] = 0;
          HEAP32[$20 >> 2] = 0;
          $1003 = HEAP32[$21 >> 2] | 0;
          HEAP32[$22 >> 2] = $1003;
          HEAP32[$23 >> 2] = $1003;
          $1005 = $1003 + (HEAP32[$24 >> 2] | 0) | 0;
          HEAP32[$17 >> 2] = $1005;
          $1007 = $1005;
          $1009 = $1003;
          label = 326;
          break;
         } else {
          HEAP32[$f >> 2] = $999 | 32;
          break;
         }
        } else {
         $1007 = $992;
         $1009 = HEAP32[$23 >> 2] | 0;
         label = 326;
        } while (0);
        L313 : do if ((label | 0) == 326) {
         label = 0;
         if (($1007 - $1009 | 0) >>> 0 < 256) {
          FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
          break;
         }
         L318 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
          $i$0$i137 = 256;
          while (1) {
           if (!$i$0$i137) {
            $$01$i142 = 256;
            $$02$i141 = $pad$i;
            $1025 = $1009;
            break L318;
           }
           $1016 = $i$0$i137 + -1 | 0;
           if ((HEAP8[$pad$i + $1016 >> 0] | 0) == 10) break; else $i$0$i137 = $1016;
          }
          if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i137) | 0) >>> 0 < $i$0$i137 >>> 0) break L313;
          $$01$i142 = 256 - $i$0$i137 | 0;
          $$02$i141 = $pad$i + $i$0$i137 | 0;
          $1025 = HEAP32[$23 >> 2] | 0;
         } else {
          $$01$i142 = 256;
          $$02$i141 = $pad$i;
          $1025 = $1009;
         } while (0);
         _memcpy($1025 | 0, $$02$i141 | 0, $$01$i142 | 0) | 0;
         HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i142;
        } while (0);
        $$01$i62$i = $$01$i62$i + -256 | 0;
       } while ($$01$i62$i >>> 0 > 255);
       $$0$lcssa$i64$i = $988 & 255;
      } else $$0$lcssa$i64$i = $988;
      $1031 = HEAP32[$17 >> 2] | 0;
      do if (!$1031) {
       $1034 = HEAP8[$18 >> 0] | 0;
       HEAP8[$18 >> 0] = $1034 + 255 | $1034;
       $1038 = HEAP32[$f >> 2] | 0;
       if (!($1038 & 8)) {
        HEAP32[$19 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        $1042 = HEAP32[$21 >> 2] | 0;
        HEAP32[$22 >> 2] = $1042;
        HEAP32[$23 >> 2] = $1042;
        $1044 = $1042 + (HEAP32[$24 >> 2] | 0) | 0;
        HEAP32[$17 >> 2] = $1044;
        $1046 = $1044;
        $1048 = $1042;
        break;
       } else {
        HEAP32[$f >> 2] = $1038 | 32;
        break L302;
       }
      } else {
       $1046 = $1031;
       $1048 = HEAP32[$23 >> 2] | 0;
      } while (0);
      if (($1046 - $1048 | 0) >>> 0 < $$0$lcssa$i64$i >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i64$i) | 0;
       break;
      }
      L338 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i148 = $$0$lcssa$i64$i;
       while (1) {
        if (!$i$0$i148) {
         $$01$i153 = $$0$lcssa$i64$i;
         $$02$i152 = $pad$i;
         $1064 = $1048;
         break L338;
        }
        $1055 = $i$0$i148 + -1 | 0;
        if ((HEAP8[$pad$i + $1055 >> 0] | 0) == 10) break; else $i$0$i148 = $1055;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i148) | 0) >>> 0 < $i$0$i148 >>> 0) break L302;
       $$01$i153 = $$0$lcssa$i64$i - $i$0$i148 | 0;
       $$02$i152 = $pad$i + $i$0$i148 | 0;
       $1064 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i153 = $$0$lcssa$i64$i;
       $$02$i152 = $pad$i;
       $1064 = $1048;
      } while (0);
      _memcpy($1064 | 0, $$02$i152 | 0, $$01$i153 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i153;
     } while (0);
     $1067 = HEAP32[$17 >> 2] | 0;
     do if (!$1067) {
      $1070 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $1070 + 255 | $1070;
      $1074 = HEAP32[$f >> 2] | 0;
      if (!($1074 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $1078 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $1078;
       HEAP32[$23 >> 2] = $1078;
       $1080 = $1078 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $1080;
       $1082 = $1080;
       $1084 = $1078;
       label = 354;
       break;
      } else {
       HEAP32[$f >> 2] = $1074 | 32;
       break;
      }
     } else {
      $1082 = $1067;
      $1084 = HEAP32[$23 >> 2] | 0;
      label = 354;
     } while (0);
     L352 : do if ((label | 0) == 354) {
      label = 0;
      if (($1082 - $1084 | 0) >>> 0 < $876 >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $prefix$0$$i, $876) | 0;
       break;
      }
      L357 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i159 = $876;
       while (1) {
        if (!$i$0$i159) {
         $$01$i164 = $876;
         $$02$i163 = $prefix$0$$i;
         $1100 = $1084;
         break L357;
        }
        $1091 = $i$0$i159 + -1 | 0;
        if ((HEAP8[$prefix$0$$i + $1091 >> 0] | 0) == 10) break; else $i$0$i159 = $1091;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $prefix$0$$i, $i$0$i159) | 0) >>> 0 < $i$0$i159 >>> 0) break L352;
       $$01$i164 = $876 - $i$0$i159 | 0;
       $$02$i163 = $prefix$0$$i + $i$0$i159 | 0;
       $1100 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i164 = $876;
       $$02$i163 = $prefix$0$$i;
       $1100 = $1084;
      } while (0);
      _memcpy($1100 | 0, $$02$i163 | 0, $$01$i164 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i164;
     } while (0);
     L365 : do if (($985 | 0) == 65536 & $987) {
      $1104 = $w$1 - $984 | 0;
      _memset($pad$i | 0, 48, ($1104 >>> 0 > 256 ? 256 : $1104) | 0) | 0;
      if ($1104 >>> 0 > 255) {
       $$01$i69$i = $1104;
       do {
        $1108 = HEAP32[$17 >> 2] | 0;
        do if (!$1108) {
         $1111 = HEAP8[$18 >> 0] | 0;
         HEAP8[$18 >> 0] = $1111 + 255 | $1111;
         $1115 = HEAP32[$f >> 2] | 0;
         if (!($1115 & 8)) {
          HEAP32[$19 >> 2] = 0;
          HEAP32[$20 >> 2] = 0;
          $1119 = HEAP32[$21 >> 2] | 0;
          HEAP32[$22 >> 2] = $1119;
          HEAP32[$23 >> 2] = $1119;
          $1121 = $1119 + (HEAP32[$24 >> 2] | 0) | 0;
          HEAP32[$17 >> 2] = $1121;
          $1123 = $1121;
          $1125 = $1119;
          label = 369;
          break;
         } else {
          HEAP32[$f >> 2] = $1115 | 32;
          break;
         }
        } else {
         $1123 = $1108;
         $1125 = HEAP32[$23 >> 2] | 0;
         label = 369;
        } while (0);
        L376 : do if ((label | 0) == 369) {
         label = 0;
         if (($1123 - $1125 | 0) >>> 0 < 256) {
          FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
          break;
         }
         L381 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
          $i$0$i170 = 256;
          while (1) {
           if (!$i$0$i170) {
            $$01$i175 = 256;
            $$02$i174 = $pad$i;
            $1141 = $1125;
            break L381;
           }
           $1132 = $i$0$i170 + -1 | 0;
           if ((HEAP8[$pad$i + $1132 >> 0] | 0) == 10) break; else $i$0$i170 = $1132;
          }
          if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i170) | 0) >>> 0 < $i$0$i170 >>> 0) break L376;
          $$01$i175 = 256 - $i$0$i170 | 0;
          $$02$i174 = $pad$i + $i$0$i170 | 0;
          $1141 = HEAP32[$23 >> 2] | 0;
         } else {
          $$01$i175 = 256;
          $$02$i174 = $pad$i;
          $1141 = $1125;
         } while (0);
         _memcpy($1141 | 0, $$02$i174 | 0, $$01$i175 | 0) | 0;
         HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i175;
        } while (0);
        $$01$i69$i = $$01$i69$i + -256 | 0;
       } while ($$01$i69$i >>> 0 > 255);
       $$0$lcssa$i71$i = $1104 & 255;
      } else $$0$lcssa$i71$i = $1104;
      $1147 = HEAP32[$17 >> 2] | 0;
      do if (!$1147) {
       $1150 = HEAP8[$18 >> 0] | 0;
       HEAP8[$18 >> 0] = $1150 + 255 | $1150;
       $1154 = HEAP32[$f >> 2] | 0;
       if (!($1154 & 8)) {
        HEAP32[$19 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        $1158 = HEAP32[$21 >> 2] | 0;
        HEAP32[$22 >> 2] = $1158;
        HEAP32[$23 >> 2] = $1158;
        $1160 = $1158 + (HEAP32[$24 >> 2] | 0) | 0;
        HEAP32[$17 >> 2] = $1160;
        $1162 = $1160;
        $1164 = $1158;
        break;
       } else {
        HEAP32[$f >> 2] = $1154 | 32;
        break L365;
       }
      } else {
       $1162 = $1147;
       $1164 = HEAP32[$23 >> 2] | 0;
      } while (0);
      if (($1162 - $1164 | 0) >>> 0 < $$0$lcssa$i71$i >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i71$i) | 0;
       break;
      }
      L401 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i181 = $$0$lcssa$i71$i;
       while (1) {
        if (!$i$0$i181) {
         $$01$i186 = $$0$lcssa$i71$i;
         $$02$i185 = $pad$i;
         $1180 = $1164;
         break L401;
        }
        $1171 = $i$0$i181 + -1 | 0;
        if ((HEAP8[$pad$i + $1171 >> 0] | 0) == 10) break; else $i$0$i181 = $1171;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i181) | 0) >>> 0 < $i$0$i181 >>> 0) break L365;
       $$01$i186 = $$0$lcssa$i71$i - $i$0$i181 | 0;
       $$02$i185 = $pad$i + $i$0$i181 | 0;
       $1180 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i186 = $$0$lcssa$i71$i;
       $$02$i185 = $pad$i;
       $1180 = $1164;
      } while (0);
      _memcpy($1180 | 0, $$02$i185 | 0, $$01$i186 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i186;
     } while (0);
     $1183 = $$pre308$i - $0 | 0;
     $1184 = HEAP32[$17 >> 2] | 0;
     do if (!$1184) {
      $1187 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $1187 + 255 | $1187;
      $1191 = HEAP32[$f >> 2] | 0;
      if (!($1191 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $1195 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $1195;
       HEAP32[$23 >> 2] = $1195;
       $1197 = $1195 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $1197;
       $1199 = $1197;
       $1201 = $1195;
       label = 397;
       break;
      } else {
       HEAP32[$f >> 2] = $1191 | 32;
       break;
      }
     } else {
      $1199 = $1184;
      $1201 = HEAP32[$23 >> 2] | 0;
      label = 397;
     } while (0);
     L415 : do if ((label | 0) == 397) {
      label = 0;
      if (($1199 - $1201 | 0) >>> 0 < $1183 >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $buf$i, $1183) | 0;
       break;
      }
      L420 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i192 = $1183;
       while (1) {
        if (!$i$0$i192) {
         $$01$i197 = $1183;
         $$02$i196 = $buf$i;
         $1217 = $1201;
         break L420;
        }
        $1208 = $i$0$i192 + -1 | 0;
        if ((HEAP8[$buf$i + $1208 >> 0] | 0) == 10) break; else $i$0$i192 = $1208;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $buf$i, $i$0$i192) | 0) >>> 0 < $i$0$i192 >>> 0) break L415;
       $$01$i197 = $1183 - $i$0$i192 | 0;
       $$02$i196 = $buf$i + $i$0$i192 | 0;
       $1217 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i197 = $1183;
       $$02$i196 = $buf$i;
       $1217 = $1201;
      } while (0);
      _memcpy($1217 | 0, $$02$i196 | 0, $$01$i197 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i197;
     } while (0);
     $1220 = $9 - $979 | 0;
     $1222 = $l$0$i - $1220 - $1183 | 0;
     L428 : do if (($1222 | 0) > 0) {
      _memset($pad$i | 0, 48, ($1222 >>> 0 > 256 ? 256 : $1222) | 0) | 0;
      if ($1222 >>> 0 > 255) {
       $$01$i75$i = $1222;
       do {
        $1227 = HEAP32[$17 >> 2] | 0;
        do if (!$1227) {
         $1230 = HEAP8[$18 >> 0] | 0;
         HEAP8[$18 >> 0] = $1230 + 255 | $1230;
         $1234 = HEAP32[$f >> 2] | 0;
         if (!($1234 & 8)) {
          HEAP32[$19 >> 2] = 0;
          HEAP32[$20 >> 2] = 0;
          $1238 = HEAP32[$21 >> 2] | 0;
          HEAP32[$22 >> 2] = $1238;
          HEAP32[$23 >> 2] = $1238;
          $1240 = $1238 + (HEAP32[$24 >> 2] | 0) | 0;
          HEAP32[$17 >> 2] = $1240;
          $1242 = $1240;
          $1244 = $1238;
          label = 412;
          break;
         } else {
          HEAP32[$f >> 2] = $1234 | 32;
          break;
         }
        } else {
         $1242 = $1227;
         $1244 = HEAP32[$23 >> 2] | 0;
         label = 412;
        } while (0);
        L439 : do if ((label | 0) == 412) {
         label = 0;
         if (($1242 - $1244 | 0) >>> 0 < 256) {
          FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
          break;
         }
         L444 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
          $i$0$i203 = 256;
          while (1) {
           if (!$i$0$i203) {
            $$01$i208 = 256;
            $$02$i207 = $pad$i;
            $1260 = $1244;
            break L444;
           }
           $1251 = $i$0$i203 + -1 | 0;
           if ((HEAP8[$pad$i + $1251 >> 0] | 0) == 10) break; else $i$0$i203 = $1251;
          }
          if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i203) | 0) >>> 0 < $i$0$i203 >>> 0) break L439;
          $$01$i208 = 256 - $i$0$i203 | 0;
          $$02$i207 = $pad$i + $i$0$i203 | 0;
          $1260 = HEAP32[$23 >> 2] | 0;
         } else {
          $$01$i208 = 256;
          $$02$i207 = $pad$i;
          $1260 = $1244;
         } while (0);
         _memcpy($1260 | 0, $$02$i207 | 0, $$01$i208 | 0) | 0;
         HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i208;
        } while (0);
        $$01$i75$i = $$01$i75$i + -256 | 0;
       } while ($$01$i75$i >>> 0 > 255);
       $$0$lcssa$i77$i = $1222 & 255;
      } else $$0$lcssa$i77$i = $1222;
      $1266 = HEAP32[$17 >> 2] | 0;
      do if (!$1266) {
       $1269 = HEAP8[$18 >> 0] | 0;
       HEAP8[$18 >> 0] = $1269 + 255 | $1269;
       $1273 = HEAP32[$f >> 2] | 0;
       if (!($1273 & 8)) {
        HEAP32[$19 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        $1277 = HEAP32[$21 >> 2] | 0;
        HEAP32[$22 >> 2] = $1277;
        HEAP32[$23 >> 2] = $1277;
        $1279 = $1277 + (HEAP32[$24 >> 2] | 0) | 0;
        HEAP32[$17 >> 2] = $1279;
        $1281 = $1279;
        $1283 = $1277;
        break;
       } else {
        HEAP32[$f >> 2] = $1273 | 32;
        break L428;
       }
      } else {
       $1281 = $1266;
       $1283 = HEAP32[$23 >> 2] | 0;
      } while (0);
      if (($1281 - $1283 | 0) >>> 0 < $$0$lcssa$i77$i >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i77$i) | 0;
       break;
      }
      L464 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i214 = $$0$lcssa$i77$i;
       while (1) {
        if (!$i$0$i214) {
         $$01$i219 = $$0$lcssa$i77$i;
         $$02$i218 = $pad$i;
         $1299 = $1283;
         break L464;
        }
        $1290 = $i$0$i214 + -1 | 0;
        if ((HEAP8[$pad$i + $1290 >> 0] | 0) == 10) break; else $i$0$i214 = $1290;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i214) | 0) >>> 0 < $i$0$i214 >>> 0) break L428;
       $$01$i219 = $$0$lcssa$i77$i - $i$0$i214 | 0;
       $$02$i218 = $pad$i + $i$0$i214 | 0;
       $1299 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i219 = $$0$lcssa$i77$i;
       $$02$i218 = $pad$i;
       $1299 = $1283;
      } while (0);
      _memcpy($1299 | 0, $$02$i218 | 0, $$01$i219 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i219;
     } while (0);
     $1302 = HEAP32[$17 >> 2] | 0;
     do if (!$1302) {
      $1305 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $1305 + 255 | $1305;
      $1309 = HEAP32[$f >> 2] | 0;
      if (!($1309 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $1313 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $1313;
       HEAP32[$23 >> 2] = $1313;
       $1315 = $1313 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $1315;
       $1317 = $1315;
       $1319 = $1313;
       label = 440;
       break;
      } else {
       HEAP32[$f >> 2] = $1309 | 32;
       break;
      }
     } else {
      $1317 = $1302;
      $1319 = HEAP32[$23 >> 2] | 0;
      label = 440;
     } while (0);
     L478 : do if ((label | 0) == 440) {
      label = 0;
      if (($1317 - $1319 | 0) >>> 0 < $1220 >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $928, $1220) | 0;
       break;
      }
      L483 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i225 = $1220;
       while (1) {
        if (!$i$0$i225) {
         $$01$i230 = $1220;
         $$02$i229 = $928;
         $1335 = $1319;
         break L483;
        }
        if ((HEAP8[$estr$0$i + ($i$0$i225 + -3) >> 0] | 0) == 10) break; else $i$0$i225 = $i$0$i225 + -1 | 0;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $928, $i$0$i225) | 0) >>> 0 < $i$0$i225 >>> 0) break L478;
       $$01$i230 = $1220 - $i$0$i225 | 0;
       $$02$i229 = $estr$0$i + ($i$0$i225 + -2) | 0;
       $1335 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i230 = $1220;
       $$02$i229 = $928;
       $1335 = $1319;
      } while (0);
      _memcpy($1335 | 0, $$02$i229 | 0, $$01$i230 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i230;
     } while (0);
     L491 : do if (($985 | 0) == 8192 & $987) {
      $1339 = $w$1 - $984 | 0;
      _memset($pad$i | 0, 32, ($1339 >>> 0 > 256 ? 256 : $1339) | 0) | 0;
      if ($1339 >>> 0 > 255) {
       $$01$i82$i = $1339;
       do {
        $1343 = HEAP32[$17 >> 2] | 0;
        do if (!$1343) {
         $1346 = HEAP8[$18 >> 0] | 0;
         HEAP8[$18 >> 0] = $1346 + 255 | $1346;
         $1350 = HEAP32[$f >> 2] | 0;
         if (!($1350 & 8)) {
          HEAP32[$19 >> 2] = 0;
          HEAP32[$20 >> 2] = 0;
          $1354 = HEAP32[$21 >> 2] | 0;
          HEAP32[$22 >> 2] = $1354;
          HEAP32[$23 >> 2] = $1354;
          $1356 = $1354 + (HEAP32[$24 >> 2] | 0) | 0;
          HEAP32[$17 >> 2] = $1356;
          $1358 = $1356;
          $1360 = $1354;
          label = 455;
          break;
         } else {
          HEAP32[$f >> 2] = $1350 | 32;
          break;
         }
        } else {
         $1358 = $1343;
         $1360 = HEAP32[$23 >> 2] | 0;
         label = 455;
        } while (0);
        L502 : do if ((label | 0) == 455) {
         label = 0;
         if (($1358 - $1360 | 0) >>> 0 < 256) {
          FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
          break;
         }
         L507 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
          $i$0$i236 = 256;
          while (1) {
           if (!$i$0$i236) {
            $$01$i241 = 256;
            $$02$i240 = $pad$i;
            $1376 = $1360;
            break L507;
           }
           $1367 = $i$0$i236 + -1 | 0;
           if ((HEAP8[$pad$i + $1367 >> 0] | 0) == 10) break; else $i$0$i236 = $1367;
          }
          if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i236) | 0) >>> 0 < $i$0$i236 >>> 0) break L502;
          $$01$i241 = 256 - $i$0$i236 | 0;
          $$02$i240 = $pad$i + $i$0$i236 | 0;
          $1376 = HEAP32[$23 >> 2] | 0;
         } else {
          $$01$i241 = 256;
          $$02$i240 = $pad$i;
          $1376 = $1360;
         } while (0);
         _memcpy($1376 | 0, $$02$i240 | 0, $$01$i241 | 0) | 0;
         HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i241;
        } while (0);
        $$01$i82$i = $$01$i82$i + -256 | 0;
       } while ($$01$i82$i >>> 0 > 255);
       $$0$lcssa$i84$i = $1339 & 255;
      } else $$0$lcssa$i84$i = $1339;
      $1382 = HEAP32[$17 >> 2] | 0;
      do if (!$1382) {
       $1385 = HEAP8[$18 >> 0] | 0;
       HEAP8[$18 >> 0] = $1385 + 255 | $1385;
       $1389 = HEAP32[$f >> 2] | 0;
       if (!($1389 & 8)) {
        HEAP32[$19 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        $1393 = HEAP32[$21 >> 2] | 0;
        HEAP32[$22 >> 2] = $1393;
        HEAP32[$23 >> 2] = $1393;
        $1395 = $1393 + (HEAP32[$24 >> 2] | 0) | 0;
        HEAP32[$17 >> 2] = $1395;
        $1397 = $1395;
        $1399 = $1393;
        break;
       } else {
        HEAP32[$f >> 2] = $1389 | 32;
        break L491;
       }
      } else {
       $1397 = $1382;
       $1399 = HEAP32[$23 >> 2] | 0;
      } while (0);
      if (($1397 - $1399 | 0) >>> 0 < $$0$lcssa$i84$i >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i84$i) | 0;
       break;
      }
      L527 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i247 = $$0$lcssa$i84$i;
       while (1) {
        if (!$i$0$i247) {
         $$01$i252 = $$0$lcssa$i84$i;
         $$02$i251 = $pad$i;
         $1415 = $1399;
         break L527;
        }
        $1406 = $i$0$i247 + -1 | 0;
        if ((HEAP8[$pad$i + $1406 >> 0] | 0) == 10) break; else $i$0$i247 = $1406;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i247) | 0) >>> 0 < $i$0$i247 >>> 0) break L491;
       $$01$i252 = $$0$lcssa$i84$i - $i$0$i247 | 0;
       $$02$i251 = $pad$i + $i$0$i247 | 0;
       $1415 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i252 = $$0$lcssa$i84$i;
       $$02$i251 = $pad$i;
       $1415 = $1399;
      } while (0);
      _memcpy($1415 | 0, $$02$i251 | 0, $$01$i252 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i252;
     } while (0);
     $2880 = $238;
     $2881 = $265;
     $cnt$0 = $cnt$1;
     $fmt90 = $178;
     $l$0 = $987 ? $w$1 : $984;
     $l10n$0 = $l10n$3;
     continue L1;
    }
    $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0;
    if ($868) {
     $1421 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0;
     HEAP32[$e2$i >> 2] = $1421;
     $$3$i = $867 * 268435456.0;
     $1423 = $1421;
    } else {
     $$3$i = $867;
     $1423 = HEAP32[$e2$i >> 2] | 0;
    }
    $$39$i = ($1423 | 0) < 0 ? $big$i : $13;
    $1424 = $$39$i;
    $$4$i = $$3$i;
    $z$0$i = $$39$i;
    do {
     $1425 = ~~$$4$i >>> 0;
     HEAP32[$z$0$i >> 2] = $1425;
     $z$0$i = $z$0$i + 4 | 0;
     $$4$i = ($$4$i - +($1425 >>> 0)) * 1.0e9;
    } while ($$4$i != 0.0);
    $$pr$i = HEAP32[$e2$i >> 2] | 0;
    if (($$pr$i | 0) > 0) {
     $1433 = $$pr$i;
     $a$1261$i = $$39$i;
     $z$1260$i = $z$0$i;
     while (1) {
      $1434 = ($1433 | 0) > 29 ? 29 : $1433;
      $d$0253$i = $z$1260$i + -4 | 0;
      do if ($d$0253$i >>> 0 < $a$1261$i >>> 0) $a$2$ph$i = $a$1261$i; else {
       $1445 = $z$1260$i;
       $carry$0254$i = 0;
       $d$0255$i = $d$0253$i;
       while (1) {
        $1437 = _bitshift64Shl(HEAP32[$d$0255$i >> 2] | 0, 0, $1434 | 0) | 0;
        $1439 = _i64Add($1437 | 0, tempRet0 | 0, $carry$0254$i | 0, 0) | 0;
        $1440 = tempRet0;
        $1441 = ___uremdi3($1439 | 0, $1440 | 0, 1e9, 0) | 0;
        HEAP32[$d$0255$i >> 2] = $1441;
        $carry$0254$i = ___udivdi3($1439 | 0, $1440 | 0, 1e9, 0) | 0;
        $d$0$i = $1445 + -8 | 0;
        if ($d$0$i >>> 0 < $a$1261$i >>> 0) break; else {
         $1445$phi = $d$0255$i;
         $d$0255$i = $d$0$i;
         $1445 = $1445$phi;
        }
       }
       if (!$carry$0254$i) {
        $a$2$ph$i = $a$1261$i;
        break;
       }
       $1448 = $a$1261$i + -4 | 0;
       HEAP32[$1448 >> 2] = $carry$0254$i;
       $a$2$ph$i = $1448;
      } while (0);
      $z$2$i = $z$1260$i;
      while (1) {
       if ($z$2$i >>> 0 <= $a$2$ph$i >>> 0) break;
       $1450 = $z$2$i + -4 | 0;
       if (!(HEAP32[$1450 >> 2] | 0)) $z$2$i = $1450; else break;
      }
      $1454 = (HEAP32[$e2$i >> 2] | 0) - $1434 | 0;
      HEAP32[$e2$i >> 2] = $1454;
      if (($1454 | 0) > 0) {
       $1433 = $1454;
       $a$1261$i = $a$2$ph$i;
       $z$1260$i = $z$2$i;
      } else {
       $$pr154$i = $1454;
       $a$1$lcssa$i = $a$2$ph$i;
       $z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr154$i = $$pr$i;
     $a$1$lcssa$i = $$39$i;
     $z$1$lcssa$i = $z$0$i;
    }
    L558 : do if (($$pr154$i | 0) < 0) {
     $1459 = (($$p$i + 25 | 0) / 9 | 0) + 1 | 0;
     if (($871 | 0) == 102) {
      $1461 = $$39$i + ($1459 << 2) | 0;
      $1463 = $$pr154$i;
      $a$3248$us$i = $a$1$lcssa$i;
      $z$3247$us$i = $z$1$lcssa$i;
      while (1) {
       $$26$us$i = ($1463 | 0) < -9 ? 9 : 0 - $1463 | 0;
       do if ($a$3248$us$i >>> 0 < $z$3247$us$i >>> 0) {
        $1484 = (1 << $$26$us$i) + -1 | 0;
        $1487 = 1e9 >>> $$26$us$i;
        $carry3$0242$us$i = 0;
        $d$1241$us$i = $a$3248$us$i;
        do {
         $1482 = HEAP32[$d$1241$us$i >> 2] | 0;
         HEAP32[$d$1241$us$i >> 2] = ($1482 >>> $$26$us$i) + $carry3$0242$us$i;
         $carry3$0242$us$i = Math_imul($1482 & $1484, $1487) | 0;
         $d$1241$us$i = $d$1241$us$i + 4 | 0;
        } while ($d$1241$us$i >>> 0 < $z$3247$us$i >>> 0);
        $$a$3$us$i = (HEAP32[$a$3248$us$i >> 2] | 0) == 0 ? $a$3248$us$i + 4 | 0 : $a$3248$us$i;
        if (!$carry3$0242$us$i) {
         $$a$3$us310$i = $$a$3$us$i;
         $z$4$us$i = $z$3247$us$i;
         break;
        }
        HEAP32[$z$3247$us$i >> 2] = $carry3$0242$us$i;
        $$a$3$us310$i = $$a$3$us$i;
        $z$4$us$i = $z$3247$us$i + 4 | 0;
       } else {
        $$a$3$us310$i = (HEAP32[$a$3248$us$i >> 2] | 0) == 0 ? $a$3248$us$i + 4 | 0 : $a$3248$us$i;
        $z$4$us$i = $z$3247$us$i;
       } while (0);
       $$z$4$us$i = ($z$4$us$i - $1424 >> 2 | 0) > ($1459 | 0) ? $1461 : $z$4$us$i;
       $1463 = (HEAP32[$e2$i >> 2] | 0) + $$26$us$i | 0;
       HEAP32[$e2$i >> 2] = $1463;
       if (($1463 | 0) >= 0) {
        $a$3$lcssa$i = $$a$3$us310$i;
        $z$3$lcssa$i = $$z$4$us$i;
        break L558;
       } else {
        $a$3248$us$i = $$a$3$us310$i;
        $z$3247$us$i = $$z$4$us$i;
       }
      }
     } else {
      $1492 = $$pr154$i;
      $a$3248$i = $a$1$lcssa$i;
      $z$3247$i = $z$1$lcssa$i;
     }
     while (1) {
      $$26$i = ($1492 | 0) < -9 ? 9 : 0 - $1492 | 0;
      do if ($a$3248$i >>> 0 < $z$3247$i >>> 0) {
       $1499 = (1 << $$26$i) + -1 | 0;
       $1500 = 1e9 >>> $$26$i;
       $carry3$0242$i = 0;
       $d$1241$i = $a$3248$i;
       do {
        $1501 = HEAP32[$d$1241$i >> 2] | 0;
        HEAP32[$d$1241$i >> 2] = ($1501 >>> $$26$i) + $carry3$0242$i;
        $carry3$0242$i = Math_imul($1501 & $1499, $1500) | 0;
        $d$1241$i = $d$1241$i + 4 | 0;
       } while ($d$1241$i >>> 0 < $z$3247$i >>> 0);
       $$a$3$i = (HEAP32[$a$3248$i >> 2] | 0) == 0 ? $a$3248$i + 4 | 0 : $a$3248$i;
       if (!$carry3$0242$i) {
        $$a$3312$i = $$a$3$i;
        $z$4$i = $z$3247$i;
        break;
       }
       HEAP32[$z$3247$i >> 2] = $carry3$0242$i;
       $$a$3312$i = $$a$3$i;
       $z$4$i = $z$3247$i + 4 | 0;
      } else {
       $$a$3312$i = (HEAP32[$a$3248$i >> 2] | 0) == 0 ? $a$3248$i + 4 | 0 : $a$3248$i;
       $z$4$i = $z$3247$i;
      } while (0);
      if (($z$4$i - $$a$3312$i >> 2 | 0) > ($1459 | 0)) $z$5$i = $$a$3312$i + ($1459 << 2) | 0; else $z$5$i = $z$4$i;
      $1492 = (HEAP32[$e2$i >> 2] | 0) + $$26$i | 0;
      HEAP32[$e2$i >> 2] = $1492;
      if (($1492 | 0) >= 0) {
       $a$3$lcssa$i = $$a$3312$i;
       $z$3$lcssa$i = $z$5$i;
       break;
      } else {
       $a$3248$i = $$a$3312$i;
       $z$3247$i = $z$5$i;
      }
     }
    } else {
     $a$3$lcssa$i = $a$1$lcssa$i;
     $z$3$lcssa$i = $z$1$lcssa$i;
    } while (0);
    do if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
     $1526 = ($1424 - $a$3$lcssa$i >> 2) * 9 | 0;
     $1527 = HEAP32[$a$3$lcssa$i >> 2] | 0;
     if ($1527 >>> 0 < 10) {
      $e$1$i = $1526;
      break;
     } else {
      $e$0237$i = $1526;
      $i$0236$i = 10;
     }
     while (1) {
      $i$0236$i = $i$0236$i * 10 | 0;
      $1530 = $e$0237$i + 1 | 0;
      if ($1527 >>> 0 < $i$0236$i >>> 0) {
       $e$1$i = $1530;
       break;
      } else $e$0237$i = $1530;
     }
    } else $e$1$i = 0; while (0);
    $1535 = ($871 | 0) == 103;
    $1537 = $$p$i - (($871 | 0) != 102 ? $e$1$i : 0) + (($1535 & ($$p$i | 0) != 0) << 31 >> 31) | 0;
    if (($1537 | 0) < ((($z$3$lcssa$i - $1424 >> 2) * 9 | 0) + -9 | 0)) {
     $1544 = $1537 + 9216 | 0;
     $1545 = ($1544 | 0) / 9 | 0;
     $1546 = $$39$i + ($1545 + -1023 << 2) | 0;
     $j$0229$i = (($1544 | 0) % 9 | 0) + 1 | 0;
     if (($j$0229$i | 0) < 9) {
      $i$1230$i = 10;
      $j$0231$i = $j$0229$i;
      while (1) {
       $1549 = $i$1230$i * 10 | 0;
       $j$0231$i = $j$0231$i + 1 | 0;
       if (($j$0231$i | 0) == 9) {
        $i$1$lcssa$i = $1549;
        break;
       } else $i$1230$i = $1549;
      }
     } else $i$1$lcssa$i = 10;
     $1550 = HEAP32[$1546 >> 2] | 0;
     $1551 = ($1550 >>> 0) % ($i$1$lcssa$i >>> 0) | 0;
     if (!$1551) if (($$39$i + ($1545 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
      $a$7$i = $a$3$lcssa$i;
      $d$3$i = $1546;
      $e$3$i = $e$1$i;
     } else label = 521; else label = 521;
     do if ((label | 0) == 521) {
      label = 0;
      $$28$i = ((($1550 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
      $1558 = ($i$1$lcssa$i | 0) / 2 | 0;
      do if ($1551 >>> 0 < $1558 >>> 0) $small$0$i = .5; else {
       if (($1551 | 0) == ($1558 | 0)) if (($$39$i + ($1545 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
        $small$0$i = 1.0;
        break;
       }
       $small$0$i = 1.5;
      } while (0);
      do if (!$pl$0$i) {
       $round6$1$i = $$28$i;
       $small$1$i = $small$0$i;
      } else {
       if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
        $round6$1$i = $$28$i;
        $small$1$i = $small$0$i;
        break;
       }
       $round6$1$i = -$$28$i;
       $small$1$i = -$small$0$i;
      } while (0);
      $1568 = $1550 - $1551 | 0;
      HEAP32[$1546 >> 2] = $1568;
      if (!($round6$1$i + $small$1$i != $round6$1$i)) {
       $a$7$i = $a$3$lcssa$i;
       $d$3$i = $1546;
       $e$3$i = $e$1$i;
       break;
      }
      $1571 = $1568 + $i$1$lcssa$i | 0;
      HEAP32[$1546 >> 2] = $1571;
      if ($1571 >>> 0 > 999999999) {
       $a$5223$i = $a$3$lcssa$i;
       $d$2222$i = $1546;
       while (1) {
        $1573 = $d$2222$i + -4 | 0;
        HEAP32[$d$2222$i >> 2] = 0;
        if ($1573 >>> 0 < $a$5223$i >>> 0) {
         $1575 = $a$5223$i + -4 | 0;
         HEAP32[$1575 >> 2] = 0;
         $a$6$i = $1575;
        } else $a$6$i = $a$5223$i;
        $1577 = (HEAP32[$1573 >> 2] | 0) + 1 | 0;
        HEAP32[$1573 >> 2] = $1577;
        if ($1577 >>> 0 > 999999999) {
         $a$5223$i = $a$6$i;
         $d$2222$i = $1573;
        } else {
         $a$5$lcssa$i = $a$6$i;
         $d$2$lcssa$i = $1573;
         break;
        }
       }
      } else {
       $a$5$lcssa$i = $a$3$lcssa$i;
       $d$2$lcssa$i = $1546;
      }
      $1582 = ($1424 - $a$5$lcssa$i >> 2) * 9 | 0;
      $1583 = HEAP32[$a$5$lcssa$i >> 2] | 0;
      if ($1583 >>> 0 < 10) {
       $a$7$i = $a$5$lcssa$i;
       $d$3$i = $d$2$lcssa$i;
       $e$3$i = $1582;
       break;
      } else {
       $e$2218$i = $1582;
       $i$2217$i = 10;
      }
      while (1) {
       $i$2217$i = $i$2217$i * 10 | 0;
       $1586 = $e$2218$i + 1 | 0;
       if ($1583 >>> 0 < $i$2217$i >>> 0) {
        $a$7$i = $a$5$lcssa$i;
        $d$3$i = $d$2$lcssa$i;
        $e$3$i = $1586;
        break;
       } else $e$2218$i = $1586;
      }
     } while (0);
     $1588 = $d$3$i + 4 | 0;
     $a$8$ph$i = $a$7$i;
     $e$4$ph$i = $e$3$i;
     $z$6$ph$i = $z$3$lcssa$i >>> 0 > $1588 >>> 0 ? $1588 : $z$3$lcssa$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;
     $e$4$ph$i = $e$1$i;
     $z$6$ph$i = $z$3$lcssa$i;
    }
    $a$8$ph294$i = $a$8$ph$i;
    $1590 = 0 - $e$4$ph$i | 0;
    $z$6$i = $z$6$ph$i;
    while (1) {
     if ($z$6$i >>> 0 <= $a$8$ph$i >>> 0) {
      $$lcssa283$i = 0;
      break;
     }
     $1592 = $z$6$i + -4 | 0;
     if (!(HEAP32[$1592 >> 2] | 0)) $z$6$i = $1592; else {
      $$lcssa283$i = 1;
      break;
     }
    }
    do if ($1535) {
     $$$p$i = (($$p$i | 0) == 0 & 1) + $$p$i | 0;
     if (($$$p$i | 0) > ($e$4$ph$i | 0) & ($e$4$ph$i | 0) > -5) {
      $$019$i = $t$0 + -1 | 0;
      $$216$i = $$$p$i + -1 - $e$4$ph$i | 0;
     } else {
      $$019$i = $t$0 + -2 | 0;
      $$216$i = $$$p$i + -1 | 0;
     }
     if ($fl$1$ & 8) {
      $$120$i = $$019$i;
      $$317$i = $$216$i;
      break;
     }
     do if ($$lcssa283$i) {
      $1606 = HEAP32[$z$6$i + -4 >> 2] | 0;
      if (!$1606) {
       $j$2$i = 9;
       break;
      }
      if (!(($1606 >>> 0) % 10 | 0)) {
       $i$3213$i = 10;
       $j$1214$i = 0;
      } else {
       $j$2$i = 0;
       break;
      }
      while (1) {
       $i$3213$i = $i$3213$i * 10 | 0;
       $1611 = $j$1214$i + 1 | 0;
       if (($1606 >>> 0) % ($i$3213$i >>> 0) | 0) {
        $j$2$i = $1611;
        break;
       } else $j$1214$i = $1611;
      }
     } else $j$2$i = 9; while (0);
     $1620 = (($z$6$i - $1424 >> 2) * 9 | 0) + -9 | 0;
     if (($$019$i | 32 | 0) == 102) {
      $1621 = $1620 - $j$2$i | 0;
      $$29$i = ($1621 | 0) < 0 ? 0 : $1621;
      $$120$i = $$019$i;
      $$317$i = ($$216$i | 0) < ($$29$i | 0) ? $$216$i : $$29$i;
      break;
     } else {
      $1625 = $1620 + $e$4$ph$i - $j$2$i | 0;
      $$31$i = ($1625 | 0) < 0 ? 0 : $1625;
      $$120$i = $$019$i;
      $$317$i = ($$216$i | 0) < ($$31$i | 0) ? $$216$i : $$31$i;
      break;
     }
    } else {
     $$120$i = $t$0;
     $$317$i = $$p$i;
    } while (0);
    $1628 = ($$317$i | 0) != 0;
    if ($1628) $1632 = 1; else $1632 = ($fl$1$ & 8 | 0) != 0;
    $1631 = $1632 & 1;
    $1634 = ($$120$i | 32 | 0) == 102;
    if ($1634) {
     $$pn$i = ($e$4$ph$i | 0) > 0 ? $e$4$ph$i : 0;
     $estr$2$i = 0;
    } else {
     $1638 = ($e$4$ph$i | 0) < 0 ? $1590 : $e$4$ph$i;
     if (($1638 | 0) < 0) {
      $$05$i87$i = $7;
      $1642 = $1638;
      $1643 = (($1638 | 0) < 0) << 31 >> 31;
      while (1) {
       $1644 = ___uremdi3($1642 | 0, $1643 | 0, 10, 0) | 0;
       $$05$i87$i = $$05$i87$i + -1 | 0;
       HEAP8[$$05$i87$i >> 0] = $1644 | 48;
       $1642$looptemp = $1642;
       $1642 = ___udivdi3($1642 | 0, $1643 | 0, 10, 0) | 0;
       if (!($1643 >>> 0 > 9 | ($1643 | 0) == 9 & $1642$looptemp >>> 0 > 4294967295)) break; else $1643 = tempRet0;
      }
      $$0$lcssa$i92$i = $$05$i87$i;
      $$01$lcssa$off0$i93$i = $1642;
     } else {
      $$0$lcssa$i92$i = $7;
      $$01$lcssa$off0$i93$i = $1638;
     }
     if (!$$01$lcssa$off0$i93$i) $estr$1$ph$i = $$0$lcssa$i92$i; else {
      $$12$i95$i = $$0$lcssa$i92$i;
      $y$03$i94$i = $$01$lcssa$off0$i93$i;
      while (1) {
       $1660 = $$12$i95$i + -1 | 0;
       HEAP8[$1660 >> 0] = ($y$03$i94$i >>> 0) % 10 | 0 | 48;
       if ($y$03$i94$i >>> 0 < 10) {
        $estr$1$ph$i = $1660;
        break;
       } else {
        $$12$i95$i = $1660;
        $y$03$i94$i = ($y$03$i94$i >>> 0) / 10 | 0;
       }
      }
     }
     if (($9 - $estr$1$ph$i | 0) < 2) {
      $estr$1209$i = $estr$1$ph$i;
      while (1) {
       $1666 = $estr$1209$i + -1 | 0;
       HEAP8[$1666 >> 0] = 48;
       if (($9 - $1666 | 0) < 2) $estr$1209$i = $1666; else {
        $estr$1$lcssa$i = $1666;
        break;
       }
      }
     } else $estr$1$lcssa$i = $estr$1$ph$i;
     HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$4$ph$i >> 31 & 2) + 43;
     $1676 = $estr$1$lcssa$i + -2 | 0;
     HEAP8[$1676 >> 0] = $$120$i;
     $$pn$i = $9 - $1676 | 0;
     $estr$2$i = $1676;
    }
    $1681 = $pl$0$i + 1 + $$317$i + $1631 + $$pn$i | 0;
    $1682 = $fl$1$ & 73728;
    $1684 = ($w$1 | 0) > ($1681 | 0);
    L665 : do if (($1682 | 0) == 0 & $1684) {
     $1685 = $w$1 - $1681 | 0;
     _memset($pad$i | 0, 32, ($1685 >>> 0 > 256 ? 256 : $1685) | 0) | 0;
     if ($1685 >>> 0 > 255) {
      $$01$i103$i = $1685;
      do {
       $1689 = HEAP32[$17 >> 2] | 0;
       do if (!$1689) {
        $1692 = HEAP8[$18 >> 0] | 0;
        HEAP8[$18 >> 0] = $1692 + 255 | $1692;
        $1696 = HEAP32[$f >> 2] | 0;
        if (!($1696 & 8)) {
         HEAP32[$19 >> 2] = 0;
         HEAP32[$20 >> 2] = 0;
         $1700 = HEAP32[$21 >> 2] | 0;
         HEAP32[$22 >> 2] = $1700;
         HEAP32[$23 >> 2] = $1700;
         $1702 = $1700 + (HEAP32[$24 >> 2] | 0) | 0;
         HEAP32[$17 >> 2] = $1702;
         $1704 = $1702;
         $1706 = $1700;
         label = 571;
         break;
        } else {
         HEAP32[$f >> 2] = $1696 | 32;
         break;
        }
       } else {
        $1704 = $1689;
        $1706 = HEAP32[$23 >> 2] | 0;
        label = 571;
       } while (0);
       L676 : do if ((label | 0) == 571) {
        label = 0;
        if (($1704 - $1706 | 0) >>> 0 < 256) {
         FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
         break;
        }
        L681 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
         $i$0$i258 = 256;
         while (1) {
          if (!$i$0$i258) {
           $$01$i263 = 256;
           $$02$i262 = $pad$i;
           $1722 = $1706;
           break L681;
          }
          $1713 = $i$0$i258 + -1 | 0;
          if ((HEAP8[$pad$i + $1713 >> 0] | 0) == 10) break; else $i$0$i258 = $1713;
         }
         if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i258) | 0) >>> 0 < $i$0$i258 >>> 0) break L676;
         $$01$i263 = 256 - $i$0$i258 | 0;
         $$02$i262 = $pad$i + $i$0$i258 | 0;
         $1722 = HEAP32[$23 >> 2] | 0;
        } else {
         $$01$i263 = 256;
         $$02$i262 = $pad$i;
         $1722 = $1706;
        } while (0);
        _memcpy($1722 | 0, $$02$i262 | 0, $$01$i263 | 0) | 0;
        HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i263;
       } while (0);
       $$01$i103$i = $$01$i103$i + -256 | 0;
      } while ($$01$i103$i >>> 0 > 255);
      $$0$lcssa$i105$i = $1685 & 255;
     } else $$0$lcssa$i105$i = $1685;
     $1728 = HEAP32[$17 >> 2] | 0;
     do if (!$1728) {
      $1731 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $1731 + 255 | $1731;
      $1735 = HEAP32[$f >> 2] | 0;
      if (!($1735 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $1739 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $1739;
       HEAP32[$23 >> 2] = $1739;
       $1741 = $1739 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $1741;
       $1743 = $1741;
       $1745 = $1739;
       break;
      } else {
       HEAP32[$f >> 2] = $1735 | 32;
       break L665;
      }
     } else {
      $1743 = $1728;
      $1745 = HEAP32[$23 >> 2] | 0;
     } while (0);
     if (($1743 - $1745 | 0) >>> 0 < $$0$lcssa$i105$i >>> 0) {
      FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i105$i) | 0;
      break;
     }
     L701 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
      $i$0$i269 = $$0$lcssa$i105$i;
      while (1) {
       if (!$i$0$i269) {
        $$01$i274 = $$0$lcssa$i105$i;
        $$02$i273 = $pad$i;
        $1761 = $1745;
        break L701;
       }
       $1752 = $i$0$i269 + -1 | 0;
       if ((HEAP8[$pad$i + $1752 >> 0] | 0) == 10) break; else $i$0$i269 = $1752;
      }
      if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i269) | 0) >>> 0 < $i$0$i269 >>> 0) break L665;
      $$01$i274 = $$0$lcssa$i105$i - $i$0$i269 | 0;
      $$02$i273 = $pad$i + $i$0$i269 | 0;
      $1761 = HEAP32[$23 >> 2] | 0;
     } else {
      $$01$i274 = $$0$lcssa$i105$i;
      $$02$i273 = $pad$i;
      $1761 = $1745;
     } while (0);
     _memcpy($1761 | 0, $$02$i273 | 0, $$01$i274 | 0) | 0;
     HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i274;
    } while (0);
    $1764 = HEAP32[$17 >> 2] | 0;
    do if (!$1764) {
     $1767 = HEAP8[$18 >> 0] | 0;
     HEAP8[$18 >> 0] = $1767 + 255 | $1767;
     $1771 = HEAP32[$f >> 2] | 0;
     if (!($1771 & 8)) {
      HEAP32[$19 >> 2] = 0;
      HEAP32[$20 >> 2] = 0;
      $1775 = HEAP32[$21 >> 2] | 0;
      HEAP32[$22 >> 2] = $1775;
      HEAP32[$23 >> 2] = $1775;
      $1777 = $1775 + (HEAP32[$24 >> 2] | 0) | 0;
      HEAP32[$17 >> 2] = $1777;
      $1779 = $1777;
      $1781 = $1775;
      label = 599;
      break;
     } else {
      HEAP32[$f >> 2] = $1771 | 32;
      break;
     }
    } else {
     $1779 = $1764;
     $1781 = HEAP32[$23 >> 2] | 0;
     label = 599;
    } while (0);
    L715 : do if ((label | 0) == 599) {
     label = 0;
     if (($1779 - $1781 | 0) >>> 0 < $pl$0$i >>> 0) {
      FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $prefix$0$i, $pl$0$i) | 0;
      break;
     }
     L720 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
      $i$0$i280 = $pl$0$i;
      while (1) {
       if (!$i$0$i280) {
        $$01$i285 = $pl$0$i;
        $$02$i284 = $prefix$0$i;
        $1797 = $1781;
        break L720;
       }
       $1788 = $i$0$i280 + -1 | 0;
       if ((HEAP8[$prefix$0$i + $1788 >> 0] | 0) == 10) break; else $i$0$i280 = $1788;
      }
      if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $prefix$0$i, $i$0$i280) | 0) >>> 0 < $i$0$i280 >>> 0) break L715;
      $$01$i285 = $pl$0$i - $i$0$i280 | 0;
      $$02$i284 = $prefix$0$i + $i$0$i280 | 0;
      $1797 = HEAP32[$23 >> 2] | 0;
     } else {
      $$01$i285 = $pl$0$i;
      $$02$i284 = $prefix$0$i;
      $1797 = $1781;
     } while (0);
     _memcpy($1797 | 0, $$02$i284 | 0, $$01$i285 | 0) | 0;
     HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i285;
    } while (0);
    L728 : do if (($1682 | 0) == 65536 & $1684) {
     $1801 = $w$1 - $1681 | 0;
     _memset($pad$i | 0, 48, ($1801 >>> 0 > 256 ? 256 : $1801) | 0) | 0;
     if ($1801 >>> 0 > 255) {
      $$01$i110$i = $1801;
      do {
       $1805 = HEAP32[$17 >> 2] | 0;
       do if (!$1805) {
        $1808 = HEAP8[$18 >> 0] | 0;
        HEAP8[$18 >> 0] = $1808 + 255 | $1808;
        $1812 = HEAP32[$f >> 2] | 0;
        if (!($1812 & 8)) {
         HEAP32[$19 >> 2] = 0;
         HEAP32[$20 >> 2] = 0;
         $1816 = HEAP32[$21 >> 2] | 0;
         HEAP32[$22 >> 2] = $1816;
         HEAP32[$23 >> 2] = $1816;
         $1818 = $1816 + (HEAP32[$24 >> 2] | 0) | 0;
         HEAP32[$17 >> 2] = $1818;
         $1820 = $1818;
         $1822 = $1816;
         label = 614;
         break;
        } else {
         HEAP32[$f >> 2] = $1812 | 32;
         break;
        }
       } else {
        $1820 = $1805;
        $1822 = HEAP32[$23 >> 2] | 0;
        label = 614;
       } while (0);
       L739 : do if ((label | 0) == 614) {
        label = 0;
        if (($1820 - $1822 | 0) >>> 0 < 256) {
         FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
         break;
        }
        L744 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
         $i$0$i291 = 256;
         while (1) {
          if (!$i$0$i291) {
           $$01$i296 = 256;
           $$02$i295 = $pad$i;
           $1838 = $1822;
           break L744;
          }
          $1829 = $i$0$i291 + -1 | 0;
          if ((HEAP8[$pad$i + $1829 >> 0] | 0) == 10) break; else $i$0$i291 = $1829;
         }
         if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i291) | 0) >>> 0 < $i$0$i291 >>> 0) break L739;
         $$01$i296 = 256 - $i$0$i291 | 0;
         $$02$i295 = $pad$i + $i$0$i291 | 0;
         $1838 = HEAP32[$23 >> 2] | 0;
        } else {
         $$01$i296 = 256;
         $$02$i295 = $pad$i;
         $1838 = $1822;
        } while (0);
        _memcpy($1838 | 0, $$02$i295 | 0, $$01$i296 | 0) | 0;
        HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i296;
       } while (0);
       $$01$i110$i = $$01$i110$i + -256 | 0;
      } while ($$01$i110$i >>> 0 > 255);
      $$0$lcssa$i112$i = $1801 & 255;
     } else $$0$lcssa$i112$i = $1801;
     $1844 = HEAP32[$17 >> 2] | 0;
     do if (!$1844) {
      $1847 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $1847 + 255 | $1847;
      $1851 = HEAP32[$f >> 2] | 0;
      if (!($1851 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $1855 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $1855;
       HEAP32[$23 >> 2] = $1855;
       $1857 = $1855 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $1857;
       $1859 = $1857;
       $1861 = $1855;
       break;
      } else {
       HEAP32[$f >> 2] = $1851 | 32;
       break L728;
      }
     } else {
      $1859 = $1844;
      $1861 = HEAP32[$23 >> 2] | 0;
     } while (0);
     if (($1859 - $1861 | 0) >>> 0 < $$0$lcssa$i112$i >>> 0) {
      FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i112$i) | 0;
      break;
     }
     L764 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
      $i$0$i302 = $$0$lcssa$i112$i;
      while (1) {
       if (!$i$0$i302) {
        $$01$i307 = $$0$lcssa$i112$i;
        $$02$i306 = $pad$i;
        $1877 = $1861;
        break L764;
       }
       $1868 = $i$0$i302 + -1 | 0;
       if ((HEAP8[$pad$i + $1868 >> 0] | 0) == 10) break; else $i$0$i302 = $1868;
      }
      if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i302) | 0) >>> 0 < $i$0$i302 >>> 0) break L728;
      $$01$i307 = $$0$lcssa$i112$i - $i$0$i302 | 0;
      $$02$i306 = $pad$i + $i$0$i302 | 0;
      $1877 = HEAP32[$23 >> 2] | 0;
     } else {
      $$01$i307 = $$0$lcssa$i112$i;
      $$02$i306 = $pad$i;
      $1877 = $1861;
     } while (0);
     _memcpy($1877 | 0, $$02$i306 | 0, $$01$i307 | 0) | 0;
     HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i307;
    } while (0);
    L772 : do if ($1634) {
     $r$0$a$8$i = $a$8$ph$i >>> 0 > $$39$i >>> 0 ? $$39$i : $a$8$ph$i;
     $1881 = ~$1424;
     $1882 = ~$a$8$ph294$i;
     $umax$i = $1881 >>> 0 > $1882 >>> 0 ? $1881 : $1882;
     $1884 = 3 - $umax$i | 0;
     $uglygep296$i = $$39$i + 1 | 0;
     $uglygep300301$i = ($1884 >>> 0 > $uglygep296$i >>> 0 ? $1884 : $uglygep296$i) + $umax$i | 0;
     $d$4199$i = $r$0$a$8$i;
     do {
      $1886 = HEAP32[$d$4199$i >> 2] | 0;
      if (!$1886) $$1$lcssa$i120$i = $14; else {
       $$12$i118$i = $14;
       $y$03$i117$i = $1886;
       while (1) {
        $1891 = $$12$i118$i + -1 | 0;
        HEAP8[$1891 >> 0] = ($y$03$i117$i >>> 0) % 10 | 0 | 48;
        if ($y$03$i117$i >>> 0 < 10) {
         $$1$lcssa$i120$i = $1891;
         break;
        } else {
         $$12$i118$i = $1891;
         $y$03$i117$i = ($y$03$i117$i >>> 0) / 10 | 0;
        }
       }
      }
      do if (($d$4199$i | 0) == ($r$0$a$8$i | 0)) {
       if (($$1$lcssa$i120$i | 0) != ($14 | 0)) {
        $s7$1$i = $$1$lcssa$i120$i;
        break;
       }
       HEAP8[$16 >> 0] = 48;
       $s7$1$i = $16;
      } else {
       if ($$1$lcssa$i120$i >>> 0 > $buf$i >>> 0) $s7$0196$i = $$1$lcssa$i120$i; else {
        $s7$1$i = $$1$lcssa$i120$i;
        break;
       }
       while (1) {
        $1896 = $s7$0196$i + -1 | 0;
        HEAP8[$1896 >> 0] = 48;
        if ($1896 >>> 0 > $buf$i >>> 0) $s7$0196$i = $1896; else {
         $s7$1$i = $1896;
         break;
        }
       }
      } while (0);
      $1900 = $15 - $s7$1$i | 0;
      $1901 = HEAP32[$17 >> 2] | 0;
      do if (!$1901) {
       $1904 = HEAP8[$18 >> 0] | 0;
       HEAP8[$18 >> 0] = $1904 + 255 | $1904;
       $1908 = HEAP32[$f >> 2] | 0;
       if (!($1908 & 8)) {
        HEAP32[$19 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        $1912 = HEAP32[$21 >> 2] | 0;
        HEAP32[$22 >> 2] = $1912;
        HEAP32[$23 >> 2] = $1912;
        $1914 = $1912 + (HEAP32[$24 >> 2] | 0) | 0;
        HEAP32[$17 >> 2] = $1914;
        $1916 = $1914;
        $1918 = $1912;
        label = 651;
        break;
       } else {
        HEAP32[$f >> 2] = $1908 | 32;
        break;
       }
      } else {
       $1916 = $1901;
       $1918 = HEAP32[$23 >> 2] | 0;
       label = 651;
      } while (0);
      L793 : do if ((label | 0) == 651) {
       label = 0;
       if (($1916 - $1918 | 0) >>> 0 < $1900 >>> 0) {
        FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $s7$1$i, $1900) | 0;
        break;
       }
       L798 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
        $i$0$i313 = $1900;
        while (1) {
         if (!$i$0$i313) {
          $$01$i318 = $1900;
          $$02$i317 = $s7$1$i;
          $1934 = $1918;
          break L798;
         }
         $1925 = $i$0$i313 + -1 | 0;
         if ((HEAP8[$s7$1$i + $1925 >> 0] | 0) == 10) break; else $i$0$i313 = $1925;
        }
        if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $s7$1$i, $i$0$i313) | 0) >>> 0 < $i$0$i313 >>> 0) break L793;
        $$01$i318 = $1900 - $i$0$i313 | 0;
        $$02$i317 = $s7$1$i + $i$0$i313 | 0;
        $1934 = HEAP32[$23 >> 2] | 0;
       } else {
        $$01$i318 = $1900;
        $$02$i317 = $s7$1$i;
        $1934 = $1918;
       } while (0);
       _memcpy($1934 | 0, $$02$i317 | 0, $$01$i318 | 0) | 0;
       HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i318;
      } while (0);
      $d$4199$i = $d$4199$i + 4 | 0;
     } while ($d$4199$i >>> 0 <= $$39$i >>> 0);
     $1942 = ($uglygep300301$i & -4) + ~$umax$i | 0;
     L807 : do if (!(($fl$1$ & 8 | 0) == 0 & ($1628 ^ 1))) {
      $1945 = HEAP32[$17 >> 2] | 0;
      do if (!$1945) {
       $1948 = HEAP8[$18 >> 0] | 0;
       HEAP8[$18 >> 0] = $1948 + 255 | $1948;
       $1952 = HEAP32[$f >> 2] | 0;
       if (!($1952 & 8)) {
        HEAP32[$19 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        $1956 = HEAP32[$21 >> 2] | 0;
        HEAP32[$22 >> 2] = $1956;
        HEAP32[$23 >> 2] = $1956;
        $1958 = $1956 + (HEAP32[$24 >> 2] | 0) | 0;
        HEAP32[$17 >> 2] = $1958;
        $1960 = $1958;
        $1961 = $1956;
        break;
       } else {
        HEAP32[$f >> 2] = $1952 | 32;
        break L807;
       }
      } else {
       $1960 = $1945;
       $1961 = HEAP32[$23 >> 2] | 0;
      } while (0);
      if (($1960 | 0) == ($1961 | 0)) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, 64424, 1) | 0;
       break;
      } else {
       HEAP8[$1961 >> 0] = 46;
       HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 1;
       break;
      }
     } while (0);
     if ($d$4199$i >>> 0 < $z$6$i >>> 0 & ($$317$i | 0) > 0) {
      $$418193$i = $$317$i;
      $2022 = $1942;
      $d$5192$i = $d$4199$i;
      while (1) {
       $1967 = HEAP32[$d$5192$i >> 2] | 0;
       if (!$1967) {
        $s8$0188$i$ph = $14;
        label = 673;
       } else {
        $$12$i127$i = $14;
        $y$03$i126$i = $1967;
        while (1) {
         $1972 = $$12$i127$i + -1 | 0;
         HEAP8[$1972 >> 0] = ($y$03$i126$i >>> 0) % 10 | 0 | 48;
         if ($y$03$i126$i >>> 0 < 10) break; else {
          $$12$i127$i = $1972;
          $y$03$i126$i = ($y$03$i126$i >>> 0) / 10 | 0;
         }
        }
        if ($1972 >>> 0 > $buf$i >>> 0) {
         $s8$0188$i$ph = $1972;
         label = 673;
        } else {
         $2010 = $$12$i127$i;
         $s8$0$lcssa$i = $1972;
        }
       }
       if ((label | 0) == 673) {
        label = 0;
        $1976 = 0 - $s8$0188$i$ph | 0;
        $1978 = 0 - ($1976 >>> 0 > $27 >>> 0 ? $1976 : $27) | 0;
        $s8$0188$i = $s8$0188$i$ph;
        do {
         $s8$0188$i = $s8$0188$i + -1 | 0;
         HEAP8[$s8$0188$i >> 0] = 48;
        } while ($s8$0188$i >>> 0 > $buf$i >>> 0);
        $2010 = $1978;
        $s8$0$lcssa$i = $s8$0188$i;
       }
       $1983 = ($$418193$i | 0) > 9 ? 9 : $$418193$i;
       $1984 = HEAP32[$17 >> 2] | 0;
       do if (!$1984) {
        $1987 = HEAP8[$18 >> 0] | 0;
        HEAP8[$18 >> 0] = $1987 + 255 | $1987;
        $1991 = HEAP32[$f >> 2] | 0;
        if (!($1991 & 8)) {
         HEAP32[$19 >> 2] = 0;
         HEAP32[$20 >> 2] = 0;
         $1995 = HEAP32[$21 >> 2] | 0;
         HEAP32[$22 >> 2] = $1995;
         HEAP32[$23 >> 2] = $1995;
         $1997 = $1995 + (HEAP32[$24 >> 2] | 0) | 0;
         HEAP32[$17 >> 2] = $1997;
         $1999 = $1997;
         $2001 = $1995;
         label = 681;
         break;
        } else {
         HEAP32[$f >> 2] = $1991 | 32;
         break;
        }
       } else {
        $1999 = $1984;
        $2001 = HEAP32[$23 >> 2] | 0;
        label = 681;
       } while (0);
       L839 : do if ((label | 0) == 681) {
        label = 0;
        if (($1999 - $2001 | 0) >>> 0 < $1983 >>> 0) {
         FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $s8$0$lcssa$i, $1983) | 0;
         break;
        }
        L844 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
         $i$0$i335 = $1983;
         while (1) {
          if (!$i$0$i335) {
           $$01$i340 = $1983;
           $$02$i339 = $s8$0$lcssa$i;
           $2018 = $2001;
           break L844;
          }
          $2008 = $i$0$i335 + -1 | 0;
          if ((HEAP8[$2010 + ($i$0$i335 + -2) >> 0] | 0) == 10) break; else $i$0$i335 = $2008;
         }
         if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $s8$0$lcssa$i, $i$0$i335) | 0) >>> 0 < $i$0$i335 >>> 0) break L839;
         $$01$i340 = $1983 - $i$0$i335 | 0;
         $$02$i339 = $2010 + $2008 | 0;
         $2018 = HEAP32[$23 >> 2] | 0;
        } else {
         $$01$i340 = $1983;
         $$02$i339 = $s8$0$lcssa$i;
         $2018 = $2001;
        } while (0);
        _memcpy($2018 | 0, $$02$i339 | 0, $$01$i340 | 0) | 0;
        HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i340;
       } while (0);
       $2021 = $2022 + 8 | 0;
       $2023 = $$418193$i + -9 | 0;
       if ($2021 >>> 0 < $z$6$i >>> 0 & ($2023 | 0) > 0) {
        $2022$phi = $d$5192$i;
        $$418193$i = $2023;
        $d$5192$i = $2021;
        $2022 = $2022$phi;
       } else {
        $$418$lcssa$i = $2023;
        break;
       }
      }
     } else $$418$lcssa$i = $$317$i;
     if (($$418$lcssa$i | 0) <= 0) break;
     _memset($pad$i | 0, 48, ($$418$lcssa$i >>> 0 > 256 ? 256 : $$418$lcssa$i) | 0) | 0;
     if ($$418$lcssa$i >>> 0 > 255) {
      $$01$i134$i = $$418$lcssa$i;
      do {
       $2030 = HEAP32[$17 >> 2] | 0;
       do if (!$2030) {
        $2033 = HEAP8[$18 >> 0] | 0;
        HEAP8[$18 >> 0] = $2033 + 255 | $2033;
        $2037 = HEAP32[$f >> 2] | 0;
        if (!($2037 & 8)) {
         HEAP32[$19 >> 2] = 0;
         HEAP32[$20 >> 2] = 0;
         $2041 = HEAP32[$21 >> 2] | 0;
         HEAP32[$22 >> 2] = $2041;
         HEAP32[$23 >> 2] = $2041;
         $2043 = $2041 + (HEAP32[$24 >> 2] | 0) | 0;
         HEAP32[$17 >> 2] = $2043;
         $2045 = $2043;
         $2047 = $2041;
         label = 697;
         break;
        } else {
         HEAP32[$f >> 2] = $2037 | 32;
         break;
        }
       } else {
        $2045 = $2030;
        $2047 = HEAP32[$23 >> 2] | 0;
        label = 697;
       } while (0);
       L863 : do if ((label | 0) == 697) {
        label = 0;
        if (($2045 - $2047 | 0) >>> 0 < 256) {
         FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
         break;
        }
        L868 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
         $i$0$i346 = 256;
         while (1) {
          if (!$i$0$i346) {
           $$01$i351 = 256;
           $$02$i350 = $pad$i;
           $2063 = $2047;
           break L868;
          }
          $2054 = $i$0$i346 + -1 | 0;
          if ((HEAP8[$pad$i + $2054 >> 0] | 0) == 10) break; else $i$0$i346 = $2054;
         }
         if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i346) | 0) >>> 0 < $i$0$i346 >>> 0) break L863;
         $$01$i351 = 256 - $i$0$i346 | 0;
         $$02$i350 = $pad$i + $i$0$i346 | 0;
         $2063 = HEAP32[$23 >> 2] | 0;
        } else {
         $$01$i351 = 256;
         $$02$i350 = $pad$i;
         $2063 = $2047;
        } while (0);
        _memcpy($2063 | 0, $$02$i350 | 0, $$01$i351 | 0) | 0;
        HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i351;
       } while (0);
       $$01$i134$i = $$01$i134$i + -256 | 0;
      } while ($$01$i134$i >>> 0 > 255);
      $$0$lcssa$i136$i = $$418$lcssa$i & 255;
     } else $$0$lcssa$i136$i = $$418$lcssa$i;
     $2069 = HEAP32[$17 >> 2] | 0;
     do if (!$2069) {
      $2072 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $2072 + 255 | $2072;
      $2076 = HEAP32[$f >> 2] | 0;
      if (!($2076 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $2080 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $2080;
       HEAP32[$23 >> 2] = $2080;
       $2082 = $2080 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $2082;
       $2084 = $2082;
       $2086 = $2080;
       break;
      } else {
       HEAP32[$f >> 2] = $2076 | 32;
       break L772;
      }
     } else {
      $2084 = $2069;
      $2086 = HEAP32[$23 >> 2] | 0;
     } while (0);
     if (($2084 - $2086 | 0) >>> 0 < $$0$lcssa$i136$i >>> 0) {
      FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i136$i) | 0;
      break;
     }
     L888 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
      $i$0$i357 = $$0$lcssa$i136$i;
      while (1) {
       if (!$i$0$i357) {
        $$01$i362 = $$0$lcssa$i136$i;
        $$02$i361 = $pad$i;
        $2102 = $2086;
        break L888;
       }
       $2093 = $i$0$i357 + -1 | 0;
       if ((HEAP8[$pad$i + $2093 >> 0] | 0) == 10) break; else $i$0$i357 = $2093;
      }
      if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i357) | 0) >>> 0 < $i$0$i357 >>> 0) break L772;
      $$01$i362 = $$0$lcssa$i136$i - $i$0$i357 | 0;
      $$02$i361 = $pad$i + $i$0$i357 | 0;
      $2102 = HEAP32[$23 >> 2] | 0;
     } else {
      $$01$i362 = $$0$lcssa$i136$i;
      $$02$i361 = $pad$i;
      $2102 = $2086;
     } while (0);
     _memcpy($2102 | 0, $$02$i361 | 0, $$01$i362 | 0) | 0;
     HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i362;
    } else {
     $z$6$$i = $$lcssa283$i ? $z$6$i : $a$8$ph$i + 4 | 0;
     L896 : do if (($$317$i | 0) > -1) {
      $2108 = ($fl$1$ & 8 | 0) == 0;
      $$5205$i = $$317$i;
      $d$6204$i = $a$8$ph$i;
      do {
       $2109 = HEAP32[$d$6204$i >> 2] | 0;
       if (!$2109) label = 725; else {
        $$12$i142$i = $14;
        $y$03$i141$i = $2109;
        while (1) {
         $2114 = $$12$i142$i + -1 | 0;
         HEAP8[$2114 >> 0] = ($y$03$i141$i >>> 0) % 10 | 0 | 48;
         if ($y$03$i141$i >>> 0 < 10) break; else {
          $$12$i142$i = $2114;
          $y$03$i141$i = ($y$03$i141$i >>> 0) / 10 | 0;
         }
        }
        if (($2114 | 0) == ($14 | 0)) label = 725; else {
         $2894 = $$12$i142$i;
         $s9$0$i = $2114;
        }
       }
       if ((label | 0) == 725) {
        label = 0;
        HEAP8[$16 >> 0] = 48;
        $2894 = $14;
        $s9$0$i = $16;
       }
       L907 : do if (($d$6204$i | 0) == ($a$8$ph$i | 0)) {
        $2122 = HEAP32[$17 >> 2] | 0;
        do if (!$2122) {
         $2125 = HEAP8[$18 >> 0] | 0;
         HEAP8[$18 >> 0] = $2125 + 255 | $2125;
         $2129 = HEAP32[$f >> 2] | 0;
         if (!($2129 & 8)) {
          HEAP32[$19 >> 2] = 0;
          HEAP32[$20 >> 2] = 0;
          $2133 = HEAP32[$21 >> 2] | 0;
          HEAP32[$22 >> 2] = $2133;
          HEAP32[$23 >> 2] = $2133;
          $2135 = $2133 + (HEAP32[$24 >> 2] | 0) | 0;
          HEAP32[$17 >> 2] = $2135;
          $2137 = $2135;
          $2138 = $2133;
          label = 734;
          break;
         } else {
          HEAP32[$f >> 2] = $2129 | 32;
          break;
         }
        } else {
         $2137 = $2122;
         $2138 = HEAP32[$23 >> 2] | 0;
         label = 734;
        } while (0);
        L918 : do if ((label | 0) == 734) {
         label = 0;
         if (($2137 | 0) == ($2138 | 0)) {
          FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $s9$0$i, 1) | 0;
          break;
         }
         L923 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
          $i$0$i368 = 1;
          while (1) {
           if (!$i$0$i368) {
            $$01$i373 = 1;
            $$02$i372 = $s9$0$i;
            $2152 = $2138;
            break L923;
           }
           $2143 = $i$0$i368 + -1 | 0;
           if ((HEAP8[$s9$0$i + $2143 >> 0] | 0) == 10) break; else $i$0$i368 = $2143;
          }
          if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $s9$0$i, $i$0$i368) | 0) >>> 0 < $i$0$i368 >>> 0) break L918;
          $$01$i373 = 1 - $i$0$i368 | 0;
          $$02$i372 = $s9$0$i + $i$0$i368 | 0;
          $2152 = HEAP32[$23 >> 2] | 0;
         } else {
          $$01$i373 = 1;
          $$02$i372 = $s9$0$i;
          $2152 = $2138;
         } while (0);
         _memcpy($2152 | 0, $$02$i372 | 0, $$01$i373 | 0) | 0;
         HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i373;
        } while (0);
        if (($$5205$i | 0) < 1 & $2108) {
         $s9$2$i = $2894;
         break;
        }
        $2156 = HEAP32[$17 >> 2] | 0;
        do if (!$2156) {
         $2159 = HEAP8[$18 >> 0] | 0;
         HEAP8[$18 >> 0] = $2159 + 255 | $2159;
         $2163 = HEAP32[$f >> 2] | 0;
         if (!($2163 & 8)) {
          HEAP32[$19 >> 2] = 0;
          HEAP32[$20 >> 2] = 0;
          $2167 = HEAP32[$21 >> 2] | 0;
          HEAP32[$22 >> 2] = $2167;
          HEAP32[$23 >> 2] = $2167;
          $2169 = $2167 + (HEAP32[$24 >> 2] | 0) | 0;
          HEAP32[$17 >> 2] = $2169;
          $2171 = $2169;
          $2172 = $2167;
          break;
         } else {
          HEAP32[$f >> 2] = $2163 | 32;
          $s9$2$i = $2894;
          break L907;
         }
        } else {
         $2171 = $2156;
         $2172 = HEAP32[$23 >> 2] | 0;
        } while (0);
        if (($2171 | 0) == ($2172 | 0)) {
         FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, 64424, 1) | 0;
         $s9$2$i = $2894;
         break;
        } else {
         HEAP8[$2172 >> 0] = 46;
         HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 1;
         $s9$2$i = $2894;
         break;
        }
       } else {
        if ($s9$0$i >>> 0 > $buf$i >>> 0) $s9$1200$i = $s9$0$i; else {
         $s9$2$i = $s9$0$i;
         break;
        }
        while (1) {
         $2120 = $s9$1200$i + -1 | 0;
         HEAP8[$2120 >> 0] = 48;
         if ($2120 >>> 0 > $buf$i >>> 0) $s9$1200$i = $2120; else {
          $s9$2$i = $2120;
          break;
         }
        }
       } while (0);
       $2177 = $15 - $s9$2$i | 0;
       $$$5$i = ($$5205$i | 0) > ($2177 | 0) ? $2177 : $$5205$i;
       $2179 = HEAP32[$17 >> 2] | 0;
       do if (!$2179) {
        $2182 = HEAP8[$18 >> 0] | 0;
        HEAP8[$18 >> 0] = $2182 + 255 | $2182;
        $2186 = HEAP32[$f >> 2] | 0;
        if (!($2186 & 8)) {
         HEAP32[$19 >> 2] = 0;
         HEAP32[$20 >> 2] = 0;
         $2190 = HEAP32[$21 >> 2] | 0;
         HEAP32[$22 >> 2] = $2190;
         HEAP32[$23 >> 2] = $2190;
         $2192 = $2190 + (HEAP32[$24 >> 2] | 0) | 0;
         HEAP32[$17 >> 2] = $2192;
         $2194 = $2192;
         $2196 = $2190;
         label = 756;
         break;
        } else {
         HEAP32[$f >> 2] = $2186 | 32;
         break;
        }
       } else {
        $2194 = $2179;
        $2196 = HEAP32[$23 >> 2] | 0;
        label = 756;
       } while (0);
       L949 : do if ((label | 0) == 756) {
        label = 0;
        if (($2194 - $2196 | 0) >>> 0 < $$$5$i >>> 0) {
         FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $s9$2$i, $$$5$i) | 0;
         break;
        }
        L954 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
         $i$0$i390 = $$$5$i;
         while (1) {
          if (!$i$0$i390) {
           $$01$i395 = $$$5$i;
           $$02$i394 = $s9$2$i;
           $2212 = $2196;
           break L954;
          }
          $2203 = $i$0$i390 + -1 | 0;
          if ((HEAP8[$s9$2$i + $2203 >> 0] | 0) == 10) break; else $i$0$i390 = $2203;
         }
         if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $s9$2$i, $i$0$i390) | 0) >>> 0 < $i$0$i390 >>> 0) break L949;
         $$01$i395 = $$$5$i - $i$0$i390 | 0;
         $$02$i394 = $s9$2$i + $i$0$i390 | 0;
         $2212 = HEAP32[$23 >> 2] | 0;
        } else {
         $$01$i395 = $$$5$i;
         $$02$i394 = $s9$2$i;
         $2212 = $2196;
        } while (0);
        _memcpy($2212 | 0, $$02$i394 | 0, $$01$i395 | 0) | 0;
        HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i395;
       } while (0);
       $$5205$i = $$5205$i - $2177 | 0;
       $d$6204$i = $d$6204$i + 4 | 0;
      } while ($d$6204$i >>> 0 < $z$6$$i >>> 0 & ($$5205$i | 0) > -1);
      if (($$5205$i | 0) <= 0) break;
      _memset($pad$i | 0, 48, ($$5205$i >>> 0 > 256 ? 256 : $$5205$i) | 0) | 0;
      if ($$5205$i >>> 0 > 255) {
       $$01$i149$i = $$5205$i;
       do {
        $2223 = HEAP32[$17 >> 2] | 0;
        do if (!$2223) {
         $2226 = HEAP8[$18 >> 0] | 0;
         HEAP8[$18 >> 0] = $2226 + 255 | $2226;
         $2230 = HEAP32[$f >> 2] | 0;
         if (!($2230 & 8)) {
          HEAP32[$19 >> 2] = 0;
          HEAP32[$20 >> 2] = 0;
          $2234 = HEAP32[$21 >> 2] | 0;
          HEAP32[$22 >> 2] = $2234;
          HEAP32[$23 >> 2] = $2234;
          $2236 = $2234 + (HEAP32[$24 >> 2] | 0) | 0;
          HEAP32[$17 >> 2] = $2236;
          $2238 = $2236;
          $2240 = $2234;
          label = 772;
          break;
         } else {
          HEAP32[$f >> 2] = $2230 | 32;
          break;
         }
        } else {
         $2238 = $2223;
         $2240 = HEAP32[$23 >> 2] | 0;
         label = 772;
        } while (0);
        L973 : do if ((label | 0) == 772) {
         label = 0;
         if (($2238 - $2240 | 0) >>> 0 < 256) {
          FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
          break;
         }
         L978 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
          $i$0$i401 = 256;
          while (1) {
           if (!$i$0$i401) {
            $$01$i406 = 256;
            $$02$i405 = $pad$i;
            $2256 = $2240;
            break L978;
           }
           $2247 = $i$0$i401 + -1 | 0;
           if ((HEAP8[$pad$i + $2247 >> 0] | 0) == 10) break; else $i$0$i401 = $2247;
          }
          if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i401) | 0) >>> 0 < $i$0$i401 >>> 0) break L973;
          $$01$i406 = 256 - $i$0$i401 | 0;
          $$02$i405 = $pad$i + $i$0$i401 | 0;
          $2256 = HEAP32[$23 >> 2] | 0;
         } else {
          $$01$i406 = 256;
          $$02$i405 = $pad$i;
          $2256 = $2240;
         } while (0);
         _memcpy($2256 | 0, $$02$i405 | 0, $$01$i406 | 0) | 0;
         HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i406;
        } while (0);
        $$01$i149$i = $$01$i149$i + -256 | 0;
       } while ($$01$i149$i >>> 0 > 255);
       $$0$lcssa$i151$i = $$5205$i & 255;
      } else $$0$lcssa$i151$i = $$5205$i;
      $2262 = HEAP32[$17 >> 2] | 0;
      do if (!$2262) {
       $2265 = HEAP8[$18 >> 0] | 0;
       HEAP8[$18 >> 0] = $2265 + 255 | $2265;
       $2269 = HEAP32[$f >> 2] | 0;
       if (!($2269 & 8)) {
        HEAP32[$19 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        $2273 = HEAP32[$21 >> 2] | 0;
        HEAP32[$22 >> 2] = $2273;
        HEAP32[$23 >> 2] = $2273;
        $2275 = $2273 + (HEAP32[$24 >> 2] | 0) | 0;
        HEAP32[$17 >> 2] = $2275;
        $2277 = $2275;
        $2279 = $2273;
        break;
       } else {
        HEAP32[$f >> 2] = $2269 | 32;
        break L896;
       }
      } else {
       $2277 = $2262;
       $2279 = HEAP32[$23 >> 2] | 0;
      } while (0);
      if (($2277 - $2279 | 0) >>> 0 < $$0$lcssa$i151$i >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i151$i) | 0;
       break;
      }
      L998 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i412 = $$0$lcssa$i151$i;
       while (1) {
        if (!$i$0$i412) {
         $$01$i417 = $$0$lcssa$i151$i;
         $$02$i416 = $pad$i;
         $2295 = $2279;
         break L998;
        }
        $2286 = $i$0$i412 + -1 | 0;
        if ((HEAP8[$pad$i + $2286 >> 0] | 0) == 10) break; else $i$0$i412 = $2286;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i412) | 0) >>> 0 < $i$0$i412 >>> 0) break L896;
       $$01$i417 = $$0$lcssa$i151$i - $i$0$i412 | 0;
       $$02$i416 = $pad$i + $i$0$i412 | 0;
       $2295 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i417 = $$0$lcssa$i151$i;
       $$02$i416 = $pad$i;
       $2295 = $2279;
      } while (0);
      _memcpy($2295 | 0, $$02$i416 | 0, $$01$i417 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i417;
     } while (0);
     $2299 = $9 - $estr$2$i | 0;
     $2300 = HEAP32[$17 >> 2] | 0;
     do if (!$2300) {
      $2303 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $2303 + 255 | $2303;
      $2307 = HEAP32[$f >> 2] | 0;
      if (!($2307 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $2311 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $2311;
       HEAP32[$23 >> 2] = $2311;
       $2313 = $2311 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $2313;
       $2315 = $2313;
       $2317 = $2311;
       break;
      } else {
       HEAP32[$f >> 2] = $2307 | 32;
       break L772;
      }
     } else {
      $2315 = $2300;
      $2317 = HEAP32[$23 >> 2] | 0;
     } while (0);
     if (($2315 - $2317 | 0) >>> 0 < $2299 >>> 0) {
      FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $estr$2$i, $2299) | 0;
      break;
     }
     L1016 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
      $i$0$i423 = $2299;
      while (1) {
       if (!$i$0$i423) {
        $$01$i428 = $2299;
        $$02$i427 = $estr$2$i;
        $2333 = $2317;
        break L1016;
       }
       $2324 = $i$0$i423 + -1 | 0;
       if ((HEAP8[$estr$2$i + $2324 >> 0] | 0) == 10) break; else $i$0$i423 = $2324;
      }
      if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $estr$2$i, $i$0$i423) | 0) >>> 0 < $i$0$i423 >>> 0) break L772;
      $$01$i428 = $2299 - $i$0$i423 | 0;
      $$02$i427 = $estr$2$i + $i$0$i423 | 0;
      $2333 = HEAP32[$23 >> 2] | 0;
     } else {
      $$01$i428 = $2299;
      $$02$i427 = $estr$2$i;
      $2333 = $2317;
     } while (0);
     _memcpy($2333 | 0, $$02$i427 | 0, $$01$i428 | 0) | 0;
     HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i428;
    } while (0);
    L1024 : do if (($1682 | 0) == 8192 & $1684) {
     $2337 = $w$1 - $1681 | 0;
     _memset($pad$i | 0, 32, ($2337 >>> 0 > 256 ? 256 : $2337) | 0) | 0;
     if ($2337 >>> 0 > 255) {
      $$01$i$i = $2337;
      do {
       $2341 = HEAP32[$17 >> 2] | 0;
       do if (!$2341) {
        $2344 = HEAP8[$18 >> 0] | 0;
        HEAP8[$18 >> 0] = $2344 + 255 | $2344;
        $2348 = HEAP32[$f >> 2] | 0;
        if (!($2348 & 8)) {
         HEAP32[$19 >> 2] = 0;
         HEAP32[$20 >> 2] = 0;
         $2352 = HEAP32[$21 >> 2] | 0;
         HEAP32[$22 >> 2] = $2352;
         HEAP32[$23 >> 2] = $2352;
         $2354 = $2352 + (HEAP32[$24 >> 2] | 0) | 0;
         HEAP32[$17 >> 2] = $2354;
         $2356 = $2354;
         $2358 = $2352;
         label = 815;
         break;
        } else {
         HEAP32[$f >> 2] = $2348 | 32;
         break;
        }
       } else {
        $2356 = $2341;
        $2358 = HEAP32[$23 >> 2] | 0;
        label = 815;
       } while (0);
       L1035 : do if ((label | 0) == 815) {
        label = 0;
        if (($2356 - $2358 | 0) >>> 0 < 256) {
         FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
         break;
        }
        L1040 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
         $i$0$i434 = 256;
         while (1) {
          if (!$i$0$i434) {
           $$01$i439 = 256;
           $$02$i438 = $pad$i;
           $2374 = $2358;
           break L1040;
          }
          $2365 = $i$0$i434 + -1 | 0;
          if ((HEAP8[$pad$i + $2365 >> 0] | 0) == 10) break; else $i$0$i434 = $2365;
         }
         if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i434) | 0) >>> 0 < $i$0$i434 >>> 0) break L1035;
         $$01$i439 = 256 - $i$0$i434 | 0;
         $$02$i438 = $pad$i + $i$0$i434 | 0;
         $2374 = HEAP32[$23 >> 2] | 0;
        } else {
         $$01$i439 = 256;
         $$02$i438 = $pad$i;
         $2374 = $2358;
        } while (0);
        _memcpy($2374 | 0, $$02$i438 | 0, $$01$i439 | 0) | 0;
        HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i439;
       } while (0);
       $$01$i$i = $$01$i$i + -256 | 0;
      } while ($$01$i$i >>> 0 > 255);
      $$0$lcssa$i$i = $2337 & 255;
     } else $$0$lcssa$i$i = $2337;
     $2380 = HEAP32[$17 >> 2] | 0;
     do if (!$2380) {
      $2383 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $2383 + 255 | $2383;
      $2387 = HEAP32[$f >> 2] | 0;
      if (!($2387 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $2391 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $2391;
       HEAP32[$23 >> 2] = $2391;
       $2393 = $2391 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $2393;
       $2395 = $2393;
       $2397 = $2391;
       break;
      } else {
       HEAP32[$f >> 2] = $2387 | 32;
       break L1024;
      }
     } else {
      $2395 = $2380;
      $2397 = HEAP32[$23 >> 2] | 0;
     } while (0);
     if (($2395 - $2397 | 0) >>> 0 < $$0$lcssa$i$i >>> 0) {
      FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i$i) | 0;
      break;
     }
     L1060 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
      $i$0$i445 = $$0$lcssa$i$i;
      while (1) {
       if (!$i$0$i445) {
        $$01$i450 = $$0$lcssa$i$i;
        $$02$i449 = $pad$i;
        $2413 = $2397;
        break L1060;
       }
       $2404 = $i$0$i445 + -1 | 0;
       if ((HEAP8[$pad$i + $2404 >> 0] | 0) == 10) break; else $i$0$i445 = $2404;
      }
      if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i445) | 0) >>> 0 < $i$0$i445 >>> 0) break L1024;
      $$01$i450 = $$0$lcssa$i$i - $i$0$i445 | 0;
      $$02$i449 = $pad$i + $i$0$i445 | 0;
      $2413 = HEAP32[$23 >> 2] | 0;
     } else {
      $$01$i450 = $$0$lcssa$i$i;
      $$02$i449 = $pad$i;
      $2413 = $2397;
     } while (0);
     _memcpy($2413 | 0, $$02$i449 | 0, $$01$i450 | 0) | 0;
     HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i450;
    } while (0);
    $2880 = $238;
    $2881 = $265;
    $cnt$0 = $cnt$1;
    $fmt90 = $178;
    $l$0 = $1684 ? $w$1 : $1681;
    $l10n$0 = $l10n$3;
    continue L1;
    break;
   }
  case 88:
  case 120:
   {
    $fl$3 = $fl$1$;
    $p$1 = $p$0;
    $t$1 = $t$0;
    label = 85;
    break;
   }
  case 110:
   {
    switch ($st$0 | 0) {
    case 6:
     {
      HEAP32[$238 >> 2] = $cnt$1;
      $2880 = $238;
      $2881 = $265;
      $cnt$0 = $cnt$1;
      $fmt90 = $178;
      $l$0 = $45;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[$238 >> 0] = $cnt$1;
      $2880 = $238;
      $2881 = $265;
      $cnt$0 = $cnt$1;
      $fmt90 = $178;
      $l$0 = $45;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 0:
     {
      HEAP32[$238 >> 2] = $cnt$1;
      $2880 = $238;
      $2881 = $265;
      $cnt$0 = $cnt$1;
      $fmt90 = $178;
      $l$0 = $45;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[$238 >> 2] = $cnt$1;
      $2880 = $238;
      $2881 = $265;
      $cnt$0 = $cnt$1;
      $fmt90 = $178;
      $l$0 = $45;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 2:
     {
      $243 = $238;
      HEAP32[$243 >> 2] = $cnt$1;
      HEAP32[$243 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $2880 = $238;
      $2881 = $265;
      $cnt$0 = $cnt$1;
      $fmt90 = $178;
      $l$0 = $45;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[$238 >> 1] = $cnt$1;
      $2880 = $238;
      $2881 = $265;
      $cnt$0 = $cnt$1;
      $fmt90 = $178;
      $l$0 = $45;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 7:
     {
      $255 = $238;
      HEAP32[$255 >> 2] = $cnt$1;
      HEAP32[$255 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $2880 = $238;
      $2881 = $265;
      $cnt$0 = $cnt$1;
      $fmt90 = $178;
      $l$0 = $45;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    default:
     {
      $2880 = $238;
      $2881 = $265;
      $cnt$0 = $cnt$1;
      $fmt90 = $178;
      $l$0 = $45;
      $l10n$0 = $l10n$3;
      continue L1;
     }
    }
    break;
   }
  default:
   {
    $2888 = $238;
    $2889 = $265;
    $a$2 = $fmt90;
    $fl$6 = $fl$1$;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 64328;
    $z$2 = $2;
   }
  } while (0);
  do if ((label | 0) == 85) {
   label = 0;
   $262 = $t$1 & 32;
   if (($238 | 0) == 0 & ($265 | 0) == 0) {
    $340 = $238;
    $342 = $265;
    $a$0 = $2;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = 0;
    $prefix$1 = 64328;
    label = 101;
   } else {
    $$012$i = $2;
    $268 = $238;
    $275 = $265;
    do {
     $$012$i = $$012$i + -1 | 0;
     HEAP8[$$012$i >> 0] = HEAPU8[64408 + ($268 & 15) >> 0] | $262;
     $268 = _bitshift64Lshr($268 | 0, $275 | 0, 4) | 0;
     $275 = tempRet0;
    } while (!(($268 | 0) == 0 & ($275 | 0) == 0));
    if (!($fl$3 & 8)) {
     $340 = $238;
     $342 = $265;
     $a$0 = $$012$i;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 64328;
     label = 101;
    } else {
     $340 = $238;
     $342 = $265;
     $a$0 = $$012$i;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 2;
     $prefix$1 = 64328 + ($t$1 >> 4) | 0;
     label = 101;
    }
   }
  } else if ((label | 0) == 96) {
   label = 0;
   if ($310 >>> 0 > 0 | ($310 | 0) == 0 & $312 >>> 0 > 4294967295) {
    $$05$i = $2;
    $316 = $312;
    $317 = $310;
    while (1) {
     $318 = ___uremdi3($316 | 0, $317 | 0, 10, 0) | 0;
     $$05$i = $$05$i + -1 | 0;
     HEAP8[$$05$i >> 0] = $318 | 48;
     $316$looptemp = $316;
     $316 = ___udivdi3($316 | 0, $317 | 0, 10, 0) | 0;
     if (!($317 >>> 0 > 9 | ($317 | 0) == 9 & $316$looptemp >>> 0 > 4294967295)) break; else $317 = tempRet0;
    }
    $$0$lcssa$i54 = $$05$i;
    $$01$lcssa$off0$i = $316;
   } else {
    $$0$lcssa$i54 = $2;
    $$01$lcssa$off0$i = $312;
   }
   if (!$$01$lcssa$off0$i) {
    $340 = $312;
    $342 = $310;
    $a$0 = $$0$lcssa$i54;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 101;
   } else {
    $$12$i = $$0$lcssa$i54;
    $y$03$i = $$01$lcssa$off0$i;
    while (1) {
     $334 = $$12$i + -1 | 0;
     HEAP8[$334 >> 0] = ($y$03$i >>> 0) % 10 | 0 | 48;
     if ($y$03$i >>> 0 < 10) {
      $340 = $312;
      $342 = $310;
      $a$0 = $334;
      $fl$4 = $fl$1$;
      $p$2 = $p$0;
      $pl$1 = $pl$0;
      $prefix$1 = $prefix$0;
      label = 101;
      break;
     } else {
      $$12$i = $334;
      $y$03$i = ($y$03$i >>> 0) / 10 | 0;
     }
    }
   }
  } else if ((label | 0) == 106) {
   label = 0;
   $357 = $a$1;
   $360 = ($p$0 | 0) != 0;
   L1079 : do if (($357 & 3 | 0) != 0 & $360) {
    $$019$i4 = $p$0;
    $s$020$i = $a$1;
    while (1) {
     if (!(HEAP8[$s$020$i >> 0] | 0)) {
      $$3$i10 = $$019$i4;
      $s$2$i = $s$020$i;
      break L1079;
     }
     $363 = $s$020$i + 1 | 0;
     $364 = $$019$i4 + -1 | 0;
     $368 = ($364 | 0) != 0;
     if (($363 & 3 | 0) != 0 & $368) {
      $$019$i4 = $364;
      $s$020$i = $363;
     } else {
      $$0$lcssa$i6 = $364;
      $$lcssa$i = $368;
      $s$0$lcssa$i = $363;
      label = 109;
      break;
     }
    }
   } else {
    $$0$lcssa$i6 = $p$0;
    $$lcssa$i = $360;
    $s$0$lcssa$i = $a$1;
    label = 109;
   } while (0);
   L1083 : do if ((label | 0) == 109) {
    label = 0;
    if ($$lcssa$i) if (!(HEAP8[$s$0$lcssa$i >> 0] | 0)) {
     $$3$i10 = $$0$lcssa$i6;
     $s$2$i = $s$0$lcssa$i;
    } else {
     L1087 : do if ($$0$lcssa$i6 >>> 0 > 3) {
      $$110$i = $$0$lcssa$i6;
      $w$011$i = $s$0$lcssa$i;
      while (1) {
       $370 = HEAP32[$w$011$i >> 2] | 0;
       if (($370 & -2139062144 ^ -2139062144) & $370 + -16843009) {
        $$1$lcssa$i = $$110$i;
        $w$0$lcssa$i = $w$011$i;
        break L1087;
       }
       $376 = $w$011$i + 4 | 0;
       $377 = $$110$i + -4 | 0;
       if ($377 >>> 0 > 3) {
        $$110$i = $377;
        $w$011$i = $376;
       } else {
        $$1$lcssa$i = $377;
        $w$0$lcssa$i = $376;
        break;
       }
      }
     } else {
      $$1$lcssa$i = $$0$lcssa$i6;
      $w$0$lcssa$i = $s$0$lcssa$i;
     } while (0);
     if (!$$1$lcssa$i) {
      $$3$i10 = 0;
      $s$2$i = $w$0$lcssa$i;
     } else {
      $$24$i = $$1$lcssa$i;
      $s$15$i = $w$0$lcssa$i;
      while (1) {
       if (!(HEAP8[$s$15$i >> 0] | 0)) {
        $$3$i10 = $$24$i;
        $s$2$i = $s$15$i;
        break L1083;
       }
       $382 = $s$15$i + 1 | 0;
       $$24$i = $$24$i + -1 | 0;
       if (!$$24$i) {
        $$3$i10 = 0;
        $s$2$i = $382;
        break;
       } else $s$15$i = $382;
      }
     }
    } else {
     $$3$i10 = 0;
     $s$2$i = $s$0$lcssa$i;
    }
   } while (0);
   $386 = ($$3$i10 | 0) != 0 ? $s$2$i : 0;
   if (!$386) {
    $2888 = $238;
    $2889 = $265;
    $a$2 = $a$1;
    $fl$6 = $236;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 64328;
    $z$2 = $a$1 + $p$0 | 0;
    break;
   } else {
    $2888 = $238;
    $2889 = $265;
    $a$2 = $a$1;
    $fl$6 = $236;
    $p$5 = $386 - $357 | 0;
    $pl$2 = 0;
    $prefix$2 = 64328;
    $z$2 = $386;
    break;
   }
  } else if ((label | 0) == 122) {
   label = 0;
   $i$0180 = 0;
   $l$1179 = 0;
   $ws$0181 = $2890;
   while (1) {
    $393 = HEAP32[$ws$0181 >> 2] | 0;
    if (!$393) {
     $i$0$lcssa = $i$0180;
     $l$2 = $l$1179;
     break;
    }
    $395 = _wcrtomb($mb, $393) | 0;
    if (($395 | 0) < 0 | $395 >>> 0 > ($p$4274 - $i$0180 | 0) >>> 0) {
     $i$0$lcssa = $i$0180;
     $l$2 = $395;
     break;
    }
    $400 = $395 + $i$0180 | 0;
    if ($p$4274 >>> 0 > $400 >>> 0) {
     $i$0180 = $400;
     $l$1179 = $395;
     $ws$0181 = $ws$0181 + 4 | 0;
    } else {
     $i$0$lcssa = $400;
     $l$2 = $395;
     break;
    }
   }
   if (($l$2 | 0) < 0) {
    $$0 = -1;
    label = 994;
    break L1;
   } else {
    $2892 = $2891;
    $2893 = $2890;
    $i$0$lcssa275 = $i$0$lcssa;
    label = 127;
   }
  } while (0);
  if ((label | 0) == 101) {
   label = 0;
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
   $343 = ($340 | 0) != 0 | ($342 | 0) != 0;
   if ($343 | ($p$2 | 0) != 0) {
    $349 = ($343 & 1 ^ 1) + ($3 - $a$0) | 0;
    $2888 = $340;
    $2889 = $342;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = ($p$2 | 0) > ($349 | 0) ? $p$2 : $349;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $2;
   } else {
    $2888 = $340;
    $2889 = $342;
    $a$2 = $2;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $2;
   }
  } else if ((label | 0) == 127) {
   label = 0;
   $403 = $fl$1$ & 73728;
   $405 = ($w$1 | 0) > ($i$0$lcssa275 | 0);
   L1122 : do if (($403 | 0) == 0 & $405) {
    $406 = $w$1 - $i$0$lcssa275 | 0;
    _memset($pad$i | 0, 32, ($406 >>> 0 > 256 ? 256 : $406) | 0) | 0;
    if ($406 >>> 0 > 255) {
     $$01$i67 = $406;
     do {
      $410 = HEAP32[$17 >> 2] | 0;
      do if (!$410) {
       $413 = HEAP8[$18 >> 0] | 0;
       HEAP8[$18 >> 0] = $413 + 255 | $413;
       $417 = HEAP32[$f >> 2] | 0;
       if (!($417 & 8)) {
        HEAP32[$19 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        $421 = HEAP32[$21 >> 2] | 0;
        HEAP32[$22 >> 2] = $421;
        HEAP32[$23 >> 2] = $421;
        $423 = $421 + (HEAP32[$24 >> 2] | 0) | 0;
        HEAP32[$17 >> 2] = $423;
        $426 = $423;
        label = 133;
        break;
       } else {
        HEAP32[$f >> 2] = $417 | 32;
        break;
       }
      } else {
       $426 = $410;
       label = 133;
      } while (0);
      L1132 : do if ((label | 0) == 133) {
       label = 0;
       $424 = HEAP32[$23 >> 2] | 0;
       if (($426 - $424 | 0) >>> 0 < 256) {
        FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
        break;
       }
       L1137 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
        $i$0$i15 = 256;
        while (1) {
         if (!$i$0$i15) {
          $$01$i20 = 256;
          $$02$i19 = $pad$i;
          $443 = $424;
          break L1137;
         }
         $434 = $i$0$i15 + -1 | 0;
         if ((HEAP8[$pad$i + $434 >> 0] | 0) == 10) break; else $i$0$i15 = $434;
        }
        if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i15) | 0) >>> 0 < $i$0$i15 >>> 0) break L1132;
        $$01$i20 = 256 - $i$0$i15 | 0;
        $$02$i19 = $pad$i + $i$0$i15 | 0;
        $443 = HEAP32[$23 >> 2] | 0;
       } else {
        $$01$i20 = 256;
        $$02$i19 = $pad$i;
        $443 = $424;
       } while (0);
       _memcpy($443 | 0, $$02$i19 | 0, $$01$i20 | 0) | 0;
       HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i20;
      } while (0);
      $$01$i67 = $$01$i67 + -256 | 0;
     } while ($$01$i67 >>> 0 > 255);
     $$0$lcssa$i69 = $406 & 255;
    } else $$0$lcssa$i69 = $406;
    $449 = HEAP32[$17 >> 2] | 0;
    do if (!$449) {
     $452 = HEAP8[$18 >> 0] | 0;
     HEAP8[$18 >> 0] = $452 + 255 | $452;
     $456 = HEAP32[$f >> 2] | 0;
     if (!($456 & 8)) {
      HEAP32[$19 >> 2] = 0;
      HEAP32[$20 >> 2] = 0;
      $460 = HEAP32[$21 >> 2] | 0;
      HEAP32[$22 >> 2] = $460;
      HEAP32[$23 >> 2] = $460;
      $462 = $460 + (HEAP32[$24 >> 2] | 0) | 0;
      HEAP32[$17 >> 2] = $462;
      $465 = $462;
      break;
     } else {
      HEAP32[$f >> 2] = $456 | 32;
      break L1122;
     }
    } else $465 = $449; while (0);
    $463 = HEAP32[$23 >> 2] | 0;
    if (($465 - $463 | 0) >>> 0 < $$0$lcssa$i69 >>> 0) {
     FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i69) | 0;
     break;
    }
    L1156 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
     $i$0$i26 = $$0$lcssa$i69;
     while (1) {
      if (!$i$0$i26) {
       $$01$i31 = $$0$lcssa$i69;
       $$02$i30 = $pad$i;
       $482 = $463;
       break L1156;
      }
      $473 = $i$0$i26 + -1 | 0;
      if ((HEAP8[$pad$i + $473 >> 0] | 0) == 10) break; else $i$0$i26 = $473;
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i26) | 0) >>> 0 < $i$0$i26 >>> 0) break L1122;
     $$01$i31 = $$0$lcssa$i69 - $i$0$i26 | 0;
     $$02$i30 = $pad$i + $i$0$i26 | 0;
     $482 = HEAP32[$23 >> 2] | 0;
    } else {
     $$01$i31 = $$0$lcssa$i69;
     $$02$i30 = $pad$i;
     $482 = $463;
    } while (0);
    _memcpy($482 | 0, $$02$i30 | 0, $$01$i31 | 0) | 0;
    HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i31;
   } while (0);
   L1164 : do if ($i$0$lcssa275) {
    $i$1191 = 0;
    $ws$1192 = $2893;
    do {
     $486 = HEAP32[$ws$1192 >> 2] | 0;
     if (!$486) break L1164;
     $488 = _wcrtomb($mb, $486) | 0;
     $i$1191 = $488 + $i$1191 | 0;
     if (($i$1191 | 0) > ($i$0$lcssa275 | 0)) break L1164;
     $ws$1192 = $ws$1192 + 4 | 0;
     $492 = HEAP32[$17 >> 2] | 0;
     do if (!$492) {
      $495 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $495 + 255 | $495;
      $499 = HEAP32[$f >> 2] | 0;
      if (!($499 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $503 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $503;
       HEAP32[$23 >> 2] = $503;
       $505 = $503 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $505;
       $507 = $505;
       $509 = $503;
       label = 163;
       break;
      } else {
       HEAP32[$f >> 2] = $499 | 32;
       break;
      }
     } else {
      $507 = $492;
      $509 = HEAP32[$23 >> 2] | 0;
      label = 163;
     } while (0);
     L1175 : do if ((label | 0) == 163) {
      label = 0;
      if (($507 - $509 | 0) >>> 0 < $488 >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $mb, $488) | 0;
       break;
      }
      L1180 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i37 = $488;
       while (1) {
        if (!$i$0$i37) {
         $$01$i42 = $488;
         $$02$i41 = $mb;
         $525 = $509;
         break L1180;
        }
        $516 = $i$0$i37 + -1 | 0;
        if ((HEAP8[$mb + $516 >> 0] | 0) == 10) break; else $i$0$i37 = $516;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $mb, $i$0$i37) | 0) >>> 0 < $i$0$i37 >>> 0) break L1175;
       $$01$i42 = $488 - $i$0$i37 | 0;
       $$02$i41 = $mb + $i$0$i37 | 0;
       $525 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i42 = $488;
       $$02$i41 = $mb;
       $525 = $509;
      } while (0);
      _memcpy($525 | 0, $$02$i41 | 0, $$01$i42 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i42;
     } while (0);
    } while ($i$1191 >>> 0 < $i$0$lcssa275 >>> 0);
   } while (0);
   L1189 : do if (($403 | 0) == 8192 & $405) {
    $530 = $w$1 - $i$0$lcssa275 | 0;
    _memset($pad$i | 0, 32, ($530 >>> 0 > 256 ? 256 : $530) | 0) | 0;
    if ($530 >>> 0 > 255) {
     $$01$i74 = $530;
     do {
      $534 = HEAP32[$17 >> 2] | 0;
      do if (!$534) {
       $537 = HEAP8[$18 >> 0] | 0;
       HEAP8[$18 >> 0] = $537 + 255 | $537;
       $541 = HEAP32[$f >> 2] | 0;
       if (!($541 & 8)) {
        HEAP32[$19 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        $545 = HEAP32[$21 >> 2] | 0;
        HEAP32[$22 >> 2] = $545;
        HEAP32[$23 >> 2] = $545;
        $547 = $545 + (HEAP32[$24 >> 2] | 0) | 0;
        HEAP32[$17 >> 2] = $547;
        $550 = $547;
        label = 178;
        break;
       } else {
        HEAP32[$f >> 2] = $541 | 32;
        break;
       }
      } else {
       $550 = $534;
       label = 178;
      } while (0);
      L1199 : do if ((label | 0) == 178) {
       label = 0;
       $548 = HEAP32[$23 >> 2] | 0;
       if (($550 - $548 | 0) >>> 0 < 256) {
        FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
        break;
       }
       L1204 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
        $i$0$i49 = 256;
        while (1) {
         if (!$i$0$i49) {
          $$01$i54 = 256;
          $$02$i53 = $pad$i;
          $567 = $548;
          break L1204;
         }
         $558 = $i$0$i49 + -1 | 0;
         if ((HEAP8[$pad$i + $558 >> 0] | 0) == 10) break; else $i$0$i49 = $558;
        }
        if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i49) | 0) >>> 0 < $i$0$i49 >>> 0) break L1199;
        $$01$i54 = 256 - $i$0$i49 | 0;
        $$02$i53 = $pad$i + $i$0$i49 | 0;
        $567 = HEAP32[$23 >> 2] | 0;
       } else {
        $$01$i54 = 256;
        $$02$i53 = $pad$i;
        $567 = $548;
       } while (0);
       _memcpy($567 | 0, $$02$i53 | 0, $$01$i54 | 0) | 0;
       HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i54;
      } while (0);
      $$01$i74 = $$01$i74 + -256 | 0;
     } while ($$01$i74 >>> 0 > 255);
     $$0$lcssa$i76 = $530 & 255;
    } else $$0$lcssa$i76 = $530;
    $573 = HEAP32[$17 >> 2] | 0;
    do if (!$573) {
     $576 = HEAP8[$18 >> 0] | 0;
     HEAP8[$18 >> 0] = $576 + 255 | $576;
     $580 = HEAP32[$f >> 2] | 0;
     if (!($580 & 8)) {
      HEAP32[$19 >> 2] = 0;
      HEAP32[$20 >> 2] = 0;
      $584 = HEAP32[$21 >> 2] | 0;
      HEAP32[$22 >> 2] = $584;
      HEAP32[$23 >> 2] = $584;
      $586 = $584 + (HEAP32[$24 >> 2] | 0) | 0;
      HEAP32[$17 >> 2] = $586;
      $589 = $586;
      break;
     } else {
      HEAP32[$f >> 2] = $580 | 32;
      break L1189;
     }
    } else $589 = $573; while (0);
    $587 = HEAP32[$23 >> 2] | 0;
    if (($589 - $587 | 0) >>> 0 < $$0$lcssa$i76 >>> 0) {
     FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i76) | 0;
     break;
    }
    L1223 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
     $i$0$i60 = $$0$lcssa$i76;
     while (1) {
      if (!$i$0$i60) {
       $$01$i65 = $$0$lcssa$i76;
       $$02$i64 = $pad$i;
       $606 = $587;
       break L1223;
      }
      $597 = $i$0$i60 + -1 | 0;
      if ((HEAP8[$pad$i + $597 >> 0] | 0) == 10) break; else $i$0$i60 = $597;
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i60) | 0) >>> 0 < $i$0$i60 >>> 0) break L1189;
     $$01$i65 = $$0$lcssa$i76 - $i$0$i60 | 0;
     $$02$i64 = $pad$i + $i$0$i60 | 0;
     $606 = HEAP32[$23 >> 2] | 0;
    } else {
     $$01$i65 = $$0$lcssa$i76;
     $$02$i64 = $pad$i;
     $606 = $587;
    } while (0);
    _memcpy($606 | 0, $$02$i64 | 0, $$01$i65 | 0) | 0;
    HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i65;
   } while (0);
   $2880 = $2892;
   $2881 = $265;
   $cnt$0 = $cnt$1;
   $fmt90 = $178;
   $l$0 = $405 ? $w$1 : $i$0$lcssa275;
   $l10n$0 = $l10n$3;
   continue;
  }
  $2418 = $z$2 - $a$2 | 0;
  $$p$5 = ($p$5 | 0) < ($2418 | 0) ? $2418 : $p$5;
  $2420 = $pl$2 + $$p$5 | 0;
  $w$2 = ($w$1 | 0) < ($2420 | 0) ? $2420 : $w$1;
  $2422 = $fl$6 & 73728;
  $2424 = ($w$2 | 0) > ($2420 | 0);
  L1232 : do if (($2422 | 0) == 0 & $2424) {
   $2425 = $w$2 - $2420 | 0;
   _memset($pad$i | 0, 32, ($2425 >>> 0 > 256 ? 256 : $2425) | 0) | 0;
   if ($2425 >>> 0 > 255) {
    $$01$i84 = $2425;
    do {
     $2429 = HEAP32[$17 >> 2] | 0;
     do if (!$2429) {
      $2432 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $2432 + 255 | $2432;
      $2436 = HEAP32[$f >> 2] | 0;
      if (!($2436 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $2440 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $2440;
       HEAP32[$23 >> 2] = $2440;
       $2442 = $2440 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $2442;
       $2445 = $2442;
       label = 845;
       break;
      } else {
       HEAP32[$f >> 2] = $2436 | 32;
       break;
      }
     } else {
      $2445 = $2429;
      label = 845;
     } while (0);
     L1242 : do if ((label | 0) == 845) {
      label = 0;
      $2443 = HEAP32[$23 >> 2] | 0;
      if (($2445 - $2443 | 0) >>> 0 < 256) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
       break;
      }
      L1247 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i456 = 256;
       while (1) {
        if (!$i$0$i456) {
         $$01$i461 = 256;
         $$02$i460 = $pad$i;
         $2462 = $2443;
         break L1247;
        }
        $2453 = $i$0$i456 + -1 | 0;
        if ((HEAP8[$pad$i + $2453 >> 0] | 0) == 10) break; else $i$0$i456 = $2453;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i456) | 0) >>> 0 < $i$0$i456 >>> 0) break L1242;
       $$01$i461 = 256 - $i$0$i456 | 0;
       $$02$i460 = $pad$i + $i$0$i456 | 0;
       $2462 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i461 = 256;
       $$02$i460 = $pad$i;
       $2462 = $2443;
      } while (0);
      _memcpy($2462 | 0, $$02$i460 | 0, $$01$i461 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i461;
     } while (0);
     $$01$i84 = $$01$i84 + -256 | 0;
    } while ($$01$i84 >>> 0 > 255);
    $$0$lcssa$i86 = $2425 & 255;
   } else $$0$lcssa$i86 = $2425;
   $2468 = HEAP32[$17 >> 2] | 0;
   do if (!$2468) {
    $2471 = HEAP8[$18 >> 0] | 0;
    HEAP8[$18 >> 0] = $2471 + 255 | $2471;
    $2475 = HEAP32[$f >> 2] | 0;
    if (!($2475 & 8)) {
     HEAP32[$19 >> 2] = 0;
     HEAP32[$20 >> 2] = 0;
     $2479 = HEAP32[$21 >> 2] | 0;
     HEAP32[$22 >> 2] = $2479;
     HEAP32[$23 >> 2] = $2479;
     $2481 = $2479 + (HEAP32[$24 >> 2] | 0) | 0;
     HEAP32[$17 >> 2] = $2481;
     $2484 = $2481;
     break;
    } else {
     HEAP32[$f >> 2] = $2475 | 32;
     break L1232;
    }
   } else $2484 = $2468; while (0);
   $2482 = HEAP32[$23 >> 2] | 0;
   if (($2484 - $2482 | 0) >>> 0 < $$0$lcssa$i86 >>> 0) {
    FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i86) | 0;
    break;
   }
   L1266 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
    $i$0$i467 = $$0$lcssa$i86;
    while (1) {
     if (!$i$0$i467) {
      $$01$i472 = $$0$lcssa$i86;
      $$02$i471 = $pad$i;
      $2501 = $2482;
      break L1266;
     }
     $2492 = $i$0$i467 + -1 | 0;
     if ((HEAP8[$pad$i + $2492 >> 0] | 0) == 10) break; else $i$0$i467 = $2492;
    }
    if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i467) | 0) >>> 0 < $i$0$i467 >>> 0) break L1232;
    $$01$i472 = $$0$lcssa$i86 - $i$0$i467 | 0;
    $$02$i471 = $pad$i + $i$0$i467 | 0;
    $2501 = HEAP32[$23 >> 2] | 0;
   } else {
    $$01$i472 = $$0$lcssa$i86;
    $$02$i471 = $pad$i;
    $2501 = $2482;
   } while (0);
   _memcpy($2501 | 0, $$02$i471 | 0, $$01$i472 | 0) | 0;
   HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i472;
  } while (0);
  $2504 = HEAP32[$17 >> 2] | 0;
  do if (!$2504) {
   $2507 = HEAP8[$18 >> 0] | 0;
   HEAP8[$18 >> 0] = $2507 + 255 | $2507;
   $2511 = HEAP32[$f >> 2] | 0;
   if (!($2511 & 8)) {
    HEAP32[$19 >> 2] = 0;
    HEAP32[$20 >> 2] = 0;
    $2515 = HEAP32[$21 >> 2] | 0;
    HEAP32[$22 >> 2] = $2515;
    HEAP32[$23 >> 2] = $2515;
    $2517 = $2515 + (HEAP32[$24 >> 2] | 0) | 0;
    HEAP32[$17 >> 2] = $2517;
    $2520 = $2517;
    label = 871;
    break;
   } else {
    HEAP32[$f >> 2] = $2511 | 32;
    break;
   }
  } else {
   $2520 = $2504;
   label = 871;
  } while (0);
  L1279 : do if ((label | 0) == 871) {
   label = 0;
   $2518 = HEAP32[$23 >> 2] | 0;
   if (($2520 - $2518 | 0) >>> 0 < $pl$2 >>> 0) {
    FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $prefix$2, $pl$2) | 0;
    break;
   }
   L1284 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
    $i$0$i478 = $pl$2;
    while (1) {
     if (!$i$0$i478) {
      $$01$i483 = $pl$2;
      $$02$i482 = $prefix$2;
      $2537 = $2518;
      break L1284;
     }
     $2528 = $i$0$i478 + -1 | 0;
     if ((HEAP8[$prefix$2 + $2528 >> 0] | 0) == 10) break; else $i$0$i478 = $2528;
    }
    if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $prefix$2, $i$0$i478) | 0) >>> 0 < $i$0$i478 >>> 0) break L1279;
    $$01$i483 = $pl$2 - $i$0$i478 | 0;
    $$02$i482 = $prefix$2 + $i$0$i478 | 0;
    $2537 = HEAP32[$23 >> 2] | 0;
   } else {
    $$01$i483 = $pl$2;
    $$02$i482 = $prefix$2;
    $2537 = $2518;
   } while (0);
   _memcpy($2537 | 0, $$02$i482 | 0, $$01$i483 | 0) | 0;
   HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i483;
  } while (0);
  L1292 : do if (($2422 | 0) == 65536 & $2424) {
   $2541 = $w$2 - $2420 | 0;
   _memset($pad$i | 0, 48, ($2541 >>> 0 > 256 ? 256 : $2541) | 0) | 0;
   if ($2541 >>> 0 > 255) {
    $$01$i60 = $2541;
    do {
     $2545 = HEAP32[$17 >> 2] | 0;
     do if (!$2545) {
      $2548 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $2548 + 255 | $2548;
      $2552 = HEAP32[$f >> 2] | 0;
      if (!($2552 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $2556 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $2556;
       HEAP32[$23 >> 2] = $2556;
       $2558 = $2556 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $2558;
       $2561 = $2558;
       label = 885;
       break;
      } else {
       HEAP32[$f >> 2] = $2552 | 32;
       break;
      }
     } else {
      $2561 = $2545;
      label = 885;
     } while (0);
     L1302 : do if ((label | 0) == 885) {
      label = 0;
      $2559 = HEAP32[$23 >> 2] | 0;
      if (($2561 - $2559 | 0) >>> 0 < 256) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
       break;
      }
      L1307 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i489 = 256;
       while (1) {
        if (!$i$0$i489) {
         $$01$i494 = 256;
         $$02$i493 = $pad$i;
         $2578 = $2559;
         break L1307;
        }
        $2569 = $i$0$i489 + -1 | 0;
        if ((HEAP8[$pad$i + $2569 >> 0] | 0) == 10) break; else $i$0$i489 = $2569;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i489) | 0) >>> 0 < $i$0$i489 >>> 0) break L1302;
       $$01$i494 = 256 - $i$0$i489 | 0;
       $$02$i493 = $pad$i + $i$0$i489 | 0;
       $2578 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i494 = 256;
       $$02$i493 = $pad$i;
       $2578 = $2559;
      } while (0);
      _memcpy($2578 | 0, $$02$i493 | 0, $$01$i494 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i494;
     } while (0);
     $$01$i60 = $$01$i60 + -256 | 0;
    } while ($$01$i60 >>> 0 > 255);
    $$0$lcssa$i62 = $2541 & 255;
   } else $$0$lcssa$i62 = $2541;
   $2584 = HEAP32[$17 >> 2] | 0;
   do if (!$2584) {
    $2587 = HEAP8[$18 >> 0] | 0;
    HEAP8[$18 >> 0] = $2587 + 255 | $2587;
    $2591 = HEAP32[$f >> 2] | 0;
    if (!($2591 & 8)) {
     HEAP32[$19 >> 2] = 0;
     HEAP32[$20 >> 2] = 0;
     $2595 = HEAP32[$21 >> 2] | 0;
     HEAP32[$22 >> 2] = $2595;
     HEAP32[$23 >> 2] = $2595;
     $2597 = $2595 + (HEAP32[$24 >> 2] | 0) | 0;
     HEAP32[$17 >> 2] = $2597;
     $2600 = $2597;
     break;
    } else {
     HEAP32[$f >> 2] = $2591 | 32;
     break L1292;
    }
   } else $2600 = $2584; while (0);
   $2598 = HEAP32[$23 >> 2] | 0;
   if (($2600 - $2598 | 0) >>> 0 < $$0$lcssa$i62 >>> 0) {
    FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i62) | 0;
    break;
   }
   L1326 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
    $i$0$i500 = $$0$lcssa$i62;
    while (1) {
     if (!$i$0$i500) {
      $$01$i505 = $$0$lcssa$i62;
      $$02$i504 = $pad$i;
      $2617 = $2598;
      break L1326;
     }
     $2608 = $i$0$i500 + -1 | 0;
     if ((HEAP8[$pad$i + $2608 >> 0] | 0) == 10) break; else $i$0$i500 = $2608;
    }
    if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i500) | 0) >>> 0 < $i$0$i500 >>> 0) break L1292;
    $$01$i505 = $$0$lcssa$i62 - $i$0$i500 | 0;
    $$02$i504 = $pad$i + $i$0$i500 | 0;
    $2617 = HEAP32[$23 >> 2] | 0;
   } else {
    $$01$i505 = $$0$lcssa$i62;
    $$02$i504 = $pad$i;
    $2617 = $2598;
   } while (0);
   _memcpy($2617 | 0, $$02$i504 | 0, $$01$i505 | 0) | 0;
   HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i505;
  } while (0);
  L1334 : do if (($$p$5 | 0) > ($2418 | 0)) {
   $2621 = $$p$5 - $2418 | 0;
   _memset($pad$i | 0, 48, ($2621 >>> 0 > 256 ? 256 : $2621) | 0) | 0;
   if ($2621 >>> 0 > 255) {
    $$01$i45 = $2621;
    do {
     $2625 = HEAP32[$17 >> 2] | 0;
     do if (!$2625) {
      $2628 = HEAP8[$18 >> 0] | 0;
      HEAP8[$18 >> 0] = $2628 + 255 | $2628;
      $2632 = HEAP32[$f >> 2] | 0;
      if (!($2632 & 8)) {
       HEAP32[$19 >> 2] = 0;
       HEAP32[$20 >> 2] = 0;
       $2636 = HEAP32[$21 >> 2] | 0;
       HEAP32[$22 >> 2] = $2636;
       HEAP32[$23 >> 2] = $2636;
       $2638 = $2636 + (HEAP32[$24 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $2638;
       $2641 = $2638;
       label = 913;
       break;
      } else {
       HEAP32[$f >> 2] = $2632 | 32;
       break;
      }
     } else {
      $2641 = $2625;
      label = 913;
     } while (0);
     L1344 : do if ((label | 0) == 913) {
      label = 0;
      $2639 = HEAP32[$23 >> 2] | 0;
      if (($2641 - $2639 | 0) >>> 0 < 256) {
       FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
       break;
      }
      L1349 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
       $i$0$i511 = 256;
       while (1) {
        if (!$i$0$i511) {
         $$01$i516 = 256;
         $$02$i515 = $pad$i;
         $2658 = $2639;
         break L1349;
        }
        $2649 = $i$0$i511 + -1 | 0;
        if ((HEAP8[$pad$i + $2649 >> 0] | 0) == 10) break; else $i$0$i511 = $2649;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i511) | 0) >>> 0 < $i$0$i511 >>> 0) break L1344;
       $$01$i516 = 256 - $i$0$i511 | 0;
       $$02$i515 = $pad$i + $i$0$i511 | 0;
       $2658 = HEAP32[$23 >> 2] | 0;
      } else {
       $$01$i516 = 256;
       $$02$i515 = $pad$i;
       $2658 = $2639;
      } while (0);
      _memcpy($2658 | 0, $$02$i515 | 0, $$01$i516 | 0) | 0;
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i516;
     } while (0);
     $$01$i45 = $$01$i45 + -256 | 0;
    } while ($$01$i45 >>> 0 > 255);
    $$0$lcssa$i47 = $2621 & 255;
   } else $$0$lcssa$i47 = $2621;
   $2664 = HEAP32[$17 >> 2] | 0;
   do if (!$2664) {
    $2667 = HEAP8[$18 >> 0] | 0;
    HEAP8[$18 >> 0] = $2667 + 255 | $2667;
    $2671 = HEAP32[$f >> 2] | 0;
    if (!($2671 & 8)) {
     HEAP32[$19 >> 2] = 0;
     HEAP32[$20 >> 2] = 0;
     $2675 = HEAP32[$21 >> 2] | 0;
     HEAP32[$22 >> 2] = $2675;
     HEAP32[$23 >> 2] = $2675;
     $2677 = $2675 + (HEAP32[$24 >> 2] | 0) | 0;
     HEAP32[$17 >> 2] = $2677;
     $2680 = $2677;
     break;
    } else {
     HEAP32[$f >> 2] = $2671 | 32;
     break L1334;
    }
   } else $2680 = $2664; while (0);
   $2678 = HEAP32[$23 >> 2] | 0;
   if (($2680 - $2678 | 0) >>> 0 < $$0$lcssa$i47 >>> 0) {
    FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i47) | 0;
    break;
   }
   L1368 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
    $i$0$i522 = $$0$lcssa$i47;
    while (1) {
     if (!$i$0$i522) {
      $$01$i527 = $$0$lcssa$i47;
      $$02$i526 = $pad$i;
      $2697 = $2678;
      break L1368;
     }
     $2688 = $i$0$i522 + -1 | 0;
     if ((HEAP8[$pad$i + $2688 >> 0] | 0) == 10) break; else $i$0$i522 = $2688;
    }
    if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i522) | 0) >>> 0 < $i$0$i522 >>> 0) break L1334;
    $$01$i527 = $$0$lcssa$i47 - $i$0$i522 | 0;
    $$02$i526 = $pad$i + $i$0$i522 | 0;
    $2697 = HEAP32[$23 >> 2] | 0;
   } else {
    $$01$i527 = $$0$lcssa$i47;
    $$02$i526 = $pad$i;
    $2697 = $2678;
   } while (0);
   _memcpy($2697 | 0, $$02$i526 | 0, $$01$i527 | 0) | 0;
   HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i527;
  } while (0);
  $2700 = HEAP32[$17 >> 2] | 0;
  do if (!$2700) {
   $2703 = HEAP8[$18 >> 0] | 0;
   HEAP8[$18 >> 0] = $2703 + 255 | $2703;
   $2707 = HEAP32[$f >> 2] | 0;
   if (!($2707 & 8)) {
    HEAP32[$19 >> 2] = 0;
    HEAP32[$20 >> 2] = 0;
    $2711 = HEAP32[$21 >> 2] | 0;
    HEAP32[$22 >> 2] = $2711;
    HEAP32[$23 >> 2] = $2711;
    $2713 = $2711 + (HEAP32[$24 >> 2] | 0) | 0;
    HEAP32[$17 >> 2] = $2713;
    $2716 = $2713;
    label = 939;
    break;
   } else {
    HEAP32[$f >> 2] = $2707 | 32;
    break;
   }
  } else {
   $2716 = $2700;
   label = 939;
  } while (0);
  L1381 : do if ((label | 0) == 939) {
   label = 0;
   $2714 = HEAP32[$23 >> 2] | 0;
   if (($2716 - $2714 | 0) >>> 0 < $2418 >>> 0) {
    FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $a$2, $2418) | 0;
    break;
   }
   L1386 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
    $i$0$i533 = $2418;
    while (1) {
     if (!$i$0$i533) {
      $$01$i538 = $2418;
      $$02$i537 = $a$2;
      $2733 = $2714;
      break L1386;
     }
     $2724 = $i$0$i533 + -1 | 0;
     if ((HEAP8[$a$2 + $2724 >> 0] | 0) == 10) break; else $i$0$i533 = $2724;
    }
    if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $a$2, $i$0$i533) | 0) >>> 0 < $i$0$i533 >>> 0) break L1381;
    $$01$i538 = $2418 - $i$0$i533 | 0;
    $$02$i537 = $a$2 + $i$0$i533 | 0;
    $2733 = HEAP32[$23 >> 2] | 0;
   } else {
    $$01$i538 = $2418;
    $$02$i537 = $a$2;
    $2733 = $2714;
   } while (0);
   _memcpy($2733 | 0, $$02$i537 | 0, $$01$i538 | 0) | 0;
   HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i538;
  } while (0);
  if (!(($2422 | 0) == 8192 & $2424)) {
   $2880 = $2888;
   $2881 = $2889;
   $cnt$0 = $cnt$1;
   $fmt90 = $178;
   $l$0 = $w$2;
   $l10n$0 = $l10n$3;
   continue;
  }
  $2737 = $w$2 - $2420 | 0;
  _memset($pad$i | 0, 32, ($2737 >>> 0 > 256 ? 256 : $2737) | 0) | 0;
  if ($2737 >>> 0 > 255) {
   $$01$i = $2737;
   do {
    $2741 = HEAP32[$17 >> 2] | 0;
    do if (!$2741) {
     $2744 = HEAP8[$18 >> 0] | 0;
     HEAP8[$18 >> 0] = $2744 + 255 | $2744;
     $2748 = HEAP32[$f >> 2] | 0;
     if (!($2748 & 8)) {
      HEAP32[$19 >> 2] = 0;
      HEAP32[$20 >> 2] = 0;
      $2752 = HEAP32[$21 >> 2] | 0;
      HEAP32[$22 >> 2] = $2752;
      HEAP32[$23 >> 2] = $2752;
      $2754 = $2752 + (HEAP32[$24 >> 2] | 0) | 0;
      HEAP32[$17 >> 2] = $2754;
      $2757 = $2754;
      label = 953;
      break;
     } else {
      HEAP32[$f >> 2] = $2748 | 32;
      break;
     }
    } else {
     $2757 = $2741;
     label = 953;
    } while (0);
    L1403 : do if ((label | 0) == 953) {
     label = 0;
     $2755 = HEAP32[$23 >> 2] | 0;
     if (($2757 - $2755 | 0) >>> 0 < 256) {
      FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, 256) | 0;
      break;
     }
     L1408 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
      $i$0$i544 = 256;
      while (1) {
       if (!$i$0$i544) {
        $$01$i549 = 256;
        $$02$i548 = $pad$i;
        $2774 = $2755;
        break L1408;
       }
       $2765 = $i$0$i544 + -1 | 0;
       if ((HEAP8[$pad$i + $2765 >> 0] | 0) == 10) break; else $i$0$i544 = $2765;
      }
      if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i544) | 0) >>> 0 < $i$0$i544 >>> 0) break L1403;
      $$01$i549 = 256 - $i$0$i544 | 0;
      $$02$i548 = $pad$i + $i$0$i544 | 0;
      $2774 = HEAP32[$23 >> 2] | 0;
     } else {
      $$01$i549 = 256;
      $$02$i548 = $pad$i;
      $2774 = $2755;
     } while (0);
     _memcpy($2774 | 0, $$02$i548 | 0, $$01$i549 | 0) | 0;
     HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i549;
    } while (0);
    $$01$i = $$01$i + -256 | 0;
   } while ($$01$i >>> 0 > 255);
   $$0$lcssa$i = $2737 & 255;
  } else $$0$lcssa$i = $2737;
  $2780 = HEAP32[$17 >> 2] | 0;
  do if (!$2780) {
   $2783 = HEAP8[$18 >> 0] | 0;
   HEAP8[$18 >> 0] = $2783 + 255 | $2783;
   $2787 = HEAP32[$f >> 2] | 0;
   if (!($2787 & 8)) {
    HEAP32[$19 >> 2] = 0;
    HEAP32[$20 >> 2] = 0;
    $2791 = HEAP32[$21 >> 2] | 0;
    HEAP32[$22 >> 2] = $2791;
    HEAP32[$23 >> 2] = $2791;
    $2793 = $2791 + (HEAP32[$24 >> 2] | 0) | 0;
    HEAP32[$17 >> 2] = $2793;
    $2796 = $2793;
    break;
   } else {
    HEAP32[$f >> 2] = $2787 | 32;
    $2880 = $2888;
    $2881 = $2889;
    $cnt$0 = $cnt$1;
    $fmt90 = $178;
    $l$0 = $w$2;
    $l10n$0 = $l10n$3;
    continue L1;
   }
  } else $2796 = $2780; while (0);
  $2794 = HEAP32[$23 >> 2] | 0;
  if (($2796 - $2794 | 0) >>> 0 < $$0$lcssa$i >>> 0) {
   FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $$0$lcssa$i) | 0;
   $2880 = $2888;
   $2881 = $2889;
   $cnt$0 = $cnt$1;
   $fmt90 = $178;
   $l$0 = $w$2;
   $l10n$0 = $l10n$3;
   continue;
  }
  L1427 : do if ((HEAP8[$26 >> 0] | 0) > -1) {
   $i$0$i555 = $$0$lcssa$i;
   while (1) {
    if (!$i$0$i555) {
     $$01$i560 = $$0$lcssa$i;
     $$02$i559 = $pad$i;
     $2813 = $2794;
     break L1427;
    }
    $2804 = $i$0$i555 + -1 | 0;
    if ((HEAP8[$pad$i + $2804 >> 0] | 0) == 10) break; else $i$0$i555 = $2804;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$25 >> 2] & 31]($f, $pad$i, $i$0$i555) | 0) >>> 0 < $i$0$i555 >>> 0) {
    $2880 = $2888;
    $2881 = $2889;
    $cnt$0 = $cnt$1;
    $fmt90 = $178;
    $l$0 = $w$2;
    $l10n$0 = $l10n$3;
    continue L1;
   }
   $$01$i560 = $$0$lcssa$i - $i$0$i555 | 0;
   $$02$i559 = $pad$i + $i$0$i555 | 0;
   $2813 = HEAP32[$23 >> 2] | 0;
  } else {
   $$01$i560 = $$0$lcssa$i;
   $$02$i559 = $pad$i;
   $2813 = $2794;
  } while (0);
  _memcpy($2813 | 0, $$02$i559 | 0, $$01$i560 | 0) | 0;
  HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $$01$i560;
  $2880 = $2888;
  $2881 = $2889;
  $cnt$0 = $cnt$1;
  $fmt90 = $178;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
 }
 if ((label | 0) == 975) {
  if ($f) {
   $$0 = $cnt$1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (!$l10n$0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $i$2166 = 1;
  while (1) {
   $2819 = HEAP32[$nl_type + ($i$2166 << 2) >> 2] | 0;
   if (!$2819) {
    $2895 = 1;
    $i$3164 = $i$2166;
    break;
   }
   $2821 = $nl_arg + ($i$2166 << 3) | 0;
   L1452 : do if ($2819 >>> 0 <= 20) do switch ($2819 | 0) {
   case 9:
    {
     $arglist_current35 = HEAP32[$ap >> 2] | 0;
     $2823 = HEAP32[$arglist_current35 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current35 + 4;
     HEAP32[$2821 >> 2] = $2823;
     break L1452;
     break;
    }
   case 10:
    {
     $arglist_current38 = HEAP32[$ap >> 2] | 0;
     $2824 = HEAP32[$arglist_current38 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current38 + 4;
     $2827 = $2821;
     HEAP32[$2827 >> 2] = $2824;
     HEAP32[$2827 + 4 >> 2] = (($2824 | 0) < 0) << 31 >> 31;
     break L1452;
     break;
    }
   case 11:
    {
     $arglist_current41 = HEAP32[$ap >> 2] | 0;
     $2831 = HEAP32[$arglist_current41 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current41 + 4;
     $2832 = $2821;
     HEAP32[$2832 >> 2] = $2831;
     HEAP32[$2832 + 4 >> 2] = 0;
     break L1452;
     break;
    }
   case 12:
    {
     $arglist_current44 = HEAP32[$ap >> 2] | 0;
     $2836 = $arglist_current44;
     $2838 = HEAP32[$2836 >> 2] | 0;
     $2841 = HEAP32[$2836 + 4 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current44 + 8;
     $2842 = $2821;
     HEAP32[$2842 >> 2] = $2838;
     HEAP32[$2842 + 4 >> 2] = $2841;
     break L1452;
     break;
    }
   case 13:
    {
     $arglist_current47 = HEAP32[$ap >> 2] | 0;
     $2846 = HEAP32[$arglist_current47 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current47 + 4;
     $2848 = ($2846 & 65535) << 16 >> 16;
     $2851 = $2821;
     HEAP32[$2851 >> 2] = $2848;
     HEAP32[$2851 + 4 >> 2] = (($2848 | 0) < 0) << 31 >> 31;
     break L1452;
     break;
    }
   case 14:
    {
     $arglist_current50 = HEAP32[$ap >> 2] | 0;
     $2855 = HEAP32[$arglist_current50 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current50 + 4;
     $2856 = $2821;
     HEAP32[$2856 >> 2] = $2855 & 65535;
     HEAP32[$2856 + 4 >> 2] = 0;
     break L1452;
     break;
    }
   case 15:
    {
     $arglist_current53 = HEAP32[$ap >> 2] | 0;
     $2860 = HEAP32[$arglist_current53 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current53 + 4;
     $2862 = ($2860 & 255) << 24 >> 24;
     $2865 = $2821;
     HEAP32[$2865 >> 2] = $2862;
     HEAP32[$2865 + 4 >> 2] = (($2862 | 0) < 0) << 31 >> 31;
     break L1452;
     break;
    }
   case 16:
    {
     $arglist_current56 = HEAP32[$ap >> 2] | 0;
     $2869 = HEAP32[$arglist_current56 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current56 + 4;
     $2870 = $2821;
     HEAP32[$2870 >> 2] = $2869 & 255;
     HEAP32[$2870 + 4 >> 2] = 0;
     break L1452;
     break;
    }
   case 17:
    {
     $arglist_current59 = HEAP32[$ap >> 2] | 0;
     HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current59 >> 2];
     HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current59 + 4 >> 2];
     $2874 = +HEAPF64[tempDoublePtr >> 3];
     HEAP32[$ap >> 2] = $arglist_current59 + 8;
     HEAPF64[$2821 >> 3] = $2874;
     break L1452;
     break;
    }
   case 18:
    {
     $arglist_current62 = HEAP32[$ap >> 2] | 0;
     HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current62 >> 2];
     HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current62 + 4 >> 2];
     $2875 = +HEAPF64[tempDoublePtr >> 3];
     HEAP32[$ap >> 2] = $arglist_current62 + 8;
     HEAPF64[$2821 >> 3] = $2875;
     break L1452;
     break;
    }
   default:
    break L1452;
   } while (0); while (0);
   $i$2166 = $i$2166 + 1 | 0;
   if (($i$2166 | 0) >= 10) {
    $$0 = 1;
    label = 994;
    break;
   }
  }
  if ((label | 0) == 994) {
   STACKTOP = sp;
   return $$0 | 0;
  }
  while (1) {
   $2879 = $i$3164 + 1 | 0;
   if (!$2895) {
    $$0 = -1;
    label = 994;
    break;
   }
   if (($2879 | 0) >= 10) {
    $$0 = 1;
    label = 994;
    break;
   }
   $2895 = (HEAP32[$nl_type + ($2879 << 2) >> 2] | 0) == 0;
   $i$3164 = $2879;
  }
  if ((label | 0) == 994) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if ((label | 0) == 994) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i211 = 0, $$0$i$i$i$i254 = 0, $$019$i = 0, $$03$i180 = 0, $$2$i215 = 0, $$221$i = 0, $$first$i = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i274 = 0, $$pre$i$i$i$i320 = 0, $$pre$i$i$i$i341 = 0, $$pre$i$i$i77 = 0, $$pre$phiZ2D = 0, $$pre445 = 0, $$pre447 = 0, $$sroa$4 = 0, $$sroa$4364 = 0, $$sroa$4367 = 0, $$sroa$4370 = 0, $$sroa$4373 = 0, $$sroa$4376 = 0, $$sroa$5 = 0, $$sroa$5383 = 0, $$sroa$5386 = 0, $$sroa$5389 = 0, $$sroa$5392 = 0, $$sroa$5395 = 0, $$sroa$5398 = 0, $$sroa$5407 = 0, $$sroa$5410 = 0, $$sroa$5413 = 0, $$sroa$5416 = 0, $$sroa$5419 = 0, $$sroa$5422 = 0, $$sroa$6 = 0, $$sroa$6404 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1002 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $101 = 0, $1010 = 0, $1012 = 0, $1015 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1023 = 0, $1025 = 0, $1026 = 0, $103 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $104 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1046 = 0, $105 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1061 = 0, $1062 = 0, $1064 = 0, $107 = 0, $108 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $109 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1095 = 0, $1097 = 0, $1098 = 0, $11 = 0, $110 = 0, $1100 = 0, $1102 = 0, $1103 = 0, $1105 = 0, $1107 = 0, $111 = 0, $1110 = 0, $1115 = 0, $1118 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1123 = 0, $1125 = 0, $1128 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1133 = 0, $1135 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1142 = 0, $1144 = 0, $1148 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1156 = 0, $1157 = 0, $1159 = 0, $116 = 0, $117 = 0, $1170 = 0, $1174 = 0, $1177 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1185 = 0, $1188 = 0, $1189 = 0, $1195 = 0, $12 = 0, $120 = 0, $1203 = 0, $1208 = 0, $1209 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1218 = 0, $122 = 0, $1220 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1236 = 0, $1237 = 0, $1239 = 0, $1247 = 0, $1248 = 0, $1256 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1271 = 0, $1279 = 0, $1280 = 0, $1288 = 0, $1289 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1294 = 0, $1295 = 0, $1297 = 0, $13 = 0, $1300 = 0, $1302 = 0, $1306 = 0, $1308 = 0, $1309 = 0, $1313 = 0, $1315 = 0, $1318 = 0, $1319 = 0, $1321 = 0, $1323 = 0, $1342 = 0, $1343 = 0, $1345 = 0, $1347 = 0, $1350 = 0, $1352 = 0, $1355 = 0, $1357 = 0, $1358 = 0, $1362 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $137 = 0, $1370 = 0, $1375 = 0, $1377 = 0, $138 = 0, $1380 = 0, $1384 = 0, $1387 = 0, $1392 = 0, $1393 = 0, $1396 = 0, $1397 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1409 = 0, $1412 = 0, $1415 = 0, $142 = 0, $1427 = 0, $1429 = 0, $1430 = 0, $1432 = 0, $1434 = 0, $1437 = 0, $1439 = 0, $1440 = 0, $1442 = 0, $1447 = 0, $1448 = 0, $145 = 0, $1450 = 0, $1452 = 0, $1455 = 0, $1457 = 0, $1458 = 0, $1460 = 0, $1462 = 0, $1466 = 0, $1467 = 0, $1469 = 0, $147 = 0, $1471 = 0, $1475 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $1480 = 0, $1481 = 0, $1483 = 0, $1484 = 0, $1486 = 0, $1494 = 0, $1497 = 0, $15 = 0, $150 = 0, $1505 = 0, $1506 = 0, $1508 = 0, $1510 = 0, $1511 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1528 = 0, $153 = 0, $1530 = 0, $1538 = 0, $1539 = 0, $1545 = 0, $1546 = 0, $1548 = 0, $155 = 0, $1550 = 0, $1552 = 0, $1553 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1580 = 0, $1588 = 0, $1589 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1594 = 0, $16 = 0, $160 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1609 = 0, $1610 = 0, $1612 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1649 = 0, $1650 = 0, $1651 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1670 = 0, $1671 = 0, $1673 = 0, $1675 = 0, $1676 = 0, $168 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1695 = 0, $17 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1710 = 0, $1711 = 0, $1713 = 0, $173 = 0, $1733 = 0, $1736 = 0, $1738 = 0, $1739 = 0, $1741 = 0, $1743 = 0, $1744 = 0, $1746 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1751 = 0, $176 = 0, $1762 = 0, $1763 = 0, $1765 = 0, $1767 = 0, $1768 = 0, $177 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1787 = 0, $179 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $1800 = 0, $1802 = 0, $1803 = 0, $1805 = 0, $181 = 0, $1831 = 0, $1832 = 0, $1841 = 0, $1842 = 0, $1846 = 0, $1848 = 0, $1849 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1854 = 0, $1855 = 0, $1857 = 0, $186 = 0, $1871 = 0, $1872 = 0, $1876 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1884 = 0, $1885 = 0, $1887 = 0, $19 = 0, $1900 = 0, $1907 = 0, $191 = 0, $1910 = 0, $1916 = 0, $1917 = 0, $1919 = 0, $1923 = 0, $1927 = 0, $1929 = 0, $1931 = 0, $1939 = 0, $1940 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1953 = 0, $1958 = 0, $1959 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1981 = 0, $1983 = 0, $1985 = 0, $1987 = 0, $1989 = 0, $1993 = 0, $1995 = 0, $1996 = 0, $2 = 0, $20 = 0, $2000 = 0, $2002 = 0, $2005 = 0, $2006 = 0, $2008 = 0, $2017 = 0, $2020 = 0, $2024 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2032 = 0, $2033 = 0, $2035 = 0, $204 = 0, $2045 = 0, $2050 = 0, $2052 = 0, $2058 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2066 = 0, $2067 = 0, $2069 = 0, $207 = 0, $2077 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2083 = 0, $2086 = 0, $2088 = 0, $2092 = 0, $2094 = 0, $2095 = 0, $2099 = 0, $21 = 0, $210 = 0, $2101 = 0, $2104 = 0, $2105 = 0, $2107 = 0, $211 = 0, $2116 = 0, $2117 = 0, $2121 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2128 = 0, $2129 = 0, $2131 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $2140 = 0, $22 = 0, $220 = 0, $223 = 0, $226 = 0, $23 = 0, $24 = 0, $241 = 0, $242 = 0, $246 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $254 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $268 = 0, $27 = 0, $271 = 0, $276 = 0, $277 = 0, $28 = 0, $280 = 0, $281 = 0, $283 = 0, $284 = 0, $29 = 0, $293 = 0, $296 = 0, $299 = 0, $3 = 0, $30 = 0, $31 = 0, $317 = 0, $318 = 0, $32 = 0, $320 = 0, $322 = 0, $323 = 0, $33 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $342 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $357 = 0, $358 = 0, $36 = 0, $360 = 0, $37 = 0, $38 = 0, $385 = 0, $386 = 0, $39 = 0, $390 = 0, $391 = 0, $394 = 0, $395 = 0, $4 = 0, $40 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $41 = 0, $413 = 0, $415 = 0, $418 = 0, $42 = 0, $422 = 0, $425 = 0, $43 = 0, $430 = 0, $431 = 0, $434 = 0, $435 = 0, $437 = 0, $438 = 0, $44 = 0, $447 = 0, $45 = 0, $450 = 0, $454 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $466 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $475 = 0, $477 = 0, $48 = 0, $482 = 0, $49 = 0, $490 = 0, $491 = 0, $497 = 0, $5 = 0, $50 = 0, $501 = 0, $504 = 0, $506 = 0, $509 = 0, $51 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $525 = 0, $527 = 0, $529 = 0, $53 = 0, $531 = 0, $532 = 0, $534 = 0, $538 = 0, $54 = 0, $542 = 0, $544 = 0, $545 = 0, $549 = 0, $55 = 0, $551 = 0, $554 = 0, $555 = 0, $559 = 0, $56 = 0, $560 = 0, $564 = 0, $565 = 0, $57 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $584 = 0, $59 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $602 = 0, $61 = 0, $62 = 0, $625 = 0, $626 = 0, $629 = 0, $63 = 0, $630 = 0, $632 = 0, $633 = 0, $635 = 0, $638 = 0, $64 = 0, $640 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $654 = 0, $659 = 0, $66 = 0, $661 = 0, $664 = 0, $668 = 0, $67 = 0, $671 = 0, $676 = 0, $677 = 0, $68 = 0, $680 = 0, $681 = 0, $683 = 0, $684 = 0, $69 = 0, $693 = 0, $696 = 0, $7 = 0, $70 = 0, $700 = 0, $71 = 0, $72 = 0, $720 = 0, $721 = 0, $723 = 0, $725 = 0, $726 = 0, $73 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $745 = 0, $75 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $76 = 0, $760 = 0, $761 = 0, $763 = 0, $77 = 0, $78 = 0, $783 = 0, $786 = 0, $788 = 0, $789 = 0, $79 = 0, $792 = 0, $793 = 0, $795 = 0, $796 = 0, $798 = 0, $8 = 0, $80 = 0, $801 = 0, $803 = 0, $81 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $817 = 0, $82 = 0, $822 = 0, $824 = 0, $827 = 0, $83 = 0, $831 = 0, $834 = 0, $839 = 0, $84 = 0, $840 = 0, $843 = 0, $844 = 0, $846 = 0, $847 = 0, $85 = 0, $856 = 0, $859 = 0, $86 = 0, $863 = 0, $87 = 0, $88 = 0, $884 = 0, $885 = 0, $887 = 0, $889 = 0, $89 = 0, $890 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $905 = 0, $91 = 0, $915 = 0, $916 = 0, $92 = 0, $93 = 0, $933 = 0, $934 = 0, $936 = 0, $938 = 0, $939 = 0, $94 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $954 = 0, $96 = 0, $964 = 0, $965 = 0, $97 = 0, $976 = 0, $979 = 0, $98 = 0, $981 = 0, $982 = 0, $984 = 0, $988 = 0, $989 = 0, $99 = 0, $992 = 0, $994 = 0, $995 = 0, $997 = 0, $999 = 0, $expr$i = 0, $expr$i152 = 0, $expr$i225 = 0, $expr$i233 = 0, $expr$i299 = 0, $expr_list$i = 0, $has_expr_list$0$off0$i = 0, $has_init$0$off0$i414417 = 0, $init_list$i = 0, $k$08$i = 0, $k$09$i = 0, $k1$07$i = 0, $name$i = 0, $op1 = 0, $op18 = 0, $op2 = 0, $op27 = 0, $op3 = 0, $parsed_gs$0$off0 = 0, $parsed_gs$0$off0$i = 0, $r$i = 0, $t$0 = 0, $t$0$i = 0, $t$0$i182 = 0, $t$0$i256 = 0, $t$0$i289$lcssa = 0, $t$0$i289386 = 0, $t$1$i = 0, $t$1$i257 = 0, $t$2$i = 0, $t$2$i258 = 0, $t$3$i413419 = 0, $tmp$i = 0, $tmp$i170 = 0, $tmp$i270 = 0, $tmp2$i = 0, $type$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048 | 0;
 $$sroa$5422 = sp + 1116 | 0;
 $0 = sp + 1800 | 0;
 $1 = sp + 1716 | 0;
 $$sroa$5419 = sp + 1956 | 0;
 $2 = sp + 48 | 0;
 $3 = sp;
 $expr$i299 = sp + 884 | 0;
 $4 = sp + 920 | 0;
 $$sroa$5416 = sp + 2005 | 0;
 $5 = sp + 136 | 0;
 $6 = sp + 148 | 0;
 $7 = sp + 160 | 0;
 $8 = sp + 172 | 0;
 $$sroa$5413 = sp + 1907 | 0;
 $tmp$i270 = sp + 196 | 0;
 $tmp2$i = sp + 208 | 0;
 $9 = sp + 224 | 0;
 $$sroa$5410 = sp + 1991 | 0;
 $10 = sp + 260 | 0;
 $11 = sp + 272 | 0;
 $12 = sp + 284 | 0;
 $13 = sp + 296 | 0;
 $expr$i233 = sp + 308 | 0;
 $14 = sp + 320 | 0;
 $$sroa$5407 = sp + 1935 | 0;
 $15 = sp + 356 | 0;
 $16 = sp + 368 | 0;
 $17 = sp + 380 | 0;
 $18 = sp + 392 | 0;
 $expr$i225 = sp + 404 | 0;
 $19 = sp + 416 | 0;
 $name$i = sp + 428 | 0;
 $20 = sp + 440 | 0;
 $init_list$i = sp + 452 | 0;
 $21 = sp + 464 | 0;
 $type$i = sp + 476 | 0;
 $expr_list$i = sp + 488 | 0;
 $22 = sp + 500 | 0;
 $r$i = sp + 512 | 0;
 $23 = sp + 524 | 0;
 $24 = sp + 536 | 0;
 $25 = sp + 548 | 0;
 $26 = sp + 560 | 0;
 $27 = sp + 576 | 0;
 $$sroa$6404 = sp + 1963 | 0;
 $tmp$i170 = sp + 612 | 0;
 $expr$i152 = sp + 624 | 0;
 $28 = sp + 640 | 0;
 $$sroa$5398 = sp + 1928 | 0;
 $29 = sp + 676 | 0;
 $30 = sp + 688 | 0;
 $31 = sp + 700 | 0;
 $32 = sp + 712 | 0;
 $expr$i = sp + 724 | 0;
 $33 = sp + 736 | 0;
 $$sroa$5395 = sp + 1900 | 0;
 $34 = sp + 772 | 0;
 $35 = sp + 784 | 0;
 $36 = sp + 796 | 0;
 $37 = sp + 808 | 0;
 $38 = sp + 824 | 0;
 $$sroa$5392 = sp + 1949 | 0;
 $39 = sp + 1704 | 0;
 $40 = sp + 1728 | 0;
 $41 = sp + 1752 | 0;
 $$sroa$5389 = sp + 2033 | 0;
 $42 = sp + 1812 | 0;
 $43 = sp + 1836 | 0;
 $44 = sp + 1864 | 0;
 $$sroa$5386 = sp + 2012 | 0;
 $45 = sp + 984 | 0;
 $46 = sp + 996 | 0;
 $47 = sp + 1008 | 0;
 $$sroa$5383 = sp + 1998 | 0;
 $48 = sp + 1044 | 0;
 $49 = sp + 1056 | 0;
 $$sroa$5 = sp + 1984 | 0;
 $50 = sp + 1092 | 0;
 $51 = sp + 1104 | 0;
 $tmp$i = sp + 1888 | 0;
 $52 = sp + 1136 | 0;
 $53 = sp + 1148 | 0;
 $54 = sp + 1160 | 0;
 $55 = sp + 1176 | 0;
 $$sroa$6 = sp + 1970 | 0;
 $56 = sp + 1212 | 0;
 $57 = sp + 1224 | 0;
 $58 = sp + 1236 | 0;
 $59 = sp + 1248 | 0;
 $60 = sp + 1260 | 0;
 $61 = sp + 1272 | 0;
 $62 = sp + 1284 | 0;
 $$sroa$4376 = sp + 1942 | 0;
 $63 = sp + 1308 | 0;
 $64 = sp + 1320 | 0;
 $65 = sp + 1332 | 0;
 $66 = sp + 1344 | 0;
 $$sroa$4373 = sp + 2019 | 0;
 $67 = sp + 1368 | 0;
 $68 = sp + 1380 | 0;
 $69 = sp + 1392 | 0;
 $70 = sp + 1404 | 0;
 $71 = sp + 1416 | 0;
 $72 = sp + 1428 | 0;
 $73 = sp + 1440 | 0;
 $74 = sp + 1452 | 0;
 $75 = sp + 1464 | 0;
 $76 = sp + 1476 | 0;
 $op2 = sp + 1488 | 0;
 $op1 = sp + 1500 | 0;
 $77 = sp + 1512 | 0;
 $$sroa$4370 = sp + 1977 | 0;
 $78 = sp + 1548 | 0;
 $79 = sp + 1560 | 0;
 $80 = sp + 1572 | 0;
 $81 = sp + 1584 | 0;
 $82 = sp + 1596 | 0;
 $83 = sp + 1608 | 0;
 $84 = sp + 1620 | 0;
 $85 = sp + 1632 | 0;
 $86 = sp + 1644 | 0;
 $87 = sp + 1656 | 0;
 $88 = sp + 1668 | 0;
 $89 = sp + 1680 | 0;
 $90 = sp + 112 | 0;
 $$sroa$4367 = sp + 1921 | 0;
 $91 = sp + 60 | 0;
 $92 = sp + 12 | 0;
 $93 = sp + 96 | 0;
 $94 = sp + 1692 | 0;
 $95 = sp + 860 | 0;
 $96 = sp + 872 | 0;
 $97 = sp + 1740 | 0;
 $98 = sp + 896 | 0;
 $99 = sp + 1776 | 0;
 $100 = sp + 908 | 0;
 $101 = sp + 1824 | 0;
 $102 = sp + 1848 | 0;
 $103 = sp + 24 | 0;
 $$sroa$4364 = sp + 1914 | 0;
 $104 = sp + 1536 | 0;
 $105 = sp + 1356 | 0;
 $106 = sp + 1296 | 0;
 $op3 = sp + 1200 | 0;
 $op27 = sp + 1080 | 0;
 $op18 = sp + 1032 | 0;
 $107 = sp + 960 | 0;
 $$sroa$4 = sp + 2026 | 0;
 $108 = sp + 1788 | 0;
 $109 = sp + 848 | 0;
 $110 = sp + 760 | 0;
 $111 = sp + 664 | 0;
 $112 = sp + 600 | 0;
 $113 = sp + 344 | 0;
 $114 = sp + 248 | 0;
 $115 = sp + 184 | 0;
 $116 = sp + 944 | 0;
 $117 = sp + 72 | 0;
 $118 = $last;
 $120 = $118 - $first | 0;
 if (($120 | 0) <= 1) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $122 = ($120 | 0) > 3;
 if ($122) if ((HEAP8[$first >> 0] | 0) == 103) {
  $127 = (HEAP8[$first + 1 >> 0] | 0) == 115;
  $parsed_gs$0$off0 = $127;
  $t$0 = $127 ? $first + 2 | 0 : $first;
 } else {
  $parsed_gs$0$off0 = 0;
  $t$0 = $first;
 } else {
  $parsed_gs$0$off0 = 0;
  $t$0 = $first;
 }
 do switch (HEAP8[$t$0 >> 0] | 0) {
 case 99:
  {
   switch (HEAP8[$t$0 + 1 >> 0] | 0) {
   case 99:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 99) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 99) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $317 = $first + 2 | 0;
     $318 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($317, $last, $db) | 0;
     if (($318 | 0) == ($317 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $320 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($318, $last, $db) | 0;
     if (($320 | 0) == ($318 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $322 = $db + 4 | 0;
     $323 = HEAP32[$322 >> 2] | 0;
     if ((($323 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i299, $323 + -24 | 0);
     $331 = HEAP32[$322 >> 2] | 0;
     $332 = $331 + -24 | 0;
     $334 = $331;
     do {
      $333 = $334 + -24 | 0;
      HEAP32[$322 >> 2] = $333;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($333);
      $334 = HEAP32[$322 >> 2] | 0;
     } while (($334 | 0) != ($332 | 0));
     $337 = $331 + -48 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8, $337);
     $338 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($8, 0, 60696, 11) | 0;
     HEAP32[$7 + 0 >> 2] = HEAP32[$338 + 0 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$338 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$338 + 8 >> 2];
     HEAP32[$338 + 0 >> 2] = 0;
     HEAP32[$338 + 4 >> 2] = 0;
     HEAP32[$338 + 8 >> 2] = 0;
     $339 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, 59472, 2) | 0;
     HEAP32[$6 + 0 >> 2] = HEAP32[$339 + 0 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$339 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$339 + 8 >> 2];
     HEAP32[$339 + 0 >> 2] = 0;
     HEAP32[$339 + 4 >> 2] = 0;
     HEAP32[$339 + 8 >> 2] = 0;
     $340 = HEAP8[$expr$i299 >> 0] | 0;
     $342 = ($340 & 1) == 0;
     if ($342) {
      $350 = $expr$i299 + 1 | 0;
      $351 = ($340 & 255) >>> 1;
     } else {
      $350 = HEAP32[$expr$i299 + 8 >> 2] | 0;
      $351 = HEAP32[$expr$i299 + 4 >> 2] | 0;
     }
     $352 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6, $350, $351) | 0;
     HEAP32[$5 + 0 >> 2] = HEAP32[$352 + 0 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$352 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$352 + 8 >> 2];
     HEAP32[$352 + 0 >> 2] = 0;
     HEAP32[$352 + 4 >> 2] = 0;
     HEAP32[$352 + 8 >> 2] = 0;
     $353 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5, 58936, 1) | 0;
     $354 = HEAP8[$353 >> 0] | 0;
     $355 = $353 + 1 | 0;
     HEAP8[$$sroa$5416 + 0 >> 0] = HEAP8[$355 + 0 >> 0] | 0;
     HEAP8[$$sroa$5416 + 1 >> 0] = HEAP8[$355 + 1 >> 0] | 0;
     HEAP8[$$sroa$5416 + 2 >> 0] = HEAP8[$355 + 2 >> 0] | 0;
     HEAP8[$$sroa$5416 + 3 >> 0] = HEAP8[$355 + 3 >> 0] | 0;
     HEAP8[$$sroa$5416 + 4 >> 0] = HEAP8[$355 + 4 >> 0] | 0;
     HEAP8[$$sroa$5416 + 5 >> 0] = HEAP8[$355 + 5 >> 0] | 0;
     HEAP8[$$sroa$5416 + 6 >> 0] = HEAP8[$355 + 6 >> 0] | 0;
     $357 = HEAP32[$353 + 8 >> 2] | 0;
     HEAP32[$353 + 0 >> 2] = 0;
     HEAP32[$353 + 4 >> 2] = 0;
     HEAP32[$353 + 8 >> 2] = 0;
     HEAP8[$4 >> 0] = $354;
     $358 = $4 + 1 | 0;
     HEAP8[$358 + 0 >> 0] = HEAP8[$$sroa$5416 + 0 >> 0] | 0;
     HEAP8[$358 + 1 >> 0] = HEAP8[$$sroa$5416 + 1 >> 0] | 0;
     HEAP8[$358 + 2 >> 0] = HEAP8[$$sroa$5416 + 2 >> 0] | 0;
     HEAP8[$358 + 3 >> 0] = HEAP8[$$sroa$5416 + 3 >> 0] | 0;
     HEAP8[$358 + 4 >> 0] = HEAP8[$$sroa$5416 + 4 >> 0] | 0;
     HEAP8[$358 + 5 >> 0] = HEAP8[$$sroa$5416 + 5 >> 0] | 0;
     HEAP8[$358 + 6 >> 0] = HEAP8[$$sroa$5416 + 6 >> 0] | 0;
     HEAP32[$4 + 8 >> 2] = $357;
     HEAP8[$$sroa$5416 + 0 >> 0] = 0;
     HEAP8[$$sroa$5416 + 1 >> 0] = 0;
     HEAP8[$$sroa$5416 + 2 >> 0] = 0;
     HEAP8[$$sroa$5416 + 3 >> 0] = 0;
     HEAP8[$$sroa$5416 + 4 >> 0] = 0;
     HEAP8[$$sroa$5416 + 5 >> 0] = 0;
     HEAP8[$$sroa$5416 + 6 >> 0] = 0;
     $360 = $4 + 12 | 0;
     HEAP32[$360 + 0 >> 2] = 0;
     HEAP32[$360 + 4 >> 2] = 0;
     HEAP32[$360 + 8 >> 2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($337, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     if (HEAP8[$5 >> 0] & 1) _free(HEAP32[$5 + 8 >> 2] | 0);
     if (HEAP8[$6 >> 0] & 1) _free(HEAP32[$6 + 8 >> 2] | 0);
     if (HEAP8[$7 >> 0] & 1) _free(HEAP32[$7 + 8 >> 2] | 0);
     if (HEAP8[$8 >> 0] & 1) _free(HEAP32[$8 + 8 >> 2] | 0);
     if ($342) {
      $$0 = $320;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$expr$i299 + 8 >> 2] | 0);
     $$0 = $320;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 109:
    {
     $501 = $first + 2 | 0;
     HEAP8[$61 >> 0] = 2;
     HEAP8[$61 + 1 >> 0] = 44;
     HEAP8[$61 + 2 >> 0] = 0;
     $504 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($501, $last, $61, $db) | 0;
     $$0 = ($504 | 0) == ($501 | 0) ? $first : $504;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 118:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 99) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 118) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $517 = $db + 63 | 0;
     $518 = HEAP8[$517 >> 0] | 0;
     HEAP8[$517 >> 0] = 0;
     $519 = $first + 2 | 0;
     $520 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($519, $last, $db) | 0;
     HEAP8[$517 >> 0] = $518;
     if (($520 | 0) == ($519 | 0) | ($520 | 0) == ($last | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$520 >> 0] | 0) == 95) {
      $527 = $520 + 1 | 0;
      if (($527 | 0) == ($last | 0)) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      }
      $529 = HEAP8[$527 >> 0] | 0;
      L75 : do if ($529 << 24 >> 24 == 69) {
       $531 = $db + 4 | 0;
       $532 = HEAP32[$531 >> 2] | 0;
       $534 = HEAP32[$db + 8 >> 2] | 0;
       if ($532 >>> 0 < $534 >>> 0) {
        if (!$532) $538 = 0; else {
         HEAP32[$532 + 0 >> 2] = 0;
         HEAP32[$532 + 4 >> 2] = 0;
         HEAP32[$532 + 8 >> 2] = 0;
         HEAP32[$532 + 12 >> 2] = 0;
         HEAP32[$532 + 16 >> 2] = 0;
         HEAP32[$532 + 20 >> 2] = 0;
         $538 = HEAP32[$531 >> 2] | 0;
        }
        HEAP32[$531 >> 2] = $538 + 24;
        $t$1$i257 = $527;
        break;
       }
       $542 = HEAP32[$db >> 2] | 0;
       $544 = ($532 - $542 | 0) / 24 | 0;
       $545 = $544 + 1 | 0;
       if (($545 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
       $549 = ($534 - $542 | 0) / 24 | 0;
       if ($549 >>> 0 < 1073741823) {
        $551 = $549 << 1;
        $$0$i$i$i$i254 = $551 >>> 0 < $545 >>> 0 ? $545 : $551;
       } else $$0$i$i$i$i254 = 2147483647;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($$sroa$5422, $$0$i$i$i$i254, $544, $db + 12 | 0);
       $554 = $$sroa$5422 + 8 | 0;
       $555 = HEAP32[$554 >> 2] | 0;
       if ($555) {
        HEAP32[$555 + 0 >> 2] = 0;
        HEAP32[$555 + 4 >> 2] = 0;
        HEAP32[$555 + 8 >> 2] = 0;
        HEAP32[$555 + 12 >> 2] = 0;
        HEAP32[$555 + 16 >> 2] = 0;
        HEAP32[$555 + 20 >> 2] = 0;
       }
       HEAP32[$554 >> 2] = $555 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $$sroa$5422);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($$sroa$5422);
       $t$1$i257 = $527;
      } else {
       $559 = $529;
       $t$0$i256 = $527;
       while (1) {
        if ($559 << 24 >> 24 == 69) {
         $t$1$i257 = $t$0$i256;
         break L75;
        }
        $560 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$0$i256, $last, $db) | 0;
        if (($560 | 0) == ($t$0$i256 | 0) | ($560 | 0) == ($last | 0)) {
         $$0 = $first;
         break;
        }
        $559 = HEAP8[$560 >> 0] | 0;
        $t$0$i256 = $560;
       }
       STACKTOP = sp;
       return $$0 | 0;
      } while (0);
      $t$2$i258 = $t$1$i257 + 1 | 0;
     } else {
      $525 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($520, $last, $db) | 0;
      if (($525 | 0) == ($520 | 0)) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      } else $t$2$i258 = $525;
     }
     $564 = $db + 4 | 0;
     $565 = HEAP32[$564 >> 2] | 0;
     if ((($565 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp2$i, $565 + -24 | 0);
     $573 = HEAP32[$564 >> 2] | 0;
     $574 = $573 + -24 | 0;
     $576 = $573;
     do {
      $575 = $576 + -24 | 0;
      HEAP32[$564 >> 2] = $575;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($575);
      $576 = HEAP32[$564 >> 2] | 0;
     } while (($576 | 0) != ($574 | 0));
     $579 = $573 + -48 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($13, $579);
     $580 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($13, 0, 58944, 1) | 0;
     HEAP32[$12 + 0 >> 2] = HEAP32[$580 + 0 >> 2];
     HEAP32[$12 + 4 >> 2] = HEAP32[$580 + 4 >> 2];
     HEAP32[$12 + 8 >> 2] = HEAP32[$580 + 8 >> 2];
     HEAP32[$580 + 0 >> 2] = 0;
     HEAP32[$580 + 4 >> 2] = 0;
     HEAP32[$580 + 8 >> 2] = 0;
     $581 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($12, 60688, 2) | 0;
     HEAP32[$11 + 0 >> 2] = HEAP32[$581 + 0 >> 2];
     HEAP32[$11 + 4 >> 2] = HEAP32[$581 + 4 >> 2];
     HEAP32[$11 + 8 >> 2] = HEAP32[$581 + 8 >> 2];
     HEAP32[$581 + 0 >> 2] = 0;
     HEAP32[$581 + 4 >> 2] = 0;
     HEAP32[$581 + 8 >> 2] = 0;
     $582 = HEAP8[$tmp2$i >> 0] | 0;
     $584 = ($582 & 1) == 0;
     if ($584) {
      $592 = $tmp2$i + 1 | 0;
      $593 = ($582 & 255) >>> 1;
     } else {
      $592 = HEAP32[$tmp2$i + 8 >> 2] | 0;
      $593 = HEAP32[$tmp2$i + 4 >> 2] | 0;
     }
     $594 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($11, $592, $593) | 0;
     HEAP32[$10 + 0 >> 2] = HEAP32[$594 + 0 >> 2];
     HEAP32[$10 + 4 >> 2] = HEAP32[$594 + 4 >> 2];
     HEAP32[$10 + 8 >> 2] = HEAP32[$594 + 8 >> 2];
     HEAP32[$594 + 0 >> 2] = 0;
     HEAP32[$594 + 4 >> 2] = 0;
     HEAP32[$594 + 8 >> 2] = 0;
     $595 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($10, 58936, 1) | 0;
     $596 = HEAP8[$595 >> 0] | 0;
     $597 = $595 + 1 | 0;
     HEAP8[$$sroa$5410 + 0 >> 0] = HEAP8[$597 + 0 >> 0] | 0;
     HEAP8[$$sroa$5410 + 1 >> 0] = HEAP8[$597 + 1 >> 0] | 0;
     HEAP8[$$sroa$5410 + 2 >> 0] = HEAP8[$597 + 2 >> 0] | 0;
     HEAP8[$$sroa$5410 + 3 >> 0] = HEAP8[$597 + 3 >> 0] | 0;
     HEAP8[$$sroa$5410 + 4 >> 0] = HEAP8[$597 + 4 >> 0] | 0;
     HEAP8[$$sroa$5410 + 5 >> 0] = HEAP8[$597 + 5 >> 0] | 0;
     HEAP8[$$sroa$5410 + 6 >> 0] = HEAP8[$597 + 6 >> 0] | 0;
     $599 = HEAP32[$595 + 8 >> 2] | 0;
     HEAP32[$595 + 0 >> 2] = 0;
     HEAP32[$595 + 4 >> 2] = 0;
     HEAP32[$595 + 8 >> 2] = 0;
     HEAP8[$9 >> 0] = $596;
     $600 = $9 + 1 | 0;
     HEAP8[$600 + 0 >> 0] = HEAP8[$$sroa$5410 + 0 >> 0] | 0;
     HEAP8[$600 + 1 >> 0] = HEAP8[$$sroa$5410 + 1 >> 0] | 0;
     HEAP8[$600 + 2 >> 0] = HEAP8[$$sroa$5410 + 2 >> 0] | 0;
     HEAP8[$600 + 3 >> 0] = HEAP8[$$sroa$5410 + 3 >> 0] | 0;
     HEAP8[$600 + 4 >> 0] = HEAP8[$$sroa$5410 + 4 >> 0] | 0;
     HEAP8[$600 + 5 >> 0] = HEAP8[$$sroa$5410 + 5 >> 0] | 0;
     HEAP8[$600 + 6 >> 0] = HEAP8[$$sroa$5410 + 6 >> 0] | 0;
     HEAP32[$9 + 8 >> 2] = $599;
     HEAP8[$$sroa$5410 + 0 >> 0] = 0;
     HEAP8[$$sroa$5410 + 1 >> 0] = 0;
     HEAP8[$$sroa$5410 + 2 >> 0] = 0;
     HEAP8[$$sroa$5410 + 3 >> 0] = 0;
     HEAP8[$$sroa$5410 + 4 >> 0] = 0;
     HEAP8[$$sroa$5410 + 5 >> 0] = 0;
     HEAP8[$$sroa$5410 + 6 >> 0] = 0;
     $602 = $9 + 12 | 0;
     HEAP32[$602 + 0 >> 2] = 0;
     HEAP32[$602 + 4 >> 2] = 0;
     HEAP32[$602 + 8 >> 2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($579, $9);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
     if (HEAP8[$10 >> 0] & 1) _free(HEAP32[$10 + 8 >> 2] | 0);
     if (HEAP8[$11 >> 0] & 1) _free(HEAP32[$11 + 8 >> 2] | 0);
     if (HEAP8[$12 >> 0] & 1) _free(HEAP32[$12 + 8 >> 2] | 0);
     if (HEAP8[$13 >> 0] & 1) _free(HEAP32[$13 + 8 >> 2] | 0);
     if ($584) {
      $$0 = $t$2$i258;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$tmp2$i + 8 >> 2] | 0);
     $$0 = $t$2$i258;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 111:
    {
     $506 = $first + 2 | 0;
     HEAP8[$62 >> 0] = 2;
     HEAP8[$62 + 1 >> 0] = 126;
     HEAP8[$62 + 2 >> 0] = 0;
     $509 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($506, $last, $62, $db) | 0;
     $$0 = ($509 | 0) == ($506 | 0) ? $first : $509;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 108:
    {
     if (!$122) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 99) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 108) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $385 = $first + 2 | 0;
     $386 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($385, $last, $db) | 0;
     if (($386 | 0) == ($385 | 0) | ($386 | 0) == ($last | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $390 = $db + 4 | 0;
     $391 = HEAP32[$390 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($391 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $394 = $391 + -12 | 0;
     $395 = HEAP8[$394 >> 0] | 0;
     if (!($395 & 1)) {
      $405 = $394 + 1 | 0;
      $406 = ($395 & 255) >>> 1;
     } else {
      $405 = HEAP32[$391 + -4 >> 2] | 0;
      $406 = HEAP32[$391 + -8 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($391 + -24 | 0, $405, $406) | 0;
     $407 = HEAP32[$390 >> 2] | 0;
     $408 = $407 + -12 | 0;
     HEAP8[$$sroa$5413 + 0 >> 0] = 0;
     HEAP8[$$sroa$5413 + 1 >> 0] = 0;
     HEAP8[$$sroa$5413 + 2 >> 0] = 0;
     HEAP8[$$sroa$5413 + 3 >> 0] = 0;
     HEAP8[$$sroa$5413 + 4 >> 0] = 0;
     HEAP8[$$sroa$5413 + 5 >> 0] = 0;
     HEAP8[$$sroa$5413 + 6 >> 0] = 0;
     do if (!(HEAP8[$408 >> 0] & 1)) {
      HEAP8[$408 + 1 >> 0] = 0;
      HEAP8[$408 >> 0] = 0;
     } else {
      $413 = $407 + -4 | 0;
      HEAP8[HEAP32[$413 >> 2] >> 0] = 0;
      $415 = $407 + -8 | 0;
      HEAP32[$415 >> 2] = 0;
      $$pre$i$i$i$i274 = HEAP8[$408 >> 0] | 0;
      if (!($$pre$i$i$i$i274 & 1)) {
       $422 = $$pre$i$i$i$i274;
       $431 = 10;
      } else {
       $418 = HEAP32[$408 >> 2] | 0;
       $422 = $418 & 255;
       $431 = ($418 & -2) + -1 | 0;
      }
      if (!($422 & 1)) {
       $425 = ($422 & 255) >>> 1;
       if (($422 & 255) < 22) {
        $2137 = 1;
        $430 = 10;
        $450 = $425;
       } else {
        $2137 = 1;
        $430 = ($425 + 16 & 240) + -1 | 0;
        $450 = $425;
       }
      } else {
       $2137 = 0;
       $430 = 10;
       $450 = 0;
      }
      if (($430 | 0) != ($431 | 0)) {
       if (($430 | 0) == 10) {
        $437 = $408 + 1 | 0;
        $438 = HEAP32[$413 >> 2] | 0;
        if ($2137) {
         _memcpy($437 | 0, $438 | 0, (($422 & 255) >>> 1) + 1 | 0) | 0;
         _free($438);
        } else {
         HEAP8[$437 >> 0] = HEAP8[$438 >> 0] | 0;
         _free($438);
        }
        HEAP8[$408 >> 0] = $450 << 1;
        break;
       }
       $434 = $430 + 1 | 0;
       $435 = _malloc($434) | 0;
       if (!($430 >>> 0 <= $431 >>> 0 & ($435 | 0) == 0)) {
        if ($2137) _memcpy($435 | 0, $408 + 1 | 0, (($422 & 255) >>> 1) + 1 | 0) | 0; else {
         $447 = HEAP32[$413 >> 2] | 0;
         HEAP8[$435 >> 0] = HEAP8[$447 >> 0] | 0;
         _free($447);
        }
        HEAP32[$408 >> 2] = $434 | 1;
        HEAP32[$415 >> 2] = $450;
        HEAP32[$413 >> 2] = $435;
       }
      }
     } while (0);
     HEAP8[$407 + -12 >> 0] = 0;
     $454 = $407 + -11 | 0;
     HEAP8[$454 + 0 >> 0] = HEAP8[$$sroa$5413 + 0 >> 0] | 0;
     HEAP8[$454 + 1 >> 0] = HEAP8[$$sroa$5413 + 1 >> 0] | 0;
     HEAP8[$454 + 2 >> 0] = HEAP8[$$sroa$5413 + 2 >> 0] | 0;
     HEAP8[$454 + 3 >> 0] = HEAP8[$$sroa$5413 + 3 >> 0] | 0;
     HEAP8[$454 + 4 >> 0] = HEAP8[$$sroa$5413 + 4 >> 0] | 0;
     HEAP8[$454 + 5 >> 0] = HEAP8[$$sroa$5413 + 5 >> 0] | 0;
     HEAP8[$454 + 6 >> 0] = HEAP8[$$sroa$5413 + 6 >> 0] | 0;
     HEAP32[$407 + -4 >> 2] = 0;
     HEAP8[$$sroa$5413 + 0 >> 0] = 0;
     HEAP8[$$sroa$5413 + 1 >> 0] = 0;
     HEAP8[$$sroa$5413 + 2 >> 0] = 0;
     HEAP8[$$sroa$5413 + 3 >> 0] = 0;
     HEAP8[$$sroa$5413 + 4 >> 0] = 0;
     HEAP8[$$sroa$5413 + 5 >> 0] = 0;
     HEAP8[$$sroa$5413 + 6 >> 0] = 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$390 >> 2] | 0) + -24 | 0, 58944, 1) | 0;
     L171 : do if ((HEAP8[$386 >> 0] | 0) == 69) $t$0$i289$lcssa = $386; else {
      $459 = $tmp$i270 + 1 | 0;
      $460 = $tmp$i270 + 8 | 0;
      $461 = $tmp$i270 + 4 | 0;
      $t$0$i289386 = $386;
      while (1) {
       $462 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$0$i289386, $last, $db) | 0;
       if (($462 | 0) == ($t$0$i289386 | 0) | ($462 | 0) == ($last | 0)) {
        $$0 = $first;
        label = 673;
        break;
       }
       $466 = HEAP32[$390 >> 2] | 0;
       if ((HEAP32[$db >> 2] | 0) == ($466 | 0)) {
        $$0 = $first;
        label = 673;
        break;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i270, $466 + -24 | 0);
       $469 = HEAP32[$390 >> 2] | 0;
       $470 = $469 + -24 | 0;
       $472 = $469;
       do {
        $471 = $472 + -24 | 0;
        HEAP32[$390 >> 2] = $471;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($471);
        $472 = HEAP32[$390 >> 2] | 0;
       } while (($472 | 0) != ($470 | 0));
       $475 = HEAP8[$tmp$i270 >> 0] | 0;
       $477 = ($475 & 1) == 0;
       if ($477) $482 = ($475 & 255) >>> 1; else $482 = HEAP32[$461 >> 2] | 0;
       if ($482) {
        if ((HEAP32[$db >> 2] | 0) == ($470 | 0)) {
         label = 135;
         break;
        }
        if ($477) {
         $490 = $459;
         $491 = ($475 & 255) >>> 1;
        } else {
         $490 = HEAP32[$460 >> 2] | 0;
         $491 = HEAP32[$461 >> 2] | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($469 + -48 | 0, $490, $491) | 0;
       }
       if (!$477) _free(HEAP32[$460 >> 2] | 0);
       if ((HEAP8[$462 >> 0] | 0) == 69) {
        $t$0$i289$lcssa = $462;
        break L171;
       } else $t$0$i289386 = $462;
      }
      if ((label | 0) == 135) {
       if ($477) {
        $$0 = $first;
        STACKTOP = sp;
        return $$0 | 0;
       }
       _free(HEAP32[$460 >> 2] | 0);
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      } else if ((label | 0) == 673) {
       STACKTOP = sp;
       return $$0 | 0;
      }
     } while (0);
     $497 = HEAP32[$390 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($497 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($497 + -24 | 0, 58936, 1) | 0;
     $$0 = $t$0$i289$lcssa + 1 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 109:
  {
   switch (HEAP8[$t$0 + 1 >> 0] | 0) {
   case 105:
    {
     $1115 = $first + 2 | 0;
     HEAP8[$85 >> 0] = 2;
     HEAP8[$85 + 1 >> 0] = 45;
     HEAP8[$85 + 2 >> 0] = 0;
     $1118 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1115, $last, $85, $db) | 0;
     $$0 = ($1118 | 0) == ($1115 | 0) ? $first : $1118;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 73:
    {
     $1120 = $first + 2 | 0;
     HEAP8[$86 >> 0] = 4;
     $1121 = $86 + 1 | 0;
     HEAP8[$1121 >> 0] = 45;
     HEAP8[$1121 + 1 >> 0] = 61;
     HEAP8[$86 + 3 >> 0] = 0;
     $1123 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1120, $last, $86, $db) | 0;
     $$0 = ($1123 | 0) == ($1120 | 0) ? $first : $1123;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 108:
    {
     $1125 = $first + 2 | 0;
     HEAP8[$87 >> 0] = 2;
     HEAP8[$87 + 1 >> 0] = 42;
     HEAP8[$87 + 2 >> 0] = 0;
     $1128 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1125, $last, $87, $db) | 0;
     $$0 = ($1128 | 0) == ($1125 | 0) ? $first : $1128;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 76:
    {
     $1130 = $first + 2 | 0;
     HEAP8[$88 >> 0] = 4;
     $1131 = $88 + 1 | 0;
     HEAP8[$1131 >> 0] = 42;
     HEAP8[$1131 + 1 >> 0] = 61;
     HEAP8[$88 + 3 >> 0] = 0;
     $1133 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1130, $last, $88, $db) | 0;
     $$0 = ($1133 | 0) == ($1130 | 0) ? $first : $1133;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 109:
    {
     $1135 = $first + 2 | 0;
     if (($1135 | 0) != ($last | 0)) if ((HEAP8[$1135 >> 0] | 0) == 95) {
      $1139 = $first + 3 | 0;
      HEAP8[$89 >> 0] = 4;
      $1140 = $89 + 1 | 0;
      HEAP8[$1140 >> 0] = 45;
      HEAP8[$1140 + 1 >> 0] = 45;
      HEAP8[$89 + 3 >> 0] = 0;
      $1142 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1139, $last, $89, $db) | 0;
      $$0 = ($1142 | 0) == ($1139 | 0) ? $first : $1142;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1144 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1135, $last, $db) | 0;
     if (($1144 | 0) == ($1135 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1148 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($1148 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1150 = $1148 + -24 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($92, $1150);
     $1151 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($92, 0, 58944, 1) | 0;
     HEAP32[$91 + 0 >> 2] = HEAP32[$1151 + 0 >> 2];
     HEAP32[$91 + 4 >> 2] = HEAP32[$1151 + 4 >> 2];
     HEAP32[$91 + 8 >> 2] = HEAP32[$1151 + 8 >> 2];
     HEAP32[$1151 + 0 >> 2] = 0;
     HEAP32[$1151 + 4 >> 2] = 0;
     HEAP32[$1151 + 8 >> 2] = 0;
     $1152 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($91, 59256, 3) | 0;
     $1153 = HEAP8[$1152 >> 0] | 0;
     $1154 = $1152 + 1 | 0;
     HEAP8[$$sroa$4367 + 0 >> 0] = HEAP8[$1154 + 0 >> 0] | 0;
     HEAP8[$$sroa$4367 + 1 >> 0] = HEAP8[$1154 + 1 >> 0] | 0;
     HEAP8[$$sroa$4367 + 2 >> 0] = HEAP8[$1154 + 2 >> 0] | 0;
     HEAP8[$$sroa$4367 + 3 >> 0] = HEAP8[$1154 + 3 >> 0] | 0;
     HEAP8[$$sroa$4367 + 4 >> 0] = HEAP8[$1154 + 4 >> 0] | 0;
     HEAP8[$$sroa$4367 + 5 >> 0] = HEAP8[$1154 + 5 >> 0] | 0;
     HEAP8[$$sroa$4367 + 6 >> 0] = HEAP8[$1154 + 6 >> 0] | 0;
     $1156 = HEAP32[$1152 + 8 >> 2] | 0;
     HEAP32[$1152 + 0 >> 2] = 0;
     HEAP32[$1152 + 4 >> 2] = 0;
     HEAP32[$1152 + 8 >> 2] = 0;
     HEAP8[$90 >> 0] = $1153;
     $1157 = $90 + 1 | 0;
     HEAP8[$1157 + 0 >> 0] = HEAP8[$$sroa$4367 + 0 >> 0] | 0;
     HEAP8[$1157 + 1 >> 0] = HEAP8[$$sroa$4367 + 1 >> 0] | 0;
     HEAP8[$1157 + 2 >> 0] = HEAP8[$$sroa$4367 + 2 >> 0] | 0;
     HEAP8[$1157 + 3 >> 0] = HEAP8[$$sroa$4367 + 3 >> 0] | 0;
     HEAP8[$1157 + 4 >> 0] = HEAP8[$$sroa$4367 + 4 >> 0] | 0;
     HEAP8[$1157 + 5 >> 0] = HEAP8[$$sroa$4367 + 5 >> 0] | 0;
     HEAP8[$1157 + 6 >> 0] = HEAP8[$$sroa$4367 + 6 >> 0] | 0;
     HEAP32[$90 + 8 >> 2] = $1156;
     HEAP8[$$sroa$4367 + 0 >> 0] = 0;
     HEAP8[$$sroa$4367 + 1 >> 0] = 0;
     HEAP8[$$sroa$4367 + 2 >> 0] = 0;
     HEAP8[$$sroa$4367 + 3 >> 0] = 0;
     HEAP8[$$sroa$4367 + 4 >> 0] = 0;
     HEAP8[$$sroa$4367 + 5 >> 0] = 0;
     HEAP8[$$sroa$4367 + 6 >> 0] = 0;
     $1159 = $90 + 12 | 0;
     HEAP32[$1159 + 0 >> 2] = 0;
     HEAP32[$1159 + 4 >> 2] = 0;
     HEAP32[$1159 + 8 >> 2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1150, $90);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($90);
     if (HEAP8[$91 >> 0] & 1) _free(HEAP32[$91 + 8 >> 2] | 0);
     if (!(HEAP8[$92 >> 0] & 1)) {
      $$0 = $1144;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$92 + 8 >> 2] | 0);
     $$0 = $1144;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 108:
  {
   $1091 = HEAP8[$t$0 + 1 >> 0] | 0;
   if (($1091 | 0) == 116) {
    $1107 = $first + 2 | 0;
    HEAP8[$84 >> 0] = 2;
    HEAP8[$84 + 1 >> 0] = 60;
    HEAP8[$84 + 2 >> 0] = 0;
    $1110 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1107, $last, $84, $db) | 0;
    $$0 = ($1110 | 0) == ($1107 | 0) ? $first : $1110;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($1091 | 0) == 101) {
    $1092 = $first + 2 | 0;
    HEAP8[$81 >> 0] = 4;
    $1093 = $81 + 1 | 0;
    HEAP8[$1093 >> 0] = 60;
    HEAP8[$1093 + 1 >> 0] = 61;
    HEAP8[$81 + 3 >> 0] = 0;
    $1095 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1092, $last, $81, $db) | 0;
    $$0 = ($1095 | 0) == ($1092 | 0) ? $first : $1095;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($1091 | 0) == 115) {
    $1097 = $first + 2 | 0;
    HEAP8[$82 >> 0] = 4;
    $1098 = $82 + 1 | 0;
    HEAP8[$1098 >> 0] = 60;
    HEAP8[$1098 + 1 >> 0] = 60;
    HEAP8[$82 + 3 >> 0] = 0;
    $1100 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1097, $last, $82, $db) | 0;
    $$0 = ($1100 | 0) == ($1097 | 0) ? $first : $1100;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($1091 | 0) == 83) {
    $1102 = $first + 2 | 0;
    HEAP8[$83 >> 0] = 6;
    $1103 = $83 + 1 | 0;
    HEAP8[$1103 + 0 >> 0] = HEAP8[59216] | 0;
    HEAP8[$1103 + 1 >> 0] = HEAP8[59217] | 0;
    HEAP8[$1103 + 2 >> 0] = HEAP8[59218] | 0;
    HEAP8[$83 + 4 >> 0] = 0;
    $1105 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1102, $last, $83, $db) | 0;
    $$0 = ($1105 | 0) == ($1102 | 0) ? $first : $1105;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 103:
  {
   $1006 = HEAP8[$t$0 + 1 >> 0] | 0;
   if (($1006 | 0) == 101) {
    $1007 = $first + 2 | 0;
    HEAP8[$75 >> 0] = 4;
    $1008 = $75 + 1 | 0;
    HEAP8[$1008 >> 0] = 62;
    HEAP8[$1008 + 1 >> 0] = 61;
    HEAP8[$75 + 3 >> 0] = 0;
    $1010 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1007, $last, $75, $db) | 0;
    $$0 = ($1010 | 0) == ($1007 | 0) ? $first : $1010;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($1006 | 0) == 116) {
    $1012 = $first + 2 | 0;
    HEAP8[$76 >> 0] = 2;
    HEAP8[$76 + 1 >> 0] = 62;
    HEAP8[$76 + 2 >> 0] = 0;
    $1015 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1012, $last, $76, $db) | 0;
    $$0 = ($1015 | 0) == ($1012 | 0) ? $first : $1015;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 105:
  {
   if ((HEAP8[$t$0 + 1 >> 0] | 0) != 120) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1020 = $first + 2 | 0;
   $1021 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1020, $last, $db) | 0;
   if (($1021 | 0) == ($1020 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1023 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1021, $last, $db) | 0;
   $1025 = $db + 4 | 0;
   $1026 = HEAP32[$1025 >> 2] | 0;
   if (($1023 | 0) == ($1021 | 0)) {
    $1084 = $1026 + -24 | 0;
    $1086 = $1026;
    do {
     $1085 = $1086 + -24 | 0;
     HEAP32[$1025 >> 2] = $1085;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1085);
     $1086 = HEAP32[$1025 >> 2] | 0;
    } while (($1086 | 0) != ($1084 | 0));
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if ((($1026 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op2, $1026 + -24 | 0);
   $1034 = HEAP32[$1025 >> 2] | 0;
   $1035 = $1034 + -24 | 0;
   $1037 = $1034;
   do {
    $1036 = $1037 + -24 | 0;
    HEAP32[$1025 >> 2] = $1036;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1036);
    $1037 = HEAP32[$1025 >> 2] | 0;
   } while (($1037 | 0) != ($1035 | 0));
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op1, $1034 + -48 | 0);
   $1042 = (HEAP32[$1025 >> 2] | 0) + -24 | 0;
   __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($80, 58944, $op1);
   $1043 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($80, 59192, 2) | 0;
   HEAP32[$79 + 0 >> 2] = HEAP32[$1043 + 0 >> 2];
   HEAP32[$79 + 4 >> 2] = HEAP32[$1043 + 4 >> 2];
   HEAP32[$79 + 8 >> 2] = HEAP32[$1043 + 8 >> 2];
   HEAP32[$1043 + 0 >> 2] = 0;
   HEAP32[$1043 + 4 >> 2] = 0;
   HEAP32[$1043 + 8 >> 2] = 0;
   $1044 = HEAP8[$op2 >> 0] | 0;
   $1046 = ($1044 & 1) == 0;
   if ($1046) {
    $1054 = $op2 + 1 | 0;
    $1055 = ($1044 & 255) >>> 1;
   } else {
    $1054 = HEAP32[$op2 + 8 >> 2] | 0;
    $1055 = HEAP32[$op2 + 4 >> 2] | 0;
   }
   $1056 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($79, $1054, $1055) | 0;
   HEAP32[$78 + 0 >> 2] = HEAP32[$1056 + 0 >> 2];
   HEAP32[$78 + 4 >> 2] = HEAP32[$1056 + 4 >> 2];
   HEAP32[$78 + 8 >> 2] = HEAP32[$1056 + 8 >> 2];
   HEAP32[$1056 + 0 >> 2] = 0;
   HEAP32[$1056 + 4 >> 2] = 0;
   HEAP32[$1056 + 8 >> 2] = 0;
   $1057 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($78, 59056, 1) | 0;
   $1058 = HEAP8[$1057 >> 0] | 0;
   $1059 = $1057 + 1 | 0;
   HEAP8[$$sroa$4370 + 0 >> 0] = HEAP8[$1059 + 0 >> 0] | 0;
   HEAP8[$$sroa$4370 + 1 >> 0] = HEAP8[$1059 + 1 >> 0] | 0;
   HEAP8[$$sroa$4370 + 2 >> 0] = HEAP8[$1059 + 2 >> 0] | 0;
   HEAP8[$$sroa$4370 + 3 >> 0] = HEAP8[$1059 + 3 >> 0] | 0;
   HEAP8[$$sroa$4370 + 4 >> 0] = HEAP8[$1059 + 4 >> 0] | 0;
   HEAP8[$$sroa$4370 + 5 >> 0] = HEAP8[$1059 + 5 >> 0] | 0;
   HEAP8[$$sroa$4370 + 6 >> 0] = HEAP8[$1059 + 6 >> 0] | 0;
   $1061 = HEAP32[$1057 + 8 >> 2] | 0;
   HEAP32[$1057 + 0 >> 2] = 0;
   HEAP32[$1057 + 4 >> 2] = 0;
   HEAP32[$1057 + 8 >> 2] = 0;
   HEAP8[$77 >> 0] = $1058;
   $1062 = $77 + 1 | 0;
   HEAP8[$1062 + 0 >> 0] = HEAP8[$$sroa$4370 + 0 >> 0] | 0;
   HEAP8[$1062 + 1 >> 0] = HEAP8[$$sroa$4370 + 1 >> 0] | 0;
   HEAP8[$1062 + 2 >> 0] = HEAP8[$$sroa$4370 + 2 >> 0] | 0;
   HEAP8[$1062 + 3 >> 0] = HEAP8[$$sroa$4370 + 3 >> 0] | 0;
   HEAP8[$1062 + 4 >> 0] = HEAP8[$$sroa$4370 + 4 >> 0] | 0;
   HEAP8[$1062 + 5 >> 0] = HEAP8[$$sroa$4370 + 5 >> 0] | 0;
   HEAP8[$1062 + 6 >> 0] = HEAP8[$$sroa$4370 + 6 >> 0] | 0;
   HEAP32[$77 + 8 >> 2] = $1061;
   HEAP8[$$sroa$4370 + 0 >> 0] = 0;
   HEAP8[$$sroa$4370 + 1 >> 0] = 0;
   HEAP8[$$sroa$4370 + 2 >> 0] = 0;
   HEAP8[$$sroa$4370 + 3 >> 0] = 0;
   HEAP8[$$sroa$4370 + 4 >> 0] = 0;
   HEAP8[$$sroa$4370 + 5 >> 0] = 0;
   HEAP8[$$sroa$4370 + 6 >> 0] = 0;
   $1064 = $77 + 12 | 0;
   HEAP32[$1064 + 0 >> 2] = 0;
   HEAP32[$1064 + 4 >> 2] = 0;
   HEAP32[$1064 + 8 >> 2] = 0;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1042, $77);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($77);
   if (HEAP8[$78 >> 0] & 1) _free(HEAP32[$78 + 8 >> 2] | 0);
   if (HEAP8[$79 >> 0] & 1) _free(HEAP32[$79 + 8 >> 2] | 0);
   if (HEAP8[$80 >> 0] & 1) _free(HEAP32[$80 + 8 >> 2] | 0);
   if (HEAP8[$op1 >> 0] & 1) _free(HEAP32[$op1 + 8 >> 2] | 0);
   if ($1046) {
    $$0 = $1023;
    STACKTOP = sp;
    return $$0 | 0;
   }
   _free(HEAP32[$op2 + 8 >> 2] | 0);
   $$0 = $1023;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 101:
  {
   $988 = HEAP8[$t$0 + 1 >> 0] | 0;
   if (($988 | 0) == 111) {
    $989 = $first + 2 | 0;
    HEAP8[$72 >> 0] = 2;
    HEAP8[$72 + 1 >> 0] = 94;
    HEAP8[$72 + 2 >> 0] = 0;
    $992 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($989, $last, $72, $db) | 0;
    $$0 = ($992 | 0) == ($989 | 0) ? $first : $992;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($988 | 0) == 79) {
    $994 = $first + 2 | 0;
    HEAP8[$73 >> 0] = 4;
    $995 = $73 + 1 | 0;
    HEAP8[$995 >> 0] = 94;
    HEAP8[$995 + 1 >> 0] = 61;
    HEAP8[$73 + 3 >> 0] = 0;
    $997 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($994, $last, $73, $db) | 0;
    $$0 = ($997 | 0) == ($994 | 0) ? $first : $997;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($988 | 0) == 113) {
    $999 = $first + 2 | 0;
    HEAP8[$74 >> 0] = 4;
    $1000 = $74 + 1 | 0;
    HEAP8[$1000 >> 0] = 61;
    HEAP8[$1000 + 1 >> 0] = 61;
    HEAP8[$74 + 3 >> 0] = 0;
    $1002 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($999, $last, $74, $db) | 0;
    $$0 = ($1002 | 0) == ($999 | 0) ? $first : $1002;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 100:
  {
   do switch (HEAP8[$t$0 + 1 >> 0] | 0) {
   case 118:
    {
     $976 = $first + 2 | 0;
     HEAP8[$70 >> 0] = 2;
     HEAP8[$70 + 1 >> 0] = 47;
     HEAP8[$70 + 2 >> 0] = 0;
     $979 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($976, $last, $70, $db) | 0;
     $$0 = ($979 | 0) == ($976 | 0) ? $first : $979;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 86:
    {
     $981 = $first + 2 | 0;
     HEAP8[$71 >> 0] = 4;
     $982 = $71 + 1 | 0;
     HEAP8[$982 >> 0] = 47;
     HEAP8[$982 + 1 >> 0] = 61;
     HEAP8[$71 + 3 >> 0] = 0;
     $984 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($981, $last, $71, $db) | 0;
     $$0 = ($984 | 0) == ($981 | 0) ? $first : $984;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 110:
    {
     $$0 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 115:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 100) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 115) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $884 = $first + 2 | 0;
     $885 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($884, $last, $db) | 0;
     if (($885 | 0) == ($884 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $887 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($885, $last, $db) | 0;
     if (($887 | 0) == ($885 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $889 = $db + 4 | 0;
     $890 = HEAP32[$889 >> 2] | 0;
     if ((($890 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i225, $890 + -24 | 0);
     $898 = HEAP32[$889 >> 2] | 0;
     $899 = $898 + -24 | 0;
     $901 = $898;
     do {
      $900 = $901 + -24 | 0;
      HEAP32[$889 >> 2] = $900;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($900);
      $901 = HEAP32[$889 >> 2] | 0;
     } while (($901 | 0) != ($899 | 0));
     __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($19, 59544, $expr$i225);
     $905 = HEAP8[$19 >> 0] | 0;
     if (!($905 & 1)) {
      $915 = $19 + 1 | 0;
      $916 = ($905 & 255) >>> 1;
     } else {
      $915 = HEAP32[$19 + 8 >> 2] | 0;
      $916 = HEAP32[$19 + 4 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($898 + -48 | 0, $915, $916) | 0;
     if (HEAP8[$19 >> 0] & 1) _free(HEAP32[$19 + 8 >> 2] | 0);
     if (!(HEAP8[$expr$i225 >> 0] & 1)) {
      $$0 = $887;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$expr$i225 + 8 >> 2] | 0);
     $$0 = $887;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 116:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 100) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 116) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $933 = $first + 2 | 0;
     $934 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($933, $last, $db) | 0;
     if (($934 | 0) == ($933 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $936 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($934, $last, $db) | 0;
     if (($936 | 0) == ($934 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $938 = $db + 4 | 0;
     $939 = HEAP32[$938 >> 2] | 0;
     if ((($939 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i, $939 + -24 | 0);
     $947 = HEAP32[$938 >> 2] | 0;
     $948 = $947 + -24 | 0;
     $950 = $947;
     do {
      $949 = $950 + -24 | 0;
      HEAP32[$938 >> 2] = $949;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($949);
      $950 = HEAP32[$938 >> 2] | 0;
     } while (($950 | 0) != ($948 | 0));
     __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($20, 64424, $name$i);
     $954 = HEAP8[$20 >> 0] | 0;
     if (!($954 & 1)) {
      $964 = $20 + 1 | 0;
      $965 = ($954 & 255) >>> 1;
     } else {
      $964 = HEAP32[$20 + 8 >> 2] | 0;
      $965 = HEAP32[$20 + 4 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($947 + -48 | 0, $964, $965) | 0;
     if (HEAP8[$20 >> 0] & 1) _free(HEAP32[$20 + 8 >> 2] | 0);
     if (!(HEAP8[$name$i >> 0] & 1)) {
      $$0 = $936;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$name$i + 8 >> 2] | 0);
     $$0 = $936;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 101:
    {
     $783 = $first + 2 | 0;
     HEAP8[$66 >> 0] = 2;
     HEAP8[$66 + 1 >> 0] = 42;
     HEAP8[$66 + 2 >> 0] = 0;
     $786 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($783, $last, $66, $db) | 0;
     $$0 = ($786 | 0) == ($783 | 0) ? $first : $786;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 108:
    {
     $788 = $t$0 + 2 | 0;
     $789 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($788, $last, $db) | 0;
     if (($789 | 0) == ($788 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $792 = $db + 4 | 0;
     $793 = HEAP32[$792 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($793 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $795 = $793 + -24 | 0;
     if ($parsed_gs$0$off0) {
      HEAP8[$68 >> 0] = 4;
      $796 = $68 + 1 | 0;
      HEAP8[$796 >> 0] = 58;
      HEAP8[$796 + 1 >> 0] = 58;
      HEAP8[$68 + 3 >> 0] = 0;
     } else {
      HEAP32[$68 + 0 >> 2] = 0;
      HEAP32[$68 + 4 >> 2] = 0;
      HEAP32[$68 + 8 >> 2] = 0;
     }
     $798 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($68, 59136, 7) | 0;
     HEAP32[$67 + 0 >> 2] = HEAP32[$798 + 0 >> 2];
     HEAP32[$67 + 4 >> 2] = HEAP32[$798 + 4 >> 2];
     HEAP32[$67 + 8 >> 2] = HEAP32[$798 + 8 >> 2];
     HEAP32[$798 + 0 >> 2] = 0;
     HEAP32[$798 + 4 >> 2] = 0;
     HEAP32[$798 + 8 >> 2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($69, (HEAP32[$792 >> 2] | 0) + -24 | 0);
     $801 = HEAP8[$69 >> 0] | 0;
     $803 = ($801 & 1) == 0;
     if ($803) {
      $811 = $69 + 1 | 0;
      $812 = ($801 & 255) >>> 1;
     } else {
      $811 = HEAP32[$69 + 8 >> 2] | 0;
      $812 = HEAP32[$69 + 4 >> 2] | 0;
     }
     $813 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($67, $811, $812) | 0;
     $814 = HEAP8[$813 >> 0] | 0;
     $815 = $813 + 1 | 0;
     HEAP8[$$sroa$4373 + 0 >> 0] = HEAP8[$815 + 0 >> 0] | 0;
     HEAP8[$$sroa$4373 + 1 >> 0] = HEAP8[$815 + 1 >> 0] | 0;
     HEAP8[$$sroa$4373 + 2 >> 0] = HEAP8[$815 + 2 >> 0] | 0;
     HEAP8[$$sroa$4373 + 3 >> 0] = HEAP8[$815 + 3 >> 0] | 0;
     HEAP8[$$sroa$4373 + 4 >> 0] = HEAP8[$815 + 4 >> 0] | 0;
     HEAP8[$$sroa$4373 + 5 >> 0] = HEAP8[$815 + 5 >> 0] | 0;
     HEAP8[$$sroa$4373 + 6 >> 0] = HEAP8[$815 + 6 >> 0] | 0;
     $817 = HEAP32[$813 + 8 >> 2] | 0;
     HEAP32[$813 + 0 >> 2] = 0;
     HEAP32[$813 + 4 >> 2] = 0;
     HEAP32[$813 + 8 >> 2] = 0;
     do if (!(HEAP8[$795 >> 0] & 1)) {
      HEAP8[$795 + 1 >> 0] = 0;
      HEAP8[$795 >> 0] = 0;
     } else {
      $822 = $793 + -16 | 0;
      HEAP8[HEAP32[$822 >> 2] >> 0] = 0;
      $824 = $793 + -20 | 0;
      HEAP32[$824 >> 2] = 0;
      $$pre$i$i$i77 = HEAP8[$795 >> 0] | 0;
      if (!($$pre$i$i$i77 & 1)) {
       $831 = $$pre$i$i$i77;
       $840 = 10;
      } else {
       $827 = HEAP32[$795 >> 2] | 0;
       $831 = $827 & 255;
       $840 = ($827 & -2) + -1 | 0;
      }
      if (!($831 & 1)) {
       $834 = ($831 & 255) >>> 1;
       if (($831 & 255) < 22) {
        $2139 = 1;
        $839 = 10;
        $859 = $834;
       } else {
        $2139 = 1;
        $839 = ($834 + 16 & 240) + -1 | 0;
        $859 = $834;
       }
      } else {
       $2139 = 0;
       $839 = 10;
       $859 = 0;
      }
      if (($839 | 0) != ($840 | 0)) {
       if (($839 | 0) == 10) {
        $846 = $795 + 1 | 0;
        $847 = HEAP32[$822 >> 2] | 0;
        if ($2139) {
         _memcpy($846 | 0, $847 | 0, (($831 & 255) >>> 1) + 1 | 0) | 0;
         _free($847);
        } else {
         HEAP8[$846 >> 0] = HEAP8[$847 >> 0] | 0;
         _free($847);
        }
        HEAP8[$795 >> 0] = $859 << 1;
        break;
       }
       $843 = $839 + 1 | 0;
       $844 = _malloc($843) | 0;
       if (!($839 >>> 0 <= $840 >>> 0 & ($844 | 0) == 0)) {
        if ($2139) _memcpy($844 | 0, $795 + 1 | 0, (($831 & 255) >>> 1) + 1 | 0) | 0; else {
         $856 = HEAP32[$822 >> 2] | 0;
         HEAP8[$844 >> 0] = HEAP8[$856 >> 0] | 0;
         _free($856);
        }
        HEAP32[$795 >> 2] = $843 | 1;
        HEAP32[$824 >> 2] = $859;
        HEAP32[$822 >> 2] = $844;
       }
      }
     } while (0);
     HEAP8[$793 + -24 >> 0] = $814;
     $863 = $793 + -23 | 0;
     HEAP8[$863 + 0 >> 0] = HEAP8[$$sroa$4373 + 0 >> 0] | 0;
     HEAP8[$863 + 1 >> 0] = HEAP8[$$sroa$4373 + 1 >> 0] | 0;
     HEAP8[$863 + 2 >> 0] = HEAP8[$$sroa$4373 + 2 >> 0] | 0;
     HEAP8[$863 + 3 >> 0] = HEAP8[$$sroa$4373 + 3 >> 0] | 0;
     HEAP8[$863 + 4 >> 0] = HEAP8[$$sroa$4373 + 4 >> 0] | 0;
     HEAP8[$863 + 5 >> 0] = HEAP8[$$sroa$4373 + 5 >> 0] | 0;
     HEAP8[$863 + 6 >> 0] = HEAP8[$$sroa$4373 + 6 >> 0] | 0;
     HEAP32[$793 + -16 >> 2] = $817;
     HEAP8[$$sroa$4373 + 0 >> 0] = 0;
     HEAP8[$$sroa$4373 + 1 >> 0] = 0;
     HEAP8[$$sroa$4373 + 2 >> 0] = 0;
     HEAP8[$$sroa$4373 + 3 >> 0] = 0;
     HEAP8[$$sroa$4373 + 4 >> 0] = 0;
     HEAP8[$$sroa$4373 + 5 >> 0] = 0;
     HEAP8[$$sroa$4373 + 6 >> 0] = 0;
     if (!$803) _free(HEAP32[$69 + 8 >> 2] | 0);
     if (HEAP8[$67 >> 0] & 1) _free(HEAP32[$67 + 8 >> 2] | 0);
     if (!(HEAP8[$68 >> 0] & 1)) {
      $$0 = $789;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$68 + 8 >> 2] | 0);
     $$0 = $789;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 99:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 100) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 99) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $720 = $first + 2 | 0;
     $721 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($720, $last, $db) | 0;
     if (($721 | 0) == ($720 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $723 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($721, $last, $db) | 0;
     if (($723 | 0) == ($721 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $725 = $db + 4 | 0;
     $726 = HEAP32[$725 >> 2] | 0;
     if ((($726 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i233, $726 + -24 | 0);
     $734 = HEAP32[$725 >> 2] | 0;
     $735 = $734 + -24 | 0;
     $737 = $734;
     do {
      $736 = $737 + -24 | 0;
      HEAP32[$725 >> 2] = $736;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($736);
      $737 = HEAP32[$725 >> 2] | 0;
     } while (($737 | 0) != ($735 | 0));
     $740 = $734 + -48 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($18, $740);
     $741 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($18, 0, 60672, 13) | 0;
     HEAP32[$17 + 0 >> 2] = HEAP32[$741 + 0 >> 2];
     HEAP32[$17 + 4 >> 2] = HEAP32[$741 + 4 >> 2];
     HEAP32[$17 + 8 >> 2] = HEAP32[$741 + 8 >> 2];
     HEAP32[$741 + 0 >> 2] = 0;
     HEAP32[$741 + 4 >> 2] = 0;
     HEAP32[$741 + 8 >> 2] = 0;
     $742 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($17, 59472, 2) | 0;
     HEAP32[$16 + 0 >> 2] = HEAP32[$742 + 0 >> 2];
     HEAP32[$16 + 4 >> 2] = HEAP32[$742 + 4 >> 2];
     HEAP32[$16 + 8 >> 2] = HEAP32[$742 + 8 >> 2];
     HEAP32[$742 + 0 >> 2] = 0;
     HEAP32[$742 + 4 >> 2] = 0;
     HEAP32[$742 + 8 >> 2] = 0;
     $743 = HEAP8[$expr$i233 >> 0] | 0;
     $745 = ($743 & 1) == 0;
     if ($745) {
      $753 = $expr$i233 + 1 | 0;
      $754 = ($743 & 255) >>> 1;
     } else {
      $753 = HEAP32[$expr$i233 + 8 >> 2] | 0;
      $754 = HEAP32[$expr$i233 + 4 >> 2] | 0;
     }
     $755 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($16, $753, $754) | 0;
     HEAP32[$15 + 0 >> 2] = HEAP32[$755 + 0 >> 2];
     HEAP32[$15 + 4 >> 2] = HEAP32[$755 + 4 >> 2];
     HEAP32[$15 + 8 >> 2] = HEAP32[$755 + 8 >> 2];
     HEAP32[$755 + 0 >> 2] = 0;
     HEAP32[$755 + 4 >> 2] = 0;
     HEAP32[$755 + 8 >> 2] = 0;
     $756 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($15, 58936, 1) | 0;
     $757 = HEAP8[$756 >> 0] | 0;
     $758 = $756 + 1 | 0;
     HEAP8[$$sroa$5407 + 0 >> 0] = HEAP8[$758 + 0 >> 0] | 0;
     HEAP8[$$sroa$5407 + 1 >> 0] = HEAP8[$758 + 1 >> 0] | 0;
     HEAP8[$$sroa$5407 + 2 >> 0] = HEAP8[$758 + 2 >> 0] | 0;
     HEAP8[$$sroa$5407 + 3 >> 0] = HEAP8[$758 + 3 >> 0] | 0;
     HEAP8[$$sroa$5407 + 4 >> 0] = HEAP8[$758 + 4 >> 0] | 0;
     HEAP8[$$sroa$5407 + 5 >> 0] = HEAP8[$758 + 5 >> 0] | 0;
     HEAP8[$$sroa$5407 + 6 >> 0] = HEAP8[$758 + 6 >> 0] | 0;
     $760 = HEAP32[$756 + 8 >> 2] | 0;
     HEAP32[$756 + 0 >> 2] = 0;
     HEAP32[$756 + 4 >> 2] = 0;
     HEAP32[$756 + 8 >> 2] = 0;
     HEAP8[$14 >> 0] = $757;
     $761 = $14 + 1 | 0;
     HEAP8[$761 + 0 >> 0] = HEAP8[$$sroa$5407 + 0 >> 0] | 0;
     HEAP8[$761 + 1 >> 0] = HEAP8[$$sroa$5407 + 1 >> 0] | 0;
     HEAP8[$761 + 2 >> 0] = HEAP8[$$sroa$5407 + 2 >> 0] | 0;
     HEAP8[$761 + 3 >> 0] = HEAP8[$$sroa$5407 + 3 >> 0] | 0;
     HEAP8[$761 + 4 >> 0] = HEAP8[$$sroa$5407 + 4 >> 0] | 0;
     HEAP8[$761 + 5 >> 0] = HEAP8[$$sroa$5407 + 5 >> 0] | 0;
     HEAP8[$761 + 6 >> 0] = HEAP8[$$sroa$5407 + 6 >> 0] | 0;
     HEAP32[$14 + 8 >> 2] = $760;
     HEAP8[$$sroa$5407 + 0 >> 0] = 0;
     HEAP8[$$sroa$5407 + 1 >> 0] = 0;
     HEAP8[$$sroa$5407 + 2 >> 0] = 0;
     HEAP8[$$sroa$5407 + 3 >> 0] = 0;
     HEAP8[$$sroa$5407 + 4 >> 0] = 0;
     HEAP8[$$sroa$5407 + 5 >> 0] = 0;
     HEAP8[$$sroa$5407 + 6 >> 0] = 0;
     $763 = $14 + 12 | 0;
     HEAP32[$763 + 0 >> 2] = 0;
     HEAP32[$763 + 4 >> 2] = 0;
     HEAP32[$763 + 8 >> 2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($740, $14);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
     if (HEAP8[$15 >> 0] & 1) _free(HEAP32[$15 + 8 >> 2] | 0);
     if (HEAP8[$16 >> 0] & 1) _free(HEAP32[$16 + 8 >> 2] | 0);
     if (HEAP8[$17 >> 0] & 1) _free(HEAP32[$17 + 8 >> 2] | 0);
     if (HEAP8[$18 >> 0] & 1) _free(HEAP32[$18 + 8 >> 2] | 0);
     if ($745) {
      $$0 = $723;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$expr$i233 + 8 >> 2] | 0);
     $$0 = $723;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 97:
    {
     $625 = $t$0 + 2 | 0;
     $626 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($625, $last, $db) | 0;
     if (($626 | 0) == ($625 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $629 = $db + 4 | 0;
     $630 = HEAP32[$629 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($630 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $632 = $630 + -24 | 0;
     if ($parsed_gs$0$off0) {
      HEAP8[$64 >> 0] = 4;
      $633 = $64 + 1 | 0;
      HEAP8[$633 >> 0] = 58;
      HEAP8[$633 + 1 >> 0] = 58;
      HEAP8[$64 + 3 >> 0] = 0;
     } else {
      HEAP32[$64 + 0 >> 2] = 0;
      HEAP32[$64 + 4 >> 2] = 0;
      HEAP32[$64 + 8 >> 2] = 0;
     }
     $635 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($64, 59120, 9) | 0;
     HEAP32[$63 + 0 >> 2] = HEAP32[$635 + 0 >> 2];
     HEAP32[$63 + 4 >> 2] = HEAP32[$635 + 4 >> 2];
     HEAP32[$63 + 8 >> 2] = HEAP32[$635 + 8 >> 2];
     HEAP32[$635 + 0 >> 2] = 0;
     HEAP32[$635 + 4 >> 2] = 0;
     HEAP32[$635 + 8 >> 2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($65, (HEAP32[$629 >> 2] | 0) + -24 | 0);
     $638 = HEAP8[$65 >> 0] | 0;
     $640 = ($638 & 1) == 0;
     if ($640) {
      $648 = $65 + 1 | 0;
      $649 = ($638 & 255) >>> 1;
     } else {
      $648 = HEAP32[$65 + 8 >> 2] | 0;
      $649 = HEAP32[$65 + 4 >> 2] | 0;
     }
     $650 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($63, $648, $649) | 0;
     $651 = HEAP8[$650 >> 0] | 0;
     $652 = $650 + 1 | 0;
     HEAP8[$$sroa$4376 + 0 >> 0] = HEAP8[$652 + 0 >> 0] | 0;
     HEAP8[$$sroa$4376 + 1 >> 0] = HEAP8[$652 + 1 >> 0] | 0;
     HEAP8[$$sroa$4376 + 2 >> 0] = HEAP8[$652 + 2 >> 0] | 0;
     HEAP8[$$sroa$4376 + 3 >> 0] = HEAP8[$652 + 3 >> 0] | 0;
     HEAP8[$$sroa$4376 + 4 >> 0] = HEAP8[$652 + 4 >> 0] | 0;
     HEAP8[$$sroa$4376 + 5 >> 0] = HEAP8[$652 + 5 >> 0] | 0;
     HEAP8[$$sroa$4376 + 6 >> 0] = HEAP8[$652 + 6 >> 0] | 0;
     $654 = HEAP32[$650 + 8 >> 2] | 0;
     HEAP32[$650 + 0 >> 2] = 0;
     HEAP32[$650 + 4 >> 2] = 0;
     HEAP32[$650 + 8 >> 2] = 0;
     do if (!(HEAP8[$632 >> 0] & 1)) {
      HEAP8[$632 + 1 >> 0] = 0;
      HEAP8[$632 >> 0] = 0;
     } else {
      $659 = $630 + -16 | 0;
      HEAP8[HEAP32[$659 >> 2] >> 0] = 0;
      $661 = $630 + -20 | 0;
      HEAP32[$661 >> 2] = 0;
      $$pre$i$i$i = HEAP8[$632 >> 0] | 0;
      if (!($$pre$i$i$i & 1)) {
       $668 = $$pre$i$i$i;
       $677 = 10;
      } else {
       $664 = HEAP32[$632 >> 2] | 0;
       $668 = $664 & 255;
       $677 = ($664 & -2) + -1 | 0;
      }
      if (!($668 & 1)) {
       $671 = ($668 & 255) >>> 1;
       if (($668 & 255) < 22) {
        $2138 = 1;
        $676 = 10;
        $696 = $671;
       } else {
        $2138 = 1;
        $676 = ($671 + 16 & 240) + -1 | 0;
        $696 = $671;
       }
      } else {
       $2138 = 0;
       $676 = 10;
       $696 = 0;
      }
      if (($676 | 0) != ($677 | 0)) {
       if (($676 | 0) == 10) {
        $683 = $632 + 1 | 0;
        $684 = HEAP32[$659 >> 2] | 0;
        if ($2138) {
         _memcpy($683 | 0, $684 | 0, (($668 & 255) >>> 1) + 1 | 0) | 0;
         _free($684);
        } else {
         HEAP8[$683 >> 0] = HEAP8[$684 >> 0] | 0;
         _free($684);
        }
        HEAP8[$632 >> 0] = $696 << 1;
        break;
       }
       $680 = $676 + 1 | 0;
       $681 = _malloc($680) | 0;
       if (!($676 >>> 0 <= $677 >>> 0 & ($681 | 0) == 0)) {
        if ($2138) _memcpy($681 | 0, $632 + 1 | 0, (($668 & 255) >>> 1) + 1 | 0) | 0; else {
         $693 = HEAP32[$659 >> 2] | 0;
         HEAP8[$681 >> 0] = HEAP8[$693 >> 0] | 0;
         _free($693);
        }
        HEAP32[$632 >> 2] = $680 | 1;
        HEAP32[$661 >> 2] = $696;
        HEAP32[$659 >> 2] = $681;
       }
      }
     } while (0);
     HEAP8[$630 + -24 >> 0] = $651;
     $700 = $630 + -23 | 0;
     HEAP8[$700 + 0 >> 0] = HEAP8[$$sroa$4376 + 0 >> 0] | 0;
     HEAP8[$700 + 1 >> 0] = HEAP8[$$sroa$4376 + 1 >> 0] | 0;
     HEAP8[$700 + 2 >> 0] = HEAP8[$$sroa$4376 + 2 >> 0] | 0;
     HEAP8[$700 + 3 >> 0] = HEAP8[$$sroa$4376 + 3 >> 0] | 0;
     HEAP8[$700 + 4 >> 0] = HEAP8[$$sroa$4376 + 4 >> 0] | 0;
     HEAP8[$700 + 5 >> 0] = HEAP8[$$sroa$4376 + 5 >> 0] | 0;
     HEAP8[$700 + 6 >> 0] = HEAP8[$$sroa$4376 + 6 >> 0] | 0;
     HEAP32[$630 + -16 >> 2] = $654;
     HEAP8[$$sroa$4376 + 0 >> 0] = 0;
     HEAP8[$$sroa$4376 + 1 >> 0] = 0;
     HEAP8[$$sroa$4376 + 2 >> 0] = 0;
     HEAP8[$$sroa$4376 + 3 >> 0] = 0;
     HEAP8[$$sroa$4376 + 4 >> 0] = 0;
     HEAP8[$$sroa$4376 + 5 >> 0] = 0;
     HEAP8[$$sroa$4376 + 6 >> 0] = 0;
     if (!$640) _free(HEAP32[$65 + 8 >> 2] | 0);
     if (HEAP8[$63 >> 0] & 1) _free(HEAP32[$63 + 8 >> 2] | 0);
     if (!(HEAP8[$64 >> 0] & 1)) {
      $$0 = $626;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$64 + 8 >> 2] | 0);
     $$0 = $626;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   } while (0);
   break;
  }
 case 76:
  {
   $$0 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 84:
  {
   $$0 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 102:
  {
   $$0 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 97:
  {
   switch (HEAP8[$t$0 + 1 >> 0] | 0) {
   case 122:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 97) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 122) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $241 = $first + 2 | 0;
     $242 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($241, $last, $db) | 0;
     if (($242 | 0) == ($241 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $246 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($246 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $248 = $246 + -24 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $248);
     $249 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($3, 0, 60712, 9) | 0;
     HEAP32[$2 + 0 >> 2] = HEAP32[$249 + 0 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$249 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$249 + 8 >> 2];
     HEAP32[$249 + 0 >> 2] = 0;
     HEAP32[$249 + 4 >> 2] = 0;
     HEAP32[$249 + 8 >> 2] = 0;
     $250 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2, 58936, 1) | 0;
     $251 = HEAP8[$250 >> 0] | 0;
     $252 = $250 + 1 | 0;
     HEAP8[$$sroa$5419 + 0 >> 0] = HEAP8[$252 + 0 >> 0] | 0;
     HEAP8[$$sroa$5419 + 1 >> 0] = HEAP8[$252 + 1 >> 0] | 0;
     HEAP8[$$sroa$5419 + 2 >> 0] = HEAP8[$252 + 2 >> 0] | 0;
     HEAP8[$$sroa$5419 + 3 >> 0] = HEAP8[$252 + 3 >> 0] | 0;
     HEAP8[$$sroa$5419 + 4 >> 0] = HEAP8[$252 + 4 >> 0] | 0;
     HEAP8[$$sroa$5419 + 5 >> 0] = HEAP8[$252 + 5 >> 0] | 0;
     HEAP8[$$sroa$5419 + 6 >> 0] = HEAP8[$252 + 6 >> 0] | 0;
     $254 = HEAP32[$250 + 8 >> 2] | 0;
     HEAP32[$250 + 0 >> 2] = 0;
     HEAP32[$250 + 4 >> 2] = 0;
     HEAP32[$250 + 8 >> 2] = 0;
     do if (!(HEAP8[$248 >> 0] & 1)) {
      HEAP8[$248 + 1 >> 0] = 0;
      HEAP8[$248 >> 0] = 0;
     } else {
      $259 = $246 + -16 | 0;
      HEAP8[HEAP32[$259 >> 2] >> 0] = 0;
      $261 = $246 + -20 | 0;
      HEAP32[$261 >> 2] = 0;
      $$pre$i$i$i$i320 = HEAP8[$248 >> 0] | 0;
      if (!($$pre$i$i$i$i320 & 1)) {
       $268 = $$pre$i$i$i$i320;
       $277 = 10;
      } else {
       $264 = HEAP32[$248 >> 2] | 0;
       $268 = $264 & 255;
       $277 = ($264 & -2) + -1 | 0;
      }
      if (!($268 & 1)) {
       $271 = ($268 & 255) >>> 1;
       if (($268 & 255) < 22) {
        $2136 = 1;
        $276 = 10;
        $296 = $271;
       } else {
        $2136 = 1;
        $276 = ($271 + 16 & 240) + -1 | 0;
        $296 = $271;
       }
      } else {
       $2136 = 0;
       $276 = 10;
       $296 = 0;
      }
      if (($276 | 0) != ($277 | 0)) {
       if (($276 | 0) == 10) {
        $283 = $248 + 1 | 0;
        $284 = HEAP32[$259 >> 2] | 0;
        if ($2136) {
         _memcpy($283 | 0, $284 | 0, (($268 & 255) >>> 1) + 1 | 0) | 0;
         _free($284);
        } else {
         HEAP8[$283 >> 0] = HEAP8[$284 >> 0] | 0;
         _free($284);
        }
        HEAP8[$248 >> 0] = $296 << 1;
        break;
       }
       $280 = $276 + 1 | 0;
       $281 = _malloc($280) | 0;
       if (!($276 >>> 0 <= $277 >>> 0 & ($281 | 0) == 0)) {
        if ($2136) _memcpy($281 | 0, $248 + 1 | 0, (($268 & 255) >>> 1) + 1 | 0) | 0; else {
         $293 = HEAP32[$259 >> 2] | 0;
         HEAP8[$281 >> 0] = HEAP8[$293 >> 0] | 0;
         _free($293);
        }
        HEAP32[$248 >> 2] = $280 | 1;
        HEAP32[$261 >> 2] = $296;
        HEAP32[$259 >> 2] = $281;
       }
      }
     } while (0);
     HEAP8[$248 >> 0] = $251;
     $299 = $246 + -23 | 0;
     HEAP8[$299 + 0 >> 0] = HEAP8[$$sroa$5419 + 0 >> 0] | 0;
     HEAP8[$299 + 1 >> 0] = HEAP8[$$sroa$5419 + 1 >> 0] | 0;
     HEAP8[$299 + 2 >> 0] = HEAP8[$$sroa$5419 + 2 >> 0] | 0;
     HEAP8[$299 + 3 >> 0] = HEAP8[$$sroa$5419 + 3 >> 0] | 0;
     HEAP8[$299 + 4 >> 0] = HEAP8[$$sroa$5419 + 4 >> 0] | 0;
     HEAP8[$299 + 5 >> 0] = HEAP8[$$sroa$5419 + 5 >> 0] | 0;
     HEAP8[$299 + 6 >> 0] = HEAP8[$$sroa$5419 + 6 >> 0] | 0;
     HEAP32[$246 + -16 >> 2] = $254;
     HEAP8[$$sroa$5419 + 0 >> 0] = 0;
     HEAP8[$$sroa$5419 + 1 >> 0] = 0;
     HEAP8[$$sroa$5419 + 2 >> 0] = 0;
     HEAP8[$$sroa$5419 + 3 >> 0] = 0;
     HEAP8[$$sroa$5419 + 4 >> 0] = 0;
     HEAP8[$$sroa$5419 + 5 >> 0] = 0;
     HEAP8[$$sroa$5419 + 6 >> 0] = 0;
     if (HEAP8[$2 >> 0] & 1) _free(HEAP32[$2 + 8 >> 2] | 0);
     if (!(HEAP8[$3 >> 0] & 1)) {
      $$0 = $242;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$3 + 8 >> 2] | 0);
     $$0 = $242;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 97:
    {
     $137 = $first + 2 | 0;
     HEAP8[$56 >> 0] = 4;
     $138 = $56 + 1 | 0;
     HEAP8[$138 >> 0] = 38;
     HEAP8[$138 + 1 >> 0] = 38;
     HEAP8[$56 + 3 >> 0] = 0;
     $140 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($137, $last, $56, $db) | 0;
     $$0 = ($140 | 0) == ($137 | 0) ? $first : $140;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 100:
    {
     $142 = $first + 2 | 0;
     HEAP8[$57 >> 0] = 2;
     HEAP8[$57 + 1 >> 0] = 38;
     HEAP8[$57 + 2 >> 0] = 0;
     $145 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($142, $last, $57, $db) | 0;
     $$0 = ($145 | 0) == ($142 | 0) ? $first : $145;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 110:
    {
     $147 = $first + 2 | 0;
     HEAP8[$58 >> 0] = 2;
     HEAP8[$58 + 1 >> 0] = 38;
     HEAP8[$58 + 2 >> 0] = 0;
     $150 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($147, $last, $58, $db) | 0;
     $$0 = ($150 | 0) == ($147 | 0) ? $first : $150;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 78:
    {
     $152 = $first + 2 | 0;
     HEAP8[$59 >> 0] = 4;
     $153 = $59 + 1 | 0;
     HEAP8[$153 >> 0] = 38;
     HEAP8[$153 + 1 >> 0] = 61;
     HEAP8[$59 + 3 >> 0] = 0;
     $155 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($152, $last, $59, $db) | 0;
     $$0 = ($155 | 0) == ($152 | 0) ? $first : $155;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 83:
    {
     $157 = $first + 2 | 0;
     HEAP8[$60 >> 0] = 2;
     HEAP8[$60 + 1 >> 0] = 61;
     HEAP8[$60 + 2 >> 0] = 0;
     $160 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($157, $last, $60, $db) | 0;
     $$0 = ($160 | 0) == ($157 | 0) ? $first : $160;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 116:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 97) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 116) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $168 = $first + 2 | 0;
     $169 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($168, $last, $db) | 0;
     if (($169 | 0) == ($168 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $173 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($173 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $175 = $173 + -24 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($1, $175);
     $176 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($1, 0, 60712, 9) | 0;
     HEAP32[$0 + 0 >> 2] = HEAP32[$176 + 0 >> 2];
     HEAP32[$0 + 4 >> 2] = HEAP32[$176 + 4 >> 2];
     HEAP32[$0 + 8 >> 2] = HEAP32[$176 + 8 >> 2];
     HEAP32[$176 + 0 >> 2] = 0;
     HEAP32[$176 + 4 >> 2] = 0;
     HEAP32[$176 + 8 >> 2] = 0;
     $177 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, 58936, 1) | 0;
     $178 = HEAP8[$177 >> 0] | 0;
     $179 = $177 + 1 | 0;
     HEAP8[$$sroa$5422 + 0 >> 0] = HEAP8[$179 + 0 >> 0] | 0;
     HEAP8[$$sroa$5422 + 1 >> 0] = HEAP8[$179 + 1 >> 0] | 0;
     HEAP8[$$sroa$5422 + 2 >> 0] = HEAP8[$179 + 2 >> 0] | 0;
     HEAP8[$$sroa$5422 + 3 >> 0] = HEAP8[$179 + 3 >> 0] | 0;
     HEAP8[$$sroa$5422 + 4 >> 0] = HEAP8[$179 + 4 >> 0] | 0;
     HEAP8[$$sroa$5422 + 5 >> 0] = HEAP8[$179 + 5 >> 0] | 0;
     HEAP8[$$sroa$5422 + 6 >> 0] = HEAP8[$179 + 6 >> 0] | 0;
     $181 = HEAP32[$177 + 8 >> 2] | 0;
     HEAP32[$177 + 0 >> 2] = 0;
     HEAP32[$177 + 4 >> 2] = 0;
     HEAP32[$177 + 8 >> 2] = 0;
     do if (!(HEAP8[$175 >> 0] & 1)) {
      HEAP8[$175 + 1 >> 0] = 0;
      HEAP8[$175 >> 0] = 0;
     } else {
      $186 = $173 + -16 | 0;
      HEAP8[HEAP32[$186 >> 2] >> 0] = 0;
      $188 = $173 + -20 | 0;
      HEAP32[$188 >> 2] = 0;
      $$pre$i$i$i$i341 = HEAP8[$175 >> 0] | 0;
      if (!($$pre$i$i$i$i341 & 1)) {
       $195 = $$pre$i$i$i$i341;
       $204 = 10;
      } else {
       $191 = HEAP32[$175 >> 2] | 0;
       $195 = $191 & 255;
       $204 = ($191 & -2) + -1 | 0;
      }
      if (!($195 & 1)) {
       $198 = ($195 & 255) >>> 1;
       if (($195 & 255) < 22) {
        $203 = 10;
        $2135 = 1;
        $223 = $198;
       } else {
        $203 = ($198 + 16 & 240) + -1 | 0;
        $2135 = 1;
        $223 = $198;
       }
      } else {
       $203 = 10;
       $2135 = 0;
       $223 = 0;
      }
      if (($203 | 0) != ($204 | 0)) {
       if (($203 | 0) == 10) {
        $210 = $175 + 1 | 0;
        $211 = HEAP32[$186 >> 2] | 0;
        if ($2135) {
         _memcpy($210 | 0, $211 | 0, (($195 & 255) >>> 1) + 1 | 0) | 0;
         _free($211);
        } else {
         HEAP8[$210 >> 0] = HEAP8[$211 >> 0] | 0;
         _free($211);
        }
        HEAP8[$175 >> 0] = $223 << 1;
        break;
       }
       $207 = $203 + 1 | 0;
       $208 = _malloc($207) | 0;
       if (!($203 >>> 0 <= $204 >>> 0 & ($208 | 0) == 0)) {
        if ($2135) _memcpy($208 | 0, $175 + 1 | 0, (($195 & 255) >>> 1) + 1 | 0) | 0; else {
         $220 = HEAP32[$186 >> 2] | 0;
         HEAP8[$208 >> 0] = HEAP8[$220 >> 0] | 0;
         _free($220);
        }
        HEAP32[$175 >> 2] = $207 | 1;
        HEAP32[$188 >> 2] = $223;
        HEAP32[$186 >> 2] = $208;
       }
      }
     } while (0);
     HEAP8[$175 >> 0] = $178;
     $226 = $173 + -23 | 0;
     HEAP8[$226 + 0 >> 0] = HEAP8[$$sroa$5422 + 0 >> 0] | 0;
     HEAP8[$226 + 1 >> 0] = HEAP8[$$sroa$5422 + 1 >> 0] | 0;
     HEAP8[$226 + 2 >> 0] = HEAP8[$$sroa$5422 + 2 >> 0] | 0;
     HEAP8[$226 + 3 >> 0] = HEAP8[$$sroa$5422 + 3 >> 0] | 0;
     HEAP8[$226 + 4 >> 0] = HEAP8[$$sroa$5422 + 4 >> 0] | 0;
     HEAP8[$226 + 5 >> 0] = HEAP8[$$sroa$5422 + 5 >> 0] | 0;
     HEAP8[$226 + 6 >> 0] = HEAP8[$$sroa$5422 + 6 >> 0] | 0;
     HEAP32[$173 + -16 >> 2] = $181;
     HEAP8[$$sroa$5422 + 0 >> 0] = 0;
     HEAP8[$$sroa$5422 + 1 >> 0] = 0;
     HEAP8[$$sroa$5422 + 2 >> 0] = 0;
     HEAP8[$$sroa$5422 + 3 >> 0] = 0;
     HEAP8[$$sroa$5422 + 4 >> 0] = 0;
     HEAP8[$$sroa$5422 + 5 >> 0] = 0;
     HEAP8[$$sroa$5422 + 6 >> 0] = 0;
     if (HEAP8[$0 >> 0] & 1) _free(HEAP32[$0 + 8 >> 2] | 0);
     if (!(HEAP8[$1 >> 0] & 1)) {
      $$0 = $169;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$1 + 8 >> 2] | 0);
     $$0 = $169;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 110:
  {
   switch (HEAP8[$t$0 + 1 >> 0] | 0) {
   case 119:
   case 97:
    {
     if ($122) {
      $1170 = HEAP8[$first >> 0] | 0;
      if ($1170 << 24 >> 24 == 103) {
       $1174 = (HEAP8[$first + 1 >> 0] | 0) == 115;
       $$first$i = $1174 ? $first + 2 | 0 : $first;
       $1177 = HEAP8[$$first$i >> 0] | 0;
       $parsed_gs$0$off0$i = $1174;
       $t$0$i182 = $$first$i;
      } else {
       $1177 = $1170;
       $parsed_gs$0$off0$i = 0;
       $t$0$i182 = $first;
      }
      if ($1177 << 24 >> 24 == 110) {
       $1179 = HEAP8[$t$0$i182 + 1 >> 0] | 0;
       if ($1179 << 24 >> 24 == 97 | $1179 << 24 >> 24 == 119) {
        $1180 = $1179 << 24 >> 24 == 97;
        $1181 = $t$0$i182 + 2 | 0;
        if (($1181 | 0) == ($last | 0)) {
         $$0 = $first;
         STACKTOP = sp;
         return $$0 | 0;
        } else {
         $has_expr_list$0$off0$i = 0;
         $t$1$i = $1181;
        }
        while (1) {
         if ((HEAP8[$t$1$i >> 0] | 0) == 95) break;
         $1185 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$1$i, $last, $db) | 0;
         if (($1185 | 0) == ($t$1$i | 0) | ($1185 | 0) == ($last | 0)) {
          $$0 = $first;
          label = 673;
          break;
         } else {
          $has_expr_list$0$off0$i = 1;
          $t$1$i = $1185;
         }
        }
        if ((label | 0) == 673) {
         STACKTOP = sp;
         return $$0 | 0;
        }
        $1188 = $t$1$i + 1 | 0;
        $1189 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1188, $last, $db) | 0;
        if (($1189 | 0) == ($1188 | 0) | ($1189 | 0) == ($last | 0)) {
         $$0 = $first;
         STACKTOP = sp;
         return $$0 | 0;
        }
        $1195 = HEAP8[$1189 >> 0] | 0;
        do if (($118 - $1189 | 0) > 2 & $1195 << 24 >> 24 == 112) {
         if ((HEAP8[$1189 + 1 >> 0] | 0) != 105) {
          $$0 = $first;
          STACKTOP = sp;
          return $$0 | 0;
         }
         $t$2$i = $1189 + 2 | 0;
         while (1) {
          if ((HEAP8[$t$2$i >> 0] | 0) == 69) break;
          $1203 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$2$i, $last, $db) | 0;
          if (($1203 | 0) == ($t$2$i | 0) | ($1203 | 0) == ($last | 0)) {
           $$0 = $first;
           label = 673;
           break;
          } else $t$2$i = $1203;
         }
         if ((label | 0) == 673) {
          STACKTOP = sp;
          return $$0 | 0;
         };
         HEAP32[$init_list$i + 0 >> 2] = 0;
         HEAP32[$init_list$i + 4 >> 2] = 0;
         HEAP32[$init_list$i + 8 >> 2] = 0;
         $1208 = $db + 4 | 0;
         $1209 = HEAP32[$1208 >> 2] | 0;
         if ((HEAP32[$db >> 2] | 0) == ($1209 | 0)) {
          $$0 = $first;
          STACKTOP = sp;
          return $$0 | 0;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($21, $1209 + -24 | 0);
         HEAP32[$init_list$i + 0 >> 2] = HEAP32[$21 + 0 >> 2];
         HEAP32[$init_list$i + 4 >> 2] = HEAP32[$21 + 4 >> 2];
         HEAP32[$init_list$i + 8 >> 2] = HEAP32[$21 + 8 >> 2];
         HEAP32[$21 + 0 >> 2] = 0;
         HEAP32[$21 + 4 >> 2] = 0;
         HEAP32[$21 + 8 >> 2] = 0;
         $$pre445 = HEAP32[$1208 >> 2] | 0;
         $1212 = $$pre445 + -24 | 0;
         $1214 = $$pre445;
         do {
          $1213 = $1214 + -24 | 0;
          HEAP32[$1208 >> 2] = $1213;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1213);
          $1214 = HEAP32[$1208 >> 2] | 0;
         } while (($1214 | 0) != ($1212 | 0));
         $$pre$phiZ2D = $db;
         $1220 = $1212;
         $has_init$0$off0$i414417 = 1;
         $t$3$i413419 = $t$2$i;
        } else if ($1195 << 24 >> 24 == 69) {
         HEAP32[$init_list$i + 0 >> 2] = 0;
         HEAP32[$init_list$i + 4 >> 2] = 0;
         HEAP32[$init_list$i + 8 >> 2] = 0;
         $$pre$phiZ2D = $db;
         $1220 = HEAP32[$db + 4 >> 2] | 0;
         $has_init$0$off0$i414417 = 0;
         $t$3$i413419 = $1189;
         break;
        } else {
         $$0 = $first;
         STACKTOP = sp;
         return $$0 | 0;
        } while (0);
        $1218 = $db + 4 | 0;
        if ((HEAP32[$$pre$phiZ2D >> 2] | 0) == ($1220 | 0)) {
         if (!(HEAP8[$init_list$i >> 0] & 1)) {
          $$0 = $first;
          STACKTOP = sp;
          return $$0 | 0;
         }
         _free(HEAP32[$init_list$i + 8 >> 2] | 0);
         $$0 = $first;
         STACKTOP = sp;
         return $$0 | 0;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($type$i, $1220 + -24 | 0);
        $1222 = HEAP32[$1218 >> 2] | 0;
        $1223 = $1222 + -24 | 0;
        $1225 = $1222;
        do {
         $1224 = $1225 + -24 | 0;
         HEAP32[$1218 >> 2] = $1224;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1224);
         $1225 = HEAP32[$1218 >> 2] | 0;
        } while (($1225 | 0) != ($1223 | 0));
        HEAP32[$expr_list$i + 0 >> 2] = 0;
        HEAP32[$expr_list$i + 4 >> 2] = 0;
        HEAP32[$expr_list$i + 8 >> 2] = 0;
        if ($has_expr_list$0$off0$i) if ((HEAP32[$$pre$phiZ2D >> 2] | 0) == ($1223 | 0)) {
         $$019$i = $first;
         $$2$i215 = 1;
        } else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($22, $1222 + -48 | 0);
         HEAP32[$expr_list$i + 0 >> 2] = HEAP32[$22 + 0 >> 2];
         HEAP32[$expr_list$i + 4 >> 2] = HEAP32[$22 + 4 >> 2];
         HEAP32[$expr_list$i + 8 >> 2] = HEAP32[$22 + 8 >> 2];
         HEAP32[$22 + 0 >> 2] = 0;
         HEAP32[$22 + 4 >> 2] = 0;
         HEAP32[$22 + 8 >> 2] = 0;
         $$pre447 = HEAP32[$1218 >> 2] | 0;
         $1231 = $$pre447 + -24 | 0;
         $1233 = $$pre447;
         do {
          $1232 = $1233 + -24 | 0;
          HEAP32[$1218 >> 2] = $1232;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1232);
          $1233 = HEAP32[$1218 >> 2] | 0;
         } while (($1233 | 0) != ($1231 | 0));
         label = 374;
        } else label = 374;
        do if ((label | 0) == 374) {
         HEAP32[$r$i + 0 >> 2] = 0;
         HEAP32[$r$i + 4 >> 2] = 0;
         HEAP32[$r$i + 8 >> 2] = 0;
         if ($parsed_gs$0$off0$i) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($r$i, 59112, 2);
         if ($1180) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($r$i, 59528, 3) | 0; else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($r$i, 59016, 1) | 0;
         do if ($has_expr_list$0$off0$i) {
          __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($24, 58944, $expr_list$i);
          $1236 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($24, 59536, 2) | 0;
          HEAP32[$23 + 0 >> 2] = HEAP32[$1236 + 0 >> 2];
          HEAP32[$23 + 4 >> 2] = HEAP32[$1236 + 4 >> 2];
          HEAP32[$23 + 8 >> 2] = HEAP32[$1236 + 8 >> 2];
          HEAP32[$1236 + 0 >> 2] = 0;
          HEAP32[$1236 + 4 >> 2] = 0;
          HEAP32[$1236 + 8 >> 2] = 0;
          $1237 = HEAP8[$23 >> 0] | 0;
          $1239 = ($1237 & 1) == 0;
          if ($1239) {
           $1247 = $23 + 1 | 0;
           $1248 = ($1237 & 255) >>> 1;
          } else {
           $1247 = HEAP32[$23 + 8 >> 2] | 0;
           $1248 = HEAP32[$23 + 4 >> 2] | 0;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($r$i, $1247, $1248) | 0;
          if (!$1239) _free(HEAP32[$23 + 8 >> 2] | 0);
          if (!(HEAP8[$24 >> 0] & 1)) break;
          _free(HEAP32[$24 + 8 >> 2] | 0);
         } while (0);
         $1256 = HEAP8[$type$i >> 0] | 0;
         if (!($1256 & 1)) {
          $1266 = $type$i + 1 | 0;
          $1267 = ($1256 & 255) >>> 1;
         } else {
          $1266 = HEAP32[$type$i + 8 >> 2] | 0;
          $1267 = HEAP32[$type$i + 4 >> 2] | 0;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($r$i, $1266, $1267) | 0;
         do if ($has_init$0$off0$i414417) {
          __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($26, 58928, $init_list$i);
          $1268 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($26, 58936, 1) | 0;
          HEAP32[$25 + 0 >> 2] = HEAP32[$1268 + 0 >> 2];
          HEAP32[$25 + 4 >> 2] = HEAP32[$1268 + 4 >> 2];
          HEAP32[$25 + 8 >> 2] = HEAP32[$1268 + 8 >> 2];
          HEAP32[$1268 + 0 >> 2] = 0;
          HEAP32[$1268 + 4 >> 2] = 0;
          HEAP32[$1268 + 8 >> 2] = 0;
          $1269 = HEAP8[$25 >> 0] | 0;
          $1271 = ($1269 & 1) == 0;
          if ($1271) {
           $1279 = $25 + 1 | 0;
           $1280 = ($1269 & 255) >>> 1;
          } else {
           $1279 = HEAP32[$25 + 8 >> 2] | 0;
           $1280 = HEAP32[$25 + 4 >> 2] | 0;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($r$i, $1279, $1280) | 0;
          if (!$1271) _free(HEAP32[$25 + 8 >> 2] | 0);
          if (!(HEAP8[$26 >> 0] & 1)) break;
          _free(HEAP32[$26 + 8 >> 2] | 0);
         } while (0);
         $1288 = HEAP8[$r$i >> 0] | 0;
         $1289 = $r$i + 1 | 0;
         HEAP8[$$sroa$6404 + 0 >> 0] = HEAP8[$1289 + 0 >> 0] | 0;
         HEAP8[$$sroa$6404 + 1 >> 0] = HEAP8[$1289 + 1 >> 0] | 0;
         HEAP8[$$sroa$6404 + 2 >> 0] = HEAP8[$1289 + 2 >> 0] | 0;
         HEAP8[$$sroa$6404 + 3 >> 0] = HEAP8[$1289 + 3 >> 0] | 0;
         HEAP8[$$sroa$6404 + 4 >> 0] = HEAP8[$1289 + 4 >> 0] | 0;
         HEAP8[$$sroa$6404 + 5 >> 0] = HEAP8[$1289 + 5 >> 0] | 0;
         HEAP8[$$sroa$6404 + 6 >> 0] = HEAP8[$1289 + 6 >> 0] | 0;
         $1290 = $r$i + 8 | 0;
         $1291 = HEAP32[$1290 >> 2] | 0;
         HEAP32[$r$i + 0 >> 2] = 0;
         HEAP32[$r$i + 4 >> 2] = 0;
         HEAP32[$r$i + 8 >> 2] = 0;
         HEAP8[$27 >> 0] = $1288;
         $1292 = $27 + 1 | 0;
         HEAP8[$1292 + 0 >> 0] = HEAP8[$$sroa$6404 + 0 >> 0] | 0;
         HEAP8[$1292 + 1 >> 0] = HEAP8[$$sroa$6404 + 1 >> 0] | 0;
         HEAP8[$1292 + 2 >> 0] = HEAP8[$$sroa$6404 + 2 >> 0] | 0;
         HEAP8[$1292 + 3 >> 0] = HEAP8[$$sroa$6404 + 3 >> 0] | 0;
         HEAP8[$1292 + 4 >> 0] = HEAP8[$$sroa$6404 + 4 >> 0] | 0;
         HEAP8[$1292 + 5 >> 0] = HEAP8[$$sroa$6404 + 5 >> 0] | 0;
         HEAP8[$1292 + 6 >> 0] = HEAP8[$$sroa$6404 + 6 >> 0] | 0;
         HEAP32[$27 + 8 >> 2] = $1291;
         HEAP8[$$sroa$6404 + 0 >> 0] = 0;
         HEAP8[$$sroa$6404 + 1 >> 0] = 0;
         HEAP8[$$sroa$6404 + 2 >> 0] = 0;
         HEAP8[$$sroa$6404 + 3 >> 0] = 0;
         HEAP8[$$sroa$6404 + 4 >> 0] = 0;
         HEAP8[$$sroa$6404 + 5 >> 0] = 0;
         HEAP8[$$sroa$6404 + 6 >> 0] = 0;
         $1294 = $27 + 12 | 0;
         HEAP32[$1294 + 0 >> 2] = 0;
         HEAP32[$1294 + 4 >> 2] = 0;
         HEAP32[$1294 + 8 >> 2] = 0;
         $1295 = HEAP32[$1218 >> 2] | 0;
         $1297 = HEAP32[$db + 8 >> 2] | 0;
         if ($1295 >>> 0 < $1297 >>> 0) {
          if (!$1295) $1302 = 0; else {
           HEAP32[$1295 + 0 >> 2] = HEAP32[$27 + 0 >> 2];
           HEAP32[$1295 + 4 >> 2] = HEAP32[$27 + 4 >> 2];
           HEAP32[$1295 + 8 >> 2] = HEAP32[$27 + 8 >> 2];
           HEAP32[$27 + 0 >> 2] = 0;
           HEAP32[$27 + 4 >> 2] = 0;
           HEAP32[$27 + 8 >> 2] = 0;
           $1300 = $1295 + 12 | 0;
           HEAP32[$1300 + 0 >> 2] = HEAP32[$1294 + 0 >> 2];
           HEAP32[$1300 + 4 >> 2] = HEAP32[$1294 + 4 >> 2];
           HEAP32[$1300 + 8 >> 2] = HEAP32[$1294 + 8 >> 2];
           HEAP32[$1294 + 0 >> 2] = 0;
           HEAP32[$1294 + 4 >> 2] = 0;
           HEAP32[$1294 + 8 >> 2] = 0;
           $1302 = HEAP32[$1218 >> 2] | 0;
          }
          HEAP32[$1218 >> 2] = $1302 + 24;
         } else {
          $1306 = HEAP32[$$pre$phiZ2D >> 2] | 0;
          $1308 = ($1295 - $1306 | 0) / 24 | 0;
          $1309 = $1308 + 1 | 0;
          if (($1309 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
          $1313 = ($1297 - $1306 | 0) / 24 | 0;
          if ($1313 >>> 0 < 1073741823) {
           $1315 = $1313 << 1;
           $$0$i$i$i$i211 = $1315 >>> 0 < $1309 >>> 0 ? $1309 : $1315;
          } else $$0$i$i$i$i211 = 2147483647;
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($$sroa$5422, $$0$i$i$i$i211, $1308, $db + 12 | 0);
          $1318 = $$sroa$5422 + 8 | 0;
          $1319 = HEAP32[$1318 >> 2] | 0;
          if ($1319) {
           HEAP32[$1319 + 0 >> 2] = HEAP32[$27 + 0 >> 2];
           HEAP32[$1319 + 4 >> 2] = HEAP32[$27 + 4 >> 2];
           HEAP32[$1319 + 8 >> 2] = HEAP32[$27 + 8 >> 2];
           HEAP32[$27 + 0 >> 2] = 0;
           HEAP32[$27 + 4 >> 2] = 0;
           HEAP32[$27 + 8 >> 2] = 0;
           $1321 = $1319 + 12 | 0;
           HEAP32[$1321 + 0 >> 2] = HEAP32[$1294 + 0 >> 2];
           HEAP32[$1321 + 4 >> 2] = HEAP32[$1294 + 4 >> 2];
           HEAP32[$1321 + 8 >> 2] = HEAP32[$1294 + 8 >> 2];
           HEAP32[$1294 + 0 >> 2] = 0;
           HEAP32[$1294 + 4 >> 2] = 0;
           HEAP32[$1294 + 8 >> 2] = 0;
          }
          HEAP32[$1318 >> 2] = $1319 + 24;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $$sroa$5422);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($$sroa$5422);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
         $1323 = $t$3$i413419 + 1 | 0;
         if (!(HEAP8[$r$i >> 0] & 1)) {
          $$019$i = $1323;
          $$2$i215 = 0;
          break;
         }
         _free(HEAP32[$1290 >> 2] | 0);
         $$019$i = $1323;
         $$2$i215 = 0;
        } while (0);
        if (HEAP8[$expr_list$i >> 0] & 1) _free(HEAP32[$expr_list$i + 8 >> 2] | 0);
        if (HEAP8[$type$i >> 0] & 1) _free(HEAP32[$type$i + 8 >> 2] | 0);
        if (HEAP8[$init_list$i >> 0] & 1) _free(HEAP32[$init_list$i + 8 >> 2] | 0);
        if ($$2$i215) {
         $$0 = $first;
         STACKTOP = sp;
         return $$0 | 0;
        } else $$221$i = $$019$i;
       } else $$221$i = $first;
      } else $$221$i = $first;
     } else $$221$i = $first;
     $$0 = $$221$i;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 101:
    {
     $1342 = $first + 2 | 0;
     HEAP8[$93 >> 0] = 4;
     $1343 = $93 + 1 | 0;
     HEAP8[$1343 >> 0] = 33;
     HEAP8[$1343 + 1 >> 0] = 61;
     HEAP8[$93 + 3 >> 0] = 0;
     $1345 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1342, $last, $93, $db) | 0;
     $$0 = ($1345 | 0) == ($1342 | 0) ? $first : $1345;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 103:
    {
     $1347 = $first + 2 | 0;
     HEAP8[$94 >> 0] = 2;
     HEAP8[$94 + 1 >> 0] = 45;
     HEAP8[$94 + 2 >> 0] = 0;
     $1350 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1347, $last, $94, $db) | 0;
     $$0 = ($1350 | 0) == ($1347 | 0) ? $first : $1350;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 116:
    {
     $1352 = $first + 2 | 0;
     HEAP8[$95 >> 0] = 2;
     HEAP8[$95 + 1 >> 0] = 33;
     HEAP8[$95 + 2 >> 0] = 0;
     $1355 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1352, $last, $95, $db) | 0;
     $$0 = ($1355 | 0) == ($1352 | 0) ? $first : $1355;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 120:
    {
     $1357 = $first + 2 | 0;
     $1358 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1357, $last, $db) | 0;
     if (($1358 | 0) == ($1357 | 0)) $$03$i180 = $1357; else {
      $1362 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($1362 | 0)) $$03$i180 = $1357; else {
       $1364 = $1362 + -24 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($1, $1364);
       $1365 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($1, 0, 59512, 10) | 0;
       HEAP32[$0 + 0 >> 2] = HEAP32[$1365 + 0 >> 2];
       HEAP32[$0 + 4 >> 2] = HEAP32[$1365 + 4 >> 2];
       HEAP32[$0 + 8 >> 2] = HEAP32[$1365 + 8 >> 2];
       HEAP32[$1365 + 0 >> 2] = 0;
       HEAP32[$1365 + 4 >> 2] = 0;
       HEAP32[$1365 + 8 >> 2] = 0;
       $1366 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, 58936, 1) | 0;
       $1367 = HEAP8[$1366 >> 0] | 0;
       $1368 = $1366 + 1 | 0;
       HEAP8[$$sroa$5422 + 0 >> 0] = HEAP8[$1368 + 0 >> 0] | 0;
       HEAP8[$$sroa$5422 + 1 >> 0] = HEAP8[$1368 + 1 >> 0] | 0;
       HEAP8[$$sroa$5422 + 2 >> 0] = HEAP8[$1368 + 2 >> 0] | 0;
       HEAP8[$$sroa$5422 + 3 >> 0] = HEAP8[$1368 + 3 >> 0] | 0;
       HEAP8[$$sroa$5422 + 4 >> 0] = HEAP8[$1368 + 4 >> 0] | 0;
       HEAP8[$$sroa$5422 + 5 >> 0] = HEAP8[$1368 + 5 >> 0] | 0;
       HEAP8[$$sroa$5422 + 6 >> 0] = HEAP8[$1368 + 6 >> 0] | 0;
       $1370 = HEAP32[$1366 + 8 >> 2] | 0;
       HEAP32[$1366 + 0 >> 2] = 0;
       HEAP32[$1366 + 4 >> 2] = 0;
       HEAP32[$1366 + 8 >> 2] = 0;
       do if (!(HEAP8[$1364 >> 0] & 1)) {
        HEAP8[$1364 + 1 >> 0] = 0;
        HEAP8[$1364 >> 0] = 0;
       } else {
        $1375 = $1362 + -16 | 0;
        HEAP8[HEAP32[$1375 >> 2] >> 0] = 0;
        $1377 = $1362 + -20 | 0;
        HEAP32[$1377 >> 2] = 0;
        $$pre$i$i$i$i = HEAP8[$1364 >> 0] | 0;
        if (!($$pre$i$i$i$i & 1)) {
         $1384 = $$pre$i$i$i$i;
         $1393 = 10;
        } else {
         $1380 = HEAP32[$1364 >> 2] | 0;
         $1384 = $1380 & 255;
         $1393 = ($1380 & -2) + -1 | 0;
        }
        if (!($1384 & 1)) {
         $1387 = ($1384 & 255) >>> 1;
         if (($1384 & 255) < 22) {
          $1392 = 10;
          $1412 = $1387;
          $2140 = 1;
         } else {
          $1392 = ($1387 + 16 & 240) + -1 | 0;
          $1412 = $1387;
          $2140 = 1;
         }
        } else {
         $1392 = 10;
         $1412 = 0;
         $2140 = 0;
        }
        if (($1392 | 0) != ($1393 | 0)) {
         if (($1392 | 0) == 10) {
          $1399 = $1364 + 1 | 0;
          $1400 = HEAP32[$1375 >> 2] | 0;
          if ($2140) {
           _memcpy($1399 | 0, $1400 | 0, (($1384 & 255) >>> 1) + 1 | 0) | 0;
           _free($1400);
          } else {
           HEAP8[$1399 >> 0] = HEAP8[$1400 >> 0] | 0;
           _free($1400);
          }
          HEAP8[$1364 >> 0] = $1412 << 1;
          break;
         }
         $1396 = $1392 + 1 | 0;
         $1397 = _malloc($1396) | 0;
         if (!($1392 >>> 0 <= $1393 >>> 0 & ($1397 | 0) == 0)) {
          if ($2140) _memcpy($1397 | 0, $1364 + 1 | 0, (($1384 & 255) >>> 1) + 1 | 0) | 0; else {
           $1409 = HEAP32[$1375 >> 2] | 0;
           HEAP8[$1397 >> 0] = HEAP8[$1409 >> 0] | 0;
           _free($1409);
          }
          HEAP32[$1364 >> 2] = $1396 | 1;
          HEAP32[$1377 >> 2] = $1412;
          HEAP32[$1375 >> 2] = $1397;
         }
        }
       } while (0);
       HEAP8[$1364 >> 0] = $1367;
       $1415 = $1362 + -23 | 0;
       HEAP8[$1415 + 0 >> 0] = HEAP8[$$sroa$5422 + 0 >> 0] | 0;
       HEAP8[$1415 + 1 >> 0] = HEAP8[$$sroa$5422 + 1 >> 0] | 0;
       HEAP8[$1415 + 2 >> 0] = HEAP8[$$sroa$5422 + 2 >> 0] | 0;
       HEAP8[$1415 + 3 >> 0] = HEAP8[$$sroa$5422 + 3 >> 0] | 0;
       HEAP8[$1415 + 4 >> 0] = HEAP8[$$sroa$5422 + 4 >> 0] | 0;
       HEAP8[$1415 + 5 >> 0] = HEAP8[$$sroa$5422 + 5 >> 0] | 0;
       HEAP8[$1415 + 6 >> 0] = HEAP8[$$sroa$5422 + 6 >> 0] | 0;
       HEAP32[$1362 + -16 >> 2] = $1370;
       HEAP8[$$sroa$5422 + 0 >> 0] = 0;
       HEAP8[$$sroa$5422 + 1 >> 0] = 0;
       HEAP8[$$sroa$5422 + 2 >> 0] = 0;
       HEAP8[$$sroa$5422 + 3 >> 0] = 0;
       HEAP8[$$sroa$5422 + 4 >> 0] = 0;
       HEAP8[$$sroa$5422 + 5 >> 0] = 0;
       HEAP8[$$sroa$5422 + 6 >> 0] = 0;
       if (HEAP8[$0 >> 0] & 1) _free(HEAP32[$0 + 8 >> 2] | 0);
       if (!(HEAP8[$1 >> 0] & 1)) $$03$i180 = $1358; else {
        _free(HEAP32[$1 + 8 >> 2] | 0);
        $$03$i180 = $1358;
       }
      }
     }
     $$0 = ($$03$i180 | 0) == ($1357 | 0) ? $first : $$03$i180;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 111:
  {
   $1427 = HEAP8[$t$0 + 1 >> 0] | 0;
   if (($1427 | 0) == 110) {
    $$0 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($1427 | 0) == 111) {
    $1429 = $first + 2 | 0;
    HEAP8[$96 >> 0] = 4;
    $1430 = $96 + 1 | 0;
    HEAP8[$1430 >> 0] = 124;
    HEAP8[$1430 + 1 >> 0] = 124;
    HEAP8[$96 + 3 >> 0] = 0;
    $1432 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1429, $last, $96, $db) | 0;
    $$0 = ($1432 | 0) == ($1429 | 0) ? $first : $1432;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($1427 | 0) == 114) {
    $1434 = $first + 2 | 0;
    HEAP8[$97 >> 0] = 2;
    HEAP8[$97 + 1 >> 0] = 124;
    HEAP8[$97 + 2 >> 0] = 0;
    $1437 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1434, $last, $97, $db) | 0;
    $$0 = ($1437 | 0) == ($1434 | 0) ? $first : $1437;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($1427 | 0) == 82) {
    $1439 = $first + 2 | 0;
    HEAP8[$98 >> 0] = 4;
    $1440 = $98 + 1 | 0;
    HEAP8[$1440 >> 0] = 124;
    HEAP8[$1440 + 1 >> 0] = 61;
    HEAP8[$98 + 3 >> 0] = 0;
    $1442 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1439, $last, $98, $db) | 0;
    $$0 = ($1442 | 0) == ($1439 | 0) ? $first : $1442;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 112:
  {
   switch (HEAP8[$t$0 + 1 >> 0] | 0) {
   case 109:
    {
     $1447 = $first + 2 | 0;
     HEAP8[$99 >> 0] = 6;
     $1448 = $99 + 1 | 0;
     HEAP8[$1448 + 0 >> 0] = HEAP8[59304] | 0;
     HEAP8[$1448 + 1 >> 0] = HEAP8[59305] | 0;
     HEAP8[$1448 + 2 >> 0] = HEAP8[59306] | 0;
     HEAP8[$99 + 4 >> 0] = 0;
     $1450 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1447, $last, $99, $db) | 0;
     $$0 = ($1450 | 0) == ($1447 | 0) ? $first : $1450;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 108:
    {
     $1452 = $first + 2 | 0;
     HEAP8[$100 >> 0] = 2;
     HEAP8[$100 + 1 >> 0] = 43;
     HEAP8[$100 + 2 >> 0] = 0;
     $1455 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1452, $last, $100, $db) | 0;
     $$0 = ($1455 | 0) == ($1452 | 0) ? $first : $1455;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 76:
    {
     $1457 = $first + 2 | 0;
     HEAP8[$101 >> 0] = 4;
     $1458 = $101 + 1 | 0;
     HEAP8[$1458 >> 0] = 43;
     HEAP8[$1458 + 1 >> 0] = 61;
     HEAP8[$101 + 3 >> 0] = 0;
     $1460 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1457, $last, $101, $db) | 0;
     $$0 = ($1460 | 0) == ($1457 | 0) ? $first : $1460;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 112:
    {
     $1462 = $first + 2 | 0;
     if (($1462 | 0) != ($last | 0)) if ((HEAP8[$1462 >> 0] | 0) == 95) {
      $1466 = $first + 3 | 0;
      HEAP8[$102 >> 0] = 4;
      $1467 = $102 + 1 | 0;
      HEAP8[$1467 >> 0] = 43;
      HEAP8[$1467 + 1 >> 0] = 43;
      HEAP8[$102 + 3 >> 0] = 0;
      $1469 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1466, $last, $102, $db) | 0;
      $$0 = ($1469 | 0) == ($1466 | 0) ? $first : $1469;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1471 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1462, $last, $db) | 0;
     if (($1471 | 0) == ($1462 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1475 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($1475 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1477 = $1475 + -24 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($105, $1477);
     $1478 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($105, 0, 58944, 1) | 0;
     HEAP32[$104 + 0 >> 2] = HEAP32[$1478 + 0 >> 2];
     HEAP32[$104 + 4 >> 2] = HEAP32[$1478 + 4 >> 2];
     HEAP32[$104 + 8 >> 2] = HEAP32[$1478 + 8 >> 2];
     HEAP32[$1478 + 0 >> 2] = 0;
     HEAP32[$1478 + 4 >> 2] = 0;
     HEAP32[$1478 + 8 >> 2] = 0;
     $1479 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($104, 59336, 3) | 0;
     $1480 = HEAP8[$1479 >> 0] | 0;
     $1481 = $1479 + 1 | 0;
     HEAP8[$$sroa$4364 + 0 >> 0] = HEAP8[$1481 + 0 >> 0] | 0;
     HEAP8[$$sroa$4364 + 1 >> 0] = HEAP8[$1481 + 1 >> 0] | 0;
     HEAP8[$$sroa$4364 + 2 >> 0] = HEAP8[$1481 + 2 >> 0] | 0;
     HEAP8[$$sroa$4364 + 3 >> 0] = HEAP8[$1481 + 3 >> 0] | 0;
     HEAP8[$$sroa$4364 + 4 >> 0] = HEAP8[$1481 + 4 >> 0] | 0;
     HEAP8[$$sroa$4364 + 5 >> 0] = HEAP8[$1481 + 5 >> 0] | 0;
     HEAP8[$$sroa$4364 + 6 >> 0] = HEAP8[$1481 + 6 >> 0] | 0;
     $1483 = HEAP32[$1479 + 8 >> 2] | 0;
     HEAP32[$1479 + 0 >> 2] = 0;
     HEAP32[$1479 + 4 >> 2] = 0;
     HEAP32[$1479 + 8 >> 2] = 0;
     HEAP8[$103 >> 0] = $1480;
     $1484 = $103 + 1 | 0;
     HEAP8[$1484 + 0 >> 0] = HEAP8[$$sroa$4364 + 0 >> 0] | 0;
     HEAP8[$1484 + 1 >> 0] = HEAP8[$$sroa$4364 + 1 >> 0] | 0;
     HEAP8[$1484 + 2 >> 0] = HEAP8[$$sroa$4364 + 2 >> 0] | 0;
     HEAP8[$1484 + 3 >> 0] = HEAP8[$$sroa$4364 + 3 >> 0] | 0;
     HEAP8[$1484 + 4 >> 0] = HEAP8[$$sroa$4364 + 4 >> 0] | 0;
     HEAP8[$1484 + 5 >> 0] = HEAP8[$$sroa$4364 + 5 >> 0] | 0;
     HEAP8[$1484 + 6 >> 0] = HEAP8[$$sroa$4364 + 6 >> 0] | 0;
     HEAP32[$103 + 8 >> 2] = $1483;
     HEAP8[$$sroa$4364 + 0 >> 0] = 0;
     HEAP8[$$sroa$4364 + 1 >> 0] = 0;
     HEAP8[$$sroa$4364 + 2 >> 0] = 0;
     HEAP8[$$sroa$4364 + 3 >> 0] = 0;
     HEAP8[$$sroa$4364 + 4 >> 0] = 0;
     HEAP8[$$sroa$4364 + 5 >> 0] = 0;
     HEAP8[$$sroa$4364 + 6 >> 0] = 0;
     $1486 = $103 + 12 | 0;
     HEAP32[$1486 + 0 >> 2] = 0;
     HEAP32[$1486 + 4 >> 2] = 0;
     HEAP32[$1486 + 8 >> 2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1477, $103);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($103);
     if (HEAP8[$104 >> 0] & 1) _free(HEAP32[$104 + 8 >> 2] | 0);
     if (!(HEAP8[$105 >> 0] & 1)) {
      $$0 = $1471;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$105 + 8 >> 2] | 0);
     $$0 = $1471;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 116:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 112) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 116) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1505 = $first + 2 | 0;
     $1506 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1505, $last, $db) | 0;
     if (($1506 | 0) == ($1505 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1508 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1506, $last, $db) | 0;
     if (($1508 | 0) == ($1506 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1510 = $db + 4 | 0;
     $1511 = HEAP32[$1510 >> 2] | 0;
     if ((($1511 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i170, $1511 + -24 | 0);
     $1519 = HEAP32[$1510 >> 2] | 0;
     $1520 = $1519 + -24 | 0;
     $1522 = $1519;
     do {
      $1521 = $1522 + -24 | 0;
      HEAP32[$1510 >> 2] = $1521;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1521);
      $1522 = HEAP32[$1510 >> 2] | 0;
     } while (($1522 | 0) != ($1520 | 0));
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1519 + -48 | 0, 59504, 2) | 0;
     $1528 = HEAP8[$tmp$i170 >> 0] | 0;
     $1530 = ($1528 & 1) == 0;
     if ($1530) {
      $1538 = $tmp$i170 + 1 | 0;
      $1539 = ($1528 & 255) >>> 1;
     } else {
      $1538 = HEAP32[$tmp$i170 + 8 >> 2] | 0;
      $1539 = HEAP32[$tmp$i170 + 4 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$1510 >> 2] | 0) + -24 | 0, $1538, $1539) | 0;
     if ($1530) {
      $$0 = $1508;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$tmp$i170 + 8 >> 2] | 0);
     $$0 = $1508;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 115:
    {
     $1494 = $first + 2 | 0;
     HEAP8[$106 >> 0] = 2;
     HEAP8[$106 + 1 >> 0] = 43;
     HEAP8[$106 + 2 >> 0] = 0;
     $1497 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1494, $last, $106, $db) | 0;
     $$0 = ($1497 | 0) == ($1494 | 0) ? $first : $1497;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 113:
  {
   if ((HEAP8[$t$0 + 1 >> 0] | 0) != 117) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1545 = $first + 2 | 0;
   $1546 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1545, $last, $db) | 0;
   if (($1546 | 0) == ($1545 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1548 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1546, $last, $db) | 0;
   if (($1548 | 0) == ($1546 | 0)) {
    $1654 = $db + 4 | 0;
    $1655 = HEAP32[$1654 >> 2] | 0;
    $1656 = $1655 + -24 | 0;
    $1658 = $1655;
    do {
     $1657 = $1658 + -24 | 0;
     HEAP32[$1654 >> 2] = $1657;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1657);
     $1658 = HEAP32[$1654 >> 2] | 0;
    } while (($1658 | 0) != ($1656 | 0));
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1550 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1548, $last, $db) | 0;
   $1552 = $db + 4 | 0;
   $1553 = HEAP32[$1552 >> 2] | 0;
   if (($1550 | 0) == ($1548 | 0)) {
    $1644 = $1553 + -24 | 0;
    $1646 = $1553;
    do {
     $1645 = $1646 + -24 | 0;
     HEAP32[$1552 >> 2] = $1645;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1645);
     $1646 = HEAP32[$1552 >> 2] | 0;
    } while (($1646 | 0) != ($1644 | 0));
    $1649 = $1553 + -48 | 0;
    $1651 = $1644;
    do {
     $1650 = $1651 + -24 | 0;
     HEAP32[$1552 >> 2] = $1650;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1650);
     $1651 = HEAP32[$1552 >> 2] | 0;
    } while (($1651 | 0) != ($1649 | 0));
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if ((($1553 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 3) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op3, $1553 + -24 | 0);
   $1561 = HEAP32[$1552 >> 2] | 0;
   $1562 = $1561 + -24 | 0;
   $1564 = $1561;
   do {
    $1563 = $1564 + -24 | 0;
    HEAP32[$1552 >> 2] = $1563;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1563);
    $1564 = HEAP32[$1552 >> 2] | 0;
   } while (($1564 | 0) != ($1562 | 0));
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op27, $1561 + -48 | 0);
   $1568 = HEAP32[$1552 >> 2] | 0;
   $1569 = $1568 + -24 | 0;
   $1571 = $1568;
   do {
    $1570 = $1571 + -24 | 0;
    HEAP32[$1552 >> 2] = $1570;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1570);
    $1571 = HEAP32[$1552 >> 2] | 0;
   } while (($1571 | 0) != ($1569 | 0));
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op18, $1568 + -48 | 0);
   $1576 = (HEAP32[$1552 >> 2] | 0) + -24 | 0;
   __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($112, 58944, $op18);
   $1577 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($112, 59344, 5) | 0;
   HEAP32[$111 + 0 >> 2] = HEAP32[$1577 + 0 >> 2];
   HEAP32[$111 + 4 >> 2] = HEAP32[$1577 + 4 >> 2];
   HEAP32[$111 + 8 >> 2] = HEAP32[$1577 + 8 >> 2];
   HEAP32[$1577 + 0 >> 2] = 0;
   HEAP32[$1577 + 4 >> 2] = 0;
   HEAP32[$1577 + 8 >> 2] = 0;
   $1578 = HEAP8[$op27 >> 0] | 0;
   $1580 = ($1578 & 1) == 0;
   if ($1580) {
    $1588 = $op27 + 1 | 0;
    $1589 = ($1578 & 255) >>> 1;
   } else {
    $1588 = HEAP32[$op27 + 8 >> 2] | 0;
    $1589 = HEAP32[$op27 + 4 >> 2] | 0;
   }
   $1590 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($111, $1588, $1589) | 0;
   HEAP32[$110 + 0 >> 2] = HEAP32[$1590 + 0 >> 2];
   HEAP32[$110 + 4 >> 2] = HEAP32[$1590 + 4 >> 2];
   HEAP32[$110 + 8 >> 2] = HEAP32[$1590 + 8 >> 2];
   HEAP32[$1590 + 0 >> 2] = 0;
   HEAP32[$1590 + 4 >> 2] = 0;
   HEAP32[$1590 + 8 >> 2] = 0;
   $1591 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($110, 59352, 5) | 0;
   HEAP32[$109 + 0 >> 2] = HEAP32[$1591 + 0 >> 2];
   HEAP32[$109 + 4 >> 2] = HEAP32[$1591 + 4 >> 2];
   HEAP32[$109 + 8 >> 2] = HEAP32[$1591 + 8 >> 2];
   HEAP32[$1591 + 0 >> 2] = 0;
   HEAP32[$1591 + 4 >> 2] = 0;
   HEAP32[$1591 + 8 >> 2] = 0;
   $1592 = HEAP8[$op3 >> 0] | 0;
   $1594 = ($1592 & 1) == 0;
   if ($1594) {
    $1602 = $op3 + 1 | 0;
    $1603 = ($1592 & 255) >>> 1;
   } else {
    $1602 = HEAP32[$op3 + 8 >> 2] | 0;
    $1603 = HEAP32[$op3 + 4 >> 2] | 0;
   }
   $1604 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($109, $1602, $1603) | 0;
   HEAP32[$108 + 0 >> 2] = HEAP32[$1604 + 0 >> 2];
   HEAP32[$108 + 4 >> 2] = HEAP32[$1604 + 4 >> 2];
   HEAP32[$108 + 8 >> 2] = HEAP32[$1604 + 8 >> 2];
   HEAP32[$1604 + 0 >> 2] = 0;
   HEAP32[$1604 + 4 >> 2] = 0;
   HEAP32[$1604 + 8 >> 2] = 0;
   $1605 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($108, 58936, 1) | 0;
   $1606 = HEAP8[$1605 >> 0] | 0;
   $1607 = $1605 + 1 | 0;
   HEAP8[$$sroa$4 + 0 >> 0] = HEAP8[$1607 + 0 >> 0] | 0;
   HEAP8[$$sroa$4 + 1 >> 0] = HEAP8[$1607 + 1 >> 0] | 0;
   HEAP8[$$sroa$4 + 2 >> 0] = HEAP8[$1607 + 2 >> 0] | 0;
   HEAP8[$$sroa$4 + 3 >> 0] = HEAP8[$1607 + 3 >> 0] | 0;
   HEAP8[$$sroa$4 + 4 >> 0] = HEAP8[$1607 + 4 >> 0] | 0;
   HEAP8[$$sroa$4 + 5 >> 0] = HEAP8[$1607 + 5 >> 0] | 0;
   HEAP8[$$sroa$4 + 6 >> 0] = HEAP8[$1607 + 6 >> 0] | 0;
   $1609 = HEAP32[$1605 + 8 >> 2] | 0;
   HEAP32[$1605 + 0 >> 2] = 0;
   HEAP32[$1605 + 4 >> 2] = 0;
   HEAP32[$1605 + 8 >> 2] = 0;
   HEAP8[$107 >> 0] = $1606;
   $1610 = $107 + 1 | 0;
   HEAP8[$1610 + 0 >> 0] = HEAP8[$$sroa$4 + 0 >> 0] | 0;
   HEAP8[$1610 + 1 >> 0] = HEAP8[$$sroa$4 + 1 >> 0] | 0;
   HEAP8[$1610 + 2 >> 0] = HEAP8[$$sroa$4 + 2 >> 0] | 0;
   HEAP8[$1610 + 3 >> 0] = HEAP8[$$sroa$4 + 3 >> 0] | 0;
   HEAP8[$1610 + 4 >> 0] = HEAP8[$$sroa$4 + 4 >> 0] | 0;
   HEAP8[$1610 + 5 >> 0] = HEAP8[$$sroa$4 + 5 >> 0] | 0;
   HEAP8[$1610 + 6 >> 0] = HEAP8[$$sroa$4 + 6 >> 0] | 0;
   HEAP32[$107 + 8 >> 2] = $1609;
   HEAP8[$$sroa$4 + 0 >> 0] = 0;
   HEAP8[$$sroa$4 + 1 >> 0] = 0;
   HEAP8[$$sroa$4 + 2 >> 0] = 0;
   HEAP8[$$sroa$4 + 3 >> 0] = 0;
   HEAP8[$$sroa$4 + 4 >> 0] = 0;
   HEAP8[$$sroa$4 + 5 >> 0] = 0;
   HEAP8[$$sroa$4 + 6 >> 0] = 0;
   $1612 = $107 + 12 | 0;
   HEAP32[$1612 + 0 >> 2] = 0;
   HEAP32[$1612 + 4 >> 2] = 0;
   HEAP32[$1612 + 8 >> 2] = 0;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1576, $107);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($107);
   if (HEAP8[$108 >> 0] & 1) _free(HEAP32[$108 + 8 >> 2] | 0);
   if (HEAP8[$109 >> 0] & 1) _free(HEAP32[$109 + 8 >> 2] | 0);
   if (HEAP8[$110 >> 0] & 1) _free(HEAP32[$110 + 8 >> 2] | 0);
   if (HEAP8[$111 >> 0] & 1) _free(HEAP32[$111 + 8 >> 2] | 0);
   if (HEAP8[$112 >> 0] & 1) _free(HEAP32[$112 + 8 >> 2] | 0);
   if (HEAP8[$op18 >> 0] & 1) _free(HEAP32[$op18 + 8 >> 2] | 0);
   if (!$1580) _free(HEAP32[$op27 + 8 >> 2] | 0);
   if ($1594) {
    $$0 = $1550;
    STACKTOP = sp;
    return $$0 | 0;
   }
   _free(HEAP32[$op3 + 8 >> 2] | 0);
   $$0 = $1550;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 114:
  {
   switch (HEAP8[$t$0 + 1 >> 0] | 0) {
   case 99:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 114) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 99) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1670 = $first + 2 | 0;
     $1671 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1670, $last, $db) | 0;
     if (($1671 | 0) == ($1670 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1673 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1671, $last, $db) | 0;
     if (($1673 | 0) == ($1671 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1675 = $db + 4 | 0;
     $1676 = HEAP32[$1675 >> 2] | 0;
     if ((($1676 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i152, $1676 + -24 | 0);
     $1684 = HEAP32[$1675 >> 2] | 0;
     $1685 = $1684 + -24 | 0;
     $1687 = $1684;
     do {
      $1686 = $1687 + -24 | 0;
      HEAP32[$1675 >> 2] = $1686;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1686);
      $1687 = HEAP32[$1675 >> 2] | 0;
     } while (($1687 | 0) != ($1685 | 0));
     $1690 = $1684 + -48 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($32, $1690);
     $1691 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($32, 0, 59480, 17) | 0;
     HEAP32[$31 + 0 >> 2] = HEAP32[$1691 + 0 >> 2];
     HEAP32[$31 + 4 >> 2] = HEAP32[$1691 + 4 >> 2];
     HEAP32[$31 + 8 >> 2] = HEAP32[$1691 + 8 >> 2];
     HEAP32[$1691 + 0 >> 2] = 0;
     HEAP32[$1691 + 4 >> 2] = 0;
     HEAP32[$1691 + 8 >> 2] = 0;
     $1692 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($31, 59472, 2) | 0;
     HEAP32[$30 + 0 >> 2] = HEAP32[$1692 + 0 >> 2];
     HEAP32[$30 + 4 >> 2] = HEAP32[$1692 + 4 >> 2];
     HEAP32[$30 + 8 >> 2] = HEAP32[$1692 + 8 >> 2];
     HEAP32[$1692 + 0 >> 2] = 0;
     HEAP32[$1692 + 4 >> 2] = 0;
     HEAP32[$1692 + 8 >> 2] = 0;
     $1693 = HEAP8[$expr$i152 >> 0] | 0;
     $1695 = ($1693 & 1) == 0;
     if ($1695) {
      $1703 = $expr$i152 + 1 | 0;
      $1704 = ($1693 & 255) >>> 1;
     } else {
      $1703 = HEAP32[$expr$i152 + 8 >> 2] | 0;
      $1704 = HEAP32[$expr$i152 + 4 >> 2] | 0;
     }
     $1705 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($30, $1703, $1704) | 0;
     HEAP32[$29 + 0 >> 2] = HEAP32[$1705 + 0 >> 2];
     HEAP32[$29 + 4 >> 2] = HEAP32[$1705 + 4 >> 2];
     HEAP32[$29 + 8 >> 2] = HEAP32[$1705 + 8 >> 2];
     HEAP32[$1705 + 0 >> 2] = 0;
     HEAP32[$1705 + 4 >> 2] = 0;
     HEAP32[$1705 + 8 >> 2] = 0;
     $1706 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($29, 58936, 1) | 0;
     $1707 = HEAP8[$1706 >> 0] | 0;
     $1708 = $1706 + 1 | 0;
     HEAP8[$$sroa$5398 + 0 >> 0] = HEAP8[$1708 + 0 >> 0] | 0;
     HEAP8[$$sroa$5398 + 1 >> 0] = HEAP8[$1708 + 1 >> 0] | 0;
     HEAP8[$$sroa$5398 + 2 >> 0] = HEAP8[$1708 + 2 >> 0] | 0;
     HEAP8[$$sroa$5398 + 3 >> 0] = HEAP8[$1708 + 3 >> 0] | 0;
     HEAP8[$$sroa$5398 + 4 >> 0] = HEAP8[$1708 + 4 >> 0] | 0;
     HEAP8[$$sroa$5398 + 5 >> 0] = HEAP8[$1708 + 5 >> 0] | 0;
     HEAP8[$$sroa$5398 + 6 >> 0] = HEAP8[$1708 + 6 >> 0] | 0;
     $1710 = HEAP32[$1706 + 8 >> 2] | 0;
     HEAP32[$1706 + 0 >> 2] = 0;
     HEAP32[$1706 + 4 >> 2] = 0;
     HEAP32[$1706 + 8 >> 2] = 0;
     HEAP8[$28 >> 0] = $1707;
     $1711 = $28 + 1 | 0;
     HEAP8[$1711 + 0 >> 0] = HEAP8[$$sroa$5398 + 0 >> 0] | 0;
     HEAP8[$1711 + 1 >> 0] = HEAP8[$$sroa$5398 + 1 >> 0] | 0;
     HEAP8[$1711 + 2 >> 0] = HEAP8[$$sroa$5398 + 2 >> 0] | 0;
     HEAP8[$1711 + 3 >> 0] = HEAP8[$$sroa$5398 + 3 >> 0] | 0;
     HEAP8[$1711 + 4 >> 0] = HEAP8[$$sroa$5398 + 4 >> 0] | 0;
     HEAP8[$1711 + 5 >> 0] = HEAP8[$$sroa$5398 + 5 >> 0] | 0;
     HEAP8[$1711 + 6 >> 0] = HEAP8[$$sroa$5398 + 6 >> 0] | 0;
     HEAP32[$28 + 8 >> 2] = $1710;
     HEAP8[$$sroa$5398 + 0 >> 0] = 0;
     HEAP8[$$sroa$5398 + 1 >> 0] = 0;
     HEAP8[$$sroa$5398 + 2 >> 0] = 0;
     HEAP8[$$sroa$5398 + 3 >> 0] = 0;
     HEAP8[$$sroa$5398 + 4 >> 0] = 0;
     HEAP8[$$sroa$5398 + 5 >> 0] = 0;
     HEAP8[$$sroa$5398 + 6 >> 0] = 0;
     $1713 = $28 + 12 | 0;
     HEAP32[$1713 + 0 >> 2] = 0;
     HEAP32[$1713 + 4 >> 2] = 0;
     HEAP32[$1713 + 8 >> 2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1690, $28);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
     if (HEAP8[$29 >> 0] & 1) _free(HEAP32[$29 + 8 >> 2] | 0);
     if (HEAP8[$30 >> 0] & 1) _free(HEAP32[$30 + 8 >> 2] | 0);
     if (HEAP8[$31 >> 0] & 1) _free(HEAP32[$31 + 8 >> 2] | 0);
     if (HEAP8[$32 >> 0] & 1) _free(HEAP32[$32 + 8 >> 2] | 0);
     if ($1695) {
      $$0 = $1673;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$expr$i152 + 8 >> 2] | 0);
     $$0 = $1673;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 109:
    {
     $1733 = $first + 2 | 0;
     HEAP8[$113 >> 0] = 2;
     HEAP8[$113 + 1 >> 0] = 37;
     HEAP8[$113 + 2 >> 0] = 0;
     $1736 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1733, $last, $113, $db) | 0;
     $$0 = ($1736 | 0) == ($1733 | 0) ? $first : $1736;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 77:
    {
     $1738 = $first + 2 | 0;
     HEAP8[$114 >> 0] = 4;
     $1739 = $114 + 1 | 0;
     HEAP8[$1739 >> 0] = 37;
     HEAP8[$1739 + 1 >> 0] = 61;
     HEAP8[$114 + 3 >> 0] = 0;
     $1741 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1738, $last, $114, $db) | 0;
     $$0 = ($1741 | 0) == ($1738 | 0) ? $first : $1741;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 115:
    {
     $1743 = $first + 2 | 0;
     HEAP8[$115 >> 0] = 4;
     $1744 = $115 + 1 | 0;
     HEAP8[$1744 >> 0] = 62;
     HEAP8[$1744 + 1 >> 0] = 62;
     HEAP8[$115 + 3 >> 0] = 0;
     $1746 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1743, $last, $115, $db) | 0;
     $$0 = ($1746 | 0) == ($1743 | 0) ? $first : $1746;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 83:
    {
     $1748 = $first + 2 | 0;
     HEAP8[$116 >> 0] = 6;
     $1749 = $116 + 1 | 0;
     HEAP8[$1749 + 0 >> 0] = HEAP8[59384] | 0;
     HEAP8[$1749 + 1 >> 0] = HEAP8[59385] | 0;
     HEAP8[$1749 + 2 >> 0] = HEAP8[59386] | 0;
     HEAP8[$116 + 4 >> 0] = 0;
     $1751 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1748, $last, $116, $db) | 0;
     STACKTOP = sp;
     return (($1751 | 0) == ($1748 | 0) ? $first : $1751) | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 115:
  {
   switch (HEAP8[$t$0 + 1 >> 0] | 0) {
   case 99:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 115) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 99) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1762 = $first + 2 | 0;
     $1763 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1762, $last, $db) | 0;
     if (($1763 | 0) == ($1762 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1765 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1763, $last, $db) | 0;
     if (($1765 | 0) == ($1763 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1767 = $db + 4 | 0;
     $1768 = HEAP32[$1767 >> 2] | 0;
     if ((($1768 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i, $1768 + -24 | 0);
     $1776 = HEAP32[$1767 >> 2] | 0;
     $1777 = $1776 + -24 | 0;
     $1779 = $1776;
     do {
      $1778 = $1779 + -24 | 0;
      HEAP32[$1767 >> 2] = $1778;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1778);
      $1779 = HEAP32[$1767 >> 2] | 0;
     } while (($1779 | 0) != ($1777 | 0));
     $1782 = $1776 + -48 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($37, $1782);
     $1783 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($37, 0, 59456, 12) | 0;
     HEAP32[$36 + 0 >> 2] = HEAP32[$1783 + 0 >> 2];
     HEAP32[$36 + 4 >> 2] = HEAP32[$1783 + 4 >> 2];
     HEAP32[$36 + 8 >> 2] = HEAP32[$1783 + 8 >> 2];
     HEAP32[$1783 + 0 >> 2] = 0;
     HEAP32[$1783 + 4 >> 2] = 0;
     HEAP32[$1783 + 8 >> 2] = 0;
     $1784 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($36, 59472, 2) | 0;
     HEAP32[$35 + 0 >> 2] = HEAP32[$1784 + 0 >> 2];
     HEAP32[$35 + 4 >> 2] = HEAP32[$1784 + 4 >> 2];
     HEAP32[$35 + 8 >> 2] = HEAP32[$1784 + 8 >> 2];
     HEAP32[$1784 + 0 >> 2] = 0;
     HEAP32[$1784 + 4 >> 2] = 0;
     HEAP32[$1784 + 8 >> 2] = 0;
     $1785 = HEAP8[$expr$i >> 0] | 0;
     $1787 = ($1785 & 1) == 0;
     if ($1787) {
      $1795 = $expr$i + 1 | 0;
      $1796 = ($1785 & 255) >>> 1;
     } else {
      $1795 = HEAP32[$expr$i + 8 >> 2] | 0;
      $1796 = HEAP32[$expr$i + 4 >> 2] | 0;
     }
     $1797 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($35, $1795, $1796) | 0;
     HEAP32[$34 + 0 >> 2] = HEAP32[$1797 + 0 >> 2];
     HEAP32[$34 + 4 >> 2] = HEAP32[$1797 + 4 >> 2];
     HEAP32[$34 + 8 >> 2] = HEAP32[$1797 + 8 >> 2];
     HEAP32[$1797 + 0 >> 2] = 0;
     HEAP32[$1797 + 4 >> 2] = 0;
     HEAP32[$1797 + 8 >> 2] = 0;
     $1798 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($34, 58936, 1) | 0;
     $1799 = HEAP8[$1798 >> 0] | 0;
     $1800 = $1798 + 1 | 0;
     HEAP8[$$sroa$5395 + 0 >> 0] = HEAP8[$1800 + 0 >> 0] | 0;
     HEAP8[$$sroa$5395 + 1 >> 0] = HEAP8[$1800 + 1 >> 0] | 0;
     HEAP8[$$sroa$5395 + 2 >> 0] = HEAP8[$1800 + 2 >> 0] | 0;
     HEAP8[$$sroa$5395 + 3 >> 0] = HEAP8[$1800 + 3 >> 0] | 0;
     HEAP8[$$sroa$5395 + 4 >> 0] = HEAP8[$1800 + 4 >> 0] | 0;
     HEAP8[$$sroa$5395 + 5 >> 0] = HEAP8[$1800 + 5 >> 0] | 0;
     HEAP8[$$sroa$5395 + 6 >> 0] = HEAP8[$1800 + 6 >> 0] | 0;
     $1802 = HEAP32[$1798 + 8 >> 2] | 0;
     HEAP32[$1798 + 0 >> 2] = 0;
     HEAP32[$1798 + 4 >> 2] = 0;
     HEAP32[$1798 + 8 >> 2] = 0;
     HEAP8[$33 >> 0] = $1799;
     $1803 = $33 + 1 | 0;
     HEAP8[$1803 + 0 >> 0] = HEAP8[$$sroa$5395 + 0 >> 0] | 0;
     HEAP8[$1803 + 1 >> 0] = HEAP8[$$sroa$5395 + 1 >> 0] | 0;
     HEAP8[$1803 + 2 >> 0] = HEAP8[$$sroa$5395 + 2 >> 0] | 0;
     HEAP8[$1803 + 3 >> 0] = HEAP8[$$sroa$5395 + 3 >> 0] | 0;
     HEAP8[$1803 + 4 >> 0] = HEAP8[$$sroa$5395 + 4 >> 0] | 0;
     HEAP8[$1803 + 5 >> 0] = HEAP8[$$sroa$5395 + 5 >> 0] | 0;
     HEAP8[$1803 + 6 >> 0] = HEAP8[$$sroa$5395 + 6 >> 0] | 0;
     HEAP32[$33 + 8 >> 2] = $1802;
     HEAP8[$$sroa$5395 + 0 >> 0] = 0;
     HEAP8[$$sroa$5395 + 1 >> 0] = 0;
     HEAP8[$$sroa$5395 + 2 >> 0] = 0;
     HEAP8[$$sroa$5395 + 3 >> 0] = 0;
     HEAP8[$$sroa$5395 + 4 >> 0] = 0;
     HEAP8[$$sroa$5395 + 5 >> 0] = 0;
     HEAP8[$$sroa$5395 + 6 >> 0] = 0;
     $1805 = $33 + 12 | 0;
     HEAP32[$1805 + 0 >> 2] = 0;
     HEAP32[$1805 + 4 >> 2] = 0;
     HEAP32[$1805 + 8 >> 2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1782, $33);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
     if (HEAP8[$34 >> 0] & 1) _free(HEAP32[$34 + 8 >> 2] | 0);
     if (HEAP8[$35 >> 0] & 1) _free(HEAP32[$35 + 8 >> 2] | 0);
     if (HEAP8[$36 >> 0] & 1) _free(HEAP32[$36 + 8 >> 2] | 0);
     if (HEAP8[$37 >> 0] & 1) _free(HEAP32[$37 + 8 >> 2] | 0);
     if ($1787) {
      $$0 = $1765;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$expr$i + 8 >> 2] | 0);
     $$0 = $1765;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 112:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 115) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 112) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1831 = $first + 2 | 0;
     $1832 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1831, $last, $db) | 0;
     $$0 = ($1832 | 0) == ($1831 | 0) ? $first : $1832;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 114:
    {
     $$0 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 116:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 115) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 116) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1841 = $first + 2 | 0;
     $1842 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1841, $last, $db) | 0;
     if (($1842 | 0) == ($1841 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1846 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($1846 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1848 = $1846 + -24 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($40, $1848);
     $1849 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($40, 0, 59440, 8) | 0;
     HEAP32[$39 + 0 >> 2] = HEAP32[$1849 + 0 >> 2];
     HEAP32[$39 + 4 >> 2] = HEAP32[$1849 + 4 >> 2];
     HEAP32[$39 + 8 >> 2] = HEAP32[$1849 + 8 >> 2];
     HEAP32[$1849 + 0 >> 2] = 0;
     HEAP32[$1849 + 4 >> 2] = 0;
     HEAP32[$1849 + 8 >> 2] = 0;
     $1850 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($39, 58936, 1) | 0;
     $1851 = HEAP8[$1850 >> 0] | 0;
     $1852 = $1850 + 1 | 0;
     HEAP8[$$sroa$5392 + 0 >> 0] = HEAP8[$1852 + 0 >> 0] | 0;
     HEAP8[$$sroa$5392 + 1 >> 0] = HEAP8[$1852 + 1 >> 0] | 0;
     HEAP8[$$sroa$5392 + 2 >> 0] = HEAP8[$1852 + 2 >> 0] | 0;
     HEAP8[$$sroa$5392 + 3 >> 0] = HEAP8[$1852 + 3 >> 0] | 0;
     HEAP8[$$sroa$5392 + 4 >> 0] = HEAP8[$1852 + 4 >> 0] | 0;
     HEAP8[$$sroa$5392 + 5 >> 0] = HEAP8[$1852 + 5 >> 0] | 0;
     HEAP8[$$sroa$5392 + 6 >> 0] = HEAP8[$1852 + 6 >> 0] | 0;
     $1854 = HEAP32[$1850 + 8 >> 2] | 0;
     HEAP32[$1850 + 0 >> 2] = 0;
     HEAP32[$1850 + 4 >> 2] = 0;
     HEAP32[$1850 + 8 >> 2] = 0;
     HEAP8[$38 >> 0] = $1851;
     $1855 = $38 + 1 | 0;
     HEAP8[$1855 + 0 >> 0] = HEAP8[$$sroa$5392 + 0 >> 0] | 0;
     HEAP8[$1855 + 1 >> 0] = HEAP8[$$sroa$5392 + 1 >> 0] | 0;
     HEAP8[$1855 + 2 >> 0] = HEAP8[$$sroa$5392 + 2 >> 0] | 0;
     HEAP8[$1855 + 3 >> 0] = HEAP8[$$sroa$5392 + 3 >> 0] | 0;
     HEAP8[$1855 + 4 >> 0] = HEAP8[$$sroa$5392 + 4 >> 0] | 0;
     HEAP8[$1855 + 5 >> 0] = HEAP8[$$sroa$5392 + 5 >> 0] | 0;
     HEAP8[$1855 + 6 >> 0] = HEAP8[$$sroa$5392 + 6 >> 0] | 0;
     HEAP32[$38 + 8 >> 2] = $1854;
     HEAP8[$$sroa$5392 + 0 >> 0] = 0;
     HEAP8[$$sroa$5392 + 1 >> 0] = 0;
     HEAP8[$$sroa$5392 + 2 >> 0] = 0;
     HEAP8[$$sroa$5392 + 3 >> 0] = 0;
     HEAP8[$$sroa$5392 + 4 >> 0] = 0;
     HEAP8[$$sroa$5392 + 5 >> 0] = 0;
     HEAP8[$$sroa$5392 + 6 >> 0] = 0;
     $1857 = $38 + 12 | 0;
     HEAP32[$1857 + 0 >> 2] = 0;
     HEAP32[$1857 + 4 >> 2] = 0;
     HEAP32[$1857 + 8 >> 2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1848, $38);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
     if (HEAP8[$39 >> 0] & 1) _free(HEAP32[$39 + 8 >> 2] | 0);
     if (!(HEAP8[$40 >> 0] & 1)) {
      $$0 = $1842;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$40 + 8 >> 2] | 0);
     $$0 = $1842;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 122:
    {
     if (($120 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first >> 0] | 0) != 115) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((HEAP8[$first + 1 >> 0] | 0) != 122) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1871 = $first + 2 | 0;
     $1872 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1871, $last, $db) | 0;
     if (($1872 | 0) == ($1871 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1876 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($1876 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1878 = $1876 + -24 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($43, $1878);
     $1879 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($43, 0, 59440, 8) | 0;
     HEAP32[$42 + 0 >> 2] = HEAP32[$1879 + 0 >> 2];
     HEAP32[$42 + 4 >> 2] = HEAP32[$1879 + 4 >> 2];
     HEAP32[$42 + 8 >> 2] = HEAP32[$1879 + 8 >> 2];
     HEAP32[$1879 + 0 >> 2] = 0;
     HEAP32[$1879 + 4 >> 2] = 0;
     HEAP32[$1879 + 8 >> 2] = 0;
     $1880 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($42, 58936, 1) | 0;
     $1881 = HEAP8[$1880 >> 0] | 0;
     $1882 = $1880 + 1 | 0;
     HEAP8[$$sroa$5389 + 0 >> 0] = HEAP8[$1882 + 0 >> 0] | 0;
     HEAP8[$$sroa$5389 + 1 >> 0] = HEAP8[$1882 + 1 >> 0] | 0;
     HEAP8[$$sroa$5389 + 2 >> 0] = HEAP8[$1882 + 2 >> 0] | 0;
     HEAP8[$$sroa$5389 + 3 >> 0] = HEAP8[$1882 + 3 >> 0] | 0;
     HEAP8[$$sroa$5389 + 4 >> 0] = HEAP8[$1882 + 4 >> 0] | 0;
     HEAP8[$$sroa$5389 + 5 >> 0] = HEAP8[$1882 + 5 >> 0] | 0;
     HEAP8[$$sroa$5389 + 6 >> 0] = HEAP8[$1882 + 6 >> 0] | 0;
     $1884 = HEAP32[$1880 + 8 >> 2] | 0;
     HEAP32[$1880 + 0 >> 2] = 0;
     HEAP32[$1880 + 4 >> 2] = 0;
     HEAP32[$1880 + 8 >> 2] = 0;
     HEAP8[$41 >> 0] = $1881;
     $1885 = $41 + 1 | 0;
     HEAP8[$1885 + 0 >> 0] = HEAP8[$$sroa$5389 + 0 >> 0] | 0;
     HEAP8[$1885 + 1 >> 0] = HEAP8[$$sroa$5389 + 1 >> 0] | 0;
     HEAP8[$1885 + 2 >> 0] = HEAP8[$$sroa$5389 + 2 >> 0] | 0;
     HEAP8[$1885 + 3 >> 0] = HEAP8[$$sroa$5389 + 3 >> 0] | 0;
     HEAP8[$1885 + 4 >> 0] = HEAP8[$$sroa$5389 + 4 >> 0] | 0;
     HEAP8[$1885 + 5 >> 0] = HEAP8[$$sroa$5389 + 5 >> 0] | 0;
     HEAP8[$1885 + 6 >> 0] = HEAP8[$$sroa$5389 + 6 >> 0] | 0;
     HEAP32[$41 + 8 >> 2] = $1884;
     HEAP8[$$sroa$5389 + 0 >> 0] = 0;
     HEAP8[$$sroa$5389 + 1 >> 0] = 0;
     HEAP8[$$sroa$5389 + 2 >> 0] = 0;
     HEAP8[$$sroa$5389 + 3 >> 0] = 0;
     HEAP8[$$sroa$5389 + 4 >> 0] = 0;
     HEAP8[$$sroa$5389 + 5 >> 0] = 0;
     HEAP8[$$sroa$5389 + 6 >> 0] = 0;
     $1887 = $41 + 12 | 0;
     HEAP32[$1887 + 0 >> 2] = 0;
     HEAP32[$1887 + 4 >> 2] = 0;
     HEAP32[$1887 + 8 >> 2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1878, $41);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
     if (HEAP8[$42 >> 0] & 1) _free(HEAP32[$42 + 8 >> 2] | 0);
     if (!(HEAP8[$43 >> 0] & 1)) {
      $$0 = $1872;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$43 + 8 >> 2] | 0);
     $$0 = $1872;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 90:
    {
     if (($118 - $t$0 | 0) <= 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $1900 = HEAP8[$t$0 + 2 >> 0] | 0;
     if (($1900 | 0) == 84) {
      if (($120 | 0) <= 2) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      }
      if ((HEAP8[$first >> 0] | 0) != 115) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      }
      if ((HEAP8[$first + 1 >> 0] | 0) != 90) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      }
      $1907 = $first + 2 | 0;
      if ((HEAP8[$1907 >> 0] | 0) != 84) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      }
      $1910 = $db + 4 | 0;
      $1916 = ((HEAP32[$1910 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
      $1917 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($1907, $last, $db) | 0;
      $1919 = HEAP32[$db >> 2] | 0;
      $1923 = ((HEAP32[$1910 >> 2] | 0) - $1919 | 0) / 24 | 0;
      if (($1917 | 0) == ($1907 | 0)) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      }
      HEAP8[$tmp$i >> 0] = 20;
      dest = $tmp$i + 1 | 0;
      src = 59416;
      stop = dest + 10 | 0;
      do {
       HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
       dest = dest + 1 | 0;
       src = src + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      HEAP8[$tmp$i + 11 >> 0] = 0;
      $1927 = ($1916 | 0) == ($1923 | 0);
      if (!$1927) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($52, $1919 + ($1916 * 24 | 0) | 0);
       $1929 = HEAP8[$52 >> 0] | 0;
       $1931 = ($1929 & 1) == 0;
       if ($1931) {
        $1939 = $52 + 1 | 0;
        $1940 = ($1929 & 255) >>> 1;
       } else {
        $1939 = HEAP32[$52 + 8 >> 2] | 0;
        $1940 = HEAP32[$52 + 4 >> 2] | 0;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($tmp$i, $1939, $1940) | 0;
       if (!$1931) _free(HEAP32[$52 + 8 >> 2] | 0);
       $k$08$i = $1916 + 1 | 0;
       if (($k$08$i | 0) != ($1923 | 0)) {
        $1944 = $53 + 1 | 0;
        $1945 = $53 + 8 | 0;
        $1946 = $53 + 4 | 0;
        $1947 = $54 + 8 | 0;
        $k$09$i = $k$08$i;
        do {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($54, (HEAP32[$db >> 2] | 0) + ($k$09$i * 24 | 0) | 0);
         $1950 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($54, 0, 59432, 2) | 0;
         HEAP32[$53 + 0 >> 2] = HEAP32[$1950 + 0 >> 2];
         HEAP32[$53 + 4 >> 2] = HEAP32[$1950 + 4 >> 2];
         HEAP32[$53 + 8 >> 2] = HEAP32[$1950 + 8 >> 2];
         HEAP32[$1950 + 0 >> 2] = 0;
         HEAP32[$1950 + 4 >> 2] = 0;
         HEAP32[$1950 + 8 >> 2] = 0;
         $1951 = HEAP8[$53 >> 0] | 0;
         $1953 = ($1951 & 1) == 0;
         if ($1953) {
          $1958 = $1944;
          $1959 = ($1951 & 255) >>> 1;
         } else {
          $1958 = HEAP32[$1945 >> 2] | 0;
          $1959 = HEAP32[$1946 >> 2] | 0;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($tmp$i, $1958, $1959) | 0;
         if (!$1953) _free(HEAP32[$1945 >> 2] | 0);
         if (HEAP8[$54 >> 0] & 1) _free(HEAP32[$1947 >> 2] | 0);
         $k$09$i = $k$09$i + 1 | 0;
        } while (($k$09$i | 0) != ($1923 | 0));
       }
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($tmp$i, 58936, 1) | 0;
      $$pre$i = HEAP32[$1910 >> 2] | 0;
      if ($1927) $1985 = $$pre$i; else {
       $1967 = $$pre$i;
       $k1$07$i = $1923;
       do {
        $1969 = $1967;
        $1967 = $1967 + -24 | 0;
        do {
         $1968 = $1969 + -24 | 0;
         HEAP32[$1910 >> 2] = $1968;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1968);
         $1969 = HEAP32[$1910 >> 2] | 0;
        } while (($1969 | 0) != ($1967 | 0));
        $k1$07$i = $k1$07$i + -1 | 0;
       } while (($k1$07$i | 0) != ($1916 | 0));
       $1985 = $$pre$i + (($1916 - $1923 | 0) * 24 | 0) | 0;
      }
      $1975 = HEAP8[$tmp$i >> 0] | 0;
      $1976 = $tmp$i + 1 | 0;
      HEAP8[$$sroa$6 + 0 >> 0] = HEAP8[$1976 + 0 >> 0] | 0;
      HEAP8[$$sroa$6 + 1 >> 0] = HEAP8[$1976 + 1 >> 0] | 0;
      HEAP8[$$sroa$6 + 2 >> 0] = HEAP8[$1976 + 2 >> 0] | 0;
      HEAP8[$$sroa$6 + 3 >> 0] = HEAP8[$1976 + 3 >> 0] | 0;
      HEAP8[$$sroa$6 + 4 >> 0] = HEAP8[$1976 + 4 >> 0] | 0;
      HEAP8[$$sroa$6 + 5 >> 0] = HEAP8[$1976 + 5 >> 0] | 0;
      HEAP8[$$sroa$6 + 6 >> 0] = HEAP8[$1976 + 6 >> 0] | 0;
      $1977 = $tmp$i + 8 | 0;
      $1978 = HEAP32[$1977 >> 2] | 0;
      HEAP32[$tmp$i + 0 >> 2] = 0;
      HEAP32[$tmp$i + 4 >> 2] = 0;
      HEAP32[$tmp$i + 8 >> 2] = 0;
      HEAP8[$55 >> 0] = $1975;
      $1979 = $55 + 1 | 0;
      HEAP8[$1979 + 0 >> 0] = HEAP8[$$sroa$6 + 0 >> 0] | 0;
      HEAP8[$1979 + 1 >> 0] = HEAP8[$$sroa$6 + 1 >> 0] | 0;
      HEAP8[$1979 + 2 >> 0] = HEAP8[$$sroa$6 + 2 >> 0] | 0;
      HEAP8[$1979 + 3 >> 0] = HEAP8[$$sroa$6 + 3 >> 0] | 0;
      HEAP8[$1979 + 4 >> 0] = HEAP8[$$sroa$6 + 4 >> 0] | 0;
      HEAP8[$1979 + 5 >> 0] = HEAP8[$$sroa$6 + 5 >> 0] | 0;
      HEAP8[$1979 + 6 >> 0] = HEAP8[$$sroa$6 + 6 >> 0] | 0;
      HEAP32[$55 + 8 >> 2] = $1978;
      HEAP8[$$sroa$6 + 0 >> 0] = 0;
      HEAP8[$$sroa$6 + 1 >> 0] = 0;
      HEAP8[$$sroa$6 + 2 >> 0] = 0;
      HEAP8[$$sroa$6 + 3 >> 0] = 0;
      HEAP8[$$sroa$6 + 4 >> 0] = 0;
      HEAP8[$$sroa$6 + 5 >> 0] = 0;
      HEAP8[$$sroa$6 + 6 >> 0] = 0;
      $1981 = $55 + 12 | 0;
      HEAP32[$1981 + 0 >> 2] = 0;
      HEAP32[$1981 + 4 >> 2] = 0;
      HEAP32[$1981 + 8 >> 2] = 0;
      $1983 = HEAP32[$db + 8 >> 2] | 0;
      if ($1985 >>> 0 < $1983 >>> 0) {
       if (!$1985) $1989 = 0; else {
        HEAP32[$1985 + 0 >> 2] = HEAP32[$55 + 0 >> 2];
        HEAP32[$1985 + 4 >> 2] = HEAP32[$55 + 4 >> 2];
        HEAP32[$1985 + 8 >> 2] = HEAP32[$55 + 8 >> 2];
        HEAP32[$55 + 0 >> 2] = 0;
        HEAP32[$55 + 4 >> 2] = 0;
        HEAP32[$55 + 8 >> 2] = 0;
        $1987 = $1985 + 12 | 0;
        HEAP32[$1987 + 0 >> 2] = HEAP32[$1981 + 0 >> 2];
        HEAP32[$1987 + 4 >> 2] = HEAP32[$1981 + 4 >> 2];
        HEAP32[$1987 + 8 >> 2] = HEAP32[$1981 + 8 >> 2];
        HEAP32[$1981 + 0 >> 2] = 0;
        HEAP32[$1981 + 4 >> 2] = 0;
        HEAP32[$1981 + 8 >> 2] = 0;
        $1989 = HEAP32[$1910 >> 2] | 0;
       }
       HEAP32[$1910 >> 2] = $1989 + 24;
      } else {
       $1993 = HEAP32[$db >> 2] | 0;
       $1995 = ($1985 - $1993 | 0) / 24 | 0;
       $1996 = $1995 + 1 | 0;
       if (($1996 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
       $2000 = ($1983 - $1993 | 0) / 24 | 0;
       if ($2000 >>> 0 < 1073741823) {
        $2002 = $2000 << 1;
        $$0$i$i$i$i = $2002 >>> 0 < $1996 >>> 0 ? $1996 : $2002;
       } else $$0$i$i$i$i = 2147483647;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($$sroa$5422, $$0$i$i$i$i, $1995, $db + 12 | 0);
       $2005 = $$sroa$5422 + 8 | 0;
       $2006 = HEAP32[$2005 >> 2] | 0;
       if ($2006) {
        HEAP32[$2006 + 0 >> 2] = HEAP32[$55 + 0 >> 2];
        HEAP32[$2006 + 4 >> 2] = HEAP32[$55 + 4 >> 2];
        HEAP32[$2006 + 8 >> 2] = HEAP32[$55 + 8 >> 2];
        HEAP32[$55 + 0 >> 2] = 0;
        HEAP32[$55 + 4 >> 2] = 0;
        HEAP32[$55 + 8 >> 2] = 0;
        $2008 = $2006 + 12 | 0;
        HEAP32[$2008 + 0 >> 2] = HEAP32[$1981 + 0 >> 2];
        HEAP32[$2008 + 4 >> 2] = HEAP32[$1981 + 4 >> 2];
        HEAP32[$2008 + 8 >> 2] = HEAP32[$1981 + 8 >> 2];
        HEAP32[$1981 + 0 >> 2] = 0;
        HEAP32[$1981 + 4 >> 2] = 0;
        HEAP32[$1981 + 8 >> 2] = 0;
       }
       HEAP32[$2005 >> 2] = $2006 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $$sroa$5422);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($$sroa$5422);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($55);
      if (!(HEAP8[$tmp$i >> 0] & 1)) {
       $$0 = $1917;
       STACKTOP = sp;
       return $$0 | 0;
      }
      _free(HEAP32[$1977 >> 2] | 0);
      $$0 = $1917;
      STACKTOP = sp;
      return $$0 | 0;
     } else if (($1900 | 0) == 102) {
      if (($120 | 0) <= 2) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      }
      if ((HEAP8[$first >> 0] | 0) != 115) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      }
      if ((HEAP8[$first + 1 >> 0] | 0) != 90) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      }
      $2017 = $first + 2 | 0;
      if ((HEAP8[$2017 >> 0] | 0) != 102) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      }
      $2020 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($2017, $last, $db) | 0;
      if (($2020 | 0) == ($2017 | 0)) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      }
      $2024 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($2024 | 0)) {
       $$0 = $first;
       STACKTOP = sp;
       return $$0 | 0;
      }
      $2026 = $2024 + -24 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($51, $2026);
      $2027 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($51, 0, 59416, 10) | 0;
      HEAP32[$50 + 0 >> 2] = HEAP32[$2027 + 0 >> 2];
      HEAP32[$50 + 4 >> 2] = HEAP32[$2027 + 4 >> 2];
      HEAP32[$50 + 8 >> 2] = HEAP32[$2027 + 8 >> 2];
      HEAP32[$2027 + 0 >> 2] = 0;
      HEAP32[$2027 + 4 >> 2] = 0;
      HEAP32[$2027 + 8 >> 2] = 0;
      $2028 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($50, 58936, 1) | 0;
      $2029 = HEAP8[$2028 >> 0] | 0;
      $2030 = $2028 + 1 | 0;
      HEAP8[$$sroa$5 + 0 >> 0] = HEAP8[$2030 + 0 >> 0] | 0;
      HEAP8[$$sroa$5 + 1 >> 0] = HEAP8[$2030 + 1 >> 0] | 0;
      HEAP8[$$sroa$5 + 2 >> 0] = HEAP8[$2030 + 2 >> 0] | 0;
      HEAP8[$$sroa$5 + 3 >> 0] = HEAP8[$2030 + 3 >> 0] | 0;
      HEAP8[$$sroa$5 + 4 >> 0] = HEAP8[$2030 + 4 >> 0] | 0;
      HEAP8[$$sroa$5 + 5 >> 0] = HEAP8[$2030 + 5 >> 0] | 0;
      HEAP8[$$sroa$5 + 6 >> 0] = HEAP8[$2030 + 6 >> 0] | 0;
      $2032 = HEAP32[$2028 + 8 >> 2] | 0;
      HEAP32[$2028 + 0 >> 2] = 0;
      HEAP32[$2028 + 4 >> 2] = 0;
      HEAP32[$2028 + 8 >> 2] = 0;
      HEAP8[$49 >> 0] = $2029;
      $2033 = $49 + 1 | 0;
      HEAP8[$2033 + 0 >> 0] = HEAP8[$$sroa$5 + 0 >> 0] | 0;
      HEAP8[$2033 + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0;
      HEAP8[$2033 + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0;
      HEAP8[$2033 + 3 >> 0] = HEAP8[$$sroa$5 + 3 >> 0] | 0;
      HEAP8[$2033 + 4 >> 0] = HEAP8[$$sroa$5 + 4 >> 0] | 0;
      HEAP8[$2033 + 5 >> 0] = HEAP8[$$sroa$5 + 5 >> 0] | 0;
      HEAP8[$2033 + 6 >> 0] = HEAP8[$$sroa$5 + 6 >> 0] | 0;
      HEAP32[$49 + 8 >> 2] = $2032;
      HEAP8[$$sroa$5 + 0 >> 0] = 0;
      HEAP8[$$sroa$5 + 1 >> 0] = 0;
      HEAP8[$$sroa$5 + 2 >> 0] = 0;
      HEAP8[$$sroa$5 + 3 >> 0] = 0;
      HEAP8[$$sroa$5 + 4 >> 0] = 0;
      HEAP8[$$sroa$5 + 5 >> 0] = 0;
      HEAP8[$$sroa$5 + 6 >> 0] = 0;
      $2035 = $49 + 12 | 0;
      HEAP32[$2035 + 0 >> 2] = 0;
      HEAP32[$2035 + 4 >> 2] = 0;
      HEAP32[$2035 + 8 >> 2] = 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2026, $49);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($49);
      if (HEAP8[$50 >> 0] & 1) _free(HEAP32[$50 + 8 >> 2] | 0);
      if (!(HEAP8[$51 >> 0] & 1)) {
       $$0 = $2020;
       STACKTOP = sp;
       return $$0 | 0;
      }
      _free(HEAP32[$51 + 8 >> 2] | 0);
      $$0 = $2020;
      STACKTOP = sp;
      return $$0 | 0;
     } else {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     break;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 116:
  {
   $2045 = HEAP8[$t$0 + 1 >> 0] | 0;
   if (($2045 | 0) == 105 | ($2045 | 0) == 101) {
    if (($120 | 0) <= 2) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    if ((HEAP8[$first >> 0] | 0) != 116) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $2050 = HEAP8[$first + 1 >> 0] | 0;
    if (!($2050 << 24 >> 24 == 105 | $2050 << 24 >> 24 == 101)) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $2052 = $first + 2 | 0;
    if ($2050 << 24 >> 24 == 101) $t$0$i = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2052, $last, $db) | 0; else $t$0$i = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2052, $last, $db) | 0;
    if (($t$0$i | 0) == ($2052 | 0)) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $2058 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($2058 | 0)) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $2060 = $2058 + -24 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($46, $2060);
    $2061 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($46, 0, 59408, 7) | 0;
    HEAP32[$45 + 0 >> 2] = HEAP32[$2061 + 0 >> 2];
    HEAP32[$45 + 4 >> 2] = HEAP32[$2061 + 4 >> 2];
    HEAP32[$45 + 8 >> 2] = HEAP32[$2061 + 8 >> 2];
    HEAP32[$2061 + 0 >> 2] = 0;
    HEAP32[$2061 + 4 >> 2] = 0;
    HEAP32[$2061 + 8 >> 2] = 0;
    $2062 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($45, 58936, 1) | 0;
    $2063 = HEAP8[$2062 >> 0] | 0;
    $2064 = $2062 + 1 | 0;
    HEAP8[$$sroa$5386 + 0 >> 0] = HEAP8[$2064 + 0 >> 0] | 0;
    HEAP8[$$sroa$5386 + 1 >> 0] = HEAP8[$2064 + 1 >> 0] | 0;
    HEAP8[$$sroa$5386 + 2 >> 0] = HEAP8[$2064 + 2 >> 0] | 0;
    HEAP8[$$sroa$5386 + 3 >> 0] = HEAP8[$2064 + 3 >> 0] | 0;
    HEAP8[$$sroa$5386 + 4 >> 0] = HEAP8[$2064 + 4 >> 0] | 0;
    HEAP8[$$sroa$5386 + 5 >> 0] = HEAP8[$2064 + 5 >> 0] | 0;
    HEAP8[$$sroa$5386 + 6 >> 0] = HEAP8[$2064 + 6 >> 0] | 0;
    $2066 = HEAP32[$2062 + 8 >> 2] | 0;
    HEAP32[$2062 + 0 >> 2] = 0;
    HEAP32[$2062 + 4 >> 2] = 0;
    HEAP32[$2062 + 8 >> 2] = 0;
    HEAP8[$44 >> 0] = $2063;
    $2067 = $44 + 1 | 0;
    HEAP8[$2067 + 0 >> 0] = HEAP8[$$sroa$5386 + 0 >> 0] | 0;
    HEAP8[$2067 + 1 >> 0] = HEAP8[$$sroa$5386 + 1 >> 0] | 0;
    HEAP8[$2067 + 2 >> 0] = HEAP8[$$sroa$5386 + 2 >> 0] | 0;
    HEAP8[$2067 + 3 >> 0] = HEAP8[$$sroa$5386 + 3 >> 0] | 0;
    HEAP8[$2067 + 4 >> 0] = HEAP8[$$sroa$5386 + 4 >> 0] | 0;
    HEAP8[$2067 + 5 >> 0] = HEAP8[$$sroa$5386 + 5 >> 0] | 0;
    HEAP8[$2067 + 6 >> 0] = HEAP8[$$sroa$5386 + 6 >> 0] | 0;
    HEAP32[$44 + 8 >> 2] = $2066;
    HEAP8[$$sroa$5386 + 0 >> 0] = 0;
    HEAP8[$$sroa$5386 + 1 >> 0] = 0;
    HEAP8[$$sroa$5386 + 2 >> 0] = 0;
    HEAP8[$$sroa$5386 + 3 >> 0] = 0;
    HEAP8[$$sroa$5386 + 4 >> 0] = 0;
    HEAP8[$$sroa$5386 + 5 >> 0] = 0;
    HEAP8[$$sroa$5386 + 6 >> 0] = 0;
    $2069 = $44 + 12 | 0;
    HEAP32[$2069 + 0 >> 2] = 0;
    HEAP32[$2069 + 4 >> 2] = 0;
    HEAP32[$2069 + 8 >> 2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2060, $44);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
    if (HEAP8[$45 >> 0] & 1) _free(HEAP32[$45 + 8 >> 2] | 0);
    if (!(HEAP8[$46 >> 0] & 1)) {
     $$0 = $t$0$i;
     STACKTOP = sp;
     return $$0 | 0;
    }
    _free(HEAP32[$46 + 8 >> 2] | 0);
    $$0 = $t$0$i;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($2045 | 0) == 114) {
    HEAP8[$117 >> 0] = 10;
    $2077 = $117 + 1 | 0;
    HEAP8[$2077 + 0 >> 0] = HEAP8[59392] | 0;
    HEAP8[$2077 + 1 >> 0] = HEAP8[59393] | 0;
    HEAP8[$2077 + 2 >> 0] = HEAP8[59394] | 0;
    HEAP8[$2077 + 3 >> 0] = HEAP8[59395] | 0;
    HEAP8[$2077 + 4 >> 0] = HEAP8[59396] | 0;
    HEAP8[$117 + 6 >> 0] = 0;
    $2079 = $117 + 12 | 0;
    HEAP32[$2079 + 0 >> 2] = 0;
    HEAP32[$2079 + 4 >> 2] = 0;
    HEAP32[$2079 + 8 >> 2] = 0;
    $2080 = $db + 4 | 0;
    $2081 = HEAP32[$2080 >> 2] | 0;
    $2083 = HEAP32[$db + 8 >> 2] | 0;
    if ($2081 >>> 0 < $2083 >>> 0) {
     if (!$2081) $2088 = 0; else {
      HEAP32[$2081 + 0 >> 2] = HEAP32[$117 + 0 >> 2];
      HEAP32[$2081 + 4 >> 2] = HEAP32[$117 + 4 >> 2];
      HEAP32[$2081 + 8 >> 2] = HEAP32[$117 + 8 >> 2];
      HEAP32[$117 + 0 >> 2] = 0;
      HEAP32[$117 + 4 >> 2] = 0;
      HEAP32[$117 + 8 >> 2] = 0;
      $2086 = $2081 + 12 | 0;
      HEAP32[$2086 + 0 >> 2] = HEAP32[$2079 + 0 >> 2];
      HEAP32[$2086 + 4 >> 2] = HEAP32[$2079 + 4 >> 2];
      HEAP32[$2086 + 8 >> 2] = HEAP32[$2079 + 8 >> 2];
      HEAP32[$2079 + 0 >> 2] = 0;
      HEAP32[$2079 + 4 >> 2] = 0;
      HEAP32[$2079 + 8 >> 2] = 0;
      $2088 = HEAP32[$2080 >> 2] | 0;
     }
     HEAP32[$2080 >> 2] = $2088 + 24;
    } else {
     $2092 = HEAP32[$db >> 2] | 0;
     $2094 = ($2081 - $2092 | 0) / 24 | 0;
     $2095 = $2094 + 1 | 0;
     if (($2095 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $2099 = ($2083 - $2092 | 0) / 24 | 0;
     if ($2099 >>> 0 < 1073741823) {
      $2101 = $2099 << 1;
      $$0$i$i$i = $2101 >>> 0 < $2095 >>> 0 ? $2095 : $2101;
     } else $$0$i$i$i = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($$sroa$5422, $$0$i$i$i, $2094, $db + 12 | 0);
     $2104 = $$sroa$5422 + 8 | 0;
     $2105 = HEAP32[$2104 >> 2] | 0;
     if ($2105) {
      HEAP32[$2105 + 0 >> 2] = HEAP32[$117 + 0 >> 2];
      HEAP32[$2105 + 4 >> 2] = HEAP32[$117 + 4 >> 2];
      HEAP32[$2105 + 8 >> 2] = HEAP32[$117 + 8 >> 2];
      HEAP32[$117 + 0 >> 2] = 0;
      HEAP32[$117 + 4 >> 2] = 0;
      HEAP32[$117 + 8 >> 2] = 0;
      $2107 = $2105 + 12 | 0;
      HEAP32[$2107 + 0 >> 2] = HEAP32[$2079 + 0 >> 2];
      HEAP32[$2107 + 4 >> 2] = HEAP32[$2079 + 4 >> 2];
      HEAP32[$2107 + 8 >> 2] = HEAP32[$2079 + 8 >> 2];
      HEAP32[$2079 + 0 >> 2] = 0;
      HEAP32[$2079 + 4 >> 2] = 0;
      HEAP32[$2079 + 8 >> 2] = 0;
     }
     HEAP32[$2104 >> 2] = $2105 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $$sroa$5422);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($$sroa$5422);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($117);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($2045 | 0) == 119) {
    if (($120 | 0) <= 2) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    if ((HEAP8[$first >> 0] | 0) != 116) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    if ((HEAP8[$first + 1 >> 0] | 0) != 119) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $2116 = $first + 2 | 0;
    $2117 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2116, $last, $db) | 0;
    if (($2117 | 0) == ($2116 | 0)) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $2121 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($2121 | 0)) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $2123 = $2121 + -24 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($48, $2123);
    $2124 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($48, 0, 59400, 6) | 0;
    $2125 = HEAP8[$2124 >> 0] | 0;
    $2126 = $2124 + 1 | 0;
    HEAP8[$$sroa$5383 + 0 >> 0] = HEAP8[$2126 + 0 >> 0] | 0;
    HEAP8[$$sroa$5383 + 1 >> 0] = HEAP8[$2126 + 1 >> 0] | 0;
    HEAP8[$$sroa$5383 + 2 >> 0] = HEAP8[$2126 + 2 >> 0] | 0;
    HEAP8[$$sroa$5383 + 3 >> 0] = HEAP8[$2126 + 3 >> 0] | 0;
    HEAP8[$$sroa$5383 + 4 >> 0] = HEAP8[$2126 + 4 >> 0] | 0;
    HEAP8[$$sroa$5383 + 5 >> 0] = HEAP8[$2126 + 5 >> 0] | 0;
    HEAP8[$$sroa$5383 + 6 >> 0] = HEAP8[$2126 + 6 >> 0] | 0;
    $2128 = HEAP32[$2124 + 8 >> 2] | 0;
    HEAP32[$2124 + 0 >> 2] = 0;
    HEAP32[$2124 + 4 >> 2] = 0;
    HEAP32[$2124 + 8 >> 2] = 0;
    HEAP8[$47 >> 0] = $2125;
    $2129 = $47 + 1 | 0;
    HEAP8[$2129 + 0 >> 0] = HEAP8[$$sroa$5383 + 0 >> 0] | 0;
    HEAP8[$2129 + 1 >> 0] = HEAP8[$$sroa$5383 + 1 >> 0] | 0;
    HEAP8[$2129 + 2 >> 0] = HEAP8[$$sroa$5383 + 2 >> 0] | 0;
    HEAP8[$2129 + 3 >> 0] = HEAP8[$$sroa$5383 + 3 >> 0] | 0;
    HEAP8[$2129 + 4 >> 0] = HEAP8[$$sroa$5383 + 4 >> 0] | 0;
    HEAP8[$2129 + 5 >> 0] = HEAP8[$$sroa$5383 + 5 >> 0] | 0;
    HEAP8[$2129 + 6 >> 0] = HEAP8[$$sroa$5383 + 6 >> 0] | 0;
    HEAP32[$47 + 8 >> 2] = $2128;
    HEAP8[$$sroa$5383 + 0 >> 0] = 0;
    HEAP8[$$sroa$5383 + 1 >> 0] = 0;
    HEAP8[$$sroa$5383 + 2 >> 0] = 0;
    HEAP8[$$sroa$5383 + 3 >> 0] = 0;
    HEAP8[$$sroa$5383 + 4 >> 0] = 0;
    HEAP8[$$sroa$5383 + 5 >> 0] = 0;
    HEAP8[$$sroa$5383 + 6 >> 0] = 0;
    $2131 = $47 + 12 | 0;
    HEAP32[$2131 + 0 >> 2] = 0;
    HEAP32[$2131 + 4 >> 2] = 0;
    HEAP32[$2131 + 8 >> 2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2123, $47);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($47);
    if (!(HEAP8[$48 >> 0] & 1)) {
     $$0 = $2117;
     STACKTOP = sp;
     return $$0 | 0;
    }
    _free(HEAP32[$48 + 8 >> 2] | 0);
    $$0 = $2117;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
  {
   $$0 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 return 0;
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i106 = 0, $$0$i$i$i115 = 0, $$0$i$i$i124 = 0, $$0$i$i$i133 = 0, $$0$i$i$i142 = 0, $$0$i$i$i151 = 0, $$0$i$i$i160 = 0, $$0$i$i$i169 = 0, $$0$i$i$i17 = 0, $$0$i$i$i177 = 0, $$0$i$i$i186 = 0, $$0$i$i$i195 = 0, $$0$i$i$i204 = 0, $$0$i$i$i213 = 0, $$0$i$i$i222 = 0, $$0$i$i$i231 = 0, $$0$i$i$i239 = 0, $$0$i$i$i248 = 0, $$0$i$i$i257 = 0, $$0$i$i$i26 = 0, $$0$i$i$i266 = 0, $$0$i$i$i274 = 0, $$0$i$i$i283 = 0, $$0$i$i$i292 = 0, $$0$i$i$i301 = 0, $$0$i$i$i309 = 0, $$0$i$i$i318 = 0, $$0$i$i$i327 = 0, $$0$i$i$i336 = 0, $$0$i$i$i345 = 0, $$0$i$i$i35 = 0, $$0$i$i$i354 = 0, $$0$i$i$i363 = 0, $$0$i$i$i372 = 0, $$0$i$i$i381 = 0, $$0$i$i$i390 = 0, $$0$i$i$i398 = 0, $$0$i$i$i44 = 0, $$0$i$i$i53 = 0, $$0$i$i$i61 = 0, $$0$i$i$i70 = 0, $$0$i$i$i79 = 0, $$0$i$i$i8 = 0, $$0$i$i$i88 = 0, $$0$i$i$i97 = 0, $0 = 0, $1 = 0, $10 = 0, $1000 = 0, $1001 = 0, $1003 = 0, $1006 = 0, $1008 = 0, $1012 = 0, $1014 = 0, $1015 = 0, $1019 = 0, $1021 = 0, $1024 = 0, $1025 = 0, $1027 = 0, $103 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1036 = 0, $1039 = 0, $1041 = 0, $1045 = 0, $1047 = 0, $1048 = 0, $105 = 0, $1052 = 0, $1054 = 0, $1057 = 0, $1058 = 0, $106 = 0, $1060 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1069 = 0, $1072 = 0, $1074 = 0, $1078 = 0, $1080 = 0, $1081 = 0, $1085 = 0, $1087 = 0, $1090 = 0, $1091 = 0, $1093 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1102 = 0, $1105 = 0, $1107 = 0, $1111 = 0, $1113 = 0, $1114 = 0, $1118 = 0, $112 = 0, $1120 = 0, $1123 = 0, $1124 = 0, $1126 = 0, $1129 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1137 = 0, $1140 = 0, $1142 = 0, $1146 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1153 = 0, $1155 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1161 = 0, $1166 = 0, $1169 = 0, $1170 = 0, $1171 = 0, $1173 = 0, $1176 = 0, $1178 = 0, $118 = 0, $1182 = 0, $1184 = 0, $1185 = 0, $1189 = 0, $1191 = 0, $1194 = 0, $1195 = 0, $1197 = 0, $12 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1206 = 0, $1209 = 0, $1211 = 0, $1215 = 0, $1217 = 0, $1218 = 0, $1222 = 0, $1224 = 0, $1227 = 0, $1228 = 0, $123 = 0, $1230 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1239 = 0, $124 = 0, $1242 = 0, $1244 = 0, $1248 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1255 = 0, $1257 = 0, $1260 = 0, $1261 = 0, $1263 = 0, $1269 = 0, $127 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1277 = 0, $1280 = 0, $1282 = 0, $1286 = 0, $1288 = 0, $1289 = 0, $1293 = 0, $1295 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1301 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1310 = 0, $1313 = 0, $1315 = 0, $1319 = 0, $132 = 0, $1321 = 0, $1322 = 0, $1326 = 0, $1328 = 0, $1331 = 0, $1332 = 0, $1334 = 0, $1339 = 0, $1340 = 0, $1341 = 0, $1343 = 0, $1346 = 0, $1348 = 0, $1352 = 0, $1354 = 0, $1355 = 0, $1359 = 0, $136 = 0, $1361 = 0, $1364 = 0, $1365 = 0, $1367 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1376 = 0, $1379 = 0, $138 = 0, $1381 = 0, $1385 = 0, $1387 = 0, $1388 = 0, $139 = 0, $1392 = 0, $1394 = 0, $1397 = 0, $1398 = 0, $14 = 0, $1400 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1409 = 0, $1412 = 0, $1414 = 0, $1418 = 0, $1420 = 0, $1421 = 0, $1425 = 0, $1427 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1433 = 0, $1438 = 0, $1439 = 0, $1440 = 0, $1442 = 0, $1445 = 0, $1447 = 0, $145 = 0, $1451 = 0, $1453 = 0, $1454 = 0, $1458 = 0, $1460 = 0, $1463 = 0, $1464 = 0, $1466 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1478 = 0, $148 = 0, $1481 = 0, $1483 = 0, $1487 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1494 = 0, $1496 = 0, $1499 = 0, $15 = 0, $1500 = 0, $1502 = 0, $1507 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1514 = 0, $1517 = 0, $1519 = 0, $1523 = 0, $1525 = 0, $1526 = 0, $1530 = 0, $1532 = 0, $1535 = 0, $1536 = 0, $1538 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1547 = 0, $1550 = 0, $1552 = 0, $1556 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1563 = 0, $1565 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1571 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $158 = 0, $1580 = 0, $1583 = 0, $1585 = 0, $1589 = 0, $1591 = 0, $1592 = 0, $1596 = 0, $1598 = 0, $16 = 0, $160 = 0, $1601 = 0, $1602 = 0, $1604 = 0, $1607 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1615 = 0, $1618 = 0, $1620 = 0, $1624 = 0, $1626 = 0, $1627 = 0, $163 = 0, $1631 = 0, $1633 = 0, $1636 = 0, $1637 = 0, $1639 = 0, $1645 = 0, $1646 = 0, $165 = 0, $1650 = 0, $169 = 0, $17 = 0, $171 = 0, $172 = 0, $176 = 0, $178 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $189 = 0, $19 = 0, $192 = 0, $193 = 0, $194 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $205 = 0, $207 = 0, $208 = 0, $21 = 0, $212 = 0, $214 = 0, $217 = 0, $218 = 0, $22 = 0, $220 = 0, $225 = 0, $226 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $238 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = 0, $247 = 0, $25 = 0, $250 = 0, $251 = 0, $253 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $271 = 0, $273 = 0, $274 = 0, $278 = 0, $28 = 0, $280 = 0, $283 = 0, $284 = 0, $286 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $296 = 0, $3 = 0, $30 = 0, $303 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $311 = 0, $314 = 0, $316 = 0, $32 = 0, $320 = 0, $322 = 0, $323 = 0, $327 = 0, $329 = 0, $33 = 0, $332 = 0, $333 = 0, $335 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $344 = 0, $347 = 0, $349 = 0, $35 = 0, $353 = 0, $355 = 0, $356 = 0, $36 = 0, $360 = 0, $362 = 0, $365 = 0, $366 = 0, $368 = 0, $37 = 0, $371 = 0, $375 = 0, $376 = 0, $377 = 0, $379 = 0, $38 = 0, $382 = 0, $384 = 0, $388 = 0, $39 = 0, $390 = 0, $391 = 0, $395 = 0, $397 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $403 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $412 = 0, $415 = 0, $417 = 0, $42 = 0, $421 = 0, $423 = 0, $424 = 0, $428 = 0, $43 = 0, $430 = 0, $433 = 0, $434 = 0, $436 = 0, $44 = 0, $441 = 0, $442 = 0, $443 = 0, $445 = 0, $448 = 0, $45 = 0, $450 = 0, $454 = 0, $456 = 0, $457 = 0, $461 = 0, $463 = 0, $466 = 0, $467 = 0, $469 = 0, $474 = 0, $477 = 0, $478 = 0, $479 = 0, $481 = 0, $484 = 0, $486 = 0, $490 = 0, $492 = 0, $493 = 0, $497 = 0, $499 = 0, $5 = 0, $502 = 0, $503 = 0, $505 = 0, $510 = 0, $511 = 0, $512 = 0, $514 = 0, $517 = 0, $519 = 0, $523 = 0, $525 = 0, $526 = 0, $530 = 0, $532 = 0, $535 = 0, $536 = 0, $538 = 0, $543 = 0, $544 = 0, $545 = 0, $547 = 0, $550 = 0, $552 = 0, $556 = 0, $558 = 0, $559 = 0, $563 = 0, $565 = 0, $568 = 0, $569 = 0, $57 = 0, $571 = 0, $576 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $583 = 0, $586 = 0, $588 = 0, $59 = 0, $592 = 0, $594 = 0, $595 = 0, $599 = 0, $6 = 0, $601 = 0, $604 = 0, $605 = 0, $607 = 0, $61 = 0, $612 = 0, $613 = 0, $614 = 0, $616 = 0, $619 = 0, $621 = 0, $625 = 0, $627 = 0, $628 = 0, $632 = 0, $634 = 0, $637 = 0, $638 = 0, $64 = 0, $640 = 0, $648 = 0, $649 = 0, $650 = 0, $652 = 0, $655 = 0, $657 = 0, $66 = 0, $661 = 0, $663 = 0, $664 = 0, $668 = 0, $670 = 0, $673 = 0, $674 = 0, $676 = 0, $684 = 0, $685 = 0, $686 = 0, $688 = 0, $691 = 0, $693 = 0, $697 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $706 = 0, $709 = 0, $710 = 0, $712 = 0, $715 = 0, $716 = 0, $72 = 0, $720 = 0, $725 = 0, $726 = 0, $727 = 0, $729 = 0, $73 = 0, $732 = 0, $734 = 0, $738 = 0, $740 = 0, $741 = 0, $745 = 0, $747 = 0, $750 = 0, $751 = 0, $753 = 0, $756 = 0, $760 = 0, $761 = 0, $762 = 0, $764 = 0, $767 = 0, $769 = 0, $77 = 0, $773 = 0, $775 = 0, $776 = 0, $780 = 0, $782 = 0, $785 = 0, $786 = 0, $788 = 0, $79 = 0, $793 = 0, $794 = 0, $795 = 0, $797 = 0, $8 = 0, $800 = 0, $802 = 0, $806 = 0, $808 = 0, $809 = 0, $813 = 0, $815 = 0, $818 = 0, $819 = 0, $82 = 0, $821 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $833 = 0, $836 = 0, $838 = 0, $842 = 0, $844 = 0, $845 = 0, $849 = 0, $85 = 0, $851 = 0, $854 = 0, $855 = 0, $857 = 0, $862 = 0, $863 = 0, $864 = 0, $866 = 0, $869 = 0, $871 = 0, $875 = 0, $877 = 0, $878 = 0, $882 = 0, $884 = 0, $887 = 0, $888 = 0, $890 = 0, $895 = 0, $896 = 0, $897 = 0, $899 = 0, $9 = 0, $90 = 0, $902 = 0, $904 = 0, $908 = 0, $91 = 0, $910 = 0, $911 = 0, $915 = 0, $917 = 0, $92 = 0, $920 = 0, $921 = 0, $923 = 0, $928 = 0, $929 = 0, $930 = 0, $932 = 0, $935 = 0, $937 = 0, $94 = 0, $941 = 0, $943 = 0, $944 = 0, $948 = 0, $950 = 0, $953 = 0, $954 = 0, $956 = 0, $961 = 0, $962 = 0, $963 = 0, $965 = 0, $968 = 0, $97 = 0, $970 = 0, $974 = 0, $976 = 0, $977 = 0, $981 = 0, $983 = 0, $986 = 0, $987 = 0, $989 = 0, $99 = 0, $995 = 0, $999 = 0, $__v$i$i395 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136 | 0;
 $__v$i$i395 = sp + 1080 | 0;
 $0 = sp + 1032 | 0;
 $1 = sp + 984 | 0;
 $2 = sp + 504 | 0;
 $3 = sp + 528 | 0;
 $4 = sp + 480 | 0;
 $5 = sp + 120 | 0;
 $6 = sp + 144 | 0;
 $7 = sp + 168 | 0;
 $8 = sp + 192 | 0;
 $9 = sp + 216 | 0;
 $10 = sp + 240 | 0;
 $11 = sp + 264 | 0;
 $12 = sp + 288 | 0;
 $13 = sp + 312 | 0;
 $14 = sp + 336 | 0;
 $15 = sp + 360 | 0;
 $16 = sp + 384 | 0;
 $17 = sp + 408 | 0;
 $18 = sp + 912 | 0;
 $19 = sp + 960 | 0;
 $20 = sp + 1008 | 0;
 $21 = sp + 1056 | 0;
 $22 = sp + 1104 | 0;
 $23 = sp + 552 | 0;
 $24 = sp + 576 | 0;
 $25 = sp + 600 | 0;
 $26 = sp + 624 | 0;
 $27 = sp + 648 | 0;
 $28 = sp + 672 | 0;
 $29 = sp + 696 | 0;
 $30 = sp + 720 | 0;
 $31 = sp + 744 | 0;
 $32 = sp + 768 | 0;
 $33 = sp + 792 | 0;
 $34 = sp + 816 | 0;
 $35 = sp + 840 | 0;
 $36 = sp + 96 | 0;
 $37 = sp + 72 | 0;
 $38 = sp + 864 | 0;
 $39 = sp + 48 | 0;
 $40 = sp;
 $41 = sp + 432 | 0;
 $42 = sp + 888 | 0;
 $43 = sp + 24 | 0;
 $44 = sp + 456 | 0;
 $45 = sp + 936 | 0;
 if (($last - $first | 0) <= 1) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do switch (HEAP8[$first >> 0] | 0) {
 case 101:
  {
   $474 = HEAP8[$first + 1 >> 0] | 0;
   if (($474 | 0) == 111) {
    HEAP8[$12 >> 0] = 18;
    dest = $12 + 1 | 0;
    src = 59776;
    stop = dest + 9 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$12 + 10 >> 0] = 0;
    $477 = $12 + 12 | 0;
    HEAP32[$477 + 0 >> 2] = 0;
    HEAP32[$477 + 4 >> 2] = 0;
    HEAP32[$477 + 8 >> 2] = 0;
    $478 = $db + 4 | 0;
    $479 = HEAP32[$478 >> 2] | 0;
    $481 = HEAP32[$db + 8 >> 2] | 0;
    if ($479 >>> 0 < $481 >>> 0) {
     if (!$479) $486 = 0; else {
      HEAP32[$479 + 0 >> 2] = HEAP32[$12 + 0 >> 2];
      HEAP32[$479 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
      HEAP32[$479 + 8 >> 2] = HEAP32[$12 + 8 >> 2];
      HEAP32[$12 + 0 >> 2] = 0;
      HEAP32[$12 + 4 >> 2] = 0;
      HEAP32[$12 + 8 >> 2] = 0;
      $484 = $479 + 12 | 0;
      HEAP32[$484 + 0 >> 2] = HEAP32[$477 + 0 >> 2];
      HEAP32[$484 + 4 >> 2] = HEAP32[$477 + 4 >> 2];
      HEAP32[$484 + 8 >> 2] = HEAP32[$477 + 8 >> 2];
      HEAP32[$477 + 0 >> 2] = 0;
      HEAP32[$477 + 4 >> 2] = 0;
      HEAP32[$477 + 8 >> 2] = 0;
      $486 = HEAP32[$478 >> 2] | 0;
     }
     HEAP32[$478 >> 2] = $486 + 24;
    } else {
     $490 = HEAP32[$db >> 2] | 0;
     $492 = ($479 - $490 | 0) / 24 | 0;
     $493 = $492 + 1 | 0;
     if (($493 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $497 = ($481 - $490 | 0) / 24 | 0;
     if ($497 >>> 0 < 1073741823) {
      $499 = $497 << 1;
      $$0$i$i$i106 = $499 >>> 0 < $493 >>> 0 ? $493 : $499;
     } else $$0$i$i$i106 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i106, $492, $db + 12 | 0);
     $502 = $__v$i$i395 + 8 | 0;
     $503 = HEAP32[$502 >> 2] | 0;
     if ($503) {
      HEAP32[$503 + 0 >> 2] = HEAP32[$12 + 0 >> 2];
      HEAP32[$503 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
      HEAP32[$503 + 8 >> 2] = HEAP32[$12 + 8 >> 2];
      HEAP32[$12 + 0 >> 2] = 0;
      HEAP32[$12 + 4 >> 2] = 0;
      HEAP32[$12 + 8 >> 2] = 0;
      $505 = $503 + 12 | 0;
      HEAP32[$505 + 0 >> 2] = HEAP32[$477 + 0 >> 2];
      HEAP32[$505 + 4 >> 2] = HEAP32[$477 + 4 >> 2];
      HEAP32[$505 + 8 >> 2] = HEAP32[$477 + 8 >> 2];
      HEAP32[$477 + 0 >> 2] = 0;
      HEAP32[$477 + 4 >> 2] = 0;
      HEAP32[$477 + 8 >> 2] = 0;
     }
     HEAP32[$502 >> 2] = $503 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($474 | 0) == 113) {
    HEAP8[$14 >> 0] = 20;
    dest = $14 + 1 | 0;
    src = 59808;
    stop = dest + 10 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$14 + 11 >> 0] = 0;
    $543 = $14 + 12 | 0;
    HEAP32[$543 + 0 >> 2] = 0;
    HEAP32[$543 + 4 >> 2] = 0;
    HEAP32[$543 + 8 >> 2] = 0;
    $544 = $db + 4 | 0;
    $545 = HEAP32[$544 >> 2] | 0;
    $547 = HEAP32[$db + 8 >> 2] | 0;
    if ($545 >>> 0 < $547 >>> 0) {
     if (!$545) $552 = 0; else {
      HEAP32[$545 + 0 >> 2] = HEAP32[$14 + 0 >> 2];
      HEAP32[$545 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
      HEAP32[$545 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
      HEAP32[$14 + 0 >> 2] = 0;
      HEAP32[$14 + 4 >> 2] = 0;
      HEAP32[$14 + 8 >> 2] = 0;
      $550 = $545 + 12 | 0;
      HEAP32[$550 + 0 >> 2] = HEAP32[$543 + 0 >> 2];
      HEAP32[$550 + 4 >> 2] = HEAP32[$543 + 4 >> 2];
      HEAP32[$550 + 8 >> 2] = HEAP32[$543 + 8 >> 2];
      HEAP32[$543 + 0 >> 2] = 0;
      HEAP32[$543 + 4 >> 2] = 0;
      HEAP32[$543 + 8 >> 2] = 0;
      $552 = HEAP32[$544 >> 2] | 0;
     }
     HEAP32[$544 >> 2] = $552 + 24;
    } else {
     $556 = HEAP32[$db >> 2] | 0;
     $558 = ($545 - $556 | 0) / 24 | 0;
     $559 = $558 + 1 | 0;
     if (($559 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $563 = ($547 - $556 | 0) / 24 | 0;
     if ($563 >>> 0 < 1073741823) {
      $565 = $563 << 1;
      $$0$i$i$i124 = $565 >>> 0 < $559 >>> 0 ? $559 : $565;
     } else $$0$i$i$i124 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i124, $558, $db + 12 | 0);
     $568 = $__v$i$i395 + 8 | 0;
     $569 = HEAP32[$568 >> 2] | 0;
     if ($569) {
      HEAP32[$569 + 0 >> 2] = HEAP32[$14 + 0 >> 2];
      HEAP32[$569 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
      HEAP32[$569 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
      HEAP32[$14 + 0 >> 2] = 0;
      HEAP32[$14 + 4 >> 2] = 0;
      HEAP32[$14 + 8 >> 2] = 0;
      $571 = $569 + 12 | 0;
      HEAP32[$571 + 0 >> 2] = HEAP32[$543 + 0 >> 2];
      HEAP32[$571 + 4 >> 2] = HEAP32[$543 + 4 >> 2];
      HEAP32[$571 + 8 >> 2] = HEAP32[$543 + 8 >> 2];
      HEAP32[$543 + 0 >> 2] = 0;
      HEAP32[$543 + 4 >> 2] = 0;
      HEAP32[$543 + 8 >> 2] = 0;
     }
     HEAP32[$568 >> 2] = $569 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($474 | 0) == 79) {
    HEAP8[$13 >> 0] = 20;
    dest = $13 + 1 | 0;
    src = 59792;
    stop = dest + 10 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$13 + 11 >> 0] = 0;
    $510 = $13 + 12 | 0;
    HEAP32[$510 + 0 >> 2] = 0;
    HEAP32[$510 + 4 >> 2] = 0;
    HEAP32[$510 + 8 >> 2] = 0;
    $511 = $db + 4 | 0;
    $512 = HEAP32[$511 >> 2] | 0;
    $514 = HEAP32[$db + 8 >> 2] | 0;
    if ($512 >>> 0 < $514 >>> 0) {
     if (!$512) $519 = 0; else {
      HEAP32[$512 + 0 >> 2] = HEAP32[$13 + 0 >> 2];
      HEAP32[$512 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
      HEAP32[$512 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
      HEAP32[$13 + 0 >> 2] = 0;
      HEAP32[$13 + 4 >> 2] = 0;
      HEAP32[$13 + 8 >> 2] = 0;
      $517 = $512 + 12 | 0;
      HEAP32[$517 + 0 >> 2] = HEAP32[$510 + 0 >> 2];
      HEAP32[$517 + 4 >> 2] = HEAP32[$510 + 4 >> 2];
      HEAP32[$517 + 8 >> 2] = HEAP32[$510 + 8 >> 2];
      HEAP32[$510 + 0 >> 2] = 0;
      HEAP32[$510 + 4 >> 2] = 0;
      HEAP32[$510 + 8 >> 2] = 0;
      $519 = HEAP32[$511 >> 2] | 0;
     }
     HEAP32[$511 >> 2] = $519 + 24;
    } else {
     $523 = HEAP32[$db >> 2] | 0;
     $525 = ($512 - $523 | 0) / 24 | 0;
     $526 = $525 + 1 | 0;
     if (($526 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $530 = ($514 - $523 | 0) / 24 | 0;
     if ($530 >>> 0 < 1073741823) {
      $532 = $530 << 1;
      $$0$i$i$i115 = $532 >>> 0 < $526 >>> 0 ? $526 : $532;
     } else $$0$i$i$i115 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i115, $525, $db + 12 | 0);
     $535 = $__v$i$i395 + 8 | 0;
     $536 = HEAP32[$535 >> 2] | 0;
     if ($536) {
      HEAP32[$536 + 0 >> 2] = HEAP32[$13 + 0 >> 2];
      HEAP32[$536 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
      HEAP32[$536 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
      HEAP32[$13 + 0 >> 2] = 0;
      HEAP32[$13 + 4 >> 2] = 0;
      HEAP32[$13 + 8 >> 2] = 0;
      $538 = $536 + 12 | 0;
      HEAP32[$538 + 0 >> 2] = HEAP32[$510 + 0 >> 2];
      HEAP32[$538 + 4 >> 2] = HEAP32[$510 + 4 >> 2];
      HEAP32[$538 + 8 >> 2] = HEAP32[$510 + 8 >> 2];
      HEAP32[$510 + 0 >> 2] = 0;
      HEAP32[$510 + 4 >> 2] = 0;
      HEAP32[$510 + 8 >> 2] = 0;
     }
     HEAP32[$535 >> 2] = $536 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 99:
  {
   $189 = HEAP8[$first + 1 >> 0] | 0;
   if (($189 | 0) == 109) {
    HEAP8[$5 >> 0] = 18;
    dest = $5 + 1 | 0;
    src = 59640;
    stop = dest + 9 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$5 + 10 >> 0] = 0;
    $225 = $5 + 12 | 0;
    HEAP32[$225 + 0 >> 2] = 0;
    HEAP32[$225 + 4 >> 2] = 0;
    HEAP32[$225 + 8 >> 2] = 0;
    $226 = $db + 4 | 0;
    $227 = HEAP32[$226 >> 2] | 0;
    $229 = HEAP32[$db + 8 >> 2] | 0;
    if ($227 >>> 0 < $229 >>> 0) {
     if (!$227) $234 = 0; else {
      HEAP32[$227 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
      HEAP32[$227 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$227 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      HEAP32[$5 + 0 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$5 + 8 >> 2] = 0;
      $232 = $227 + 12 | 0;
      HEAP32[$232 + 0 >> 2] = HEAP32[$225 + 0 >> 2];
      HEAP32[$232 + 4 >> 2] = HEAP32[$225 + 4 >> 2];
      HEAP32[$232 + 8 >> 2] = HEAP32[$225 + 8 >> 2];
      HEAP32[$225 + 0 >> 2] = 0;
      HEAP32[$225 + 4 >> 2] = 0;
      HEAP32[$225 + 8 >> 2] = 0;
      $234 = HEAP32[$226 >> 2] | 0;
     }
     HEAP32[$226 >> 2] = $234 + 24;
    } else {
     $238 = HEAP32[$db >> 2] | 0;
     $240 = ($227 - $238 | 0) / 24 | 0;
     $241 = $240 + 1 | 0;
     if (($241 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $245 = ($229 - $238 | 0) / 24 | 0;
     if ($245 >>> 0 < 1073741823) {
      $247 = $245 << 1;
      $$0$i$i$i44 = $247 >>> 0 < $241 >>> 0 ? $241 : $247;
     } else $$0$i$i$i44 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i44, $240, $db + 12 | 0);
     $250 = $__v$i$i395 + 8 | 0;
     $251 = HEAP32[$250 >> 2] | 0;
     if ($251) {
      HEAP32[$251 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
      HEAP32[$251 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$251 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      HEAP32[$5 + 0 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$5 + 8 >> 2] = 0;
      $253 = $251 + 12 | 0;
      HEAP32[$253 + 0 >> 2] = HEAP32[$225 + 0 >> 2];
      HEAP32[$253 + 4 >> 2] = HEAP32[$225 + 4 >> 2];
      HEAP32[$253 + 8 >> 2] = HEAP32[$225 + 8 >> 2];
      HEAP32[$225 + 0 >> 2] = 0;
      HEAP32[$225 + 4 >> 2] = 0;
      HEAP32[$225 + 8 >> 2] = 0;
     }
     HEAP32[$250 >> 2] = $251 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($189 | 0) == 111) {
    HEAP8[$6 >> 0] = 18;
    dest = $6 + 1 | 0;
    src = 59656;
    stop = dest + 9 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$6 + 10 >> 0] = 0;
    $258 = $6 + 12 | 0;
    HEAP32[$258 + 0 >> 2] = 0;
    HEAP32[$258 + 4 >> 2] = 0;
    HEAP32[$258 + 8 >> 2] = 0;
    $259 = $db + 4 | 0;
    $260 = HEAP32[$259 >> 2] | 0;
    $262 = HEAP32[$db + 8 >> 2] | 0;
    if ($260 >>> 0 < $262 >>> 0) {
     if (!$260) $267 = 0; else {
      HEAP32[$260 + 0 >> 2] = HEAP32[$6 + 0 >> 2];
      HEAP32[$260 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$260 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      HEAP32[$6 + 0 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$6 + 8 >> 2] = 0;
      $265 = $260 + 12 | 0;
      HEAP32[$265 + 0 >> 2] = HEAP32[$258 + 0 >> 2];
      HEAP32[$265 + 4 >> 2] = HEAP32[$258 + 4 >> 2];
      HEAP32[$265 + 8 >> 2] = HEAP32[$258 + 8 >> 2];
      HEAP32[$258 + 0 >> 2] = 0;
      HEAP32[$258 + 4 >> 2] = 0;
      HEAP32[$258 + 8 >> 2] = 0;
      $267 = HEAP32[$259 >> 2] | 0;
     }
     HEAP32[$259 >> 2] = $267 + 24;
    } else {
     $271 = HEAP32[$db >> 2] | 0;
     $273 = ($260 - $271 | 0) / 24 | 0;
     $274 = $273 + 1 | 0;
     if (($274 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $278 = ($262 - $271 | 0) / 24 | 0;
     if ($278 >>> 0 < 1073741823) {
      $280 = $278 << 1;
      $$0$i$i$i53 = $280 >>> 0 < $274 >>> 0 ? $274 : $280;
     } else $$0$i$i$i53 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i53, $273, $db + 12 | 0);
     $283 = $__v$i$i395 + 8 | 0;
     $284 = HEAP32[$283 >> 2] | 0;
     if ($284) {
      HEAP32[$284 + 0 >> 2] = HEAP32[$6 + 0 >> 2];
      HEAP32[$284 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$284 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      HEAP32[$6 + 0 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$6 + 8 >> 2] = 0;
      $286 = $284 + 12 | 0;
      HEAP32[$286 + 0 >> 2] = HEAP32[$258 + 0 >> 2];
      HEAP32[$286 + 4 >> 2] = HEAP32[$258 + 4 >> 2];
      HEAP32[$286 + 8 >> 2] = HEAP32[$258 + 8 >> 2];
      HEAP32[$258 + 0 >> 2] = 0;
      HEAP32[$258 + 4 >> 2] = 0;
      HEAP32[$258 + 8 >> 2] = 0;
     }
     HEAP32[$283 >> 2] = $284 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($189 | 0) == 118) {
    $289 = $db + 63 | 0;
    $290 = HEAP8[$289 >> 0] | 0;
    HEAP8[$289 >> 0] = 0;
    $291 = $first + 2 | 0;
    $292 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($291, $last, $db) | 0;
    HEAP8[$289 >> 0] = $290;
    if (($292 | 0) == ($291 | 0)) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $296 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($296 | 0)) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($296 + -24 | 0, 0, 59672, 9) | 0;
    HEAP8[$db + 60 >> 0] = 1;
    $$0 = $292;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($189 | 0) == 108) {
    HEAP8[$4 >> 0] = 20;
    dest = $4 + 1 | 0;
    src = 59624;
    stop = dest + 10 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$4 + 11 >> 0] = 0;
    $192 = $4 + 12 | 0;
    HEAP32[$192 + 0 >> 2] = 0;
    HEAP32[$192 + 4 >> 2] = 0;
    HEAP32[$192 + 8 >> 2] = 0;
    $193 = $db + 4 | 0;
    $194 = HEAP32[$193 >> 2] | 0;
    $196 = HEAP32[$db + 8 >> 2] | 0;
    if ($194 >>> 0 < $196 >>> 0) {
     if (!$194) $201 = 0; else {
      HEAP32[$194 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
      HEAP32[$194 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$194 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      HEAP32[$4 + 0 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$4 + 8 >> 2] = 0;
      $199 = $194 + 12 | 0;
      HEAP32[$199 + 0 >> 2] = HEAP32[$192 + 0 >> 2];
      HEAP32[$199 + 4 >> 2] = HEAP32[$192 + 4 >> 2];
      HEAP32[$199 + 8 >> 2] = HEAP32[$192 + 8 >> 2];
      HEAP32[$192 + 0 >> 2] = 0;
      HEAP32[$192 + 4 >> 2] = 0;
      HEAP32[$192 + 8 >> 2] = 0;
      $201 = HEAP32[$193 >> 2] | 0;
     }
     HEAP32[$193 >> 2] = $201 + 24;
    } else {
     $205 = HEAP32[$db >> 2] | 0;
     $207 = ($194 - $205 | 0) / 24 | 0;
     $208 = $207 + 1 | 0;
     if (($208 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $212 = ($196 - $205 | 0) / 24 | 0;
     if ($212 >>> 0 < 1073741823) {
      $214 = $212 << 1;
      $$0$i$i$i35 = $214 >>> 0 < $208 >>> 0 ? $208 : $214;
     } else $$0$i$i$i35 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i35, $207, $db + 12 | 0);
     $217 = $__v$i$i395 + 8 | 0;
     $218 = HEAP32[$217 >> 2] | 0;
     if ($218) {
      HEAP32[$218 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
      HEAP32[$218 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$218 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      HEAP32[$4 + 0 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$4 + 8 >> 2] = 0;
      $220 = $218 + 12 | 0;
      HEAP32[$220 + 0 >> 2] = HEAP32[$192 + 0 >> 2];
      HEAP32[$220 + 4 >> 2] = HEAP32[$192 + 4 >> 2];
      HEAP32[$220 + 8 >> 2] = HEAP32[$192 + 8 >> 2];
      HEAP32[$192 + 0 >> 2] = 0;
      HEAP32[$192 + 4 >> 2] = 0;
      HEAP32[$192 + 8 >> 2] = 0;
     }
     HEAP32[$217 >> 2] = $218 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 103:
  {
   $576 = HEAP8[$first + 1 >> 0] | 0;
   if (($576 | 0) == 101) {
    HEAP8[$15 >> 0] = 20;
    dest = $15 + 1 | 0;
    src = 59824;
    stop = dest + 10 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$15 + 11 >> 0] = 0;
    $579 = $15 + 12 | 0;
    HEAP32[$579 + 0 >> 2] = 0;
    HEAP32[$579 + 4 >> 2] = 0;
    HEAP32[$579 + 8 >> 2] = 0;
    $580 = $db + 4 | 0;
    $581 = HEAP32[$580 >> 2] | 0;
    $583 = HEAP32[$db + 8 >> 2] | 0;
    if ($581 >>> 0 < $583 >>> 0) {
     if (!$581) $588 = 0; else {
      HEAP32[$581 + 0 >> 2] = HEAP32[$15 + 0 >> 2];
      HEAP32[$581 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
      HEAP32[$581 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
      HEAP32[$15 + 0 >> 2] = 0;
      HEAP32[$15 + 4 >> 2] = 0;
      HEAP32[$15 + 8 >> 2] = 0;
      $586 = $581 + 12 | 0;
      HEAP32[$586 + 0 >> 2] = HEAP32[$579 + 0 >> 2];
      HEAP32[$586 + 4 >> 2] = HEAP32[$579 + 4 >> 2];
      HEAP32[$586 + 8 >> 2] = HEAP32[$579 + 8 >> 2];
      HEAP32[$579 + 0 >> 2] = 0;
      HEAP32[$579 + 4 >> 2] = 0;
      HEAP32[$579 + 8 >> 2] = 0;
      $588 = HEAP32[$580 >> 2] | 0;
     }
     HEAP32[$580 >> 2] = $588 + 24;
    } else {
     $592 = HEAP32[$db >> 2] | 0;
     $594 = ($581 - $592 | 0) / 24 | 0;
     $595 = $594 + 1 | 0;
     if (($595 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $599 = ($583 - $592 | 0) / 24 | 0;
     if ($599 >>> 0 < 1073741823) {
      $601 = $599 << 1;
      $$0$i$i$i133 = $601 >>> 0 < $595 >>> 0 ? $595 : $601;
     } else $$0$i$i$i133 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i133, $594, $db + 12 | 0);
     $604 = $__v$i$i395 + 8 | 0;
     $605 = HEAP32[$604 >> 2] | 0;
     if ($605) {
      HEAP32[$605 + 0 >> 2] = HEAP32[$15 + 0 >> 2];
      HEAP32[$605 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
      HEAP32[$605 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
      HEAP32[$15 + 0 >> 2] = 0;
      HEAP32[$15 + 4 >> 2] = 0;
      HEAP32[$15 + 8 >> 2] = 0;
      $607 = $605 + 12 | 0;
      HEAP32[$607 + 0 >> 2] = HEAP32[$579 + 0 >> 2];
      HEAP32[$607 + 4 >> 2] = HEAP32[$579 + 4 >> 2];
      HEAP32[$607 + 8 >> 2] = HEAP32[$579 + 8 >> 2];
      HEAP32[$579 + 0 >> 2] = 0;
      HEAP32[$579 + 4 >> 2] = 0;
      HEAP32[$579 + 8 >> 2] = 0;
     }
     HEAP32[$604 >> 2] = $605 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($576 | 0) == 116) {
    HEAP8[$16 >> 0] = 18;
    dest = $16 + 1 | 0;
    src = 59840;
    stop = dest + 9 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$16 + 10 >> 0] = 0;
    $612 = $16 + 12 | 0;
    HEAP32[$612 + 0 >> 2] = 0;
    HEAP32[$612 + 4 >> 2] = 0;
    HEAP32[$612 + 8 >> 2] = 0;
    $613 = $db + 4 | 0;
    $614 = HEAP32[$613 >> 2] | 0;
    $616 = HEAP32[$db + 8 >> 2] | 0;
    if ($614 >>> 0 < $616 >>> 0) {
     if (!$614) $621 = 0; else {
      HEAP32[$614 + 0 >> 2] = HEAP32[$16 + 0 >> 2];
      HEAP32[$614 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
      HEAP32[$614 + 8 >> 2] = HEAP32[$16 + 8 >> 2];
      HEAP32[$16 + 0 >> 2] = 0;
      HEAP32[$16 + 4 >> 2] = 0;
      HEAP32[$16 + 8 >> 2] = 0;
      $619 = $614 + 12 | 0;
      HEAP32[$619 + 0 >> 2] = HEAP32[$612 + 0 >> 2];
      HEAP32[$619 + 4 >> 2] = HEAP32[$612 + 4 >> 2];
      HEAP32[$619 + 8 >> 2] = HEAP32[$612 + 8 >> 2];
      HEAP32[$612 + 0 >> 2] = 0;
      HEAP32[$612 + 4 >> 2] = 0;
      HEAP32[$612 + 8 >> 2] = 0;
      $621 = HEAP32[$613 >> 2] | 0;
     }
     HEAP32[$613 >> 2] = $621 + 24;
    } else {
     $625 = HEAP32[$db >> 2] | 0;
     $627 = ($614 - $625 | 0) / 24 | 0;
     $628 = $627 + 1 | 0;
     if (($628 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $632 = ($616 - $625 | 0) / 24 | 0;
     if ($632 >>> 0 < 1073741823) {
      $634 = $632 << 1;
      $$0$i$i$i142 = $634 >>> 0 < $628 >>> 0 ? $628 : $634;
     } else $$0$i$i$i142 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i142, $627, $db + 12 | 0);
     $637 = $__v$i$i395 + 8 | 0;
     $638 = HEAP32[$637 >> 2] | 0;
     if ($638) {
      HEAP32[$638 + 0 >> 2] = HEAP32[$16 + 0 >> 2];
      HEAP32[$638 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
      HEAP32[$638 + 8 >> 2] = HEAP32[$16 + 8 >> 2];
      HEAP32[$16 + 0 >> 2] = 0;
      HEAP32[$16 + 4 >> 2] = 0;
      HEAP32[$16 + 8 >> 2] = 0;
      $640 = $638 + 12 | 0;
      HEAP32[$640 + 0 >> 2] = HEAP32[$612 + 0 >> 2];
      HEAP32[$640 + 4 >> 2] = HEAP32[$612 + 4 >> 2];
      HEAP32[$640 + 8 >> 2] = HEAP32[$612 + 8 >> 2];
      HEAP32[$612 + 0 >> 2] = 0;
      HEAP32[$612 + 4 >> 2] = 0;
      HEAP32[$612 + 8 >> 2] = 0;
     }
     HEAP32[$637 >> 2] = $638 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 109:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 105:
    {
     HEAP8[$22 >> 0] = 18;
     dest = $22 + 1 | 0;
     src = 59952;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$22 + 10 >> 0] = 0;
     $829 = $22 + 12 | 0;
     HEAP32[$829 + 0 >> 2] = 0;
     HEAP32[$829 + 4 >> 2] = 0;
     HEAP32[$829 + 8 >> 2] = 0;
     $830 = $db + 4 | 0;
     $831 = HEAP32[$830 >> 2] | 0;
     $833 = HEAP32[$db + 8 >> 2] | 0;
     if ($831 >>> 0 < $833 >>> 0) {
      if (!$831) $838 = 0; else {
       HEAP32[$831 + 0 >> 2] = HEAP32[$22 + 0 >> 2];
       HEAP32[$831 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
       HEAP32[$831 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
       HEAP32[$22 + 0 >> 2] = 0;
       HEAP32[$22 + 4 >> 2] = 0;
       HEAP32[$22 + 8 >> 2] = 0;
       $836 = $831 + 12 | 0;
       HEAP32[$836 + 0 >> 2] = HEAP32[$829 + 0 >> 2];
       HEAP32[$836 + 4 >> 2] = HEAP32[$829 + 4 >> 2];
       HEAP32[$836 + 8 >> 2] = HEAP32[$829 + 8 >> 2];
       HEAP32[$829 + 0 >> 2] = 0;
       HEAP32[$829 + 4 >> 2] = 0;
       HEAP32[$829 + 8 >> 2] = 0;
       $838 = HEAP32[$830 >> 2] | 0;
      }
      HEAP32[$830 >> 2] = $838 + 24;
     } else {
      $842 = HEAP32[$db >> 2] | 0;
      $844 = ($831 - $842 | 0) / 24 | 0;
      $845 = $844 + 1 | 0;
      if (($845 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $849 = ($833 - $842 | 0) / 24 | 0;
      if ($849 >>> 0 < 1073741823) {
       $851 = $849 << 1;
       $$0$i$i$i195 = $851 >>> 0 < $845 >>> 0 ? $845 : $851;
      } else $$0$i$i$i195 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i195, $844, $db + 12 | 0);
      $854 = $__v$i$i395 + 8 | 0;
      $855 = HEAP32[$854 >> 2] | 0;
      if ($855) {
       HEAP32[$855 + 0 >> 2] = HEAP32[$22 + 0 >> 2];
       HEAP32[$855 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
       HEAP32[$855 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
       HEAP32[$22 + 0 >> 2] = 0;
       HEAP32[$22 + 4 >> 2] = 0;
       HEAP32[$22 + 8 >> 2] = 0;
       $857 = $855 + 12 | 0;
       HEAP32[$857 + 0 >> 2] = HEAP32[$829 + 0 >> 2];
       HEAP32[$857 + 4 >> 2] = HEAP32[$829 + 4 >> 2];
       HEAP32[$857 + 8 >> 2] = HEAP32[$829 + 8 >> 2];
       HEAP32[$829 + 0 >> 2] = 0;
       HEAP32[$829 + 4 >> 2] = 0;
       HEAP32[$829 + 8 >> 2] = 0;
      }
      HEAP32[$854 >> 2] = $855 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 73:
    {
     HEAP8[$23 >> 0] = 20;
     dest = $23 + 1 | 0;
     src = 59968;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$23 + 11 >> 0] = 0;
     $862 = $23 + 12 | 0;
     HEAP32[$862 + 0 >> 2] = 0;
     HEAP32[$862 + 4 >> 2] = 0;
     HEAP32[$862 + 8 >> 2] = 0;
     $863 = $db + 4 | 0;
     $864 = HEAP32[$863 >> 2] | 0;
     $866 = HEAP32[$db + 8 >> 2] | 0;
     if ($864 >>> 0 < $866 >>> 0) {
      if (!$864) $871 = 0; else {
       HEAP32[$864 + 0 >> 2] = HEAP32[$23 + 0 >> 2];
       HEAP32[$864 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
       HEAP32[$864 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
       HEAP32[$23 + 0 >> 2] = 0;
       HEAP32[$23 + 4 >> 2] = 0;
       HEAP32[$23 + 8 >> 2] = 0;
       $869 = $864 + 12 | 0;
       HEAP32[$869 + 0 >> 2] = HEAP32[$862 + 0 >> 2];
       HEAP32[$869 + 4 >> 2] = HEAP32[$862 + 4 >> 2];
       HEAP32[$869 + 8 >> 2] = HEAP32[$862 + 8 >> 2];
       HEAP32[$862 + 0 >> 2] = 0;
       HEAP32[$862 + 4 >> 2] = 0;
       HEAP32[$862 + 8 >> 2] = 0;
       $871 = HEAP32[$863 >> 2] | 0;
      }
      HEAP32[$863 >> 2] = $871 + 24;
     } else {
      $875 = HEAP32[$db >> 2] | 0;
      $877 = ($864 - $875 | 0) / 24 | 0;
      $878 = $877 + 1 | 0;
      if (($878 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $882 = ($866 - $875 | 0) / 24 | 0;
      if ($882 >>> 0 < 1073741823) {
       $884 = $882 << 1;
       $$0$i$i$i204 = $884 >>> 0 < $878 >>> 0 ? $878 : $884;
      } else $$0$i$i$i204 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i204, $877, $db + 12 | 0);
      $887 = $__v$i$i395 + 8 | 0;
      $888 = HEAP32[$887 >> 2] | 0;
      if ($888) {
       HEAP32[$888 + 0 >> 2] = HEAP32[$23 + 0 >> 2];
       HEAP32[$888 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
       HEAP32[$888 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
       HEAP32[$23 + 0 >> 2] = 0;
       HEAP32[$23 + 4 >> 2] = 0;
       HEAP32[$23 + 8 >> 2] = 0;
       $890 = $888 + 12 | 0;
       HEAP32[$890 + 0 >> 2] = HEAP32[$862 + 0 >> 2];
       HEAP32[$890 + 4 >> 2] = HEAP32[$862 + 4 >> 2];
       HEAP32[$890 + 8 >> 2] = HEAP32[$862 + 8 >> 2];
       HEAP32[$862 + 0 >> 2] = 0;
       HEAP32[$862 + 4 >> 2] = 0;
       HEAP32[$862 + 8 >> 2] = 0;
      }
      HEAP32[$887 >> 2] = $888 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 108:
    {
     HEAP8[$24 >> 0] = 18;
     dest = $24 + 1 | 0;
     src = 59712;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$24 + 10 >> 0] = 0;
     $895 = $24 + 12 | 0;
     HEAP32[$895 + 0 >> 2] = 0;
     HEAP32[$895 + 4 >> 2] = 0;
     HEAP32[$895 + 8 >> 2] = 0;
     $896 = $db + 4 | 0;
     $897 = HEAP32[$896 >> 2] | 0;
     $899 = HEAP32[$db + 8 >> 2] | 0;
     if ($897 >>> 0 < $899 >>> 0) {
      if (!$897) $904 = 0; else {
       HEAP32[$897 + 0 >> 2] = HEAP32[$24 + 0 >> 2];
       HEAP32[$897 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
       HEAP32[$897 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
       HEAP32[$24 + 0 >> 2] = 0;
       HEAP32[$24 + 4 >> 2] = 0;
       HEAP32[$24 + 8 >> 2] = 0;
       $902 = $897 + 12 | 0;
       HEAP32[$902 + 0 >> 2] = HEAP32[$895 + 0 >> 2];
       HEAP32[$902 + 4 >> 2] = HEAP32[$895 + 4 >> 2];
       HEAP32[$902 + 8 >> 2] = HEAP32[$895 + 8 >> 2];
       HEAP32[$895 + 0 >> 2] = 0;
       HEAP32[$895 + 4 >> 2] = 0;
       HEAP32[$895 + 8 >> 2] = 0;
       $904 = HEAP32[$896 >> 2] | 0;
      }
      HEAP32[$896 >> 2] = $904 + 24;
     } else {
      $908 = HEAP32[$db >> 2] | 0;
      $910 = ($897 - $908 | 0) / 24 | 0;
      $911 = $910 + 1 | 0;
      if (($911 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $915 = ($899 - $908 | 0) / 24 | 0;
      if ($915 >>> 0 < 1073741823) {
       $917 = $915 << 1;
       $$0$i$i$i213 = $917 >>> 0 < $911 >>> 0 ? $911 : $917;
      } else $$0$i$i$i213 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i213, $910, $db + 12 | 0);
      $920 = $__v$i$i395 + 8 | 0;
      $921 = HEAP32[$920 >> 2] | 0;
      if ($921) {
       HEAP32[$921 + 0 >> 2] = HEAP32[$24 + 0 >> 2];
       HEAP32[$921 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
       HEAP32[$921 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
       HEAP32[$24 + 0 >> 2] = 0;
       HEAP32[$24 + 4 >> 2] = 0;
       HEAP32[$24 + 8 >> 2] = 0;
       $923 = $921 + 12 | 0;
       HEAP32[$923 + 0 >> 2] = HEAP32[$895 + 0 >> 2];
       HEAP32[$923 + 4 >> 2] = HEAP32[$895 + 4 >> 2];
       HEAP32[$923 + 8 >> 2] = HEAP32[$895 + 8 >> 2];
       HEAP32[$895 + 0 >> 2] = 0;
       HEAP32[$895 + 4 >> 2] = 0;
       HEAP32[$895 + 8 >> 2] = 0;
      }
      HEAP32[$920 >> 2] = $921 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 76:
    {
     HEAP8[$25 >> 0] = 20;
     dest = $25 + 1 | 0;
     src = 59984;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$25 + 11 >> 0] = 0;
     $928 = $25 + 12 | 0;
     HEAP32[$928 + 0 >> 2] = 0;
     HEAP32[$928 + 4 >> 2] = 0;
     HEAP32[$928 + 8 >> 2] = 0;
     $929 = $db + 4 | 0;
     $930 = HEAP32[$929 >> 2] | 0;
     $932 = HEAP32[$db + 8 >> 2] | 0;
     if ($930 >>> 0 < $932 >>> 0) {
      if (!$930) $937 = 0; else {
       HEAP32[$930 + 0 >> 2] = HEAP32[$25 + 0 >> 2];
       HEAP32[$930 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
       HEAP32[$930 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
       HEAP32[$25 + 0 >> 2] = 0;
       HEAP32[$25 + 4 >> 2] = 0;
       HEAP32[$25 + 8 >> 2] = 0;
       $935 = $930 + 12 | 0;
       HEAP32[$935 + 0 >> 2] = HEAP32[$928 + 0 >> 2];
       HEAP32[$935 + 4 >> 2] = HEAP32[$928 + 4 >> 2];
       HEAP32[$935 + 8 >> 2] = HEAP32[$928 + 8 >> 2];
       HEAP32[$928 + 0 >> 2] = 0;
       HEAP32[$928 + 4 >> 2] = 0;
       HEAP32[$928 + 8 >> 2] = 0;
       $937 = HEAP32[$929 >> 2] | 0;
      }
      HEAP32[$929 >> 2] = $937 + 24;
     } else {
      $941 = HEAP32[$db >> 2] | 0;
      $943 = ($930 - $941 | 0) / 24 | 0;
      $944 = $943 + 1 | 0;
      if (($944 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $948 = ($932 - $941 | 0) / 24 | 0;
      if ($948 >>> 0 < 1073741823) {
       $950 = $948 << 1;
       $$0$i$i$i222 = $950 >>> 0 < $944 >>> 0 ? $944 : $950;
      } else $$0$i$i$i222 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i222, $943, $db + 12 | 0);
      $953 = $__v$i$i395 + 8 | 0;
      $954 = HEAP32[$953 >> 2] | 0;
      if ($954) {
       HEAP32[$954 + 0 >> 2] = HEAP32[$25 + 0 >> 2];
       HEAP32[$954 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
       HEAP32[$954 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
       HEAP32[$25 + 0 >> 2] = 0;
       HEAP32[$25 + 4 >> 2] = 0;
       HEAP32[$25 + 8 >> 2] = 0;
       $956 = $954 + 12 | 0;
       HEAP32[$956 + 0 >> 2] = HEAP32[$928 + 0 >> 2];
       HEAP32[$956 + 4 >> 2] = HEAP32[$928 + 4 >> 2];
       HEAP32[$956 + 8 >> 2] = HEAP32[$928 + 8 >> 2];
       HEAP32[$928 + 0 >> 2] = 0;
       HEAP32[$928 + 4 >> 2] = 0;
       HEAP32[$928 + 8 >> 2] = 0;
      }
      HEAP32[$953 >> 2] = $954 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 109:
    {
     HEAP8[$26 >> 0] = 20;
     dest = $26 + 1 | 0;
     src = 6e4;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$26 + 11 >> 0] = 0;
     $961 = $26 + 12 | 0;
     HEAP32[$961 + 0 >> 2] = 0;
     HEAP32[$961 + 4 >> 2] = 0;
     HEAP32[$961 + 8 >> 2] = 0;
     $962 = $db + 4 | 0;
     $963 = HEAP32[$962 >> 2] | 0;
     $965 = HEAP32[$db + 8 >> 2] | 0;
     if ($963 >>> 0 < $965 >>> 0) {
      if (!$963) $970 = 0; else {
       HEAP32[$963 + 0 >> 2] = HEAP32[$26 + 0 >> 2];
       HEAP32[$963 + 4 >> 2] = HEAP32[$26 + 4 >> 2];
       HEAP32[$963 + 8 >> 2] = HEAP32[$26 + 8 >> 2];
       HEAP32[$26 + 0 >> 2] = 0;
       HEAP32[$26 + 4 >> 2] = 0;
       HEAP32[$26 + 8 >> 2] = 0;
       $968 = $963 + 12 | 0;
       HEAP32[$968 + 0 >> 2] = HEAP32[$961 + 0 >> 2];
       HEAP32[$968 + 4 >> 2] = HEAP32[$961 + 4 >> 2];
       HEAP32[$968 + 8 >> 2] = HEAP32[$961 + 8 >> 2];
       HEAP32[$961 + 0 >> 2] = 0;
       HEAP32[$961 + 4 >> 2] = 0;
       HEAP32[$961 + 8 >> 2] = 0;
       $970 = HEAP32[$962 >> 2] | 0;
      }
      HEAP32[$962 >> 2] = $970 + 24;
     } else {
      $974 = HEAP32[$db >> 2] | 0;
      $976 = ($963 - $974 | 0) / 24 | 0;
      $977 = $976 + 1 | 0;
      if (($977 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $981 = ($965 - $974 | 0) / 24 | 0;
      if ($981 >>> 0 < 1073741823) {
       $983 = $981 << 1;
       $$0$i$i$i231 = $983 >>> 0 < $977 >>> 0 ? $977 : $983;
      } else $$0$i$i$i231 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i231, $976, $db + 12 | 0);
      $986 = $__v$i$i395 + 8 | 0;
      $987 = HEAP32[$986 >> 2] | 0;
      if ($987) {
       HEAP32[$987 + 0 >> 2] = HEAP32[$26 + 0 >> 2];
       HEAP32[$987 + 4 >> 2] = HEAP32[$26 + 4 >> 2];
       HEAP32[$987 + 8 >> 2] = HEAP32[$26 + 8 >> 2];
       HEAP32[$26 + 0 >> 2] = 0;
       HEAP32[$26 + 4 >> 2] = 0;
       HEAP32[$26 + 8 >> 2] = 0;
       $989 = $987 + 12 | 0;
       HEAP32[$989 + 0 >> 2] = HEAP32[$961 + 0 >> 2];
       HEAP32[$989 + 4 >> 2] = HEAP32[$961 + 4 >> 2];
       HEAP32[$989 + 8 >> 2] = HEAP32[$961 + 8 >> 2];
       HEAP32[$961 + 0 >> 2] = 0;
       HEAP32[$961 + 4 >> 2] = 0;
       HEAP32[$961 + 8 >> 2] = 0;
      }
      HEAP32[$986 >> 2] = $987 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 110:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 97:
    {
     $995 = _malloc(16) | 0;
     HEAP32[$27 + 8 >> 2] = $995;
     HEAP32[$27 >> 2] = 17;
     HEAP32[$27 + 4 >> 2] = 14;
     dest = $995 + 0 | 0;
     src = 60016;
     stop = dest + 14 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$995 + 14 >> 0] = 0;
     $999 = $27 + 12 | 0;
     HEAP32[$999 + 0 >> 2] = 0;
     HEAP32[$999 + 4 >> 2] = 0;
     HEAP32[$999 + 8 >> 2] = 0;
     $1000 = $db + 4 | 0;
     $1001 = HEAP32[$1000 >> 2] | 0;
     $1003 = HEAP32[$db + 8 >> 2] | 0;
     if ($1001 >>> 0 < $1003 >>> 0) {
      if (!$1001) $1008 = 0; else {
       HEAP32[$1001 + 0 >> 2] = HEAP32[$27 + 0 >> 2];
       HEAP32[$1001 + 4 >> 2] = HEAP32[$27 + 4 >> 2];
       HEAP32[$1001 + 8 >> 2] = HEAP32[$27 + 8 >> 2];
       HEAP32[$27 + 0 >> 2] = 0;
       HEAP32[$27 + 4 >> 2] = 0;
       HEAP32[$27 + 8 >> 2] = 0;
       $1006 = $1001 + 12 | 0;
       HEAP32[$1006 + 0 >> 2] = HEAP32[$999 + 0 >> 2];
       HEAP32[$1006 + 4 >> 2] = HEAP32[$999 + 4 >> 2];
       HEAP32[$1006 + 8 >> 2] = HEAP32[$999 + 8 >> 2];
       HEAP32[$999 + 0 >> 2] = 0;
       HEAP32[$999 + 4 >> 2] = 0;
       HEAP32[$999 + 8 >> 2] = 0;
       $1008 = HEAP32[$1000 >> 2] | 0;
      }
      HEAP32[$1000 >> 2] = $1008 + 24;
     } else {
      $1012 = HEAP32[$db >> 2] | 0;
      $1014 = ($1001 - $1012 | 0) / 24 | 0;
      $1015 = $1014 + 1 | 0;
      if (($1015 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $1019 = ($1003 - $1012 | 0) / 24 | 0;
      if ($1019 >>> 0 < 1073741823) {
       $1021 = $1019 << 1;
       $$0$i$i$i239 = $1021 >>> 0 < $1015 >>> 0 ? $1015 : $1021;
      } else $$0$i$i$i239 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i239, $1014, $db + 12 | 0);
      $1024 = $__v$i$i395 + 8 | 0;
      $1025 = HEAP32[$1024 >> 2] | 0;
      if ($1025) {
       HEAP32[$1025 + 0 >> 2] = HEAP32[$27 + 0 >> 2];
       HEAP32[$1025 + 4 >> 2] = HEAP32[$27 + 4 >> 2];
       HEAP32[$1025 + 8 >> 2] = HEAP32[$27 + 8 >> 2];
       HEAP32[$27 + 0 >> 2] = 0;
       HEAP32[$27 + 4 >> 2] = 0;
       HEAP32[$27 + 8 >> 2] = 0;
       $1027 = $1025 + 12 | 0;
       HEAP32[$1027 + 0 >> 2] = HEAP32[$999 + 0 >> 2];
       HEAP32[$1027 + 4 >> 2] = HEAP32[$999 + 4 >> 2];
       HEAP32[$1027 + 8 >> 2] = HEAP32[$999 + 8 >> 2];
       HEAP32[$999 + 0 >> 2] = 0;
       HEAP32[$999 + 4 >> 2] = 0;
       HEAP32[$999 + 8 >> 2] = 0;
      }
      HEAP32[$1024 >> 2] = $1025 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 103:
    {
     HEAP8[$29 >> 0] = 18;
     dest = $29 + 1 | 0;
     src = 59952;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$29 + 10 >> 0] = 0;
     $1065 = $29 + 12 | 0;
     HEAP32[$1065 + 0 >> 2] = 0;
     HEAP32[$1065 + 4 >> 2] = 0;
     HEAP32[$1065 + 8 >> 2] = 0;
     $1066 = $db + 4 | 0;
     $1067 = HEAP32[$1066 >> 2] | 0;
     $1069 = HEAP32[$db + 8 >> 2] | 0;
     if ($1067 >>> 0 < $1069 >>> 0) {
      if (!$1067) $1074 = 0; else {
       HEAP32[$1067 + 0 >> 2] = HEAP32[$29 + 0 >> 2];
       HEAP32[$1067 + 4 >> 2] = HEAP32[$29 + 4 >> 2];
       HEAP32[$1067 + 8 >> 2] = HEAP32[$29 + 8 >> 2];
       HEAP32[$29 + 0 >> 2] = 0;
       HEAP32[$29 + 4 >> 2] = 0;
       HEAP32[$29 + 8 >> 2] = 0;
       $1072 = $1067 + 12 | 0;
       HEAP32[$1072 + 0 >> 2] = HEAP32[$1065 + 0 >> 2];
       HEAP32[$1072 + 4 >> 2] = HEAP32[$1065 + 4 >> 2];
       HEAP32[$1072 + 8 >> 2] = HEAP32[$1065 + 8 >> 2];
       HEAP32[$1065 + 0 >> 2] = 0;
       HEAP32[$1065 + 4 >> 2] = 0;
       HEAP32[$1065 + 8 >> 2] = 0;
       $1074 = HEAP32[$1066 >> 2] | 0;
      }
      HEAP32[$1066 >> 2] = $1074 + 24;
     } else {
      $1078 = HEAP32[$db >> 2] | 0;
      $1080 = ($1067 - $1078 | 0) / 24 | 0;
      $1081 = $1080 + 1 | 0;
      if (($1081 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $1085 = ($1069 - $1078 | 0) / 24 | 0;
      if ($1085 >>> 0 < 1073741823) {
       $1087 = $1085 << 1;
       $$0$i$i$i257 = $1087 >>> 0 < $1081 >>> 0 ? $1081 : $1087;
      } else $$0$i$i$i257 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i257, $1080, $db + 12 | 0);
      $1090 = $__v$i$i395 + 8 | 0;
      $1091 = HEAP32[$1090 >> 2] | 0;
      if ($1091) {
       HEAP32[$1091 + 0 >> 2] = HEAP32[$29 + 0 >> 2];
       HEAP32[$1091 + 4 >> 2] = HEAP32[$29 + 4 >> 2];
       HEAP32[$1091 + 8 >> 2] = HEAP32[$29 + 8 >> 2];
       HEAP32[$29 + 0 >> 2] = 0;
       HEAP32[$29 + 4 >> 2] = 0;
       HEAP32[$29 + 8 >> 2] = 0;
       $1093 = $1091 + 12 | 0;
       HEAP32[$1093 + 0 >> 2] = HEAP32[$1065 + 0 >> 2];
       HEAP32[$1093 + 4 >> 2] = HEAP32[$1065 + 4 >> 2];
       HEAP32[$1093 + 8 >> 2] = HEAP32[$1065 + 8 >> 2];
       HEAP32[$1065 + 0 >> 2] = 0;
       HEAP32[$1065 + 4 >> 2] = 0;
       HEAP32[$1065 + 8 >> 2] = 0;
      }
      HEAP32[$1090 >> 2] = $1091 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 101:
    {
     HEAP8[$28 >> 0] = 20;
     dest = $28 + 1 | 0;
     src = 60032;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$28 + 11 >> 0] = 0;
     $1032 = $28 + 12 | 0;
     HEAP32[$1032 + 0 >> 2] = 0;
     HEAP32[$1032 + 4 >> 2] = 0;
     HEAP32[$1032 + 8 >> 2] = 0;
     $1033 = $db + 4 | 0;
     $1034 = HEAP32[$1033 >> 2] | 0;
     $1036 = HEAP32[$db + 8 >> 2] | 0;
     if ($1034 >>> 0 < $1036 >>> 0) {
      if (!$1034) $1041 = 0; else {
       HEAP32[$1034 + 0 >> 2] = HEAP32[$28 + 0 >> 2];
       HEAP32[$1034 + 4 >> 2] = HEAP32[$28 + 4 >> 2];
       HEAP32[$1034 + 8 >> 2] = HEAP32[$28 + 8 >> 2];
       HEAP32[$28 + 0 >> 2] = 0;
       HEAP32[$28 + 4 >> 2] = 0;
       HEAP32[$28 + 8 >> 2] = 0;
       $1039 = $1034 + 12 | 0;
       HEAP32[$1039 + 0 >> 2] = HEAP32[$1032 + 0 >> 2];
       HEAP32[$1039 + 4 >> 2] = HEAP32[$1032 + 4 >> 2];
       HEAP32[$1039 + 8 >> 2] = HEAP32[$1032 + 8 >> 2];
       HEAP32[$1032 + 0 >> 2] = 0;
       HEAP32[$1032 + 4 >> 2] = 0;
       HEAP32[$1032 + 8 >> 2] = 0;
       $1041 = HEAP32[$1033 >> 2] | 0;
      }
      HEAP32[$1033 >> 2] = $1041 + 24;
     } else {
      $1045 = HEAP32[$db >> 2] | 0;
      $1047 = ($1034 - $1045 | 0) / 24 | 0;
      $1048 = $1047 + 1 | 0;
      if (($1048 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $1052 = ($1036 - $1045 | 0) / 24 | 0;
      if ($1052 >>> 0 < 1073741823) {
       $1054 = $1052 << 1;
       $$0$i$i$i248 = $1054 >>> 0 < $1048 >>> 0 ? $1048 : $1054;
      } else $$0$i$i$i248 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i248, $1047, $db + 12 | 0);
      $1057 = $__v$i$i395 + 8 | 0;
      $1058 = HEAP32[$1057 >> 2] | 0;
      if ($1058) {
       HEAP32[$1058 + 0 >> 2] = HEAP32[$28 + 0 >> 2];
       HEAP32[$1058 + 4 >> 2] = HEAP32[$28 + 4 >> 2];
       HEAP32[$1058 + 8 >> 2] = HEAP32[$28 + 8 >> 2];
       HEAP32[$28 + 0 >> 2] = 0;
       HEAP32[$28 + 4 >> 2] = 0;
       HEAP32[$28 + 8 >> 2] = 0;
       $1060 = $1058 + 12 | 0;
       HEAP32[$1060 + 0 >> 2] = HEAP32[$1032 + 0 >> 2];
       HEAP32[$1060 + 4 >> 2] = HEAP32[$1032 + 4 >> 2];
       HEAP32[$1060 + 8 >> 2] = HEAP32[$1032 + 8 >> 2];
       HEAP32[$1032 + 0 >> 2] = 0;
       HEAP32[$1032 + 4 >> 2] = 0;
       HEAP32[$1032 + 8 >> 2] = 0;
      }
      HEAP32[$1057 >> 2] = $1058 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 116:
    {
     HEAP8[$30 >> 0] = 18;
     dest = $30 + 1 | 0;
     src = 60048;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$30 + 10 >> 0] = 0;
     $1098 = $30 + 12 | 0;
     HEAP32[$1098 + 0 >> 2] = 0;
     HEAP32[$1098 + 4 >> 2] = 0;
     HEAP32[$1098 + 8 >> 2] = 0;
     $1099 = $db + 4 | 0;
     $1100 = HEAP32[$1099 >> 2] | 0;
     $1102 = HEAP32[$db + 8 >> 2] | 0;
     if ($1100 >>> 0 < $1102 >>> 0) {
      if (!$1100) $1107 = 0; else {
       HEAP32[$1100 + 0 >> 2] = HEAP32[$30 + 0 >> 2];
       HEAP32[$1100 + 4 >> 2] = HEAP32[$30 + 4 >> 2];
       HEAP32[$1100 + 8 >> 2] = HEAP32[$30 + 8 >> 2];
       HEAP32[$30 + 0 >> 2] = 0;
       HEAP32[$30 + 4 >> 2] = 0;
       HEAP32[$30 + 8 >> 2] = 0;
       $1105 = $1100 + 12 | 0;
       HEAP32[$1105 + 0 >> 2] = HEAP32[$1098 + 0 >> 2];
       HEAP32[$1105 + 4 >> 2] = HEAP32[$1098 + 4 >> 2];
       HEAP32[$1105 + 8 >> 2] = HEAP32[$1098 + 8 >> 2];
       HEAP32[$1098 + 0 >> 2] = 0;
       HEAP32[$1098 + 4 >> 2] = 0;
       HEAP32[$1098 + 8 >> 2] = 0;
       $1107 = HEAP32[$1099 >> 2] | 0;
      }
      HEAP32[$1099 >> 2] = $1107 + 24;
     } else {
      $1111 = HEAP32[$db >> 2] | 0;
      $1113 = ($1100 - $1111 | 0) / 24 | 0;
      $1114 = $1113 + 1 | 0;
      if (($1114 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $1118 = ($1102 - $1111 | 0) / 24 | 0;
      if ($1118 >>> 0 < 1073741823) {
       $1120 = $1118 << 1;
       $$0$i$i$i266 = $1120 >>> 0 < $1114 >>> 0 ? $1114 : $1120;
      } else $$0$i$i$i266 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i266, $1113, $db + 12 | 0);
      $1123 = $__v$i$i395 + 8 | 0;
      $1124 = HEAP32[$1123 >> 2] | 0;
      if ($1124) {
       HEAP32[$1124 + 0 >> 2] = HEAP32[$30 + 0 >> 2];
       HEAP32[$1124 + 4 >> 2] = HEAP32[$30 + 4 >> 2];
       HEAP32[$1124 + 8 >> 2] = HEAP32[$30 + 8 >> 2];
       HEAP32[$30 + 0 >> 2] = 0;
       HEAP32[$30 + 4 >> 2] = 0;
       HEAP32[$30 + 8 >> 2] = 0;
       $1126 = $1124 + 12 | 0;
       HEAP32[$1126 + 0 >> 2] = HEAP32[$1098 + 0 >> 2];
       HEAP32[$1126 + 4 >> 2] = HEAP32[$1098 + 4 >> 2];
       HEAP32[$1126 + 8 >> 2] = HEAP32[$1098 + 8 >> 2];
       HEAP32[$1098 + 0 >> 2] = 0;
       HEAP32[$1098 + 4 >> 2] = 0;
       HEAP32[$1098 + 8 >> 2] = 0;
      }
      HEAP32[$1123 >> 2] = $1124 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 119:
    {
     $1129 = _malloc(16) | 0;
     HEAP32[$31 + 8 >> 2] = $1129;
     HEAP32[$31 >> 2] = 17;
     HEAP32[$31 + 4 >> 2] = 12;
     dest = $1129 + 0 | 0;
     src = 60064;
     stop = dest + 12 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$1129 + 12 >> 0] = 0;
     $1133 = $31 + 12 | 0;
     HEAP32[$1133 + 0 >> 2] = 0;
     HEAP32[$1133 + 4 >> 2] = 0;
     HEAP32[$1133 + 8 >> 2] = 0;
     $1134 = $db + 4 | 0;
     $1135 = HEAP32[$1134 >> 2] | 0;
     $1137 = HEAP32[$db + 8 >> 2] | 0;
     if ($1135 >>> 0 < $1137 >>> 0) {
      if (!$1135) $1142 = 0; else {
       HEAP32[$1135 + 0 >> 2] = HEAP32[$31 + 0 >> 2];
       HEAP32[$1135 + 4 >> 2] = HEAP32[$31 + 4 >> 2];
       HEAP32[$1135 + 8 >> 2] = HEAP32[$31 + 8 >> 2];
       HEAP32[$31 + 0 >> 2] = 0;
       HEAP32[$31 + 4 >> 2] = 0;
       HEAP32[$31 + 8 >> 2] = 0;
       $1140 = $1135 + 12 | 0;
       HEAP32[$1140 + 0 >> 2] = HEAP32[$1133 + 0 >> 2];
       HEAP32[$1140 + 4 >> 2] = HEAP32[$1133 + 4 >> 2];
       HEAP32[$1140 + 8 >> 2] = HEAP32[$1133 + 8 >> 2];
       HEAP32[$1133 + 0 >> 2] = 0;
       HEAP32[$1133 + 4 >> 2] = 0;
       HEAP32[$1133 + 8 >> 2] = 0;
       $1142 = HEAP32[$1134 >> 2] | 0;
      }
      HEAP32[$1134 >> 2] = $1142 + 24;
     } else {
      $1146 = HEAP32[$db >> 2] | 0;
      $1148 = ($1135 - $1146 | 0) / 24 | 0;
      $1149 = $1148 + 1 | 0;
      if (($1149 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $1153 = ($1137 - $1146 | 0) / 24 | 0;
      if ($1153 >>> 0 < 1073741823) {
       $1155 = $1153 << 1;
       $$0$i$i$i274 = $1155 >>> 0 < $1149 >>> 0 ? $1149 : $1155;
      } else $$0$i$i$i274 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i274, $1148, $db + 12 | 0);
      $1158 = $__v$i$i395 + 8 | 0;
      $1159 = HEAP32[$1158 >> 2] | 0;
      if ($1159) {
       HEAP32[$1159 + 0 >> 2] = HEAP32[$31 + 0 >> 2];
       HEAP32[$1159 + 4 >> 2] = HEAP32[$31 + 4 >> 2];
       HEAP32[$1159 + 8 >> 2] = HEAP32[$31 + 8 >> 2];
       HEAP32[$31 + 0 >> 2] = 0;
       HEAP32[$31 + 4 >> 2] = 0;
       HEAP32[$31 + 8 >> 2] = 0;
       $1161 = $1159 + 12 | 0;
       HEAP32[$1161 + 0 >> 2] = HEAP32[$1133 + 0 >> 2];
       HEAP32[$1161 + 4 >> 2] = HEAP32[$1133 + 4 >> 2];
       HEAP32[$1161 + 8 >> 2] = HEAP32[$1133 + 8 >> 2];
       HEAP32[$1133 + 0 >> 2] = 0;
       HEAP32[$1133 + 4 >> 2] = 0;
       HEAP32[$1133 + 8 >> 2] = 0;
      }
      HEAP32[$1158 >> 2] = $1159 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 108:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 116:
    {
     HEAP8[$21 >> 0] = 18;
     dest = $21 + 1 | 0;
     src = 59936;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$21 + 10 >> 0] = 0;
     $793 = $21 + 12 | 0;
     HEAP32[$793 + 0 >> 2] = 0;
     HEAP32[$793 + 4 >> 2] = 0;
     HEAP32[$793 + 8 >> 2] = 0;
     $794 = $db + 4 | 0;
     $795 = HEAP32[$794 >> 2] | 0;
     $797 = HEAP32[$db + 8 >> 2] | 0;
     if ($795 >>> 0 < $797 >>> 0) {
      if (!$795) $802 = 0; else {
       HEAP32[$795 + 0 >> 2] = HEAP32[$21 + 0 >> 2];
       HEAP32[$795 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
       HEAP32[$795 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
       HEAP32[$21 + 0 >> 2] = 0;
       HEAP32[$21 + 4 >> 2] = 0;
       HEAP32[$21 + 8 >> 2] = 0;
       $800 = $795 + 12 | 0;
       HEAP32[$800 + 0 >> 2] = HEAP32[$793 + 0 >> 2];
       HEAP32[$800 + 4 >> 2] = HEAP32[$793 + 4 >> 2];
       HEAP32[$800 + 8 >> 2] = HEAP32[$793 + 8 >> 2];
       HEAP32[$793 + 0 >> 2] = 0;
       HEAP32[$793 + 4 >> 2] = 0;
       HEAP32[$793 + 8 >> 2] = 0;
       $802 = HEAP32[$794 >> 2] | 0;
      }
      HEAP32[$794 >> 2] = $802 + 24;
     } else {
      $806 = HEAP32[$db >> 2] | 0;
      $808 = ($795 - $806 | 0) / 24 | 0;
      $809 = $808 + 1 | 0;
      if (($809 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $813 = ($797 - $806 | 0) / 24 | 0;
      if ($813 >>> 0 < 1073741823) {
       $815 = $813 << 1;
       $$0$i$i$i186 = $815 >>> 0 < $809 >>> 0 ? $809 : $815;
      } else $$0$i$i$i186 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i186, $808, $db + 12 | 0);
      $818 = $__v$i$i395 + 8 | 0;
      $819 = HEAP32[$818 >> 2] | 0;
      if ($819) {
       HEAP32[$819 + 0 >> 2] = HEAP32[$21 + 0 >> 2];
       HEAP32[$819 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
       HEAP32[$819 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
       HEAP32[$21 + 0 >> 2] = 0;
       HEAP32[$21 + 4 >> 2] = 0;
       HEAP32[$21 + 8 >> 2] = 0;
       $821 = $819 + 12 | 0;
       HEAP32[$821 + 0 >> 2] = HEAP32[$793 + 0 >> 2];
       HEAP32[$821 + 4 >> 2] = HEAP32[$793 + 4 >> 2];
       HEAP32[$821 + 8 >> 2] = HEAP32[$793 + 8 >> 2];
       HEAP32[$793 + 0 >> 2] = 0;
       HEAP32[$793 + 4 >> 2] = 0;
       HEAP32[$793 + 8 >> 2] = 0;
      }
      HEAP32[$818 >> 2] = $819 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 83:
    {
     $756 = _malloc(16) | 0;
     HEAP32[$20 + 8 >> 2] = $756;
     HEAP32[$20 >> 2] = 17;
     HEAP32[$20 + 4 >> 2] = 11;
     dest = $756 + 0 | 0;
     src = 59920;
     stop = dest + 11 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$756 + 11 >> 0] = 0;
     $760 = $20 + 12 | 0;
     HEAP32[$760 + 0 >> 2] = 0;
     HEAP32[$760 + 4 >> 2] = 0;
     HEAP32[$760 + 8 >> 2] = 0;
     $761 = $db + 4 | 0;
     $762 = HEAP32[$761 >> 2] | 0;
     $764 = HEAP32[$db + 8 >> 2] | 0;
     if ($762 >>> 0 < $764 >>> 0) {
      if (!$762) $769 = 0; else {
       HEAP32[$762 + 0 >> 2] = HEAP32[$20 + 0 >> 2];
       HEAP32[$762 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
       HEAP32[$762 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
       HEAP32[$20 + 0 >> 2] = 0;
       HEAP32[$20 + 4 >> 2] = 0;
       HEAP32[$20 + 8 >> 2] = 0;
       $767 = $762 + 12 | 0;
       HEAP32[$767 + 0 >> 2] = HEAP32[$760 + 0 >> 2];
       HEAP32[$767 + 4 >> 2] = HEAP32[$760 + 4 >> 2];
       HEAP32[$767 + 8 >> 2] = HEAP32[$760 + 8 >> 2];
       HEAP32[$760 + 0 >> 2] = 0;
       HEAP32[$760 + 4 >> 2] = 0;
       HEAP32[$760 + 8 >> 2] = 0;
       $769 = HEAP32[$761 >> 2] | 0;
      }
      HEAP32[$761 >> 2] = $769 + 24;
     } else {
      $773 = HEAP32[$db >> 2] | 0;
      $775 = ($762 - $773 | 0) / 24 | 0;
      $776 = $775 + 1 | 0;
      if (($776 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $780 = ($764 - $773 | 0) / 24 | 0;
      if ($780 >>> 0 < 1073741823) {
       $782 = $780 << 1;
       $$0$i$i$i177 = $782 >>> 0 < $776 >>> 0 ? $776 : $782;
      } else $$0$i$i$i177 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i177, $775, $db + 12 | 0);
      $785 = $__v$i$i395 + 8 | 0;
      $786 = HEAP32[$785 >> 2] | 0;
      if ($786) {
       HEAP32[$786 + 0 >> 2] = HEAP32[$20 + 0 >> 2];
       HEAP32[$786 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
       HEAP32[$786 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
       HEAP32[$20 + 0 >> 2] = 0;
       HEAP32[$20 + 4 >> 2] = 0;
       HEAP32[$20 + 8 >> 2] = 0;
       $788 = $786 + 12 | 0;
       HEAP32[$788 + 0 >> 2] = HEAP32[$760 + 0 >> 2];
       HEAP32[$788 + 4 >> 2] = HEAP32[$760 + 4 >> 2];
       HEAP32[$788 + 8 >> 2] = HEAP32[$760 + 8 >> 2];
       HEAP32[$760 + 0 >> 2] = 0;
       HEAP32[$760 + 4 >> 2] = 0;
       HEAP32[$760 + 8 >> 2] = 0;
      }
      HEAP32[$785 >> 2] = $786 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 101:
    {
     HEAP8[$18 >> 0] = 20;
     dest = $18 + 1 | 0;
     src = 59872;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$18 + 11 >> 0] = 0;
     $684 = $18 + 12 | 0;
     HEAP32[$684 + 0 >> 2] = 0;
     HEAP32[$684 + 4 >> 2] = 0;
     HEAP32[$684 + 8 >> 2] = 0;
     $685 = $db + 4 | 0;
     $686 = HEAP32[$685 >> 2] | 0;
     $688 = HEAP32[$db + 8 >> 2] | 0;
     if ($686 >>> 0 < $688 >>> 0) {
      if (!$686) $693 = 0; else {
       HEAP32[$686 + 0 >> 2] = HEAP32[$18 + 0 >> 2];
       HEAP32[$686 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
       HEAP32[$686 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
       HEAP32[$18 + 0 >> 2] = 0;
       HEAP32[$18 + 4 >> 2] = 0;
       HEAP32[$18 + 8 >> 2] = 0;
       $691 = $686 + 12 | 0;
       HEAP32[$691 + 0 >> 2] = HEAP32[$684 + 0 >> 2];
       HEAP32[$691 + 4 >> 2] = HEAP32[$684 + 4 >> 2];
       HEAP32[$691 + 8 >> 2] = HEAP32[$684 + 8 >> 2];
       HEAP32[$684 + 0 >> 2] = 0;
       HEAP32[$684 + 4 >> 2] = 0;
       HEAP32[$684 + 8 >> 2] = 0;
       $693 = HEAP32[$685 >> 2] | 0;
      }
      HEAP32[$685 >> 2] = $693 + 24;
     } else {
      $697 = HEAP32[$db >> 2] | 0;
      $699 = ($686 - $697 | 0) / 24 | 0;
      $700 = $699 + 1 | 0;
      if (($700 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $704 = ($688 - $697 | 0) / 24 | 0;
      if ($704 >>> 0 < 1073741823) {
       $706 = $704 << 1;
       $$0$i$i$i160 = $706 >>> 0 < $700 >>> 0 ? $700 : $706;
      } else $$0$i$i$i160 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i160, $699, $db + 12 | 0);
      $709 = $__v$i$i395 + 8 | 0;
      $710 = HEAP32[$709 >> 2] | 0;
      if ($710) {
       HEAP32[$710 + 0 >> 2] = HEAP32[$18 + 0 >> 2];
       HEAP32[$710 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
       HEAP32[$710 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
       HEAP32[$18 + 0 >> 2] = 0;
       HEAP32[$18 + 4 >> 2] = 0;
       HEAP32[$18 + 8 >> 2] = 0;
       $712 = $710 + 12 | 0;
       HEAP32[$712 + 0 >> 2] = HEAP32[$684 + 0 >> 2];
       HEAP32[$712 + 4 >> 2] = HEAP32[$684 + 4 >> 2];
       HEAP32[$712 + 8 >> 2] = HEAP32[$684 + 8 >> 2];
       HEAP32[$684 + 0 >> 2] = 0;
       HEAP32[$684 + 4 >> 2] = 0;
       HEAP32[$684 + 8 >> 2] = 0;
      }
      HEAP32[$709 >> 2] = $710 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 105:
    {
     $715 = $first + 2 | 0;
     $716 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($715, $last, $db) | 0;
     if (($716 | 0) == ($715 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $720 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($720 | 0)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($720 + -24 | 0, 0, 59888, 11) | 0;
     $$0 = $716;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 115:
    {
     HEAP8[$19 >> 0] = 20;
     dest = $19 + 1 | 0;
     src = 59904;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$19 + 11 >> 0] = 0;
     $725 = $19 + 12 | 0;
     HEAP32[$725 + 0 >> 2] = 0;
     HEAP32[$725 + 4 >> 2] = 0;
     HEAP32[$725 + 8 >> 2] = 0;
     $726 = $db + 4 | 0;
     $727 = HEAP32[$726 >> 2] | 0;
     $729 = HEAP32[$db + 8 >> 2] | 0;
     if ($727 >>> 0 < $729 >>> 0) {
      if (!$727) $734 = 0; else {
       HEAP32[$727 + 0 >> 2] = HEAP32[$19 + 0 >> 2];
       HEAP32[$727 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
       HEAP32[$727 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
       HEAP32[$19 + 0 >> 2] = 0;
       HEAP32[$19 + 4 >> 2] = 0;
       HEAP32[$19 + 8 >> 2] = 0;
       $732 = $727 + 12 | 0;
       HEAP32[$732 + 0 >> 2] = HEAP32[$725 + 0 >> 2];
       HEAP32[$732 + 4 >> 2] = HEAP32[$725 + 4 >> 2];
       HEAP32[$732 + 8 >> 2] = HEAP32[$725 + 8 >> 2];
       HEAP32[$725 + 0 >> 2] = 0;
       HEAP32[$725 + 4 >> 2] = 0;
       HEAP32[$725 + 8 >> 2] = 0;
       $734 = HEAP32[$726 >> 2] | 0;
      }
      HEAP32[$726 >> 2] = $734 + 24;
     } else {
      $738 = HEAP32[$db >> 2] | 0;
      $740 = ($727 - $738 | 0) / 24 | 0;
      $741 = $740 + 1 | 0;
      if (($741 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $745 = ($729 - $738 | 0) / 24 | 0;
      if ($745 >>> 0 < 1073741823) {
       $747 = $745 << 1;
       $$0$i$i$i169 = $747 >>> 0 < $741 >>> 0 ? $741 : $747;
      } else $$0$i$i$i169 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i169, $740, $db + 12 | 0);
      $750 = $__v$i$i395 + 8 | 0;
      $751 = HEAP32[$750 >> 2] | 0;
      if ($751) {
       HEAP32[$751 + 0 >> 2] = HEAP32[$19 + 0 >> 2];
       HEAP32[$751 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
       HEAP32[$751 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
       HEAP32[$19 + 0 >> 2] = 0;
       HEAP32[$19 + 4 >> 2] = 0;
       HEAP32[$19 + 8 >> 2] = 0;
       $753 = $751 + 12 | 0;
       HEAP32[$753 + 0 >> 2] = HEAP32[$725 + 0 >> 2];
       HEAP32[$753 + 4 >> 2] = HEAP32[$725 + 4 >> 2];
       HEAP32[$753 + 8 >> 2] = HEAP32[$725 + 8 >> 2];
       HEAP32[$725 + 0 >> 2] = 0;
       HEAP32[$725 + 4 >> 2] = 0;
       HEAP32[$725 + 8 >> 2] = 0;
      }
      HEAP32[$750 >> 2] = $751 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 111:
  {
   $1166 = HEAP8[$first + 1 >> 0] | 0;
   if (($1166 | 0) == 114) {
    HEAP8[$33 >> 0] = 18;
    dest = $33 + 1 | 0;
    src = 60096;
    stop = dest + 9 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$33 + 10 >> 0] = 0;
    $1202 = $33 + 12 | 0;
    HEAP32[$1202 + 0 >> 2] = 0;
    HEAP32[$1202 + 4 >> 2] = 0;
    HEAP32[$1202 + 8 >> 2] = 0;
    $1203 = $db + 4 | 0;
    $1204 = HEAP32[$1203 >> 2] | 0;
    $1206 = HEAP32[$db + 8 >> 2] | 0;
    if ($1204 >>> 0 < $1206 >>> 0) {
     if (!$1204) $1211 = 0; else {
      HEAP32[$1204 + 0 >> 2] = HEAP32[$33 + 0 >> 2];
      HEAP32[$1204 + 4 >> 2] = HEAP32[$33 + 4 >> 2];
      HEAP32[$1204 + 8 >> 2] = HEAP32[$33 + 8 >> 2];
      HEAP32[$33 + 0 >> 2] = 0;
      HEAP32[$33 + 4 >> 2] = 0;
      HEAP32[$33 + 8 >> 2] = 0;
      $1209 = $1204 + 12 | 0;
      HEAP32[$1209 + 0 >> 2] = HEAP32[$1202 + 0 >> 2];
      HEAP32[$1209 + 4 >> 2] = HEAP32[$1202 + 4 >> 2];
      HEAP32[$1209 + 8 >> 2] = HEAP32[$1202 + 8 >> 2];
      HEAP32[$1202 + 0 >> 2] = 0;
      HEAP32[$1202 + 4 >> 2] = 0;
      HEAP32[$1202 + 8 >> 2] = 0;
      $1211 = HEAP32[$1203 >> 2] | 0;
     }
     HEAP32[$1203 >> 2] = $1211 + 24;
    } else {
     $1215 = HEAP32[$db >> 2] | 0;
     $1217 = ($1204 - $1215 | 0) / 24 | 0;
     $1218 = $1217 + 1 | 0;
     if (($1218 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $1222 = ($1206 - $1215 | 0) / 24 | 0;
     if ($1222 >>> 0 < 1073741823) {
      $1224 = $1222 << 1;
      $$0$i$i$i292 = $1224 >>> 0 < $1218 >>> 0 ? $1218 : $1224;
     } else $$0$i$i$i292 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i292, $1217, $db + 12 | 0);
     $1227 = $__v$i$i395 + 8 | 0;
     $1228 = HEAP32[$1227 >> 2] | 0;
     if ($1228) {
      HEAP32[$1228 + 0 >> 2] = HEAP32[$33 + 0 >> 2];
      HEAP32[$1228 + 4 >> 2] = HEAP32[$33 + 4 >> 2];
      HEAP32[$1228 + 8 >> 2] = HEAP32[$33 + 8 >> 2];
      HEAP32[$33 + 0 >> 2] = 0;
      HEAP32[$33 + 4 >> 2] = 0;
      HEAP32[$33 + 8 >> 2] = 0;
      $1230 = $1228 + 12 | 0;
      HEAP32[$1230 + 0 >> 2] = HEAP32[$1202 + 0 >> 2];
      HEAP32[$1230 + 4 >> 2] = HEAP32[$1202 + 4 >> 2];
      HEAP32[$1230 + 8 >> 2] = HEAP32[$1202 + 8 >> 2];
      HEAP32[$1202 + 0 >> 2] = 0;
      HEAP32[$1202 + 4 >> 2] = 0;
      HEAP32[$1202 + 8 >> 2] = 0;
     }
     HEAP32[$1227 >> 2] = $1228 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($1166 | 0) == 82) {
    HEAP8[$34 >> 0] = 20;
    dest = $34 + 1 | 0;
    src = 60112;
    stop = dest + 10 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$34 + 11 >> 0] = 0;
    $1235 = $34 + 12 | 0;
    HEAP32[$1235 + 0 >> 2] = 0;
    HEAP32[$1235 + 4 >> 2] = 0;
    HEAP32[$1235 + 8 >> 2] = 0;
    $1236 = $db + 4 | 0;
    $1237 = HEAP32[$1236 >> 2] | 0;
    $1239 = HEAP32[$db + 8 >> 2] | 0;
    if ($1237 >>> 0 < $1239 >>> 0) {
     if (!$1237) $1244 = 0; else {
      HEAP32[$1237 + 0 >> 2] = HEAP32[$34 + 0 >> 2];
      HEAP32[$1237 + 4 >> 2] = HEAP32[$34 + 4 >> 2];
      HEAP32[$1237 + 8 >> 2] = HEAP32[$34 + 8 >> 2];
      HEAP32[$34 + 0 >> 2] = 0;
      HEAP32[$34 + 4 >> 2] = 0;
      HEAP32[$34 + 8 >> 2] = 0;
      $1242 = $1237 + 12 | 0;
      HEAP32[$1242 + 0 >> 2] = HEAP32[$1235 + 0 >> 2];
      HEAP32[$1242 + 4 >> 2] = HEAP32[$1235 + 4 >> 2];
      HEAP32[$1242 + 8 >> 2] = HEAP32[$1235 + 8 >> 2];
      HEAP32[$1235 + 0 >> 2] = 0;
      HEAP32[$1235 + 4 >> 2] = 0;
      HEAP32[$1235 + 8 >> 2] = 0;
      $1244 = HEAP32[$1236 >> 2] | 0;
     }
     HEAP32[$1236 >> 2] = $1244 + 24;
    } else {
     $1248 = HEAP32[$db >> 2] | 0;
     $1250 = ($1237 - $1248 | 0) / 24 | 0;
     $1251 = $1250 + 1 | 0;
     if (($1251 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $1255 = ($1239 - $1248 | 0) / 24 | 0;
     if ($1255 >>> 0 < 1073741823) {
      $1257 = $1255 << 1;
      $$0$i$i$i301 = $1257 >>> 0 < $1251 >>> 0 ? $1251 : $1257;
     } else $$0$i$i$i301 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i301, $1250, $db + 12 | 0);
     $1260 = $__v$i$i395 + 8 | 0;
     $1261 = HEAP32[$1260 >> 2] | 0;
     if ($1261) {
      HEAP32[$1261 + 0 >> 2] = HEAP32[$34 + 0 >> 2];
      HEAP32[$1261 + 4 >> 2] = HEAP32[$34 + 4 >> 2];
      HEAP32[$1261 + 8 >> 2] = HEAP32[$34 + 8 >> 2];
      HEAP32[$34 + 0 >> 2] = 0;
      HEAP32[$34 + 4 >> 2] = 0;
      HEAP32[$34 + 8 >> 2] = 0;
      $1263 = $1261 + 12 | 0;
      HEAP32[$1263 + 0 >> 2] = HEAP32[$1235 + 0 >> 2];
      HEAP32[$1263 + 4 >> 2] = HEAP32[$1235 + 4 >> 2];
      HEAP32[$1263 + 8 >> 2] = HEAP32[$1235 + 8 >> 2];
      HEAP32[$1235 + 0 >> 2] = 0;
      HEAP32[$1235 + 4 >> 2] = 0;
      HEAP32[$1235 + 8 >> 2] = 0;
     }
     HEAP32[$1260 >> 2] = $1261 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($34);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($1166 | 0) == 111) {
    HEAP8[$32 >> 0] = 20;
    dest = $32 + 1 | 0;
    src = 60080;
    stop = dest + 10 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$32 + 11 >> 0] = 0;
    $1169 = $32 + 12 | 0;
    HEAP32[$1169 + 0 >> 2] = 0;
    HEAP32[$1169 + 4 >> 2] = 0;
    HEAP32[$1169 + 8 >> 2] = 0;
    $1170 = $db + 4 | 0;
    $1171 = HEAP32[$1170 >> 2] | 0;
    $1173 = HEAP32[$db + 8 >> 2] | 0;
    if ($1171 >>> 0 < $1173 >>> 0) {
     if (!$1171) $1178 = 0; else {
      HEAP32[$1171 + 0 >> 2] = HEAP32[$32 + 0 >> 2];
      HEAP32[$1171 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
      HEAP32[$1171 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
      HEAP32[$32 + 0 >> 2] = 0;
      HEAP32[$32 + 4 >> 2] = 0;
      HEAP32[$32 + 8 >> 2] = 0;
      $1176 = $1171 + 12 | 0;
      HEAP32[$1176 + 0 >> 2] = HEAP32[$1169 + 0 >> 2];
      HEAP32[$1176 + 4 >> 2] = HEAP32[$1169 + 4 >> 2];
      HEAP32[$1176 + 8 >> 2] = HEAP32[$1169 + 8 >> 2];
      HEAP32[$1169 + 0 >> 2] = 0;
      HEAP32[$1169 + 4 >> 2] = 0;
      HEAP32[$1169 + 8 >> 2] = 0;
      $1178 = HEAP32[$1170 >> 2] | 0;
     }
     HEAP32[$1170 >> 2] = $1178 + 24;
    } else {
     $1182 = HEAP32[$db >> 2] | 0;
     $1184 = ($1171 - $1182 | 0) / 24 | 0;
     $1185 = $1184 + 1 | 0;
     if (($1185 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $1189 = ($1173 - $1182 | 0) / 24 | 0;
     if ($1189 >>> 0 < 1073741823) {
      $1191 = $1189 << 1;
      $$0$i$i$i283 = $1191 >>> 0 < $1185 >>> 0 ? $1185 : $1191;
     } else $$0$i$i$i283 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i283, $1184, $db + 12 | 0);
     $1194 = $__v$i$i395 + 8 | 0;
     $1195 = HEAP32[$1194 >> 2] | 0;
     if ($1195) {
      HEAP32[$1195 + 0 >> 2] = HEAP32[$32 + 0 >> 2];
      HEAP32[$1195 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
      HEAP32[$1195 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
      HEAP32[$32 + 0 >> 2] = 0;
      HEAP32[$32 + 4 >> 2] = 0;
      HEAP32[$32 + 8 >> 2] = 0;
      $1197 = $1195 + 12 | 0;
      HEAP32[$1197 + 0 >> 2] = HEAP32[$1169 + 0 >> 2];
      HEAP32[$1197 + 4 >> 2] = HEAP32[$1169 + 4 >> 2];
      HEAP32[$1197 + 8 >> 2] = HEAP32[$1169 + 8 >> 2];
      HEAP32[$1169 + 0 >> 2] = 0;
      HEAP32[$1169 + 4 >> 2] = 0;
      HEAP32[$1169 + 8 >> 2] = 0;
     }
     HEAP32[$1194 >> 2] = $1195 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 112:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 109:
    {
     $1269 = _malloc(16) | 0;
     HEAP32[$35 + 8 >> 2] = $1269;
     HEAP32[$35 >> 2] = 17;
     HEAP32[$35 + 4 >> 2] = 11;
     dest = $1269 + 0 | 0;
     src = 60128;
     stop = dest + 11 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$1269 + 11 >> 0] = 0;
     $1273 = $35 + 12 | 0;
     HEAP32[$1273 + 0 >> 2] = 0;
     HEAP32[$1273 + 4 >> 2] = 0;
     HEAP32[$1273 + 8 >> 2] = 0;
     $1274 = $db + 4 | 0;
     $1275 = HEAP32[$1274 >> 2] | 0;
     $1277 = HEAP32[$db + 8 >> 2] | 0;
     if ($1275 >>> 0 < $1277 >>> 0) {
      if (!$1275) $1282 = 0; else {
       HEAP32[$1275 + 0 >> 2] = HEAP32[$35 + 0 >> 2];
       HEAP32[$1275 + 4 >> 2] = HEAP32[$35 + 4 >> 2];
       HEAP32[$1275 + 8 >> 2] = HEAP32[$35 + 8 >> 2];
       HEAP32[$35 + 0 >> 2] = 0;
       HEAP32[$35 + 4 >> 2] = 0;
       HEAP32[$35 + 8 >> 2] = 0;
       $1280 = $1275 + 12 | 0;
       HEAP32[$1280 + 0 >> 2] = HEAP32[$1273 + 0 >> 2];
       HEAP32[$1280 + 4 >> 2] = HEAP32[$1273 + 4 >> 2];
       HEAP32[$1280 + 8 >> 2] = HEAP32[$1273 + 8 >> 2];
       HEAP32[$1273 + 0 >> 2] = 0;
       HEAP32[$1273 + 4 >> 2] = 0;
       HEAP32[$1273 + 8 >> 2] = 0;
       $1282 = HEAP32[$1274 >> 2] | 0;
      }
      HEAP32[$1274 >> 2] = $1282 + 24;
     } else {
      $1286 = HEAP32[$db >> 2] | 0;
      $1288 = ($1275 - $1286 | 0) / 24 | 0;
      $1289 = $1288 + 1 | 0;
      if (($1289 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $1293 = ($1277 - $1286 | 0) / 24 | 0;
      if ($1293 >>> 0 < 1073741823) {
       $1295 = $1293 << 1;
       $$0$i$i$i309 = $1295 >>> 0 < $1289 >>> 0 ? $1289 : $1295;
      } else $$0$i$i$i309 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i309, $1288, $db + 12 | 0);
      $1298 = $__v$i$i395 + 8 | 0;
      $1299 = HEAP32[$1298 >> 2] | 0;
      if ($1299) {
       HEAP32[$1299 + 0 >> 2] = HEAP32[$35 + 0 >> 2];
       HEAP32[$1299 + 4 >> 2] = HEAP32[$35 + 4 >> 2];
       HEAP32[$1299 + 8 >> 2] = HEAP32[$35 + 8 >> 2];
       HEAP32[$35 + 0 >> 2] = 0;
       HEAP32[$35 + 4 >> 2] = 0;
       HEAP32[$35 + 8 >> 2] = 0;
       $1301 = $1299 + 12 | 0;
       HEAP32[$1301 + 0 >> 2] = HEAP32[$1273 + 0 >> 2];
       HEAP32[$1301 + 4 >> 2] = HEAP32[$1273 + 4 >> 2];
       HEAP32[$1301 + 8 >> 2] = HEAP32[$1273 + 8 >> 2];
       HEAP32[$1273 + 0 >> 2] = 0;
       HEAP32[$1273 + 4 >> 2] = 0;
       HEAP32[$1273 + 8 >> 2] = 0;
      }
      HEAP32[$1298 >> 2] = $1299 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 116:
    {
     HEAP8[$40 >> 0] = 20;
     dest = $40 + 1 | 0;
     src = 60192;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$40 + 11 >> 0] = 0;
     $1438 = $40 + 12 | 0;
     HEAP32[$1438 + 0 >> 2] = 0;
     HEAP32[$1438 + 4 >> 2] = 0;
     HEAP32[$1438 + 8 >> 2] = 0;
     $1439 = $db + 4 | 0;
     $1440 = HEAP32[$1439 >> 2] | 0;
     $1442 = HEAP32[$db + 8 >> 2] | 0;
     if ($1440 >>> 0 < $1442 >>> 0) {
      if (!$1440) $1447 = 0; else {
       HEAP32[$1440 + 0 >> 2] = HEAP32[$40 + 0 >> 2];
       HEAP32[$1440 + 4 >> 2] = HEAP32[$40 + 4 >> 2];
       HEAP32[$1440 + 8 >> 2] = HEAP32[$40 + 8 >> 2];
       HEAP32[$40 + 0 >> 2] = 0;
       HEAP32[$40 + 4 >> 2] = 0;
       HEAP32[$40 + 8 >> 2] = 0;
       $1445 = $1440 + 12 | 0;
       HEAP32[$1445 + 0 >> 2] = HEAP32[$1438 + 0 >> 2];
       HEAP32[$1445 + 4 >> 2] = HEAP32[$1438 + 4 >> 2];
       HEAP32[$1445 + 8 >> 2] = HEAP32[$1438 + 8 >> 2];
       HEAP32[$1438 + 0 >> 2] = 0;
       HEAP32[$1438 + 4 >> 2] = 0;
       HEAP32[$1438 + 8 >> 2] = 0;
       $1447 = HEAP32[$1439 >> 2] | 0;
      }
      HEAP32[$1439 >> 2] = $1447 + 24;
     } else {
      $1451 = HEAP32[$db >> 2] | 0;
      $1453 = ($1440 - $1451 | 0) / 24 | 0;
      $1454 = $1453 + 1 | 0;
      if (($1454 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $1458 = ($1442 - $1451 | 0) / 24 | 0;
      if ($1458 >>> 0 < 1073741823) {
       $1460 = $1458 << 1;
       $$0$i$i$i354 = $1460 >>> 0 < $1454 >>> 0 ? $1454 : $1460;
      } else $$0$i$i$i354 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i354, $1453, $db + 12 | 0);
      $1463 = $__v$i$i395 + 8 | 0;
      $1464 = HEAP32[$1463 >> 2] | 0;
      if ($1464) {
       HEAP32[$1464 + 0 >> 2] = HEAP32[$40 + 0 >> 2];
       HEAP32[$1464 + 4 >> 2] = HEAP32[$40 + 4 >> 2];
       HEAP32[$1464 + 8 >> 2] = HEAP32[$40 + 8 >> 2];
       HEAP32[$40 + 0 >> 2] = 0;
       HEAP32[$40 + 4 >> 2] = 0;
       HEAP32[$40 + 8 >> 2] = 0;
       $1466 = $1464 + 12 | 0;
       HEAP32[$1466 + 0 >> 2] = HEAP32[$1438 + 0 >> 2];
       HEAP32[$1466 + 4 >> 2] = HEAP32[$1438 + 4 >> 2];
       HEAP32[$1466 + 8 >> 2] = HEAP32[$1438 + 8 >> 2];
       HEAP32[$1438 + 0 >> 2] = 0;
       HEAP32[$1438 + 4 >> 2] = 0;
       HEAP32[$1438 + 8 >> 2] = 0;
      }
      HEAP32[$1463 >> 2] = $1464 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 108:
    {
     HEAP8[$36 >> 0] = 18;
     dest = $36 + 1 | 0;
     src = 60144;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$36 + 10 >> 0] = 0;
     $1306 = $36 + 12 | 0;
     HEAP32[$1306 + 0 >> 2] = 0;
     HEAP32[$1306 + 4 >> 2] = 0;
     HEAP32[$1306 + 8 >> 2] = 0;
     $1307 = $db + 4 | 0;
     $1308 = HEAP32[$1307 >> 2] | 0;
     $1310 = HEAP32[$db + 8 >> 2] | 0;
     if ($1308 >>> 0 < $1310 >>> 0) {
      if (!$1308) $1315 = 0; else {
       HEAP32[$1308 + 0 >> 2] = HEAP32[$36 + 0 >> 2];
       HEAP32[$1308 + 4 >> 2] = HEAP32[$36 + 4 >> 2];
       HEAP32[$1308 + 8 >> 2] = HEAP32[$36 + 8 >> 2];
       HEAP32[$36 + 0 >> 2] = 0;
       HEAP32[$36 + 4 >> 2] = 0;
       HEAP32[$36 + 8 >> 2] = 0;
       $1313 = $1308 + 12 | 0;
       HEAP32[$1313 + 0 >> 2] = HEAP32[$1306 + 0 >> 2];
       HEAP32[$1313 + 4 >> 2] = HEAP32[$1306 + 4 >> 2];
       HEAP32[$1313 + 8 >> 2] = HEAP32[$1306 + 8 >> 2];
       HEAP32[$1306 + 0 >> 2] = 0;
       HEAP32[$1306 + 4 >> 2] = 0;
       HEAP32[$1306 + 8 >> 2] = 0;
       $1315 = HEAP32[$1307 >> 2] | 0;
      }
      HEAP32[$1307 >> 2] = $1315 + 24;
     } else {
      $1319 = HEAP32[$db >> 2] | 0;
      $1321 = ($1308 - $1319 | 0) / 24 | 0;
      $1322 = $1321 + 1 | 0;
      if (($1322 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $1326 = ($1310 - $1319 | 0) / 24 | 0;
      if ($1326 >>> 0 < 1073741823) {
       $1328 = $1326 << 1;
       $$0$i$i$i318 = $1328 >>> 0 < $1322 >>> 0 ? $1322 : $1328;
      } else $$0$i$i$i318 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i318, $1321, $db + 12 | 0);
      $1331 = $__v$i$i395 + 8 | 0;
      $1332 = HEAP32[$1331 >> 2] | 0;
      if ($1332) {
       HEAP32[$1332 + 0 >> 2] = HEAP32[$36 + 0 >> 2];
       HEAP32[$1332 + 4 >> 2] = HEAP32[$36 + 4 >> 2];
       HEAP32[$1332 + 8 >> 2] = HEAP32[$36 + 8 >> 2];
       HEAP32[$36 + 0 >> 2] = 0;
       HEAP32[$36 + 4 >> 2] = 0;
       HEAP32[$36 + 8 >> 2] = 0;
       $1334 = $1332 + 12 | 0;
       HEAP32[$1334 + 0 >> 2] = HEAP32[$1306 + 0 >> 2];
       HEAP32[$1334 + 4 >> 2] = HEAP32[$1306 + 4 >> 2];
       HEAP32[$1334 + 8 >> 2] = HEAP32[$1306 + 8 >> 2];
       HEAP32[$1306 + 0 >> 2] = 0;
       HEAP32[$1306 + 4 >> 2] = 0;
       HEAP32[$1306 + 8 >> 2] = 0;
      }
      HEAP32[$1331 >> 2] = $1332 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 76:
    {
     HEAP8[$37 >> 0] = 20;
     dest = $37 + 1 | 0;
     src = 60160;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$37 + 11 >> 0] = 0;
     $1339 = $37 + 12 | 0;
     HEAP32[$1339 + 0 >> 2] = 0;
     HEAP32[$1339 + 4 >> 2] = 0;
     HEAP32[$1339 + 8 >> 2] = 0;
     $1340 = $db + 4 | 0;
     $1341 = HEAP32[$1340 >> 2] | 0;
     $1343 = HEAP32[$db + 8 >> 2] | 0;
     if ($1341 >>> 0 < $1343 >>> 0) {
      if (!$1341) $1348 = 0; else {
       HEAP32[$1341 + 0 >> 2] = HEAP32[$37 + 0 >> 2];
       HEAP32[$1341 + 4 >> 2] = HEAP32[$37 + 4 >> 2];
       HEAP32[$1341 + 8 >> 2] = HEAP32[$37 + 8 >> 2];
       HEAP32[$37 + 0 >> 2] = 0;
       HEAP32[$37 + 4 >> 2] = 0;
       HEAP32[$37 + 8 >> 2] = 0;
       $1346 = $1341 + 12 | 0;
       HEAP32[$1346 + 0 >> 2] = HEAP32[$1339 + 0 >> 2];
       HEAP32[$1346 + 4 >> 2] = HEAP32[$1339 + 4 >> 2];
       HEAP32[$1346 + 8 >> 2] = HEAP32[$1339 + 8 >> 2];
       HEAP32[$1339 + 0 >> 2] = 0;
       HEAP32[$1339 + 4 >> 2] = 0;
       HEAP32[$1339 + 8 >> 2] = 0;
       $1348 = HEAP32[$1340 >> 2] | 0;
      }
      HEAP32[$1340 >> 2] = $1348 + 24;
     } else {
      $1352 = HEAP32[$db >> 2] | 0;
      $1354 = ($1341 - $1352 | 0) / 24 | 0;
      $1355 = $1354 + 1 | 0;
      if (($1355 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $1359 = ($1343 - $1352 | 0) / 24 | 0;
      if ($1359 >>> 0 < 1073741823) {
       $1361 = $1359 << 1;
       $$0$i$i$i327 = $1361 >>> 0 < $1355 >>> 0 ? $1355 : $1361;
      } else $$0$i$i$i327 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i327, $1354, $db + 12 | 0);
      $1364 = $__v$i$i395 + 8 | 0;
      $1365 = HEAP32[$1364 >> 2] | 0;
      if ($1365) {
       HEAP32[$1365 + 0 >> 2] = HEAP32[$37 + 0 >> 2];
       HEAP32[$1365 + 4 >> 2] = HEAP32[$37 + 4 >> 2];
       HEAP32[$1365 + 8 >> 2] = HEAP32[$37 + 8 >> 2];
       HEAP32[$37 + 0 >> 2] = 0;
       HEAP32[$37 + 4 >> 2] = 0;
       HEAP32[$37 + 8 >> 2] = 0;
       $1367 = $1365 + 12 | 0;
       HEAP32[$1367 + 0 >> 2] = HEAP32[$1339 + 0 >> 2];
       HEAP32[$1367 + 4 >> 2] = HEAP32[$1339 + 4 >> 2];
       HEAP32[$1367 + 8 >> 2] = HEAP32[$1339 + 8 >> 2];
       HEAP32[$1339 + 0 >> 2] = 0;
       HEAP32[$1339 + 4 >> 2] = 0;
       HEAP32[$1339 + 8 >> 2] = 0;
      }
      HEAP32[$1364 >> 2] = $1365 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 112:
    {
     HEAP8[$38 >> 0] = 20;
     dest = $38 + 1 | 0;
     src = 60176;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$38 + 11 >> 0] = 0;
     $1372 = $38 + 12 | 0;
     HEAP32[$1372 + 0 >> 2] = 0;
     HEAP32[$1372 + 4 >> 2] = 0;
     HEAP32[$1372 + 8 >> 2] = 0;
     $1373 = $db + 4 | 0;
     $1374 = HEAP32[$1373 >> 2] | 0;
     $1376 = HEAP32[$db + 8 >> 2] | 0;
     if ($1374 >>> 0 < $1376 >>> 0) {
      if (!$1374) $1381 = 0; else {
       HEAP32[$1374 + 0 >> 2] = HEAP32[$38 + 0 >> 2];
       HEAP32[$1374 + 4 >> 2] = HEAP32[$38 + 4 >> 2];
       HEAP32[$1374 + 8 >> 2] = HEAP32[$38 + 8 >> 2];
       HEAP32[$38 + 0 >> 2] = 0;
       HEAP32[$38 + 4 >> 2] = 0;
       HEAP32[$38 + 8 >> 2] = 0;
       $1379 = $1374 + 12 | 0;
       HEAP32[$1379 + 0 >> 2] = HEAP32[$1372 + 0 >> 2];
       HEAP32[$1379 + 4 >> 2] = HEAP32[$1372 + 4 >> 2];
       HEAP32[$1379 + 8 >> 2] = HEAP32[$1372 + 8 >> 2];
       HEAP32[$1372 + 0 >> 2] = 0;
       HEAP32[$1372 + 4 >> 2] = 0;
       HEAP32[$1372 + 8 >> 2] = 0;
       $1381 = HEAP32[$1373 >> 2] | 0;
      }
      HEAP32[$1373 >> 2] = $1381 + 24;
     } else {
      $1385 = HEAP32[$db >> 2] | 0;
      $1387 = ($1374 - $1385 | 0) / 24 | 0;
      $1388 = $1387 + 1 | 0;
      if (($1388 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $1392 = ($1376 - $1385 | 0) / 24 | 0;
      if ($1392 >>> 0 < 1073741823) {
       $1394 = $1392 << 1;
       $$0$i$i$i336 = $1394 >>> 0 < $1388 >>> 0 ? $1388 : $1394;
      } else $$0$i$i$i336 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i336, $1387, $db + 12 | 0);
      $1397 = $__v$i$i395 + 8 | 0;
      $1398 = HEAP32[$1397 >> 2] | 0;
      if ($1398) {
       HEAP32[$1398 + 0 >> 2] = HEAP32[$38 + 0 >> 2];
       HEAP32[$1398 + 4 >> 2] = HEAP32[$38 + 4 >> 2];
       HEAP32[$1398 + 8 >> 2] = HEAP32[$38 + 8 >> 2];
       HEAP32[$38 + 0 >> 2] = 0;
       HEAP32[$38 + 4 >> 2] = 0;
       HEAP32[$38 + 8 >> 2] = 0;
       $1400 = $1398 + 12 | 0;
       HEAP32[$1400 + 0 >> 2] = HEAP32[$1372 + 0 >> 2];
       HEAP32[$1400 + 4 >> 2] = HEAP32[$1372 + 4 >> 2];
       HEAP32[$1400 + 8 >> 2] = HEAP32[$1372 + 8 >> 2];
       HEAP32[$1372 + 0 >> 2] = 0;
       HEAP32[$1372 + 4 >> 2] = 0;
       HEAP32[$1372 + 8 >> 2] = 0;
      }
      HEAP32[$1397 >> 2] = $1398 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 115:
    {
     HEAP8[$39 >> 0] = 18;
     dest = $39 + 1 | 0;
     src = 60144;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$39 + 10 >> 0] = 0;
     $1405 = $39 + 12 | 0;
     HEAP32[$1405 + 0 >> 2] = 0;
     HEAP32[$1405 + 4 >> 2] = 0;
     HEAP32[$1405 + 8 >> 2] = 0;
     $1406 = $db + 4 | 0;
     $1407 = HEAP32[$1406 >> 2] | 0;
     $1409 = HEAP32[$db + 8 >> 2] | 0;
     if ($1407 >>> 0 < $1409 >>> 0) {
      if (!$1407) $1414 = 0; else {
       HEAP32[$1407 + 0 >> 2] = HEAP32[$39 + 0 >> 2];
       HEAP32[$1407 + 4 >> 2] = HEAP32[$39 + 4 >> 2];
       HEAP32[$1407 + 8 >> 2] = HEAP32[$39 + 8 >> 2];
       HEAP32[$39 + 0 >> 2] = 0;
       HEAP32[$39 + 4 >> 2] = 0;
       HEAP32[$39 + 8 >> 2] = 0;
       $1412 = $1407 + 12 | 0;
       HEAP32[$1412 + 0 >> 2] = HEAP32[$1405 + 0 >> 2];
       HEAP32[$1412 + 4 >> 2] = HEAP32[$1405 + 4 >> 2];
       HEAP32[$1412 + 8 >> 2] = HEAP32[$1405 + 8 >> 2];
       HEAP32[$1405 + 0 >> 2] = 0;
       HEAP32[$1405 + 4 >> 2] = 0;
       HEAP32[$1405 + 8 >> 2] = 0;
       $1414 = HEAP32[$1406 >> 2] | 0;
      }
      HEAP32[$1406 >> 2] = $1414 + 24;
     } else {
      $1418 = HEAP32[$db >> 2] | 0;
      $1420 = ($1407 - $1418 | 0) / 24 | 0;
      $1421 = $1420 + 1 | 0;
      if (($1421 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $1425 = ($1409 - $1418 | 0) / 24 | 0;
      if ($1425 >>> 0 < 1073741823) {
       $1427 = $1425 << 1;
       $$0$i$i$i345 = $1427 >>> 0 < $1421 >>> 0 ? $1421 : $1427;
      } else $$0$i$i$i345 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i345, $1420, $db + 12 | 0);
      $1430 = $__v$i$i395 + 8 | 0;
      $1431 = HEAP32[$1430 >> 2] | 0;
      if ($1431) {
       HEAP32[$1431 + 0 >> 2] = HEAP32[$39 + 0 >> 2];
       HEAP32[$1431 + 4 >> 2] = HEAP32[$39 + 4 >> 2];
       HEAP32[$1431 + 8 >> 2] = HEAP32[$39 + 8 >> 2];
       HEAP32[$39 + 0 >> 2] = 0;
       HEAP32[$39 + 4 >> 2] = 0;
       HEAP32[$39 + 8 >> 2] = 0;
       $1433 = $1431 + 12 | 0;
       HEAP32[$1433 + 0 >> 2] = HEAP32[$1405 + 0 >> 2];
       HEAP32[$1433 + 4 >> 2] = HEAP32[$1405 + 4 >> 2];
       HEAP32[$1433 + 8 >> 2] = HEAP32[$1405 + 8 >> 2];
       HEAP32[$1405 + 0 >> 2] = 0;
       HEAP32[$1405 + 4 >> 2] = 0;
       HEAP32[$1405 + 8 >> 2] = 0;
      }
      HEAP32[$1430 >> 2] = $1431 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($39);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 97:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 78:
    {
     HEAP8[$2 >> 0] = 20;
     dest = $2 + 1 | 0;
     src = 59592;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$2 + 11 >> 0] = 0;
     $123 = $2 + 12 | 0;
     HEAP32[$123 + 0 >> 2] = 0;
     HEAP32[$123 + 4 >> 2] = 0;
     HEAP32[$123 + 8 >> 2] = 0;
     $124 = $db + 4 | 0;
     $125 = HEAP32[$124 >> 2] | 0;
     $127 = HEAP32[$db + 8 >> 2] | 0;
     if ($125 >>> 0 < $127 >>> 0) {
      if (!$125) $132 = 0; else {
       HEAP32[$125 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
       HEAP32[$125 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
       HEAP32[$125 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
       HEAP32[$2 + 0 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$2 + 8 >> 2] = 0;
       $130 = $125 + 12 | 0;
       HEAP32[$130 + 0 >> 2] = HEAP32[$123 + 0 >> 2];
       HEAP32[$130 + 4 >> 2] = HEAP32[$123 + 4 >> 2];
       HEAP32[$130 + 8 >> 2] = HEAP32[$123 + 8 >> 2];
       HEAP32[$123 + 0 >> 2] = 0;
       HEAP32[$123 + 4 >> 2] = 0;
       HEAP32[$123 + 8 >> 2] = 0;
       $132 = HEAP32[$124 >> 2] | 0;
      }
      HEAP32[$124 >> 2] = $132 + 24;
     } else {
      $136 = HEAP32[$db >> 2] | 0;
      $138 = ($125 - $136 | 0) / 24 | 0;
      $139 = $138 + 1 | 0;
      if (($139 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $143 = ($127 - $136 | 0) / 24 | 0;
      if ($143 >>> 0 < 1073741823) {
       $145 = $143 << 1;
       $$0$i$i$i17 = $145 >>> 0 < $139 >>> 0 ? $139 : $145;
      } else $$0$i$i$i17 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i17, $138, $db + 12 | 0);
      $148 = $__v$i$i395 + 8 | 0;
      $149 = HEAP32[$148 >> 2] | 0;
      if ($149) {
       HEAP32[$149 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
       HEAP32[$149 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
       HEAP32[$149 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
       HEAP32[$2 + 0 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$2 + 8 >> 2] = 0;
       $151 = $149 + 12 | 0;
       HEAP32[$151 + 0 >> 2] = HEAP32[$123 + 0 >> 2];
       HEAP32[$151 + 4 >> 2] = HEAP32[$123 + 4 >> 2];
       HEAP32[$151 + 8 >> 2] = HEAP32[$123 + 8 >> 2];
       HEAP32[$123 + 0 >> 2] = 0;
       HEAP32[$123 + 4 >> 2] = 0;
       HEAP32[$123 + 8 >> 2] = 0;
      }
      HEAP32[$148 >> 2] = $149 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 83:
    {
     HEAP8[$3 >> 0] = 18;
     dest = $3 + 1 | 0;
     src = 59608;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$3 + 10 >> 0] = 0;
     $156 = $3 + 12 | 0;
     HEAP32[$156 + 0 >> 2] = 0;
     HEAP32[$156 + 4 >> 2] = 0;
     HEAP32[$156 + 8 >> 2] = 0;
     $157 = $db + 4 | 0;
     $158 = HEAP32[$157 >> 2] | 0;
     $160 = HEAP32[$db + 8 >> 2] | 0;
     if ($158 >>> 0 < $160 >>> 0) {
      if (!$158) $165 = 0; else {
       HEAP32[$158 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
       HEAP32[$158 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
       HEAP32[$158 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
       HEAP32[$3 + 0 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$3 + 8 >> 2] = 0;
       $163 = $158 + 12 | 0;
       HEAP32[$163 + 0 >> 2] = HEAP32[$156 + 0 >> 2];
       HEAP32[$163 + 4 >> 2] = HEAP32[$156 + 4 >> 2];
       HEAP32[$163 + 8 >> 2] = HEAP32[$156 + 8 >> 2];
       HEAP32[$156 + 0 >> 2] = 0;
       HEAP32[$156 + 4 >> 2] = 0;
       HEAP32[$156 + 8 >> 2] = 0;
       $165 = HEAP32[$157 >> 2] | 0;
      }
      HEAP32[$157 >> 2] = $165 + 24;
     } else {
      $169 = HEAP32[$db >> 2] | 0;
      $171 = ($158 - $169 | 0) / 24 | 0;
      $172 = $171 + 1 | 0;
      if (($172 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $176 = ($160 - $169 | 0) / 24 | 0;
      if ($176 >>> 0 < 1073741823) {
       $178 = $176 << 1;
       $$0$i$i$i26 = $178 >>> 0 < $172 >>> 0 ? $172 : $178;
      } else $$0$i$i$i26 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i26, $171, $db + 12 | 0);
      $181 = $__v$i$i395 + 8 | 0;
      $182 = HEAP32[$181 >> 2] | 0;
      if ($182) {
       HEAP32[$182 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
       HEAP32[$182 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
       HEAP32[$182 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
       HEAP32[$3 + 0 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$3 + 8 >> 2] = 0;
       $184 = $182 + 12 | 0;
       HEAP32[$184 + 0 >> 2] = HEAP32[$156 + 0 >> 2];
       HEAP32[$184 + 4 >> 2] = HEAP32[$156 + 4 >> 2];
       HEAP32[$184 + 8 >> 2] = HEAP32[$156 + 8 >> 2];
       HEAP32[$156 + 0 >> 2] = 0;
       HEAP32[$156 + 4 >> 2] = 0;
       HEAP32[$156 + 8 >> 2] = 0;
      }
      HEAP32[$181 >> 2] = $182 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 110:
   case 100:
    {
     HEAP8[$1 >> 0] = 18;
     dest = $1 + 1 | 0;
     src = 59576;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$1 + 10 >> 0] = 0;
     $90 = $1 + 12 | 0;
     HEAP32[$90 + 0 >> 2] = 0;
     HEAP32[$90 + 4 >> 2] = 0;
     HEAP32[$90 + 8 >> 2] = 0;
     $91 = $db + 4 | 0;
     $92 = HEAP32[$91 >> 2] | 0;
     $94 = HEAP32[$db + 8 >> 2] | 0;
     if ($92 >>> 0 < $94 >>> 0) {
      if (!$92) $99 = 0; else {
       HEAP32[$92 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
       HEAP32[$92 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
       HEAP32[$92 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
       HEAP32[$1 + 0 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       HEAP32[$1 + 8 >> 2] = 0;
       $97 = $92 + 12 | 0;
       HEAP32[$97 + 0 >> 2] = HEAP32[$90 + 0 >> 2];
       HEAP32[$97 + 4 >> 2] = HEAP32[$90 + 4 >> 2];
       HEAP32[$97 + 8 >> 2] = HEAP32[$90 + 8 >> 2];
       HEAP32[$90 + 0 >> 2] = 0;
       HEAP32[$90 + 4 >> 2] = 0;
       HEAP32[$90 + 8 >> 2] = 0;
       $99 = HEAP32[$91 >> 2] | 0;
      }
      HEAP32[$91 >> 2] = $99 + 24;
     } else {
      $103 = HEAP32[$db >> 2] | 0;
      $105 = ($92 - $103 | 0) / 24 | 0;
      $106 = $105 + 1 | 0;
      if (($106 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $110 = ($94 - $103 | 0) / 24 | 0;
      if ($110 >>> 0 < 1073741823) {
       $112 = $110 << 1;
       $$0$i$i$i8 = $112 >>> 0 < $106 >>> 0 ? $106 : $112;
      } else $$0$i$i$i8 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i8, $105, $db + 12 | 0);
      $115 = $__v$i$i395 + 8 | 0;
      $116 = HEAP32[$115 >> 2] | 0;
      if ($116) {
       HEAP32[$116 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
       HEAP32[$116 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
       HEAP32[$116 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
       HEAP32[$1 + 0 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       HEAP32[$1 + 8 >> 2] = 0;
       $118 = $116 + 12 | 0;
       HEAP32[$118 + 0 >> 2] = HEAP32[$90 + 0 >> 2];
       HEAP32[$118 + 4 >> 2] = HEAP32[$90 + 4 >> 2];
       HEAP32[$118 + 8 >> 2] = HEAP32[$90 + 8 >> 2];
       HEAP32[$90 + 0 >> 2] = 0;
       HEAP32[$90 + 4 >> 2] = 0;
       HEAP32[$90 + 8 >> 2] = 0;
      }
      HEAP32[$115 >> 2] = $116 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 97:
    {
     HEAP8[$0 >> 0] = 20;
     dest = $0 + 1 | 0;
     src = 59560;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$0 + 11 >> 0] = 0;
     $57 = $0 + 12 | 0;
     HEAP32[$57 + 0 >> 2] = 0;
     HEAP32[$57 + 4 >> 2] = 0;
     HEAP32[$57 + 8 >> 2] = 0;
     $58 = $db + 4 | 0;
     $59 = HEAP32[$58 >> 2] | 0;
     $61 = HEAP32[$db + 8 >> 2] | 0;
     if ($59 >>> 0 < $61 >>> 0) {
      if (!$59) $66 = 0; else {
       HEAP32[$59 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
       HEAP32[$59 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
       HEAP32[$59 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
       HEAP32[$0 + 0 >> 2] = 0;
       HEAP32[$0 + 4 >> 2] = 0;
       HEAP32[$0 + 8 >> 2] = 0;
       $64 = $59 + 12 | 0;
       HEAP32[$64 + 0 >> 2] = HEAP32[$57 + 0 >> 2];
       HEAP32[$64 + 4 >> 2] = HEAP32[$57 + 4 >> 2];
       HEAP32[$64 + 8 >> 2] = HEAP32[$57 + 8 >> 2];
       HEAP32[$57 + 0 >> 2] = 0;
       HEAP32[$57 + 4 >> 2] = 0;
       HEAP32[$57 + 8 >> 2] = 0;
       $66 = HEAP32[$58 >> 2] | 0;
      }
      HEAP32[$58 >> 2] = $66 + 24;
     } else {
      $70 = HEAP32[$db >> 2] | 0;
      $72 = ($59 - $70 | 0) / 24 | 0;
      $73 = $72 + 1 | 0;
      if (($73 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $77 = ($61 - $70 | 0) / 24 | 0;
      if ($77 >>> 0 < 1073741823) {
       $79 = $77 << 1;
       $$0$i$i$i = $79 >>> 0 < $73 >>> 0 ? $73 : $79;
      } else $$0$i$i$i = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i, $72, $db + 12 | 0);
      $82 = $__v$i$i395 + 8 | 0;
      $83 = HEAP32[$82 >> 2] | 0;
      if ($83) {
       HEAP32[$83 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
       HEAP32[$83 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
       HEAP32[$83 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
       HEAP32[$0 + 0 >> 2] = 0;
       HEAP32[$0 + 4 >> 2] = 0;
       HEAP32[$0 + 8 >> 2] = 0;
       $85 = $83 + 12 | 0;
       HEAP32[$85 + 0 >> 2] = HEAP32[$57 + 0 >> 2];
       HEAP32[$85 + 4 >> 2] = HEAP32[$57 + 4 >> 2];
       HEAP32[$85 + 8 >> 2] = HEAP32[$57 + 8 >> 2];
       HEAP32[$57 + 0 >> 2] = 0;
       HEAP32[$57 + 4 >> 2] = 0;
       HEAP32[$57 + 8 >> 2] = 0;
      }
      HEAP32[$82 >> 2] = $83 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 118:
  {
   if (((HEAP8[$first + 1 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1645 = $first + 2 | 0;
   $1646 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($1645, $last, $db) | 0;
   if (($1646 | 0) == ($1645 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1650 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($1650 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($1650 + -24 | 0, 0, 59672, 9) | 0;
   $$0 = $1646;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 114:
  {
   $1507 = HEAP8[$first + 1 >> 0] | 0;
   if (($1507 | 0) == 83) {
    $1607 = _malloc(16) | 0;
    HEAP32[$45 + 8 >> 2] = $1607;
    HEAP32[$45 >> 2] = 17;
    HEAP32[$45 + 4 >> 2] = 11;
    dest = $1607 + 0 | 0;
    src = 60272;
    stop = dest + 11 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$1607 + 11 >> 0] = 0;
    $1611 = $45 + 12 | 0;
    HEAP32[$1611 + 0 >> 2] = 0;
    HEAP32[$1611 + 4 >> 2] = 0;
    HEAP32[$1611 + 8 >> 2] = 0;
    $1612 = $db + 4 | 0;
    $1613 = HEAP32[$1612 >> 2] | 0;
    $1615 = HEAP32[$db + 8 >> 2] | 0;
    if ($1613 >>> 0 < $1615 >>> 0) {
     if (!$1613) $1620 = 0; else {
      HEAP32[$1613 + 0 >> 2] = HEAP32[$45 + 0 >> 2];
      HEAP32[$1613 + 4 >> 2] = HEAP32[$45 + 4 >> 2];
      HEAP32[$1613 + 8 >> 2] = HEAP32[$45 + 8 >> 2];
      HEAP32[$45 + 0 >> 2] = 0;
      HEAP32[$45 + 4 >> 2] = 0;
      HEAP32[$45 + 8 >> 2] = 0;
      $1618 = $1613 + 12 | 0;
      HEAP32[$1618 + 0 >> 2] = HEAP32[$1611 + 0 >> 2];
      HEAP32[$1618 + 4 >> 2] = HEAP32[$1611 + 4 >> 2];
      HEAP32[$1618 + 8 >> 2] = HEAP32[$1611 + 8 >> 2];
      HEAP32[$1611 + 0 >> 2] = 0;
      HEAP32[$1611 + 4 >> 2] = 0;
      HEAP32[$1611 + 8 >> 2] = 0;
      $1620 = HEAP32[$1612 >> 2] | 0;
     }
     HEAP32[$1612 >> 2] = $1620 + 24;
    } else {
     $1624 = HEAP32[$db >> 2] | 0;
     $1626 = ($1613 - $1624 | 0) / 24 | 0;
     $1627 = $1626 + 1 | 0;
     if (($1627 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $1631 = ($1615 - $1624 | 0) / 24 | 0;
     if ($1631 >>> 0 < 1073741823) {
      $1633 = $1631 << 1;
      $$0$i$i$i398 = $1633 >>> 0 < $1627 >>> 0 ? $1627 : $1633;
     } else $$0$i$i$i398 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i398, $1626, $db + 12 | 0);
     $1636 = $__v$i$i395 + 8 | 0;
     $1637 = HEAP32[$1636 >> 2] | 0;
     if ($1637) {
      HEAP32[$1637 + 0 >> 2] = HEAP32[$45 + 0 >> 2];
      HEAP32[$1637 + 4 >> 2] = HEAP32[$45 + 4 >> 2];
      HEAP32[$1637 + 8 >> 2] = HEAP32[$45 + 8 >> 2];
      HEAP32[$45 + 0 >> 2] = 0;
      HEAP32[$45 + 4 >> 2] = 0;
      HEAP32[$45 + 8 >> 2] = 0;
      $1639 = $1637 + 12 | 0;
      HEAP32[$1639 + 0 >> 2] = HEAP32[$1611 + 0 >> 2];
      HEAP32[$1639 + 4 >> 2] = HEAP32[$1611 + 4 >> 2];
      HEAP32[$1639 + 8 >> 2] = HEAP32[$1611 + 8 >> 2];
      HEAP32[$1611 + 0 >> 2] = 0;
      HEAP32[$1611 + 4 >> 2] = 0;
      HEAP32[$1611 + 8 >> 2] = 0;
     }
     HEAP32[$1636 >> 2] = $1637 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($1507 | 0) == 115) {
    HEAP8[$44 >> 0] = 20;
    dest = $44 + 1 | 0;
    src = 60256;
    stop = dest + 10 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$44 + 11 >> 0] = 0;
    $1576 = $44 + 12 | 0;
    HEAP32[$1576 + 0 >> 2] = 0;
    HEAP32[$1576 + 4 >> 2] = 0;
    HEAP32[$1576 + 8 >> 2] = 0;
    $1577 = $db + 4 | 0;
    $1578 = HEAP32[$1577 >> 2] | 0;
    $1580 = HEAP32[$db + 8 >> 2] | 0;
    if ($1578 >>> 0 < $1580 >>> 0) {
     if (!$1578) $1585 = 0; else {
      HEAP32[$1578 + 0 >> 2] = HEAP32[$44 + 0 >> 2];
      HEAP32[$1578 + 4 >> 2] = HEAP32[$44 + 4 >> 2];
      HEAP32[$1578 + 8 >> 2] = HEAP32[$44 + 8 >> 2];
      HEAP32[$44 + 0 >> 2] = 0;
      HEAP32[$44 + 4 >> 2] = 0;
      HEAP32[$44 + 8 >> 2] = 0;
      $1583 = $1578 + 12 | 0;
      HEAP32[$1583 + 0 >> 2] = HEAP32[$1576 + 0 >> 2];
      HEAP32[$1583 + 4 >> 2] = HEAP32[$1576 + 4 >> 2];
      HEAP32[$1583 + 8 >> 2] = HEAP32[$1576 + 8 >> 2];
      HEAP32[$1576 + 0 >> 2] = 0;
      HEAP32[$1576 + 4 >> 2] = 0;
      HEAP32[$1576 + 8 >> 2] = 0;
      $1585 = HEAP32[$1577 >> 2] | 0;
     }
     HEAP32[$1577 >> 2] = $1585 + 24;
    } else {
     $1589 = HEAP32[$db >> 2] | 0;
     $1591 = ($1578 - $1589 | 0) / 24 | 0;
     $1592 = $1591 + 1 | 0;
     if (($1592 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $1596 = ($1580 - $1589 | 0) / 24 | 0;
     if ($1596 >>> 0 < 1073741823) {
      $1598 = $1596 << 1;
      $$0$i$i$i390 = $1598 >>> 0 < $1592 >>> 0 ? $1592 : $1598;
     } else $$0$i$i$i390 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i390, $1591, $db + 12 | 0);
     $1601 = $__v$i$i395 + 8 | 0;
     $1602 = HEAP32[$1601 >> 2] | 0;
     if ($1602) {
      HEAP32[$1602 + 0 >> 2] = HEAP32[$44 + 0 >> 2];
      HEAP32[$1602 + 4 >> 2] = HEAP32[$44 + 4 >> 2];
      HEAP32[$1602 + 8 >> 2] = HEAP32[$44 + 8 >> 2];
      HEAP32[$44 + 0 >> 2] = 0;
      HEAP32[$44 + 4 >> 2] = 0;
      HEAP32[$44 + 8 >> 2] = 0;
      $1604 = $1602 + 12 | 0;
      HEAP32[$1604 + 0 >> 2] = HEAP32[$1576 + 0 >> 2];
      HEAP32[$1604 + 4 >> 2] = HEAP32[$1576 + 4 >> 2];
      HEAP32[$1604 + 8 >> 2] = HEAP32[$1576 + 8 >> 2];
      HEAP32[$1576 + 0 >> 2] = 0;
      HEAP32[$1576 + 4 >> 2] = 0;
      HEAP32[$1576 + 8 >> 2] = 0;
     }
     HEAP32[$1601 >> 2] = $1602 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($1507 | 0) == 77) {
    HEAP8[$43 >> 0] = 20;
    dest = $43 + 1 | 0;
    src = 60240;
    stop = dest + 10 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$43 + 11 >> 0] = 0;
    $1543 = $43 + 12 | 0;
    HEAP32[$1543 + 0 >> 2] = 0;
    HEAP32[$1543 + 4 >> 2] = 0;
    HEAP32[$1543 + 8 >> 2] = 0;
    $1544 = $db + 4 | 0;
    $1545 = HEAP32[$1544 >> 2] | 0;
    $1547 = HEAP32[$db + 8 >> 2] | 0;
    if ($1545 >>> 0 < $1547 >>> 0) {
     if (!$1545) $1552 = 0; else {
      HEAP32[$1545 + 0 >> 2] = HEAP32[$43 + 0 >> 2];
      HEAP32[$1545 + 4 >> 2] = HEAP32[$43 + 4 >> 2];
      HEAP32[$1545 + 8 >> 2] = HEAP32[$43 + 8 >> 2];
      HEAP32[$43 + 0 >> 2] = 0;
      HEAP32[$43 + 4 >> 2] = 0;
      HEAP32[$43 + 8 >> 2] = 0;
      $1550 = $1545 + 12 | 0;
      HEAP32[$1550 + 0 >> 2] = HEAP32[$1543 + 0 >> 2];
      HEAP32[$1550 + 4 >> 2] = HEAP32[$1543 + 4 >> 2];
      HEAP32[$1550 + 8 >> 2] = HEAP32[$1543 + 8 >> 2];
      HEAP32[$1543 + 0 >> 2] = 0;
      HEAP32[$1543 + 4 >> 2] = 0;
      HEAP32[$1543 + 8 >> 2] = 0;
      $1552 = HEAP32[$1544 >> 2] | 0;
     }
     HEAP32[$1544 >> 2] = $1552 + 24;
    } else {
     $1556 = HEAP32[$db >> 2] | 0;
     $1558 = ($1545 - $1556 | 0) / 24 | 0;
     $1559 = $1558 + 1 | 0;
     if (($1559 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $1563 = ($1547 - $1556 | 0) / 24 | 0;
     if ($1563 >>> 0 < 1073741823) {
      $1565 = $1563 << 1;
      $$0$i$i$i381 = $1565 >>> 0 < $1559 >>> 0 ? $1559 : $1565;
     } else $$0$i$i$i381 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i381, $1558, $db + 12 | 0);
     $1568 = $__v$i$i395 + 8 | 0;
     $1569 = HEAP32[$1568 >> 2] | 0;
     if ($1569) {
      HEAP32[$1569 + 0 >> 2] = HEAP32[$43 + 0 >> 2];
      HEAP32[$1569 + 4 >> 2] = HEAP32[$43 + 4 >> 2];
      HEAP32[$1569 + 8 >> 2] = HEAP32[$43 + 8 >> 2];
      HEAP32[$43 + 0 >> 2] = 0;
      HEAP32[$43 + 4 >> 2] = 0;
      HEAP32[$43 + 8 >> 2] = 0;
      $1571 = $1569 + 12 | 0;
      HEAP32[$1571 + 0 >> 2] = HEAP32[$1543 + 0 >> 2];
      HEAP32[$1571 + 4 >> 2] = HEAP32[$1543 + 4 >> 2];
      HEAP32[$1571 + 8 >> 2] = HEAP32[$1543 + 8 >> 2];
      HEAP32[$1543 + 0 >> 2] = 0;
      HEAP32[$1543 + 4 >> 2] = 0;
      HEAP32[$1543 + 8 >> 2] = 0;
     }
     HEAP32[$1568 >> 2] = $1569 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($1507 | 0) == 109) {
    HEAP8[$42 >> 0] = 18;
    dest = $42 + 1 | 0;
    src = 60224;
    stop = dest + 9 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP8[$42 + 10 >> 0] = 0;
    $1510 = $42 + 12 | 0;
    HEAP32[$1510 + 0 >> 2] = 0;
    HEAP32[$1510 + 4 >> 2] = 0;
    HEAP32[$1510 + 8 >> 2] = 0;
    $1511 = $db + 4 | 0;
    $1512 = HEAP32[$1511 >> 2] | 0;
    $1514 = HEAP32[$db + 8 >> 2] | 0;
    if ($1512 >>> 0 < $1514 >>> 0) {
     if (!$1512) $1519 = 0; else {
      HEAP32[$1512 + 0 >> 2] = HEAP32[$42 + 0 >> 2];
      HEAP32[$1512 + 4 >> 2] = HEAP32[$42 + 4 >> 2];
      HEAP32[$1512 + 8 >> 2] = HEAP32[$42 + 8 >> 2];
      HEAP32[$42 + 0 >> 2] = 0;
      HEAP32[$42 + 4 >> 2] = 0;
      HEAP32[$42 + 8 >> 2] = 0;
      $1517 = $1512 + 12 | 0;
      HEAP32[$1517 + 0 >> 2] = HEAP32[$1510 + 0 >> 2];
      HEAP32[$1517 + 4 >> 2] = HEAP32[$1510 + 4 >> 2];
      HEAP32[$1517 + 8 >> 2] = HEAP32[$1510 + 8 >> 2];
      HEAP32[$1510 + 0 >> 2] = 0;
      HEAP32[$1510 + 4 >> 2] = 0;
      HEAP32[$1510 + 8 >> 2] = 0;
      $1519 = HEAP32[$1511 >> 2] | 0;
     }
     HEAP32[$1511 >> 2] = $1519 + 24;
    } else {
     $1523 = HEAP32[$db >> 2] | 0;
     $1525 = ($1512 - $1523 | 0) / 24 | 0;
     $1526 = $1525 + 1 | 0;
     if (($1526 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $1530 = ($1514 - $1523 | 0) / 24 | 0;
     if ($1530 >>> 0 < 1073741823) {
      $1532 = $1530 << 1;
      $$0$i$i$i372 = $1532 >>> 0 < $1526 >>> 0 ? $1526 : $1532;
     } else $$0$i$i$i372 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i372, $1525, $db + 12 | 0);
     $1535 = $__v$i$i395 + 8 | 0;
     $1536 = HEAP32[$1535 >> 2] | 0;
     if ($1536) {
      HEAP32[$1536 + 0 >> 2] = HEAP32[$42 + 0 >> 2];
      HEAP32[$1536 + 4 >> 2] = HEAP32[$42 + 4 >> 2];
      HEAP32[$1536 + 8 >> 2] = HEAP32[$42 + 8 >> 2];
      HEAP32[$42 + 0 >> 2] = 0;
      HEAP32[$42 + 4 >> 2] = 0;
      HEAP32[$42 + 8 >> 2] = 0;
      $1538 = $1536 + 12 | 0;
      HEAP32[$1538 + 0 >> 2] = HEAP32[$1510 + 0 >> 2];
      HEAP32[$1538 + 4 >> 2] = HEAP32[$1510 + 4 >> 2];
      HEAP32[$1538 + 8 >> 2] = HEAP32[$1510 + 8 >> 2];
      HEAP32[$1510 + 0 >> 2] = 0;
      HEAP32[$1510 + 4 >> 2] = 0;
      HEAP32[$1510 + 8 >> 2] = 0;
     }
     HEAP32[$1535 >> 2] = $1536 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 113:
  {
   if ((HEAP8[$first + 1 >> 0] | 0) != 117) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP8[$41 >> 0] = 18;
   dest = $41 + 1 | 0;
   src = 60208;
   stop = dest + 9 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$41 + 10 >> 0] = 0;
   $1474 = $41 + 12 | 0;
   HEAP32[$1474 + 0 >> 2] = 0;
   HEAP32[$1474 + 4 >> 2] = 0;
   HEAP32[$1474 + 8 >> 2] = 0;
   $1475 = $db + 4 | 0;
   $1476 = HEAP32[$1475 >> 2] | 0;
   $1478 = HEAP32[$db + 8 >> 2] | 0;
   if ($1476 >>> 0 < $1478 >>> 0) {
    if (!$1476) $1483 = 0; else {
     HEAP32[$1476 + 0 >> 2] = HEAP32[$41 + 0 >> 2];
     HEAP32[$1476 + 4 >> 2] = HEAP32[$41 + 4 >> 2];
     HEAP32[$1476 + 8 >> 2] = HEAP32[$41 + 8 >> 2];
     HEAP32[$41 + 0 >> 2] = 0;
     HEAP32[$41 + 4 >> 2] = 0;
     HEAP32[$41 + 8 >> 2] = 0;
     $1481 = $1476 + 12 | 0;
     HEAP32[$1481 + 0 >> 2] = HEAP32[$1474 + 0 >> 2];
     HEAP32[$1481 + 4 >> 2] = HEAP32[$1474 + 4 >> 2];
     HEAP32[$1481 + 8 >> 2] = HEAP32[$1474 + 8 >> 2];
     HEAP32[$1474 + 0 >> 2] = 0;
     HEAP32[$1474 + 4 >> 2] = 0;
     HEAP32[$1474 + 8 >> 2] = 0;
     $1483 = HEAP32[$1475 >> 2] | 0;
    }
    HEAP32[$1475 >> 2] = $1483 + 24;
   } else {
    $1487 = HEAP32[$db >> 2] | 0;
    $1489 = ($1476 - $1487 | 0) / 24 | 0;
    $1490 = $1489 + 1 | 0;
    if (($1490 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $1494 = ($1478 - $1487 | 0) / 24 | 0;
    if ($1494 >>> 0 < 1073741823) {
     $1496 = $1494 << 1;
     $$0$i$i$i363 = $1496 >>> 0 < $1490 >>> 0 ? $1490 : $1496;
    } else $$0$i$i$i363 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i363, $1489, $db + 12 | 0);
    $1499 = $__v$i$i395 + 8 | 0;
    $1500 = HEAP32[$1499 >> 2] | 0;
    if ($1500) {
     HEAP32[$1500 + 0 >> 2] = HEAP32[$41 + 0 >> 2];
     HEAP32[$1500 + 4 >> 2] = HEAP32[$41 + 4 >> 2];
     HEAP32[$1500 + 8 >> 2] = HEAP32[$41 + 8 >> 2];
     HEAP32[$41 + 0 >> 2] = 0;
     HEAP32[$41 + 4 >> 2] = 0;
     HEAP32[$41 + 8 >> 2] = 0;
     $1502 = $1500 + 12 | 0;
     HEAP32[$1502 + 0 >> 2] = HEAP32[$1474 + 0 >> 2];
     HEAP32[$1502 + 4 >> 2] = HEAP32[$1474 + 4 >> 2];
     HEAP32[$1502 + 8 >> 2] = HEAP32[$1474 + 8 >> 2];
     HEAP32[$1474 + 0 >> 2] = 0;
     HEAP32[$1474 + 4 >> 2] = 0;
     HEAP32[$1474 + 8 >> 2] = 0;
    }
    HEAP32[$1499 >> 2] = $1500 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
   $$0 = $first + 2 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 100:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 86:
    {
     HEAP8[$11 >> 0] = 20;
     dest = $11 + 1 | 0;
     src = 59760;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$11 + 11 >> 0] = 0;
     $441 = $11 + 12 | 0;
     HEAP32[$441 + 0 >> 2] = 0;
     HEAP32[$441 + 4 >> 2] = 0;
     HEAP32[$441 + 8 >> 2] = 0;
     $442 = $db + 4 | 0;
     $443 = HEAP32[$442 >> 2] | 0;
     $445 = HEAP32[$db + 8 >> 2] | 0;
     if ($443 >>> 0 < $445 >>> 0) {
      if (!$443) $450 = 0; else {
       HEAP32[$443 + 0 >> 2] = HEAP32[$11 + 0 >> 2];
       HEAP32[$443 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
       HEAP32[$443 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
       HEAP32[$11 + 0 >> 2] = 0;
       HEAP32[$11 + 4 >> 2] = 0;
       HEAP32[$11 + 8 >> 2] = 0;
       $448 = $443 + 12 | 0;
       HEAP32[$448 + 0 >> 2] = HEAP32[$441 + 0 >> 2];
       HEAP32[$448 + 4 >> 2] = HEAP32[$441 + 4 >> 2];
       HEAP32[$448 + 8 >> 2] = HEAP32[$441 + 8 >> 2];
       HEAP32[$441 + 0 >> 2] = 0;
       HEAP32[$441 + 4 >> 2] = 0;
       HEAP32[$441 + 8 >> 2] = 0;
       $450 = HEAP32[$442 >> 2] | 0;
      }
      HEAP32[$442 >> 2] = $450 + 24;
     } else {
      $454 = HEAP32[$db >> 2] | 0;
      $456 = ($443 - $454 | 0) / 24 | 0;
      $457 = $456 + 1 | 0;
      if (($457 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $461 = ($445 - $454 | 0) / 24 | 0;
      if ($461 >>> 0 < 1073741823) {
       $463 = $461 << 1;
       $$0$i$i$i97 = $463 >>> 0 < $457 >>> 0 ? $457 : $463;
      } else $$0$i$i$i97 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i97, $456, $db + 12 | 0);
      $466 = $__v$i$i395 + 8 | 0;
      $467 = HEAP32[$466 >> 2] | 0;
      if ($467) {
       HEAP32[$467 + 0 >> 2] = HEAP32[$11 + 0 >> 2];
       HEAP32[$467 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
       HEAP32[$467 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
       HEAP32[$11 + 0 >> 2] = 0;
       HEAP32[$11 + 4 >> 2] = 0;
       HEAP32[$11 + 8 >> 2] = 0;
       $469 = $467 + 12 | 0;
       HEAP32[$469 + 0 >> 2] = HEAP32[$441 + 0 >> 2];
       HEAP32[$469 + 4 >> 2] = HEAP32[$441 + 4 >> 2];
       HEAP32[$469 + 8 >> 2] = HEAP32[$441 + 8 >> 2];
       HEAP32[$441 + 0 >> 2] = 0;
       HEAP32[$441 + 4 >> 2] = 0;
       HEAP32[$441 + 8 >> 2] = 0;
      }
      HEAP32[$466 >> 2] = $467 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 118:
    {
     HEAP8[$10 >> 0] = 18;
     dest = $10 + 1 | 0;
     src = 59744;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$10 + 10 >> 0] = 0;
     $408 = $10 + 12 | 0;
     HEAP32[$408 + 0 >> 2] = 0;
     HEAP32[$408 + 4 >> 2] = 0;
     HEAP32[$408 + 8 >> 2] = 0;
     $409 = $db + 4 | 0;
     $410 = HEAP32[$409 >> 2] | 0;
     $412 = HEAP32[$db + 8 >> 2] | 0;
     if ($410 >>> 0 < $412 >>> 0) {
      if (!$410) $417 = 0; else {
       HEAP32[$410 + 0 >> 2] = HEAP32[$10 + 0 >> 2];
       HEAP32[$410 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
       HEAP32[$410 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
       HEAP32[$10 + 0 >> 2] = 0;
       HEAP32[$10 + 4 >> 2] = 0;
       HEAP32[$10 + 8 >> 2] = 0;
       $415 = $410 + 12 | 0;
       HEAP32[$415 + 0 >> 2] = HEAP32[$408 + 0 >> 2];
       HEAP32[$415 + 4 >> 2] = HEAP32[$408 + 4 >> 2];
       HEAP32[$415 + 8 >> 2] = HEAP32[$408 + 8 >> 2];
       HEAP32[$408 + 0 >> 2] = 0;
       HEAP32[$408 + 4 >> 2] = 0;
       HEAP32[$408 + 8 >> 2] = 0;
       $417 = HEAP32[$409 >> 2] | 0;
      }
      HEAP32[$409 >> 2] = $417 + 24;
     } else {
      $421 = HEAP32[$db >> 2] | 0;
      $423 = ($410 - $421 | 0) / 24 | 0;
      $424 = $423 + 1 | 0;
      if (($424 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $428 = ($412 - $421 | 0) / 24 | 0;
      if ($428 >>> 0 < 1073741823) {
       $430 = $428 << 1;
       $$0$i$i$i88 = $430 >>> 0 < $424 >>> 0 ? $424 : $430;
      } else $$0$i$i$i88 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i88, $423, $db + 12 | 0);
      $433 = $__v$i$i395 + 8 | 0;
      $434 = HEAP32[$433 >> 2] | 0;
      if ($434) {
       HEAP32[$434 + 0 >> 2] = HEAP32[$10 + 0 >> 2];
       HEAP32[$434 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
       HEAP32[$434 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
       HEAP32[$10 + 0 >> 2] = 0;
       HEAP32[$10 + 4 >> 2] = 0;
       HEAP32[$10 + 8 >> 2] = 0;
       $436 = $434 + 12 | 0;
       HEAP32[$436 + 0 >> 2] = HEAP32[$408 + 0 >> 2];
       HEAP32[$436 + 4 >> 2] = HEAP32[$408 + 4 >> 2];
       HEAP32[$436 + 8 >> 2] = HEAP32[$408 + 8 >> 2];
       HEAP32[$408 + 0 >> 2] = 0;
       HEAP32[$408 + 4 >> 2] = 0;
       HEAP32[$408 + 8 >> 2] = 0;
      }
      HEAP32[$433 >> 2] = $434 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 108:
    {
     $371 = _malloc(16) | 0;
     HEAP32[$9 + 8 >> 2] = $371;
     HEAP32[$9 >> 2] = 17;
     HEAP32[$9 + 4 >> 2] = 15;
     dest = $371 + 0 | 0;
     src = 59728;
     stop = dest + 15 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$371 + 15 >> 0] = 0;
     $375 = $9 + 12 | 0;
     HEAP32[$375 + 0 >> 2] = 0;
     HEAP32[$375 + 4 >> 2] = 0;
     HEAP32[$375 + 8 >> 2] = 0;
     $376 = $db + 4 | 0;
     $377 = HEAP32[$376 >> 2] | 0;
     $379 = HEAP32[$db + 8 >> 2] | 0;
     if ($377 >>> 0 < $379 >>> 0) {
      if (!$377) $384 = 0; else {
       HEAP32[$377 + 0 >> 2] = HEAP32[$9 + 0 >> 2];
       HEAP32[$377 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
       HEAP32[$377 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
       HEAP32[$9 + 0 >> 2] = 0;
       HEAP32[$9 + 4 >> 2] = 0;
       HEAP32[$9 + 8 >> 2] = 0;
       $382 = $377 + 12 | 0;
       HEAP32[$382 + 0 >> 2] = HEAP32[$375 + 0 >> 2];
       HEAP32[$382 + 4 >> 2] = HEAP32[$375 + 4 >> 2];
       HEAP32[$382 + 8 >> 2] = HEAP32[$375 + 8 >> 2];
       HEAP32[$375 + 0 >> 2] = 0;
       HEAP32[$375 + 4 >> 2] = 0;
       HEAP32[$375 + 8 >> 2] = 0;
       $384 = HEAP32[$376 >> 2] | 0;
      }
      HEAP32[$376 >> 2] = $384 + 24;
     } else {
      $388 = HEAP32[$db >> 2] | 0;
      $390 = ($377 - $388 | 0) / 24 | 0;
      $391 = $390 + 1 | 0;
      if (($391 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $395 = ($379 - $388 | 0) / 24 | 0;
      if ($395 >>> 0 < 1073741823) {
       $397 = $395 << 1;
       $$0$i$i$i79 = $397 >>> 0 < $391 >>> 0 ? $391 : $397;
      } else $$0$i$i$i79 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i79, $390, $db + 12 | 0);
      $400 = $__v$i$i395 + 8 | 0;
      $401 = HEAP32[$400 >> 2] | 0;
      if ($401) {
       HEAP32[$401 + 0 >> 2] = HEAP32[$9 + 0 >> 2];
       HEAP32[$401 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
       HEAP32[$401 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
       HEAP32[$9 + 0 >> 2] = 0;
       HEAP32[$9 + 4 >> 2] = 0;
       HEAP32[$9 + 8 >> 2] = 0;
       $403 = $401 + 12 | 0;
       HEAP32[$403 + 0 >> 2] = HEAP32[$375 + 0 >> 2];
       HEAP32[$403 + 4 >> 2] = HEAP32[$375 + 4 >> 2];
       HEAP32[$403 + 8 >> 2] = HEAP32[$375 + 8 >> 2];
       HEAP32[$375 + 0 >> 2] = 0;
       HEAP32[$375 + 4 >> 2] = 0;
       HEAP32[$375 + 8 >> 2] = 0;
      }
      HEAP32[$400 >> 2] = $401 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 97:
    {
     $303 = _malloc(32) | 0;
     HEAP32[$7 + 8 >> 2] = $303;
     HEAP32[$7 >> 2] = 33;
     HEAP32[$7 + 4 >> 2] = 17;
     dest = $303 + 0 | 0;
     src = 59688;
     stop = dest + 17 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$303 + 17 >> 0] = 0;
     $307 = $7 + 12 | 0;
     HEAP32[$307 + 0 >> 2] = 0;
     HEAP32[$307 + 4 >> 2] = 0;
     HEAP32[$307 + 8 >> 2] = 0;
     $308 = $db + 4 | 0;
     $309 = HEAP32[$308 >> 2] | 0;
     $311 = HEAP32[$db + 8 >> 2] | 0;
     if ($309 >>> 0 < $311 >>> 0) {
      if (!$309) $316 = 0; else {
       HEAP32[$309 + 0 >> 2] = HEAP32[$7 + 0 >> 2];
       HEAP32[$309 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
       HEAP32[$309 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
       HEAP32[$7 + 0 >> 2] = 0;
       HEAP32[$7 + 4 >> 2] = 0;
       HEAP32[$7 + 8 >> 2] = 0;
       $314 = $309 + 12 | 0;
       HEAP32[$314 + 0 >> 2] = HEAP32[$307 + 0 >> 2];
       HEAP32[$314 + 4 >> 2] = HEAP32[$307 + 4 >> 2];
       HEAP32[$314 + 8 >> 2] = HEAP32[$307 + 8 >> 2];
       HEAP32[$307 + 0 >> 2] = 0;
       HEAP32[$307 + 4 >> 2] = 0;
       HEAP32[$307 + 8 >> 2] = 0;
       $316 = HEAP32[$308 >> 2] | 0;
      }
      HEAP32[$308 >> 2] = $316 + 24;
     } else {
      $320 = HEAP32[$db >> 2] | 0;
      $322 = ($309 - $320 | 0) / 24 | 0;
      $323 = $322 + 1 | 0;
      if (($323 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $327 = ($311 - $320 | 0) / 24 | 0;
      if ($327 >>> 0 < 1073741823) {
       $329 = $327 << 1;
       $$0$i$i$i61 = $329 >>> 0 < $323 >>> 0 ? $323 : $329;
      } else $$0$i$i$i61 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i61, $322, $db + 12 | 0);
      $332 = $__v$i$i395 + 8 | 0;
      $333 = HEAP32[$332 >> 2] | 0;
      if ($333) {
       HEAP32[$333 + 0 >> 2] = HEAP32[$7 + 0 >> 2];
       HEAP32[$333 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
       HEAP32[$333 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
       HEAP32[$7 + 0 >> 2] = 0;
       HEAP32[$7 + 4 >> 2] = 0;
       HEAP32[$7 + 8 >> 2] = 0;
       $335 = $333 + 12 | 0;
       HEAP32[$335 + 0 >> 2] = HEAP32[$307 + 0 >> 2];
       HEAP32[$335 + 4 >> 2] = HEAP32[$307 + 4 >> 2];
       HEAP32[$335 + 8 >> 2] = HEAP32[$307 + 8 >> 2];
       HEAP32[$307 + 0 >> 2] = 0;
       HEAP32[$307 + 4 >> 2] = 0;
       HEAP32[$307 + 8 >> 2] = 0;
      }
      HEAP32[$332 >> 2] = $333 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 101:
    {
     HEAP8[$8 >> 0] = 18;
     dest = $8 + 1 | 0;
     src = 59712;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$8 + 10 >> 0] = 0;
     $340 = $8 + 12 | 0;
     HEAP32[$340 + 0 >> 2] = 0;
     HEAP32[$340 + 4 >> 2] = 0;
     HEAP32[$340 + 8 >> 2] = 0;
     $341 = $db + 4 | 0;
     $342 = HEAP32[$341 >> 2] | 0;
     $344 = HEAP32[$db + 8 >> 2] | 0;
     if ($342 >>> 0 < $344 >>> 0) {
      if (!$342) $349 = 0; else {
       HEAP32[$342 + 0 >> 2] = HEAP32[$8 + 0 >> 2];
       HEAP32[$342 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
       HEAP32[$342 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
       HEAP32[$8 + 0 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 0;
       HEAP32[$8 + 8 >> 2] = 0;
       $347 = $342 + 12 | 0;
       HEAP32[$347 + 0 >> 2] = HEAP32[$340 + 0 >> 2];
       HEAP32[$347 + 4 >> 2] = HEAP32[$340 + 4 >> 2];
       HEAP32[$347 + 8 >> 2] = HEAP32[$340 + 8 >> 2];
       HEAP32[$340 + 0 >> 2] = 0;
       HEAP32[$340 + 4 >> 2] = 0;
       HEAP32[$340 + 8 >> 2] = 0;
       $349 = HEAP32[$341 >> 2] | 0;
      }
      HEAP32[$341 >> 2] = $349 + 24;
     } else {
      $353 = HEAP32[$db >> 2] | 0;
      $355 = ($342 - $353 | 0) / 24 | 0;
      $356 = $355 + 1 | 0;
      if (($356 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $360 = ($344 - $353 | 0) / 24 | 0;
      if ($360 >>> 0 < 1073741823) {
       $362 = $360 << 1;
       $$0$i$i$i70 = $362 >>> 0 < $356 >>> 0 ? $356 : $362;
      } else $$0$i$i$i70 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i70, $355, $db + 12 | 0);
      $365 = $__v$i$i395 + 8 | 0;
      $366 = HEAP32[$365 >> 2] | 0;
      if ($366) {
       HEAP32[$366 + 0 >> 2] = HEAP32[$8 + 0 >> 2];
       HEAP32[$366 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
       HEAP32[$366 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
       HEAP32[$8 + 0 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 0;
       HEAP32[$8 + 8 >> 2] = 0;
       $368 = $366 + 12 | 0;
       HEAP32[$368 + 0 >> 2] = HEAP32[$340 + 0 >> 2];
       HEAP32[$368 + 4 >> 2] = HEAP32[$340 + 4 >> 2];
       HEAP32[$368 + 8 >> 2] = HEAP32[$340 + 8 >> 2];
       HEAP32[$340 + 0 >> 2] = 0;
       HEAP32[$340 + 4 >> 2] = 0;
       HEAP32[$340 + 8 >> 2] = 0;
      }
      HEAP32[$365 >> 2] = $366 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 105:
  {
   if ((HEAP8[$first + 1 >> 0] | 0) != 120) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP8[$17 >> 0] = 20;
   dest = $17 + 1 | 0;
   src = 59856;
   stop = dest + 10 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$17 + 11 >> 0] = 0;
   $648 = $17 + 12 | 0;
   HEAP32[$648 + 0 >> 2] = 0;
   HEAP32[$648 + 4 >> 2] = 0;
   HEAP32[$648 + 8 >> 2] = 0;
   $649 = $db + 4 | 0;
   $650 = HEAP32[$649 >> 2] | 0;
   $652 = HEAP32[$db + 8 >> 2] | 0;
   if ($650 >>> 0 < $652 >>> 0) {
    if (!$650) $657 = 0; else {
     HEAP32[$650 + 0 >> 2] = HEAP32[$17 + 0 >> 2];
     HEAP32[$650 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
     HEAP32[$650 + 8 >> 2] = HEAP32[$17 + 8 >> 2];
     HEAP32[$17 + 0 >> 2] = 0;
     HEAP32[$17 + 4 >> 2] = 0;
     HEAP32[$17 + 8 >> 2] = 0;
     $655 = $650 + 12 | 0;
     HEAP32[$655 + 0 >> 2] = HEAP32[$648 + 0 >> 2];
     HEAP32[$655 + 4 >> 2] = HEAP32[$648 + 4 >> 2];
     HEAP32[$655 + 8 >> 2] = HEAP32[$648 + 8 >> 2];
     HEAP32[$648 + 0 >> 2] = 0;
     HEAP32[$648 + 4 >> 2] = 0;
     HEAP32[$648 + 8 >> 2] = 0;
     $657 = HEAP32[$649 >> 2] | 0;
    }
    HEAP32[$649 >> 2] = $657 + 24;
   } else {
    $661 = HEAP32[$db >> 2] | 0;
    $663 = ($650 - $661 | 0) / 24 | 0;
    $664 = $663 + 1 | 0;
    if (($664 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $668 = ($652 - $661 | 0) / 24 | 0;
    if ($668 >>> 0 < 1073741823) {
     $670 = $668 << 1;
     $$0$i$i$i151 = $670 >>> 0 < $664 >>> 0 ? $664 : $670;
    } else $$0$i$i$i151 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395, $$0$i$i$i151, $663, $db + 12 | 0);
    $673 = $__v$i$i395 + 8 | 0;
    $674 = HEAP32[$673 >> 2] | 0;
    if ($674) {
     HEAP32[$674 + 0 >> 2] = HEAP32[$17 + 0 >> 2];
     HEAP32[$674 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
     HEAP32[$674 + 8 >> 2] = HEAP32[$17 + 8 >> 2];
     HEAP32[$17 + 0 >> 2] = 0;
     HEAP32[$17 + 4 >> 2] = 0;
     HEAP32[$17 + 8 >> 2] = 0;
     $676 = $674 + 12 | 0;
     HEAP32[$676 + 0 >> 2] = HEAP32[$648 + 0 >> 2];
     HEAP32[$676 + 4 >> 2] = HEAP32[$648 + 4 >> 2];
     HEAP32[$676 + 8 >> 2] = HEAP32[$648 + 8 >> 2];
     HEAP32[$648 + 0 >> 2] = 0;
     HEAP32[$648 + 4 >> 2] = 0;
     HEAP32[$648 + 8 >> 2] = 0;
    }
    HEAP32[$673 >> 2] = $674 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i395);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
   $$0 = $first + 2 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i101 = 0, $$0$i$i$i110 = 0, $$0$i$i$i119 = 0, $$0$i$i$i127 = 0, $$0$i$i$i136 = 0, $$0$i$i$i145 = 0, $$0$i$i$i153 = 0, $$0$i$i$i16 = 0, $$0$i$i$i162 = 0, $$0$i$i$i171 = 0, $$0$i$i$i180 = 0, $$0$i$i$i189 = 0, $$0$i$i$i198 = 0, $$0$i$i$i207 = 0, $$0$i$i$i216 = 0, $$0$i$i$i225 = 0, $$0$i$i$i234 = 0, $$0$i$i$i242 = 0, $$0$i$i$i25 = 0, $$0$i$i$i33 = 0, $$0$i$i$i41 = 0, $$0$i$i$i50 = 0, $$0$i$i$i58 = 0, $$0$i$i$i67 = 0, $$0$i$i$i7 = 0, $$0$i$i$i75 = 0, $$0$i$i$i84 = 0, $$0$i$i$i92 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1002 = 0, $1004 = 0, $1008 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1015 = 0, $1017 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1023 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $120 = 0, $122 = 0, $125 = 0, $126 = 0, $128 = 0, $13 = 0, $131 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $14 = 0, $140 = 0, $142 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $153 = 0, $155 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $164 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $175 = 0, $177 = 0, $18 = 0, $181 = 0, $183 = 0, $184 = 0, $188 = 0, $19 = 0, $190 = 0, $193 = 0, $194 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $203 = 0, $204 = 0, $205 = 0, $207 = 0, $21 = 0, $210 = 0, $212 = 0, $216 = 0, $218 = 0, $219 = 0, $22 = 0, $223 = 0, $225 = 0, $228 = 0, $229 = 0, $23 = 0, $231 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $24 = 0, $240 = 0, $243 = 0, $245 = 0, $249 = 0, $25 = 0, $251 = 0, $252 = 0, $256 = 0, $258 = 0, $26 = 0, $261 = 0, $262 = 0, $264 = 0, $267 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $275 = 0, $278 = 0, $28 = 0, $280 = 0, $284 = 0, $286 = 0, $287 = 0, $291 = 0, $293 = 0, $296 = 0, $297 = 0, $299 = 0, $3 = 0, $302 = 0, $304 = 0, $305 = 0, $306 = 0, $308 = 0, $311 = 0, $313 = 0, $317 = 0, $319 = 0, $32 = 0, $320 = 0, $324 = 0, $326 = 0, $329 = 0, $330 = 0, $332 = 0, $335 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $343 = 0, $346 = 0, $348 = 0, $35 = 0, $352 = 0, $354 = 0, $355 = 0, $359 = 0, $36 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $370 = 0, $372 = 0, $373 = 0, $374 = 0, $376 = 0, $379 = 0, $38 = 0, $381 = 0, $385 = 0, $387 = 0, $388 = 0, $392 = 0, $394 = 0, $397 = 0, $398 = 0, $4 = 0, $400 = 0, $403 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $411 = 0, $414 = 0, $416 = 0, $420 = 0, $422 = 0, $423 = 0, $427 = 0, $429 = 0, $43 = 0, $432 = 0, $433 = 0, $435 = 0, $440 = 0, $441 = 0, $442 = 0, $444 = 0, $447 = 0, $449 = 0, $453 = 0, $455 = 0, $456 = 0, $460 = 0, $462 = 0, $465 = 0, $466 = 0, $468 = 0, $47 = 0, $471 = 0, $475 = 0, $476 = 0, $477 = 0, $479 = 0, $482 = 0, $484 = 0, $488 = 0, $49 = 0, $490 = 0, $491 = 0, $495 = 0, $497 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $503 = 0, $507 = 0, $508 = 0, $510 = 0, $512 = 0, $513 = 0, $514 = 0, $516 = 0, $519 = 0, $521 = 0, $525 = 0, $527 = 0, $528 = 0, $532 = 0, $534 = 0, $537 = 0, $538 = 0, $54 = 0, $540 = 0, $543 = 0, $547 = 0, $548 = 0, $549 = 0, $551 = 0, $554 = 0, $556 = 0, $56 = 0, $560 = 0, $562 = 0, $563 = 0, $567 = 0, $569 = 0, $572 = 0, $573 = 0, $575 = 0, $578 = 0, $580 = 0, $581 = 0, $582 = 0, $584 = 0, $587 = 0, $589 = 0, $59 = 0, $593 = 0, $595 = 0, $596 = 0, $6 = 0, $60 = 0, $600 = 0, $602 = 0, $605 = 0, $606 = 0, $608 = 0, $611 = 0, $613 = 0, $614 = 0, $615 = 0, $617 = 0, $62 = 0, $620 = 0, $622 = 0, $626 = 0, $628 = 0, $629 = 0, $633 = 0, $635 = 0, $638 = 0, $639 = 0, $641 = 0, $644 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $652 = 0, $655 = 0, $657 = 0, $661 = 0, $663 = 0, $664 = 0, $668 = 0, $67 = 0, $670 = 0, $673 = 0, $674 = 0, $676 = 0, $68 = 0, $681 = 0, $682 = 0, $683 = 0, $685 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $696 = 0, $697 = 0, $7 = 0, $701 = 0, $703 = 0, $706 = 0, $707 = 0, $709 = 0, $71 = 0, $712 = 0, $714 = 0, $715 = 0, $716 = 0, $718 = 0, $721 = 0, $723 = 0, $727 = 0, $729 = 0, $730 = 0, $734 = 0, $736 = 0, $739 = 0, $74 = 0, $740 = 0, $742 = 0, $745 = 0, $746 = 0, $748 = 0, $754 = 0, $755 = 0, $756 = 0, $758 = 0, $76 = 0, $761 = 0, $763 = 0, $767 = 0, $769 = 0, $770 = 0, $774 = 0, $776 = 0, $779 = 0, $780 = 0, $782 = 0, $787 = 0, $788 = 0, $789 = 0, $791 = 0, $794 = 0, $796 = 0, $8 = 0, $80 = 0, $800 = 0, $802 = 0, $803 = 0, $807 = 0, $809 = 0, $812 = 0, $813 = 0, $815 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $824 = 0, $827 = 0, $829 = 0, $83 = 0, $833 = 0, $835 = 0, $836 = 0, $840 = 0, $842 = 0, $845 = 0, $846 = 0, $848 = 0, $853 = 0, $854 = 0, $855 = 0, $857 = 0, $860 = 0, $862 = 0, $866 = 0, $868 = 0, $869 = 0, $87 = 0, $873 = 0, $875 = 0, $878 = 0, $879 = 0, $881 = 0, $885 = 0, $886 = 0, $888 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $894 = 0, $897 = 0, $899 = 0, $9 = 0, $903 = 0, $905 = 0, $906 = 0, $910 = 0, $912 = 0, $915 = 0, $916 = 0, $918 = 0, $92 = 0, $922 = 0, $923 = 0, $925 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $931 = 0, $934 = 0, $936 = 0, $940 = 0, $942 = 0, $943 = 0, $947 = 0, $949 = 0, $95 = 0, $952 = 0, $953 = 0, $955 = 0, $958 = 0, $960 = 0, $961 = 0, $962 = 0, $964 = 0, $967 = 0, $969 = 0, $973 = 0, $975 = 0, $976 = 0, $98 = 0, $980 = 0, $982 = 0, $985 = 0, $986 = 0, $988 = 0, $991 = 0, $995 = 0, $996 = 0, $997 = 0, $999 = 0, $__v$i$i239 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720 | 0;
 $__v$i$i239 = sp + 408 | 0;
 $0 = sp + 240 | 0;
 $1 = sp + 192 | 0;
 $2 = sp + 648 | 0;
 $3 = sp + 600 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 72 | 0;
 $6 = sp + 432 | 0;
 $7 = sp + 96 | 0;
 $8 = sp + 120 | 0;
 $9 = sp + 144 | 0;
 $10 = sp + 528 | 0;
 $11 = sp + 576 | 0;
 $12 = sp + 624 | 0;
 $13 = sp + 672 | 0;
 $14 = sp + 696 | 0;
 $15 = sp + 264 | 0;
 $16 = sp + 288 | 0;
 $17 = sp + 312 | 0;
 $18 = sp + 336 | 0;
 $19 = sp + 360 | 0;
 $20 = sp + 384 | 0;
 $21 = sp + 24 | 0;
 $22 = sp + 456 | 0;
 $23 = sp + 480 | 0;
 $24 = sp;
 $25 = sp + 504 | 0;
 $26 = sp + 168 | 0;
 $27 = sp + 552 | 0;
 $28 = sp + 216 | 0;
 if (($first | 0) == ($last | 0)) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do switch (HEAP8[$first >> 0] | 0) {
 case 119:
  {
   HEAP8[$1 >> 0] = 14;
   $65 = $1 + 1 | 0;
   HEAP8[$65 + 0 >> 0] = HEAP8[60736] | 0;
   HEAP8[$65 + 1 >> 0] = HEAP8[60737] | 0;
   HEAP8[$65 + 2 >> 0] = HEAP8[60738] | 0;
   HEAP8[$65 + 3 >> 0] = HEAP8[60739] | 0;
   HEAP8[$65 + 4 >> 0] = HEAP8[60740] | 0;
   HEAP8[$65 + 5 >> 0] = HEAP8[60741] | 0;
   HEAP8[$65 + 6 >> 0] = HEAP8[60742] | 0;
   HEAP8[$1 + 8 >> 0] = 0;
   $67 = $1 + 12 | 0;
   HEAP32[$67 + 0 >> 2] = 0;
   HEAP32[$67 + 4 >> 2] = 0;
   HEAP32[$67 + 8 >> 2] = 0;
   $68 = $db + 4 | 0;
   $69 = HEAP32[$68 >> 2] | 0;
   $71 = HEAP32[$db + 8 >> 2] | 0;
   if ($69 >>> 0 < $71 >>> 0) {
    if (!$69) $76 = 0; else {
     HEAP32[$69 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
     HEAP32[$69 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$69 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 0 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$1 + 8 >> 2] = 0;
     $74 = $69 + 12 | 0;
     HEAP32[$74 + 0 >> 2] = HEAP32[$67 + 0 >> 2];
     HEAP32[$74 + 4 >> 2] = HEAP32[$67 + 4 >> 2];
     HEAP32[$74 + 8 >> 2] = HEAP32[$67 + 8 >> 2];
     HEAP32[$67 + 0 >> 2] = 0;
     HEAP32[$67 + 4 >> 2] = 0;
     HEAP32[$67 + 8 >> 2] = 0;
     $76 = HEAP32[$68 >> 2] | 0;
    }
    HEAP32[$68 >> 2] = $76 + 24;
   } else {
    $80 = HEAP32[$db >> 2] | 0;
    $82 = ($69 - $80 | 0) / 24 | 0;
    $83 = $82 + 1 | 0;
    if (($83 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $87 = ($71 - $80 | 0) / 24 | 0;
    if ($87 >>> 0 < 1073741823) {
     $89 = $87 << 1;
     $$0$i$i$i7 = $89 >>> 0 < $83 >>> 0 ? $83 : $89;
    } else $$0$i$i$i7 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i7, $82, $db + 12 | 0);
    $92 = $__v$i$i239 + 8 | 0;
    $93 = HEAP32[$92 >> 2] | 0;
    if ($93) {
     HEAP32[$93 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
     HEAP32[$93 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$93 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 0 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$1 + 8 >> 2] = 0;
     $95 = $93 + 12 | 0;
     HEAP32[$95 + 0 >> 2] = HEAP32[$67 + 0 >> 2];
     HEAP32[$95 + 4 >> 2] = HEAP32[$67 + 4 >> 2];
     HEAP32[$95 + 8 >> 2] = HEAP32[$67 + 8 >> 2];
     HEAP32[$67 + 0 >> 2] = 0;
     HEAP32[$67 + 4 >> 2] = 0;
     HEAP32[$67 + 8 >> 2] = 0;
    }
    HEAP32[$92 >> 2] = $93 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 98:
  {
   HEAP8[$2 >> 0] = 8;
   $98 = $2 + 1 | 0;
   HEAP8[$98 >> 0] = 98;
   HEAP8[$98 + 1 >> 0] = 111;
   HEAP8[$98 + 2 >> 0] = 111;
   HEAP8[$98 + 3 >> 0] = 108;
   HEAP8[$2 + 5 >> 0] = 0;
   $100 = $2 + 12 | 0;
   HEAP32[$100 + 0 >> 2] = 0;
   HEAP32[$100 + 4 >> 2] = 0;
   HEAP32[$100 + 8 >> 2] = 0;
   $101 = $db + 4 | 0;
   $102 = HEAP32[$101 >> 2] | 0;
   $104 = HEAP32[$db + 8 >> 2] | 0;
   if ($102 >>> 0 < $104 >>> 0) {
    if (!$102) $109 = 0; else {
     HEAP32[$102 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
     HEAP32[$102 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$102 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$2 + 0 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$2 + 8 >> 2] = 0;
     $107 = $102 + 12 | 0;
     HEAP32[$107 + 0 >> 2] = HEAP32[$100 + 0 >> 2];
     HEAP32[$107 + 4 >> 2] = HEAP32[$100 + 4 >> 2];
     HEAP32[$107 + 8 >> 2] = HEAP32[$100 + 8 >> 2];
     HEAP32[$100 + 0 >> 2] = 0;
     HEAP32[$100 + 4 >> 2] = 0;
     HEAP32[$100 + 8 >> 2] = 0;
     $109 = HEAP32[$101 >> 2] | 0;
    }
    HEAP32[$101 >> 2] = $109 + 24;
   } else {
    $113 = HEAP32[$db >> 2] | 0;
    $115 = ($102 - $113 | 0) / 24 | 0;
    $116 = $115 + 1 | 0;
    if (($116 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $120 = ($104 - $113 | 0) / 24 | 0;
    if ($120 >>> 0 < 1073741823) {
     $122 = $120 << 1;
     $$0$i$i$i16 = $122 >>> 0 < $116 >>> 0 ? $116 : $122;
    } else $$0$i$i$i16 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i16, $115, $db + 12 | 0);
    $125 = $__v$i$i239 + 8 | 0;
    $126 = HEAP32[$125 >> 2] | 0;
    if ($126) {
     HEAP32[$126 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
     HEAP32[$126 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$126 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$2 + 0 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$2 + 8 >> 2] = 0;
     $128 = $126 + 12 | 0;
     HEAP32[$128 + 0 >> 2] = HEAP32[$100 + 0 >> 2];
     HEAP32[$128 + 4 >> 2] = HEAP32[$100 + 4 >> 2];
     HEAP32[$128 + 8 >> 2] = HEAP32[$100 + 8 >> 2];
     HEAP32[$100 + 0 >> 2] = 0;
     HEAP32[$100 + 4 >> 2] = 0;
     HEAP32[$100 + 8 >> 2] = 0;
    }
    HEAP32[$125 >> 2] = $126 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 99:
  {
   HEAP8[$3 >> 0] = 8;
   $131 = $3 + 1 | 0;
   HEAP8[$131 >> 0] = 99;
   HEAP8[$131 + 1 >> 0] = 104;
   HEAP8[$131 + 2 >> 0] = 97;
   HEAP8[$131 + 3 >> 0] = 114;
   HEAP8[$3 + 5 >> 0] = 0;
   $133 = $3 + 12 | 0;
   HEAP32[$133 + 0 >> 2] = 0;
   HEAP32[$133 + 4 >> 2] = 0;
   HEAP32[$133 + 8 >> 2] = 0;
   $134 = $db + 4 | 0;
   $135 = HEAP32[$134 >> 2] | 0;
   $137 = HEAP32[$db + 8 >> 2] | 0;
   if ($135 >>> 0 < $137 >>> 0) {
    if (!$135) $142 = 0; else {
     HEAP32[$135 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
     HEAP32[$135 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$135 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     HEAP32[$3 + 0 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$3 + 8 >> 2] = 0;
     $140 = $135 + 12 | 0;
     HEAP32[$140 + 0 >> 2] = HEAP32[$133 + 0 >> 2];
     HEAP32[$140 + 4 >> 2] = HEAP32[$133 + 4 >> 2];
     HEAP32[$140 + 8 >> 2] = HEAP32[$133 + 8 >> 2];
     HEAP32[$133 + 0 >> 2] = 0;
     HEAP32[$133 + 4 >> 2] = 0;
     HEAP32[$133 + 8 >> 2] = 0;
     $142 = HEAP32[$134 >> 2] | 0;
    }
    HEAP32[$134 >> 2] = $142 + 24;
   } else {
    $146 = HEAP32[$db >> 2] | 0;
    $148 = ($135 - $146 | 0) / 24 | 0;
    $149 = $148 + 1 | 0;
    if (($149 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $153 = ($137 - $146 | 0) / 24 | 0;
    if ($153 >>> 0 < 1073741823) {
     $155 = $153 << 1;
     $$0$i$i$i25 = $155 >>> 0 < $149 >>> 0 ? $149 : $155;
    } else $$0$i$i$i25 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i25, $148, $db + 12 | 0);
    $158 = $__v$i$i239 + 8 | 0;
    $159 = HEAP32[$158 >> 2] | 0;
    if ($159) {
     HEAP32[$159 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
     HEAP32[$159 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$159 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     HEAP32[$3 + 0 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$3 + 8 >> 2] = 0;
     $161 = $159 + 12 | 0;
     HEAP32[$161 + 0 >> 2] = HEAP32[$133 + 0 >> 2];
     HEAP32[$161 + 4 >> 2] = HEAP32[$133 + 4 >> 2];
     HEAP32[$161 + 8 >> 2] = HEAP32[$133 + 8 >> 2];
     HEAP32[$133 + 0 >> 2] = 0;
     HEAP32[$133 + 4 >> 2] = 0;
     HEAP32[$133 + 8 >> 2] = 0;
    }
    HEAP32[$158 >> 2] = $159 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 97:
  {
   $164 = _malloc(16) | 0;
   HEAP32[$4 + 8 >> 2] = $164;
   HEAP32[$4 >> 2] = 17;
   HEAP32[$4 + 4 >> 2] = 11;
   dest = $164 + 0 | 0;
   src = 60760;
   stop = dest + 11 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$164 + 11 >> 0] = 0;
   $168 = $4 + 12 | 0;
   HEAP32[$168 + 0 >> 2] = 0;
   HEAP32[$168 + 4 >> 2] = 0;
   HEAP32[$168 + 8 >> 2] = 0;
   $169 = $db + 4 | 0;
   $170 = HEAP32[$169 >> 2] | 0;
   $172 = HEAP32[$db + 8 >> 2] | 0;
   if ($170 >>> 0 < $172 >>> 0) {
    if (!$170) $177 = 0; else {
     HEAP32[$170 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
     HEAP32[$170 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
     HEAP32[$170 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
     HEAP32[$4 + 0 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$4 + 8 >> 2] = 0;
     $175 = $170 + 12 | 0;
     HEAP32[$175 + 0 >> 2] = HEAP32[$168 + 0 >> 2];
     HEAP32[$175 + 4 >> 2] = HEAP32[$168 + 4 >> 2];
     HEAP32[$175 + 8 >> 2] = HEAP32[$168 + 8 >> 2];
     HEAP32[$168 + 0 >> 2] = 0;
     HEAP32[$168 + 4 >> 2] = 0;
     HEAP32[$168 + 8 >> 2] = 0;
     $177 = HEAP32[$169 >> 2] | 0;
    }
    HEAP32[$169 >> 2] = $177 + 24;
   } else {
    $181 = HEAP32[$db >> 2] | 0;
    $183 = ($170 - $181 | 0) / 24 | 0;
    $184 = $183 + 1 | 0;
    if (($184 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $188 = ($172 - $181 | 0) / 24 | 0;
    if ($188 >>> 0 < 1073741823) {
     $190 = $188 << 1;
     $$0$i$i$i33 = $190 >>> 0 < $184 >>> 0 ? $184 : $190;
    } else $$0$i$i$i33 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i33, $183, $db + 12 | 0);
    $193 = $__v$i$i239 + 8 | 0;
    $194 = HEAP32[$193 >> 2] | 0;
    if ($194) {
     HEAP32[$194 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
     HEAP32[$194 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
     HEAP32[$194 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
     HEAP32[$4 + 0 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$4 + 8 >> 2] = 0;
     $196 = $194 + 12 | 0;
     HEAP32[$196 + 0 >> 2] = HEAP32[$168 + 0 >> 2];
     HEAP32[$196 + 4 >> 2] = HEAP32[$168 + 4 >> 2];
     HEAP32[$196 + 8 >> 2] = HEAP32[$168 + 8 >> 2];
     HEAP32[$168 + 0 >> 2] = 0;
     HEAP32[$168 + 4 >> 2] = 0;
     HEAP32[$168 + 8 >> 2] = 0;
    }
    HEAP32[$193 >> 2] = $194 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 104:
  {
   $199 = _malloc(16) | 0;
   HEAP32[$5 + 8 >> 2] = $199;
   HEAP32[$5 >> 2] = 17;
   HEAP32[$5 + 4 >> 2] = 13;
   dest = $199 + 0 | 0;
   src = 60776;
   stop = dest + 13 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$199 + 13 >> 0] = 0;
   $203 = $5 + 12 | 0;
   HEAP32[$203 + 0 >> 2] = 0;
   HEAP32[$203 + 4 >> 2] = 0;
   HEAP32[$203 + 8 >> 2] = 0;
   $204 = $db + 4 | 0;
   $205 = HEAP32[$204 >> 2] | 0;
   $207 = HEAP32[$db + 8 >> 2] | 0;
   if ($205 >>> 0 < $207 >>> 0) {
    if (!$205) $212 = 0; else {
     HEAP32[$205 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
     HEAP32[$205 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
     HEAP32[$205 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
     HEAP32[$5 + 0 >> 2] = 0;
     HEAP32[$5 + 4 >> 2] = 0;
     HEAP32[$5 + 8 >> 2] = 0;
     $210 = $205 + 12 | 0;
     HEAP32[$210 + 0 >> 2] = HEAP32[$203 + 0 >> 2];
     HEAP32[$210 + 4 >> 2] = HEAP32[$203 + 4 >> 2];
     HEAP32[$210 + 8 >> 2] = HEAP32[$203 + 8 >> 2];
     HEAP32[$203 + 0 >> 2] = 0;
     HEAP32[$203 + 4 >> 2] = 0;
     HEAP32[$203 + 8 >> 2] = 0;
     $212 = HEAP32[$204 >> 2] | 0;
    }
    HEAP32[$204 >> 2] = $212 + 24;
   } else {
    $216 = HEAP32[$db >> 2] | 0;
    $218 = ($205 - $216 | 0) / 24 | 0;
    $219 = $218 + 1 | 0;
    if (($219 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $223 = ($207 - $216 | 0) / 24 | 0;
    if ($223 >>> 0 < 1073741823) {
     $225 = $223 << 1;
     $$0$i$i$i41 = $225 >>> 0 < $219 >>> 0 ? $219 : $225;
    } else $$0$i$i$i41 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i41, $218, $db + 12 | 0);
    $228 = $__v$i$i239 + 8 | 0;
    $229 = HEAP32[$228 >> 2] | 0;
    if ($229) {
     HEAP32[$229 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
     HEAP32[$229 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
     HEAP32[$229 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
     HEAP32[$5 + 0 >> 2] = 0;
     HEAP32[$5 + 4 >> 2] = 0;
     HEAP32[$5 + 8 >> 2] = 0;
     $231 = $229 + 12 | 0;
     HEAP32[$231 + 0 >> 2] = HEAP32[$203 + 0 >> 2];
     HEAP32[$231 + 4 >> 2] = HEAP32[$203 + 4 >> 2];
     HEAP32[$231 + 8 >> 2] = HEAP32[$203 + 8 >> 2];
     HEAP32[$203 + 0 >> 2] = 0;
     HEAP32[$203 + 4 >> 2] = 0;
     HEAP32[$203 + 8 >> 2] = 0;
    }
    HEAP32[$228 >> 2] = $229 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 115:
  {
   HEAP8[$6 >> 0] = 10;
   $234 = $6 + 1 | 0;
   HEAP8[$234 + 0 >> 0] = HEAP8[60792] | 0;
   HEAP8[$234 + 1 >> 0] = HEAP8[60793] | 0;
   HEAP8[$234 + 2 >> 0] = HEAP8[60794] | 0;
   HEAP8[$234 + 3 >> 0] = HEAP8[60795] | 0;
   HEAP8[$234 + 4 >> 0] = HEAP8[60796] | 0;
   HEAP8[$6 + 6 >> 0] = 0;
   $236 = $6 + 12 | 0;
   HEAP32[$236 + 0 >> 2] = 0;
   HEAP32[$236 + 4 >> 2] = 0;
   HEAP32[$236 + 8 >> 2] = 0;
   $237 = $db + 4 | 0;
   $238 = HEAP32[$237 >> 2] | 0;
   $240 = HEAP32[$db + 8 >> 2] | 0;
   if ($238 >>> 0 < $240 >>> 0) {
    if (!$238) $245 = 0; else {
     HEAP32[$238 + 0 >> 2] = HEAP32[$6 + 0 >> 2];
     HEAP32[$238 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$238 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     HEAP32[$6 + 0 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     HEAP32[$6 + 8 >> 2] = 0;
     $243 = $238 + 12 | 0;
     HEAP32[$243 + 0 >> 2] = HEAP32[$236 + 0 >> 2];
     HEAP32[$243 + 4 >> 2] = HEAP32[$236 + 4 >> 2];
     HEAP32[$243 + 8 >> 2] = HEAP32[$236 + 8 >> 2];
     HEAP32[$236 + 0 >> 2] = 0;
     HEAP32[$236 + 4 >> 2] = 0;
     HEAP32[$236 + 8 >> 2] = 0;
     $245 = HEAP32[$237 >> 2] | 0;
    }
    HEAP32[$237 >> 2] = $245 + 24;
   } else {
    $249 = HEAP32[$db >> 2] | 0;
    $251 = ($238 - $249 | 0) / 24 | 0;
    $252 = $251 + 1 | 0;
    if (($252 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $256 = ($240 - $249 | 0) / 24 | 0;
    if ($256 >>> 0 < 1073741823) {
     $258 = $256 << 1;
     $$0$i$i$i50 = $258 >>> 0 < $252 >>> 0 ? $252 : $258;
    } else $$0$i$i$i50 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i50, $251, $db + 12 | 0);
    $261 = $__v$i$i239 + 8 | 0;
    $262 = HEAP32[$261 >> 2] | 0;
    if ($262) {
     HEAP32[$262 + 0 >> 2] = HEAP32[$6 + 0 >> 2];
     HEAP32[$262 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$262 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     HEAP32[$6 + 0 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     HEAP32[$6 + 8 >> 2] = 0;
     $264 = $262 + 12 | 0;
     HEAP32[$264 + 0 >> 2] = HEAP32[$236 + 0 >> 2];
     HEAP32[$264 + 4 >> 2] = HEAP32[$236 + 4 >> 2];
     HEAP32[$264 + 8 >> 2] = HEAP32[$236 + 8 >> 2];
     HEAP32[$236 + 0 >> 2] = 0;
     HEAP32[$236 + 4 >> 2] = 0;
     HEAP32[$236 + 8 >> 2] = 0;
    }
    HEAP32[$261 >> 2] = $262 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 116:
  {
   $267 = _malloc(16) | 0;
   HEAP32[$7 + 8 >> 2] = $267;
   HEAP32[$7 >> 2] = 17;
   HEAP32[$7 + 4 >> 2] = 14;
   dest = $267 + 0 | 0;
   src = 60800;
   stop = dest + 14 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$267 + 14 >> 0] = 0;
   $271 = $7 + 12 | 0;
   HEAP32[$271 + 0 >> 2] = 0;
   HEAP32[$271 + 4 >> 2] = 0;
   HEAP32[$271 + 8 >> 2] = 0;
   $272 = $db + 4 | 0;
   $273 = HEAP32[$272 >> 2] | 0;
   $275 = HEAP32[$db + 8 >> 2] | 0;
   if ($273 >>> 0 < $275 >>> 0) {
    if (!$273) $280 = 0; else {
     HEAP32[$273 + 0 >> 2] = HEAP32[$7 + 0 >> 2];
     HEAP32[$273 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$273 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     HEAP32[$7 + 0 >> 2] = 0;
     HEAP32[$7 + 4 >> 2] = 0;
     HEAP32[$7 + 8 >> 2] = 0;
     $278 = $273 + 12 | 0;
     HEAP32[$278 + 0 >> 2] = HEAP32[$271 + 0 >> 2];
     HEAP32[$278 + 4 >> 2] = HEAP32[$271 + 4 >> 2];
     HEAP32[$278 + 8 >> 2] = HEAP32[$271 + 8 >> 2];
     HEAP32[$271 + 0 >> 2] = 0;
     HEAP32[$271 + 4 >> 2] = 0;
     HEAP32[$271 + 8 >> 2] = 0;
     $280 = HEAP32[$272 >> 2] | 0;
    }
    HEAP32[$272 >> 2] = $280 + 24;
   } else {
    $284 = HEAP32[$db >> 2] | 0;
    $286 = ($273 - $284 | 0) / 24 | 0;
    $287 = $286 + 1 | 0;
    if (($287 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $291 = ($275 - $284 | 0) / 24 | 0;
    if ($291 >>> 0 < 1073741823) {
     $293 = $291 << 1;
     $$0$i$i$i58 = $293 >>> 0 < $287 >>> 0 ? $287 : $293;
    } else $$0$i$i$i58 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i58, $286, $db + 12 | 0);
    $296 = $__v$i$i239 + 8 | 0;
    $297 = HEAP32[$296 >> 2] | 0;
    if ($297) {
     HEAP32[$297 + 0 >> 2] = HEAP32[$7 + 0 >> 2];
     HEAP32[$297 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$297 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     HEAP32[$7 + 0 >> 2] = 0;
     HEAP32[$7 + 4 >> 2] = 0;
     HEAP32[$7 + 8 >> 2] = 0;
     $299 = $297 + 12 | 0;
     HEAP32[$299 + 0 >> 2] = HEAP32[$271 + 0 >> 2];
     HEAP32[$299 + 4 >> 2] = HEAP32[$271 + 4 >> 2];
     HEAP32[$299 + 8 >> 2] = HEAP32[$271 + 8 >> 2];
     HEAP32[$271 + 0 >> 2] = 0;
     HEAP32[$271 + 4 >> 2] = 0;
     HEAP32[$271 + 8 >> 2] = 0;
    }
    HEAP32[$296 >> 2] = $297 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 105:
  {
   HEAP8[$8 >> 0] = 6;
   $302 = $8 + 1 | 0;
   HEAP8[$302 + 0 >> 0] = HEAP8[61064] | 0;
   HEAP8[$302 + 1 >> 0] = HEAP8[61065] | 0;
   HEAP8[$302 + 2 >> 0] = HEAP8[61066] | 0;
   HEAP8[$8 + 4 >> 0] = 0;
   $304 = $8 + 12 | 0;
   HEAP32[$304 + 0 >> 2] = 0;
   HEAP32[$304 + 4 >> 2] = 0;
   HEAP32[$304 + 8 >> 2] = 0;
   $305 = $db + 4 | 0;
   $306 = HEAP32[$305 >> 2] | 0;
   $308 = HEAP32[$db + 8 >> 2] | 0;
   if ($306 >>> 0 < $308 >>> 0) {
    if (!$306) $313 = 0; else {
     HEAP32[$306 + 0 >> 2] = HEAP32[$8 + 0 >> 2];
     HEAP32[$306 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$306 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     HEAP32[$8 + 0 >> 2] = 0;
     HEAP32[$8 + 4 >> 2] = 0;
     HEAP32[$8 + 8 >> 2] = 0;
     $311 = $306 + 12 | 0;
     HEAP32[$311 + 0 >> 2] = HEAP32[$304 + 0 >> 2];
     HEAP32[$311 + 4 >> 2] = HEAP32[$304 + 4 >> 2];
     HEAP32[$311 + 8 >> 2] = HEAP32[$304 + 8 >> 2];
     HEAP32[$304 + 0 >> 2] = 0;
     HEAP32[$304 + 4 >> 2] = 0;
     HEAP32[$304 + 8 >> 2] = 0;
     $313 = HEAP32[$305 >> 2] | 0;
    }
    HEAP32[$305 >> 2] = $313 + 24;
   } else {
    $317 = HEAP32[$db >> 2] | 0;
    $319 = ($306 - $317 | 0) / 24 | 0;
    $320 = $319 + 1 | 0;
    if (($320 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $324 = ($308 - $317 | 0) / 24 | 0;
    if ($324 >>> 0 < 1073741823) {
     $326 = $324 << 1;
     $$0$i$i$i67 = $326 >>> 0 < $320 >>> 0 ? $320 : $326;
    } else $$0$i$i$i67 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i67, $319, $db + 12 | 0);
    $329 = $__v$i$i239 + 8 | 0;
    $330 = HEAP32[$329 >> 2] | 0;
    if ($330) {
     HEAP32[$330 + 0 >> 2] = HEAP32[$8 + 0 >> 2];
     HEAP32[$330 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$330 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     HEAP32[$8 + 0 >> 2] = 0;
     HEAP32[$8 + 4 >> 2] = 0;
     HEAP32[$8 + 8 >> 2] = 0;
     $332 = $330 + 12 | 0;
     HEAP32[$332 + 0 >> 2] = HEAP32[$304 + 0 >> 2];
     HEAP32[$332 + 4 >> 2] = HEAP32[$304 + 4 >> 2];
     HEAP32[$332 + 8 >> 2] = HEAP32[$304 + 8 >> 2];
     HEAP32[$304 + 0 >> 2] = 0;
     HEAP32[$304 + 4 >> 2] = 0;
     HEAP32[$304 + 8 >> 2] = 0;
    }
    HEAP32[$329 >> 2] = $330 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 106:
  {
   $335 = _malloc(16) | 0;
   HEAP32[$9 + 8 >> 2] = $335;
   HEAP32[$9 >> 2] = 17;
   HEAP32[$9 + 4 >> 2] = 12;
   dest = $335 + 0 | 0;
   src = 61072;
   stop = dest + 12 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$335 + 12 >> 0] = 0;
   $339 = $9 + 12 | 0;
   HEAP32[$339 + 0 >> 2] = 0;
   HEAP32[$339 + 4 >> 2] = 0;
   HEAP32[$339 + 8 >> 2] = 0;
   $340 = $db + 4 | 0;
   $341 = HEAP32[$340 >> 2] | 0;
   $343 = HEAP32[$db + 8 >> 2] | 0;
   if ($341 >>> 0 < $343 >>> 0) {
    if (!$341) $348 = 0; else {
     HEAP32[$341 + 0 >> 2] = HEAP32[$9 + 0 >> 2];
     HEAP32[$341 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$341 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     HEAP32[$9 + 0 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     HEAP32[$9 + 8 >> 2] = 0;
     $346 = $341 + 12 | 0;
     HEAP32[$346 + 0 >> 2] = HEAP32[$339 + 0 >> 2];
     HEAP32[$346 + 4 >> 2] = HEAP32[$339 + 4 >> 2];
     HEAP32[$346 + 8 >> 2] = HEAP32[$339 + 8 >> 2];
     HEAP32[$339 + 0 >> 2] = 0;
     HEAP32[$339 + 4 >> 2] = 0;
     HEAP32[$339 + 8 >> 2] = 0;
     $348 = HEAP32[$340 >> 2] | 0;
    }
    HEAP32[$340 >> 2] = $348 + 24;
   } else {
    $352 = HEAP32[$db >> 2] | 0;
    $354 = ($341 - $352 | 0) / 24 | 0;
    $355 = $354 + 1 | 0;
    if (($355 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $359 = ($343 - $352 | 0) / 24 | 0;
    if ($359 >>> 0 < 1073741823) {
     $361 = $359 << 1;
     $$0$i$i$i75 = $361 >>> 0 < $355 >>> 0 ? $355 : $361;
    } else $$0$i$i$i75 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i75, $354, $db + 12 | 0);
    $364 = $__v$i$i239 + 8 | 0;
    $365 = HEAP32[$364 >> 2] | 0;
    if ($365) {
     HEAP32[$365 + 0 >> 2] = HEAP32[$9 + 0 >> 2];
     HEAP32[$365 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$365 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     HEAP32[$9 + 0 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     HEAP32[$9 + 8 >> 2] = 0;
     $367 = $365 + 12 | 0;
     HEAP32[$367 + 0 >> 2] = HEAP32[$339 + 0 >> 2];
     HEAP32[$367 + 4 >> 2] = HEAP32[$339 + 4 >> 2];
     HEAP32[$367 + 8 >> 2] = HEAP32[$339 + 8 >> 2];
     HEAP32[$339 + 0 >> 2] = 0;
     HEAP32[$339 + 4 >> 2] = 0;
     HEAP32[$339 + 8 >> 2] = 0;
    }
    HEAP32[$364 >> 2] = $365 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 108:
  {
   HEAP8[$10 >> 0] = 8;
   $370 = $10 + 1 | 0;
   HEAP8[$370 >> 0] = 108;
   HEAP8[$370 + 1 >> 0] = 111;
   HEAP8[$370 + 2 >> 0] = 110;
   HEAP8[$370 + 3 >> 0] = 103;
   HEAP8[$10 + 5 >> 0] = 0;
   $372 = $10 + 12 | 0;
   HEAP32[$372 + 0 >> 2] = 0;
   HEAP32[$372 + 4 >> 2] = 0;
   HEAP32[$372 + 8 >> 2] = 0;
   $373 = $db + 4 | 0;
   $374 = HEAP32[$373 >> 2] | 0;
   $376 = HEAP32[$db + 8 >> 2] | 0;
   if ($374 >>> 0 < $376 >>> 0) {
    if (!$374) $381 = 0; else {
     HEAP32[$374 + 0 >> 2] = HEAP32[$10 + 0 >> 2];
     HEAP32[$374 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
     HEAP32[$374 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
     HEAP32[$10 + 0 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     HEAP32[$10 + 8 >> 2] = 0;
     $379 = $374 + 12 | 0;
     HEAP32[$379 + 0 >> 2] = HEAP32[$372 + 0 >> 2];
     HEAP32[$379 + 4 >> 2] = HEAP32[$372 + 4 >> 2];
     HEAP32[$379 + 8 >> 2] = HEAP32[$372 + 8 >> 2];
     HEAP32[$372 + 0 >> 2] = 0;
     HEAP32[$372 + 4 >> 2] = 0;
     HEAP32[$372 + 8 >> 2] = 0;
     $381 = HEAP32[$373 >> 2] | 0;
    }
    HEAP32[$373 >> 2] = $381 + 24;
   } else {
    $385 = HEAP32[$db >> 2] | 0;
    $387 = ($374 - $385 | 0) / 24 | 0;
    $388 = $387 + 1 | 0;
    if (($388 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $392 = ($376 - $385 | 0) / 24 | 0;
    if ($392 >>> 0 < 1073741823) {
     $394 = $392 << 1;
     $$0$i$i$i84 = $394 >>> 0 < $388 >>> 0 ? $388 : $394;
    } else $$0$i$i$i84 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i84, $387, $db + 12 | 0);
    $397 = $__v$i$i239 + 8 | 0;
    $398 = HEAP32[$397 >> 2] | 0;
    if ($398) {
     HEAP32[$398 + 0 >> 2] = HEAP32[$10 + 0 >> 2];
     HEAP32[$398 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
     HEAP32[$398 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
     HEAP32[$10 + 0 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     HEAP32[$10 + 8 >> 2] = 0;
     $400 = $398 + 12 | 0;
     HEAP32[$400 + 0 >> 2] = HEAP32[$372 + 0 >> 2];
     HEAP32[$400 + 4 >> 2] = HEAP32[$372 + 4 >> 2];
     HEAP32[$400 + 8 >> 2] = HEAP32[$372 + 8 >> 2];
     HEAP32[$372 + 0 >> 2] = 0;
     HEAP32[$372 + 4 >> 2] = 0;
     HEAP32[$372 + 8 >> 2] = 0;
    }
    HEAP32[$397 >> 2] = $398 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 109:
  {
   $403 = _malloc(16) | 0;
   HEAP32[$11 + 8 >> 2] = $403;
   HEAP32[$11 >> 2] = 17;
   HEAP32[$11 + 4 >> 2] = 13;
   dest = $403 + 0 | 0;
   src = 61088;
   stop = dest + 13 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$403 + 13 >> 0] = 0;
   $407 = $11 + 12 | 0;
   HEAP32[$407 + 0 >> 2] = 0;
   HEAP32[$407 + 4 >> 2] = 0;
   HEAP32[$407 + 8 >> 2] = 0;
   $408 = $db + 4 | 0;
   $409 = HEAP32[$408 >> 2] | 0;
   $411 = HEAP32[$db + 8 >> 2] | 0;
   if ($409 >>> 0 < $411 >>> 0) {
    if (!$409) $416 = 0; else {
     HEAP32[$409 + 0 >> 2] = HEAP32[$11 + 0 >> 2];
     HEAP32[$409 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
     HEAP32[$409 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
     HEAP32[$11 + 0 >> 2] = 0;
     HEAP32[$11 + 4 >> 2] = 0;
     HEAP32[$11 + 8 >> 2] = 0;
     $414 = $409 + 12 | 0;
     HEAP32[$414 + 0 >> 2] = HEAP32[$407 + 0 >> 2];
     HEAP32[$414 + 4 >> 2] = HEAP32[$407 + 4 >> 2];
     HEAP32[$414 + 8 >> 2] = HEAP32[$407 + 8 >> 2];
     HEAP32[$407 + 0 >> 2] = 0;
     HEAP32[$407 + 4 >> 2] = 0;
     HEAP32[$407 + 8 >> 2] = 0;
     $416 = HEAP32[$408 >> 2] | 0;
    }
    HEAP32[$408 >> 2] = $416 + 24;
   } else {
    $420 = HEAP32[$db >> 2] | 0;
    $422 = ($409 - $420 | 0) / 24 | 0;
    $423 = $422 + 1 | 0;
    if (($423 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $427 = ($411 - $420 | 0) / 24 | 0;
    if ($427 >>> 0 < 1073741823) {
     $429 = $427 << 1;
     $$0$i$i$i92 = $429 >>> 0 < $423 >>> 0 ? $423 : $429;
    } else $$0$i$i$i92 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i92, $422, $db + 12 | 0);
    $432 = $__v$i$i239 + 8 | 0;
    $433 = HEAP32[$432 >> 2] | 0;
    if ($433) {
     HEAP32[$433 + 0 >> 2] = HEAP32[$11 + 0 >> 2];
     HEAP32[$433 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
     HEAP32[$433 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
     HEAP32[$11 + 0 >> 2] = 0;
     HEAP32[$11 + 4 >> 2] = 0;
     HEAP32[$11 + 8 >> 2] = 0;
     $435 = $433 + 12 | 0;
     HEAP32[$435 + 0 >> 2] = HEAP32[$407 + 0 >> 2];
     HEAP32[$435 + 4 >> 2] = HEAP32[$407 + 4 >> 2];
     HEAP32[$435 + 8 >> 2] = HEAP32[$407 + 8 >> 2];
     HEAP32[$407 + 0 >> 2] = 0;
     HEAP32[$407 + 4 >> 2] = 0;
     HEAP32[$407 + 8 >> 2] = 0;
    }
    HEAP32[$432 >> 2] = $433 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 120:
  {
   HEAP8[$12 >> 0] = 18;
   dest = $12 + 1 | 0;
   src = 61104;
   stop = dest + 9 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$12 + 10 >> 0] = 0;
   $440 = $12 + 12 | 0;
   HEAP32[$440 + 0 >> 2] = 0;
   HEAP32[$440 + 4 >> 2] = 0;
   HEAP32[$440 + 8 >> 2] = 0;
   $441 = $db + 4 | 0;
   $442 = HEAP32[$441 >> 2] | 0;
   $444 = HEAP32[$db + 8 >> 2] | 0;
   if ($442 >>> 0 < $444 >>> 0) {
    if (!$442) $449 = 0; else {
     HEAP32[$442 + 0 >> 2] = HEAP32[$12 + 0 >> 2];
     HEAP32[$442 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
     HEAP32[$442 + 8 >> 2] = HEAP32[$12 + 8 >> 2];
     HEAP32[$12 + 0 >> 2] = 0;
     HEAP32[$12 + 4 >> 2] = 0;
     HEAP32[$12 + 8 >> 2] = 0;
     $447 = $442 + 12 | 0;
     HEAP32[$447 + 0 >> 2] = HEAP32[$440 + 0 >> 2];
     HEAP32[$447 + 4 >> 2] = HEAP32[$440 + 4 >> 2];
     HEAP32[$447 + 8 >> 2] = HEAP32[$440 + 8 >> 2];
     HEAP32[$440 + 0 >> 2] = 0;
     HEAP32[$440 + 4 >> 2] = 0;
     HEAP32[$440 + 8 >> 2] = 0;
     $449 = HEAP32[$441 >> 2] | 0;
    }
    HEAP32[$441 >> 2] = $449 + 24;
   } else {
    $453 = HEAP32[$db >> 2] | 0;
    $455 = ($442 - $453 | 0) / 24 | 0;
    $456 = $455 + 1 | 0;
    if (($456 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $460 = ($444 - $453 | 0) / 24 | 0;
    if ($460 >>> 0 < 1073741823) {
     $462 = $460 << 1;
     $$0$i$i$i101 = $462 >>> 0 < $456 >>> 0 ? $456 : $462;
    } else $$0$i$i$i101 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i101, $455, $db + 12 | 0);
    $465 = $__v$i$i239 + 8 | 0;
    $466 = HEAP32[$465 >> 2] | 0;
    if ($466) {
     HEAP32[$466 + 0 >> 2] = HEAP32[$12 + 0 >> 2];
     HEAP32[$466 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
     HEAP32[$466 + 8 >> 2] = HEAP32[$12 + 8 >> 2];
     HEAP32[$12 + 0 >> 2] = 0;
     HEAP32[$12 + 4 >> 2] = 0;
     HEAP32[$12 + 8 >> 2] = 0;
     $468 = $466 + 12 | 0;
     HEAP32[$468 + 0 >> 2] = HEAP32[$440 + 0 >> 2];
     HEAP32[$468 + 4 >> 2] = HEAP32[$440 + 4 >> 2];
     HEAP32[$468 + 8 >> 2] = HEAP32[$440 + 8 >> 2];
     HEAP32[$440 + 0 >> 2] = 0;
     HEAP32[$440 + 4 >> 2] = 0;
     HEAP32[$440 + 8 >> 2] = 0;
    }
    HEAP32[$465 >> 2] = $466 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 121:
  {
   $471 = _malloc(32) | 0;
   HEAP32[$13 + 8 >> 2] = $471;
   HEAP32[$13 >> 2] = 33;
   HEAP32[$13 + 4 >> 2] = 18;
   dest = $471 + 0 | 0;
   src = 61120;
   stop = dest + 18 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$471 + 18 >> 0] = 0;
   $475 = $13 + 12 | 0;
   HEAP32[$475 + 0 >> 2] = 0;
   HEAP32[$475 + 4 >> 2] = 0;
   HEAP32[$475 + 8 >> 2] = 0;
   $476 = $db + 4 | 0;
   $477 = HEAP32[$476 >> 2] | 0;
   $479 = HEAP32[$db + 8 >> 2] | 0;
   if ($477 >>> 0 < $479 >>> 0) {
    if (!$477) $484 = 0; else {
     HEAP32[$477 + 0 >> 2] = HEAP32[$13 + 0 >> 2];
     HEAP32[$477 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
     HEAP32[$477 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
     HEAP32[$13 + 0 >> 2] = 0;
     HEAP32[$13 + 4 >> 2] = 0;
     HEAP32[$13 + 8 >> 2] = 0;
     $482 = $477 + 12 | 0;
     HEAP32[$482 + 0 >> 2] = HEAP32[$475 + 0 >> 2];
     HEAP32[$482 + 4 >> 2] = HEAP32[$475 + 4 >> 2];
     HEAP32[$482 + 8 >> 2] = HEAP32[$475 + 8 >> 2];
     HEAP32[$475 + 0 >> 2] = 0;
     HEAP32[$475 + 4 >> 2] = 0;
     HEAP32[$475 + 8 >> 2] = 0;
     $484 = HEAP32[$476 >> 2] | 0;
    }
    HEAP32[$476 >> 2] = $484 + 24;
   } else {
    $488 = HEAP32[$db >> 2] | 0;
    $490 = ($477 - $488 | 0) / 24 | 0;
    $491 = $490 + 1 | 0;
    if (($491 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $495 = ($479 - $488 | 0) / 24 | 0;
    if ($495 >>> 0 < 1073741823) {
     $497 = $495 << 1;
     $$0$i$i$i110 = $497 >>> 0 < $491 >>> 0 ? $491 : $497;
    } else $$0$i$i$i110 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i110, $490, $db + 12 | 0);
    $500 = $__v$i$i239 + 8 | 0;
    $501 = HEAP32[$500 >> 2] | 0;
    if ($501) {
     HEAP32[$501 + 0 >> 2] = HEAP32[$13 + 0 >> 2];
     HEAP32[$501 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
     HEAP32[$501 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
     HEAP32[$13 + 0 >> 2] = 0;
     HEAP32[$13 + 4 >> 2] = 0;
     HEAP32[$13 + 8 >> 2] = 0;
     $503 = $501 + 12 | 0;
     HEAP32[$503 + 0 >> 2] = HEAP32[$475 + 0 >> 2];
     HEAP32[$503 + 4 >> 2] = HEAP32[$475 + 4 >> 2];
     HEAP32[$503 + 8 >> 2] = HEAP32[$475 + 8 >> 2];
     HEAP32[$475 + 0 >> 2] = 0;
     HEAP32[$475 + 4 >> 2] = 0;
     HEAP32[$475 + 8 >> 2] = 0;
    }
    HEAP32[$500 >> 2] = $501 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 110:
  {
   HEAP8[$14 >> 0] = 16;
   $507 = $14 + 1 | 0;
   $508 = $507;
   HEAP8[$508 >> 0] = 95;
   HEAP8[$508 + 1 >> 0] = 95;
   HEAP8[$508 + 2 >> 0] = 105;
   HEAP8[$508 + 3 >> 0] = 110;
   $510 = $507 + 4 | 0;
   HEAP8[$510 >> 0] = 116;
   HEAP8[$510 + 1 >> 0] = 49;
   HEAP8[$510 + 2 >> 0] = 50;
   HEAP8[$510 + 3 >> 0] = 56;
   HEAP8[$14 + 9 >> 0] = 0;
   $512 = $14 + 12 | 0;
   HEAP32[$512 + 0 >> 2] = 0;
   HEAP32[$512 + 4 >> 2] = 0;
   HEAP32[$512 + 8 >> 2] = 0;
   $513 = $db + 4 | 0;
   $514 = HEAP32[$513 >> 2] | 0;
   $516 = HEAP32[$db + 8 >> 2] | 0;
   if ($514 >>> 0 < $516 >>> 0) {
    if (!$514) $521 = 0; else {
     HEAP32[$514 + 0 >> 2] = HEAP32[$14 + 0 >> 2];
     HEAP32[$514 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
     HEAP32[$514 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
     HEAP32[$14 + 0 >> 2] = 0;
     HEAP32[$14 + 4 >> 2] = 0;
     HEAP32[$14 + 8 >> 2] = 0;
     $519 = $514 + 12 | 0;
     HEAP32[$519 + 0 >> 2] = HEAP32[$512 + 0 >> 2];
     HEAP32[$519 + 4 >> 2] = HEAP32[$512 + 4 >> 2];
     HEAP32[$519 + 8 >> 2] = HEAP32[$512 + 8 >> 2];
     HEAP32[$512 + 0 >> 2] = 0;
     HEAP32[$512 + 4 >> 2] = 0;
     HEAP32[$512 + 8 >> 2] = 0;
     $521 = HEAP32[$513 >> 2] | 0;
    }
    HEAP32[$513 >> 2] = $521 + 24;
   } else {
    $525 = HEAP32[$db >> 2] | 0;
    $527 = ($514 - $525 | 0) / 24 | 0;
    $528 = $527 + 1 | 0;
    if (($528 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $532 = ($516 - $525 | 0) / 24 | 0;
    if ($532 >>> 0 < 1073741823) {
     $534 = $532 << 1;
     $$0$i$i$i119 = $534 >>> 0 < $528 >>> 0 ? $528 : $534;
    } else $$0$i$i$i119 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i119, $527, $db + 12 | 0);
    $537 = $__v$i$i239 + 8 | 0;
    $538 = HEAP32[$537 >> 2] | 0;
    if ($538) {
     HEAP32[$538 + 0 >> 2] = HEAP32[$14 + 0 >> 2];
     HEAP32[$538 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
     HEAP32[$538 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
     HEAP32[$14 + 0 >> 2] = 0;
     HEAP32[$14 + 4 >> 2] = 0;
     HEAP32[$14 + 8 >> 2] = 0;
     $540 = $538 + 12 | 0;
     HEAP32[$540 + 0 >> 2] = HEAP32[$512 + 0 >> 2];
     HEAP32[$540 + 4 >> 2] = HEAP32[$512 + 4 >> 2];
     HEAP32[$540 + 8 >> 2] = HEAP32[$512 + 8 >> 2];
     HEAP32[$512 + 0 >> 2] = 0;
     HEAP32[$512 + 4 >> 2] = 0;
     HEAP32[$512 + 8 >> 2] = 0;
    }
    HEAP32[$537 >> 2] = $538 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 111:
  {
   $543 = _malloc(32) | 0;
   HEAP32[$15 + 8 >> 2] = $543;
   HEAP32[$15 >> 2] = 33;
   HEAP32[$15 + 4 >> 2] = 17;
   dest = $543 + 0 | 0;
   src = 60848;
   stop = dest + 17 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$543 + 17 >> 0] = 0;
   $547 = $15 + 12 | 0;
   HEAP32[$547 + 0 >> 2] = 0;
   HEAP32[$547 + 4 >> 2] = 0;
   HEAP32[$547 + 8 >> 2] = 0;
   $548 = $db + 4 | 0;
   $549 = HEAP32[$548 >> 2] | 0;
   $551 = HEAP32[$db + 8 >> 2] | 0;
   if ($549 >>> 0 < $551 >>> 0) {
    if (!$549) $556 = 0; else {
     HEAP32[$549 + 0 >> 2] = HEAP32[$15 + 0 >> 2];
     HEAP32[$549 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
     HEAP32[$549 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
     HEAP32[$15 + 0 >> 2] = 0;
     HEAP32[$15 + 4 >> 2] = 0;
     HEAP32[$15 + 8 >> 2] = 0;
     $554 = $549 + 12 | 0;
     HEAP32[$554 + 0 >> 2] = HEAP32[$547 + 0 >> 2];
     HEAP32[$554 + 4 >> 2] = HEAP32[$547 + 4 >> 2];
     HEAP32[$554 + 8 >> 2] = HEAP32[$547 + 8 >> 2];
     HEAP32[$547 + 0 >> 2] = 0;
     HEAP32[$547 + 4 >> 2] = 0;
     HEAP32[$547 + 8 >> 2] = 0;
     $556 = HEAP32[$548 >> 2] | 0;
    }
    HEAP32[$548 >> 2] = $556 + 24;
   } else {
    $560 = HEAP32[$db >> 2] | 0;
    $562 = ($549 - $560 | 0) / 24 | 0;
    $563 = $562 + 1 | 0;
    if (($563 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $567 = ($551 - $560 | 0) / 24 | 0;
    if ($567 >>> 0 < 1073741823) {
     $569 = $567 << 1;
     $$0$i$i$i127 = $569 >>> 0 < $563 >>> 0 ? $563 : $569;
    } else $$0$i$i$i127 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i127, $562, $db + 12 | 0);
    $572 = $__v$i$i239 + 8 | 0;
    $573 = HEAP32[$572 >> 2] | 0;
    if ($573) {
     HEAP32[$573 + 0 >> 2] = HEAP32[$15 + 0 >> 2];
     HEAP32[$573 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
     HEAP32[$573 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
     HEAP32[$15 + 0 >> 2] = 0;
     HEAP32[$15 + 4 >> 2] = 0;
     HEAP32[$15 + 8 >> 2] = 0;
     $575 = $573 + 12 | 0;
     HEAP32[$575 + 0 >> 2] = HEAP32[$547 + 0 >> 2];
     HEAP32[$575 + 4 >> 2] = HEAP32[$547 + 4 >> 2];
     HEAP32[$575 + 8 >> 2] = HEAP32[$547 + 8 >> 2];
     HEAP32[$547 + 0 >> 2] = 0;
     HEAP32[$547 + 4 >> 2] = 0;
     HEAP32[$547 + 8 >> 2] = 0;
    }
    HEAP32[$572 >> 2] = $573 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 102:
  {
   HEAP8[$16 >> 0] = 10;
   $578 = $16 + 1 | 0;
   HEAP8[$578 + 0 >> 0] = HEAP8[61144] | 0;
   HEAP8[$578 + 1 >> 0] = HEAP8[61145] | 0;
   HEAP8[$578 + 2 >> 0] = HEAP8[61146] | 0;
   HEAP8[$578 + 3 >> 0] = HEAP8[61147] | 0;
   HEAP8[$578 + 4 >> 0] = HEAP8[61148] | 0;
   HEAP8[$16 + 6 >> 0] = 0;
   $580 = $16 + 12 | 0;
   HEAP32[$580 + 0 >> 2] = 0;
   HEAP32[$580 + 4 >> 2] = 0;
   HEAP32[$580 + 8 >> 2] = 0;
   $581 = $db + 4 | 0;
   $582 = HEAP32[$581 >> 2] | 0;
   $584 = HEAP32[$db + 8 >> 2] | 0;
   if ($582 >>> 0 < $584 >>> 0) {
    if (!$582) $589 = 0; else {
     HEAP32[$582 + 0 >> 2] = HEAP32[$16 + 0 >> 2];
     HEAP32[$582 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
     HEAP32[$582 + 8 >> 2] = HEAP32[$16 + 8 >> 2];
     HEAP32[$16 + 0 >> 2] = 0;
     HEAP32[$16 + 4 >> 2] = 0;
     HEAP32[$16 + 8 >> 2] = 0;
     $587 = $582 + 12 | 0;
     HEAP32[$587 + 0 >> 2] = HEAP32[$580 + 0 >> 2];
     HEAP32[$587 + 4 >> 2] = HEAP32[$580 + 4 >> 2];
     HEAP32[$587 + 8 >> 2] = HEAP32[$580 + 8 >> 2];
     HEAP32[$580 + 0 >> 2] = 0;
     HEAP32[$580 + 4 >> 2] = 0;
     HEAP32[$580 + 8 >> 2] = 0;
     $589 = HEAP32[$581 >> 2] | 0;
    }
    HEAP32[$581 >> 2] = $589 + 24;
   } else {
    $593 = HEAP32[$db >> 2] | 0;
    $595 = ($582 - $593 | 0) / 24 | 0;
    $596 = $595 + 1 | 0;
    if (($596 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $600 = ($584 - $593 | 0) / 24 | 0;
    if ($600 >>> 0 < 1073741823) {
     $602 = $600 << 1;
     $$0$i$i$i136 = $602 >>> 0 < $596 >>> 0 ? $596 : $602;
    } else $$0$i$i$i136 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i136, $595, $db + 12 | 0);
    $605 = $__v$i$i239 + 8 | 0;
    $606 = HEAP32[$605 >> 2] | 0;
    if ($606) {
     HEAP32[$606 + 0 >> 2] = HEAP32[$16 + 0 >> 2];
     HEAP32[$606 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
     HEAP32[$606 + 8 >> 2] = HEAP32[$16 + 8 >> 2];
     HEAP32[$16 + 0 >> 2] = 0;
     HEAP32[$16 + 4 >> 2] = 0;
     HEAP32[$16 + 8 >> 2] = 0;
     $608 = $606 + 12 | 0;
     HEAP32[$608 + 0 >> 2] = HEAP32[$580 + 0 >> 2];
     HEAP32[$608 + 4 >> 2] = HEAP32[$580 + 4 >> 2];
     HEAP32[$608 + 8 >> 2] = HEAP32[$580 + 8 >> 2];
     HEAP32[$580 + 0 >> 2] = 0;
     HEAP32[$580 + 4 >> 2] = 0;
     HEAP32[$580 + 8 >> 2] = 0;
    }
    HEAP32[$605 >> 2] = $606 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 100:
  {
   HEAP8[$17 >> 0] = 12;
   $611 = $17 + 1 | 0;
   HEAP8[$611 + 0 >> 0] = HEAP8[61152] | 0;
   HEAP8[$611 + 1 >> 0] = HEAP8[61153] | 0;
   HEAP8[$611 + 2 >> 0] = HEAP8[61154] | 0;
   HEAP8[$611 + 3 >> 0] = HEAP8[61155] | 0;
   HEAP8[$611 + 4 >> 0] = HEAP8[61156] | 0;
   HEAP8[$611 + 5 >> 0] = HEAP8[61157] | 0;
   HEAP8[$17 + 7 >> 0] = 0;
   $613 = $17 + 12 | 0;
   HEAP32[$613 + 0 >> 2] = 0;
   HEAP32[$613 + 4 >> 2] = 0;
   HEAP32[$613 + 8 >> 2] = 0;
   $614 = $db + 4 | 0;
   $615 = HEAP32[$614 >> 2] | 0;
   $617 = HEAP32[$db + 8 >> 2] | 0;
   if ($615 >>> 0 < $617 >>> 0) {
    if (!$615) $622 = 0; else {
     HEAP32[$615 + 0 >> 2] = HEAP32[$17 + 0 >> 2];
     HEAP32[$615 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
     HEAP32[$615 + 8 >> 2] = HEAP32[$17 + 8 >> 2];
     HEAP32[$17 + 0 >> 2] = 0;
     HEAP32[$17 + 4 >> 2] = 0;
     HEAP32[$17 + 8 >> 2] = 0;
     $620 = $615 + 12 | 0;
     HEAP32[$620 + 0 >> 2] = HEAP32[$613 + 0 >> 2];
     HEAP32[$620 + 4 >> 2] = HEAP32[$613 + 4 >> 2];
     HEAP32[$620 + 8 >> 2] = HEAP32[$613 + 8 >> 2];
     HEAP32[$613 + 0 >> 2] = 0;
     HEAP32[$613 + 4 >> 2] = 0;
     HEAP32[$613 + 8 >> 2] = 0;
     $622 = HEAP32[$614 >> 2] | 0;
    }
    HEAP32[$614 >> 2] = $622 + 24;
   } else {
    $626 = HEAP32[$db >> 2] | 0;
    $628 = ($615 - $626 | 0) / 24 | 0;
    $629 = $628 + 1 | 0;
    if (($629 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $633 = ($617 - $626 | 0) / 24 | 0;
    if ($633 >>> 0 < 1073741823) {
     $635 = $633 << 1;
     $$0$i$i$i145 = $635 >>> 0 < $629 >>> 0 ? $629 : $635;
    } else $$0$i$i$i145 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i145, $628, $db + 12 | 0);
    $638 = $__v$i$i239 + 8 | 0;
    $639 = HEAP32[$638 >> 2] | 0;
    if ($639) {
     HEAP32[$639 + 0 >> 2] = HEAP32[$17 + 0 >> 2];
     HEAP32[$639 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
     HEAP32[$639 + 8 >> 2] = HEAP32[$17 + 8 >> 2];
     HEAP32[$17 + 0 >> 2] = 0;
     HEAP32[$17 + 4 >> 2] = 0;
     HEAP32[$17 + 8 >> 2] = 0;
     $641 = $639 + 12 | 0;
     HEAP32[$641 + 0 >> 2] = HEAP32[$613 + 0 >> 2];
     HEAP32[$641 + 4 >> 2] = HEAP32[$613 + 4 >> 2];
     HEAP32[$641 + 8 >> 2] = HEAP32[$613 + 8 >> 2];
     HEAP32[$613 + 0 >> 2] = 0;
     HEAP32[$613 + 4 >> 2] = 0;
     HEAP32[$613 + 8 >> 2] = 0;
    }
    HEAP32[$638 >> 2] = $639 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 101:
  {
   $644 = _malloc(16) | 0;
   HEAP32[$18 + 8 >> 2] = $644;
   HEAP32[$18 >> 2] = 17;
   HEAP32[$18 + 4 >> 2] = 11;
   dest = $644 + 0 | 0;
   src = 61160;
   stop = dest + 11 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$644 + 11 >> 0] = 0;
   $648 = $18 + 12 | 0;
   HEAP32[$648 + 0 >> 2] = 0;
   HEAP32[$648 + 4 >> 2] = 0;
   HEAP32[$648 + 8 >> 2] = 0;
   $649 = $db + 4 | 0;
   $650 = HEAP32[$649 >> 2] | 0;
   $652 = HEAP32[$db + 8 >> 2] | 0;
   if ($650 >>> 0 < $652 >>> 0) {
    if (!$650) $657 = 0; else {
     HEAP32[$650 + 0 >> 2] = HEAP32[$18 + 0 >> 2];
     HEAP32[$650 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
     HEAP32[$650 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
     HEAP32[$18 + 0 >> 2] = 0;
     HEAP32[$18 + 4 >> 2] = 0;
     HEAP32[$18 + 8 >> 2] = 0;
     $655 = $650 + 12 | 0;
     HEAP32[$655 + 0 >> 2] = HEAP32[$648 + 0 >> 2];
     HEAP32[$655 + 4 >> 2] = HEAP32[$648 + 4 >> 2];
     HEAP32[$655 + 8 >> 2] = HEAP32[$648 + 8 >> 2];
     HEAP32[$648 + 0 >> 2] = 0;
     HEAP32[$648 + 4 >> 2] = 0;
     HEAP32[$648 + 8 >> 2] = 0;
     $657 = HEAP32[$649 >> 2] | 0;
    }
    HEAP32[$649 >> 2] = $657 + 24;
   } else {
    $661 = HEAP32[$db >> 2] | 0;
    $663 = ($650 - $661 | 0) / 24 | 0;
    $664 = $663 + 1 | 0;
    if (($664 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $668 = ($652 - $661 | 0) / 24 | 0;
    if ($668 >>> 0 < 1073741823) {
     $670 = $668 << 1;
     $$0$i$i$i153 = $670 >>> 0 < $664 >>> 0 ? $664 : $670;
    } else $$0$i$i$i153 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i153, $663, $db + 12 | 0);
    $673 = $__v$i$i239 + 8 | 0;
    $674 = HEAP32[$673 >> 2] | 0;
    if ($674) {
     HEAP32[$674 + 0 >> 2] = HEAP32[$18 + 0 >> 2];
     HEAP32[$674 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
     HEAP32[$674 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
     HEAP32[$18 + 0 >> 2] = 0;
     HEAP32[$18 + 4 >> 2] = 0;
     HEAP32[$18 + 8 >> 2] = 0;
     $676 = $674 + 12 | 0;
     HEAP32[$676 + 0 >> 2] = HEAP32[$648 + 0 >> 2];
     HEAP32[$676 + 4 >> 2] = HEAP32[$648 + 4 >> 2];
     HEAP32[$676 + 8 >> 2] = HEAP32[$648 + 8 >> 2];
     HEAP32[$648 + 0 >> 2] = 0;
     HEAP32[$648 + 4 >> 2] = 0;
     HEAP32[$648 + 8 >> 2] = 0;
    }
    HEAP32[$673 >> 2] = $674 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 103:
  {
   HEAP8[$19 >> 0] = 20;
   dest = $19 + 1 | 0;
   src = 61176;
   stop = dest + 10 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$19 + 11 >> 0] = 0;
   $681 = $19 + 12 | 0;
   HEAP32[$681 + 0 >> 2] = 0;
   HEAP32[$681 + 4 >> 2] = 0;
   HEAP32[$681 + 8 >> 2] = 0;
   $682 = $db + 4 | 0;
   $683 = HEAP32[$682 >> 2] | 0;
   $685 = HEAP32[$db + 8 >> 2] | 0;
   if ($683 >>> 0 < $685 >>> 0) {
    if (!$683) $690 = 0; else {
     HEAP32[$683 + 0 >> 2] = HEAP32[$19 + 0 >> 2];
     HEAP32[$683 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
     HEAP32[$683 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
     HEAP32[$19 + 0 >> 2] = 0;
     HEAP32[$19 + 4 >> 2] = 0;
     HEAP32[$19 + 8 >> 2] = 0;
     $688 = $683 + 12 | 0;
     HEAP32[$688 + 0 >> 2] = HEAP32[$681 + 0 >> 2];
     HEAP32[$688 + 4 >> 2] = HEAP32[$681 + 4 >> 2];
     HEAP32[$688 + 8 >> 2] = HEAP32[$681 + 8 >> 2];
     HEAP32[$681 + 0 >> 2] = 0;
     HEAP32[$681 + 4 >> 2] = 0;
     HEAP32[$681 + 8 >> 2] = 0;
     $690 = HEAP32[$682 >> 2] | 0;
    }
    HEAP32[$682 >> 2] = $690 + 24;
   } else {
    $694 = HEAP32[$db >> 2] | 0;
    $696 = ($683 - $694 | 0) / 24 | 0;
    $697 = $696 + 1 | 0;
    if (($697 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $701 = ($685 - $694 | 0) / 24 | 0;
    if ($701 >>> 0 < 1073741823) {
     $703 = $701 << 1;
     $$0$i$i$i162 = $703 >>> 0 < $697 >>> 0 ? $697 : $703;
    } else $$0$i$i$i162 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i162, $696, $db + 12 | 0);
    $706 = $__v$i$i239 + 8 | 0;
    $707 = HEAP32[$706 >> 2] | 0;
    if ($707) {
     HEAP32[$707 + 0 >> 2] = HEAP32[$19 + 0 >> 2];
     HEAP32[$707 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
     HEAP32[$707 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
     HEAP32[$19 + 0 >> 2] = 0;
     HEAP32[$19 + 4 >> 2] = 0;
     HEAP32[$19 + 8 >> 2] = 0;
     $709 = $707 + 12 | 0;
     HEAP32[$709 + 0 >> 2] = HEAP32[$681 + 0 >> 2];
     HEAP32[$709 + 4 >> 2] = HEAP32[$681 + 4 >> 2];
     HEAP32[$709 + 8 >> 2] = HEAP32[$681 + 8 >> 2];
     HEAP32[$681 + 0 >> 2] = 0;
     HEAP32[$681 + 4 >> 2] = 0;
     HEAP32[$681 + 8 >> 2] = 0;
    }
    HEAP32[$706 >> 2] = $707 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 122:
  {
   HEAP8[$20 >> 0] = 6;
   $712 = $20 + 1 | 0;
   HEAP8[$712 + 0 >> 0] = HEAP8[61192] | 0;
   HEAP8[$712 + 1 >> 0] = HEAP8[61193] | 0;
   HEAP8[$712 + 2 >> 0] = HEAP8[61194] | 0;
   HEAP8[$20 + 4 >> 0] = 0;
   $714 = $20 + 12 | 0;
   HEAP32[$714 + 0 >> 2] = 0;
   HEAP32[$714 + 4 >> 2] = 0;
   HEAP32[$714 + 8 >> 2] = 0;
   $715 = $db + 4 | 0;
   $716 = HEAP32[$715 >> 2] | 0;
   $718 = HEAP32[$db + 8 >> 2] | 0;
   if ($716 >>> 0 < $718 >>> 0) {
    if (!$716) $723 = 0; else {
     HEAP32[$716 + 0 >> 2] = HEAP32[$20 + 0 >> 2];
     HEAP32[$716 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
     HEAP32[$716 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
     HEAP32[$20 + 0 >> 2] = 0;
     HEAP32[$20 + 4 >> 2] = 0;
     HEAP32[$20 + 8 >> 2] = 0;
     $721 = $716 + 12 | 0;
     HEAP32[$721 + 0 >> 2] = HEAP32[$714 + 0 >> 2];
     HEAP32[$721 + 4 >> 2] = HEAP32[$714 + 4 >> 2];
     HEAP32[$721 + 8 >> 2] = HEAP32[$714 + 8 >> 2];
     HEAP32[$714 + 0 >> 2] = 0;
     HEAP32[$714 + 4 >> 2] = 0;
     HEAP32[$714 + 8 >> 2] = 0;
     $723 = HEAP32[$715 >> 2] | 0;
    }
    HEAP32[$715 >> 2] = $723 + 24;
   } else {
    $727 = HEAP32[$db >> 2] | 0;
    $729 = ($716 - $727 | 0) / 24 | 0;
    $730 = $729 + 1 | 0;
    if (($730 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $734 = ($718 - $727 | 0) / 24 | 0;
    if ($734 >>> 0 < 1073741823) {
     $736 = $734 << 1;
     $$0$i$i$i171 = $736 >>> 0 < $730 >>> 0 ? $730 : $736;
    } else $$0$i$i$i171 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i171, $729, $db + 12 | 0);
    $739 = $__v$i$i239 + 8 | 0;
    $740 = HEAP32[$739 >> 2] | 0;
    if ($740) {
     HEAP32[$740 + 0 >> 2] = HEAP32[$20 + 0 >> 2];
     HEAP32[$740 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
     HEAP32[$740 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
     HEAP32[$20 + 0 >> 2] = 0;
     HEAP32[$20 + 4 >> 2] = 0;
     HEAP32[$20 + 8 >> 2] = 0;
     $742 = $740 + 12 | 0;
     HEAP32[$742 + 0 >> 2] = HEAP32[$714 + 0 >> 2];
     HEAP32[$742 + 4 >> 2] = HEAP32[$714 + 4 >> 2];
     HEAP32[$742 + 8 >> 2] = HEAP32[$714 + 8 >> 2];
     HEAP32[$714 + 0 >> 2] = 0;
     HEAP32[$714 + 4 >> 2] = 0;
     HEAP32[$714 + 8 >> 2] = 0;
    }
    HEAP32[$739 >> 2] = $740 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 117:
  {
   $745 = $first + 1 | 0;
   $746 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($745, $last, $db) | 0;
   STACKTOP = sp;
   return (($746 | 0) == ($745 | 0) ? $first : $746) | 0;
  }
 case 68:
  {
   $748 = $first + 1 | 0;
   if (($748 | 0) == ($last | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   switch (HEAP8[$748 >> 0] | 0) {
   case 101:
    {
     HEAP8[$22 >> 0] = 20;
     dest = $22 + 1 | 0;
     src = 61216;
     stop = dest + 10 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$22 + 11 >> 0] = 0;
     $787 = $22 + 12 | 0;
     HEAP32[$787 + 0 >> 2] = 0;
     HEAP32[$787 + 4 >> 2] = 0;
     HEAP32[$787 + 8 >> 2] = 0;
     $788 = $db + 4 | 0;
     $789 = HEAP32[$788 >> 2] | 0;
     $791 = HEAP32[$db + 8 >> 2] | 0;
     if ($789 >>> 0 < $791 >>> 0) {
      if (!$789) $796 = 0; else {
       HEAP32[$789 + 0 >> 2] = HEAP32[$22 + 0 >> 2];
       HEAP32[$789 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
       HEAP32[$789 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
       HEAP32[$22 + 0 >> 2] = 0;
       HEAP32[$22 + 4 >> 2] = 0;
       HEAP32[$22 + 8 >> 2] = 0;
       $794 = $789 + 12 | 0;
       HEAP32[$794 + 0 >> 2] = HEAP32[$787 + 0 >> 2];
       HEAP32[$794 + 4 >> 2] = HEAP32[$787 + 4 >> 2];
       HEAP32[$794 + 8 >> 2] = HEAP32[$787 + 8 >> 2];
       HEAP32[$787 + 0 >> 2] = 0;
       HEAP32[$787 + 4 >> 2] = 0;
       HEAP32[$787 + 8 >> 2] = 0;
       $796 = HEAP32[$788 >> 2] | 0;
      }
      HEAP32[$788 >> 2] = $796 + 24;
     } else {
      $800 = HEAP32[$db >> 2] | 0;
      $802 = ($789 - $800 | 0) / 24 | 0;
      $803 = $802 + 1 | 0;
      if (($803 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $807 = ($791 - $800 | 0) / 24 | 0;
      if ($807 >>> 0 < 1073741823) {
       $809 = $807 << 1;
       $$0$i$i$i189 = $809 >>> 0 < $803 >>> 0 ? $803 : $809;
      } else $$0$i$i$i189 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i189, $802, $db + 12 | 0);
      $812 = $__v$i$i239 + 8 | 0;
      $813 = HEAP32[$812 >> 2] | 0;
      if ($813) {
       HEAP32[$813 + 0 >> 2] = HEAP32[$22 + 0 >> 2];
       HEAP32[$813 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
       HEAP32[$813 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
       HEAP32[$22 + 0 >> 2] = 0;
       HEAP32[$22 + 4 >> 2] = 0;
       HEAP32[$22 + 8 >> 2] = 0;
       $815 = $813 + 12 | 0;
       HEAP32[$815 + 0 >> 2] = HEAP32[$787 + 0 >> 2];
       HEAP32[$815 + 4 >> 2] = HEAP32[$787 + 4 >> 2];
       HEAP32[$815 + 8 >> 2] = HEAP32[$787 + 8 >> 2];
       HEAP32[$787 + 0 >> 2] = 0;
       HEAP32[$787 + 4 >> 2] = 0;
       HEAP32[$787 + 8 >> 2] = 0;
      }
      HEAP32[$812 >> 2] = $813 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 102:
    {
     HEAP8[$23 >> 0] = 18;
     dest = $23 + 1 | 0;
     src = 61232;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$23 + 10 >> 0] = 0;
     $820 = $23 + 12 | 0;
     HEAP32[$820 + 0 >> 2] = 0;
     HEAP32[$820 + 4 >> 2] = 0;
     HEAP32[$820 + 8 >> 2] = 0;
     $821 = $db + 4 | 0;
     $822 = HEAP32[$821 >> 2] | 0;
     $824 = HEAP32[$db + 8 >> 2] | 0;
     if ($822 >>> 0 < $824 >>> 0) {
      if (!$822) $829 = 0; else {
       HEAP32[$822 + 0 >> 2] = HEAP32[$23 + 0 >> 2];
       HEAP32[$822 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
       HEAP32[$822 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
       HEAP32[$23 + 0 >> 2] = 0;
       HEAP32[$23 + 4 >> 2] = 0;
       HEAP32[$23 + 8 >> 2] = 0;
       $827 = $822 + 12 | 0;
       HEAP32[$827 + 0 >> 2] = HEAP32[$820 + 0 >> 2];
       HEAP32[$827 + 4 >> 2] = HEAP32[$820 + 4 >> 2];
       HEAP32[$827 + 8 >> 2] = HEAP32[$820 + 8 >> 2];
       HEAP32[$820 + 0 >> 2] = 0;
       HEAP32[$820 + 4 >> 2] = 0;
       HEAP32[$820 + 8 >> 2] = 0;
       $829 = HEAP32[$821 >> 2] | 0;
      }
      HEAP32[$821 >> 2] = $829 + 24;
     } else {
      $833 = HEAP32[$db >> 2] | 0;
      $835 = ($822 - $833 | 0) / 24 | 0;
      $836 = $835 + 1 | 0;
      if (($836 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $840 = ($824 - $833 | 0) / 24 | 0;
      if ($840 >>> 0 < 1073741823) {
       $842 = $840 << 1;
       $$0$i$i$i198 = $842 >>> 0 < $836 >>> 0 ? $836 : $842;
      } else $$0$i$i$i198 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i198, $835, $db + 12 | 0);
      $845 = $__v$i$i239 + 8 | 0;
      $846 = HEAP32[$845 >> 2] | 0;
      if ($846) {
       HEAP32[$846 + 0 >> 2] = HEAP32[$23 + 0 >> 2];
       HEAP32[$846 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
       HEAP32[$846 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
       HEAP32[$23 + 0 >> 2] = 0;
       HEAP32[$23 + 4 >> 2] = 0;
       HEAP32[$23 + 8 >> 2] = 0;
       $848 = $846 + 12 | 0;
       HEAP32[$848 + 0 >> 2] = HEAP32[$820 + 0 >> 2];
       HEAP32[$848 + 4 >> 2] = HEAP32[$820 + 4 >> 2];
       HEAP32[$848 + 8 >> 2] = HEAP32[$820 + 8 >> 2];
       HEAP32[$820 + 0 >> 2] = 0;
       HEAP32[$820 + 4 >> 2] = 0;
       HEAP32[$820 + 8 >> 2] = 0;
      }
      HEAP32[$845 >> 2] = $846 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 104:
    {
     HEAP8[$24 >> 0] = 18;
     dest = $24 + 1 | 0;
     src = 61248;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$24 + 10 >> 0] = 0;
     $853 = $24 + 12 | 0;
     HEAP32[$853 + 0 >> 2] = 0;
     HEAP32[$853 + 4 >> 2] = 0;
     HEAP32[$853 + 8 >> 2] = 0;
     $854 = $db + 4 | 0;
     $855 = HEAP32[$854 >> 2] | 0;
     $857 = HEAP32[$db + 8 >> 2] | 0;
     if ($855 >>> 0 < $857 >>> 0) {
      if (!$855) $862 = 0; else {
       HEAP32[$855 + 0 >> 2] = HEAP32[$24 + 0 >> 2];
       HEAP32[$855 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
       HEAP32[$855 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
       HEAP32[$24 + 0 >> 2] = 0;
       HEAP32[$24 + 4 >> 2] = 0;
       HEAP32[$24 + 8 >> 2] = 0;
       $860 = $855 + 12 | 0;
       HEAP32[$860 + 0 >> 2] = HEAP32[$853 + 0 >> 2];
       HEAP32[$860 + 4 >> 2] = HEAP32[$853 + 4 >> 2];
       HEAP32[$860 + 8 >> 2] = HEAP32[$853 + 8 >> 2];
       HEAP32[$853 + 0 >> 2] = 0;
       HEAP32[$853 + 4 >> 2] = 0;
       HEAP32[$853 + 8 >> 2] = 0;
       $862 = HEAP32[$854 >> 2] | 0;
      }
      HEAP32[$854 >> 2] = $862 + 24;
     } else {
      $866 = HEAP32[$db >> 2] | 0;
      $868 = ($855 - $866 | 0) / 24 | 0;
      $869 = $868 + 1 | 0;
      if (($869 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $873 = ($857 - $866 | 0) / 24 | 0;
      if ($873 >>> 0 < 1073741823) {
       $875 = $873 << 1;
       $$0$i$i$i207 = $875 >>> 0 < $869 >>> 0 ? $869 : $875;
      } else $$0$i$i$i207 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i207, $868, $db + 12 | 0);
      $878 = $__v$i$i239 + 8 | 0;
      $879 = HEAP32[$878 >> 2] | 0;
      if ($879) {
       HEAP32[$879 + 0 >> 2] = HEAP32[$24 + 0 >> 2];
       HEAP32[$879 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
       HEAP32[$879 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
       HEAP32[$24 + 0 >> 2] = 0;
       HEAP32[$24 + 4 >> 2] = 0;
       HEAP32[$24 + 8 >> 2] = 0;
       $881 = $879 + 12 | 0;
       HEAP32[$881 + 0 >> 2] = HEAP32[$853 + 0 >> 2];
       HEAP32[$881 + 4 >> 2] = HEAP32[$853 + 4 >> 2];
       HEAP32[$881 + 8 >> 2] = HEAP32[$853 + 8 >> 2];
       HEAP32[$853 + 0 >> 2] = 0;
       HEAP32[$853 + 4 >> 2] = 0;
       HEAP32[$853 + 8 >> 2] = 0;
      }
      HEAP32[$878 >> 2] = $879 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 100:
    {
     HEAP8[$21 >> 0] = 18;
     dest = $21 + 1 | 0;
     src = 61200;
     stop = dest + 9 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$21 + 10 >> 0] = 0;
     $754 = $21 + 12 | 0;
     HEAP32[$754 + 0 >> 2] = 0;
     HEAP32[$754 + 4 >> 2] = 0;
     HEAP32[$754 + 8 >> 2] = 0;
     $755 = $db + 4 | 0;
     $756 = HEAP32[$755 >> 2] | 0;
     $758 = HEAP32[$db + 8 >> 2] | 0;
     if ($756 >>> 0 < $758 >>> 0) {
      if (!$756) $763 = 0; else {
       HEAP32[$756 + 0 >> 2] = HEAP32[$21 + 0 >> 2];
       HEAP32[$756 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
       HEAP32[$756 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
       HEAP32[$21 + 0 >> 2] = 0;
       HEAP32[$21 + 4 >> 2] = 0;
       HEAP32[$21 + 8 >> 2] = 0;
       $761 = $756 + 12 | 0;
       HEAP32[$761 + 0 >> 2] = HEAP32[$754 + 0 >> 2];
       HEAP32[$761 + 4 >> 2] = HEAP32[$754 + 4 >> 2];
       HEAP32[$761 + 8 >> 2] = HEAP32[$754 + 8 >> 2];
       HEAP32[$754 + 0 >> 2] = 0;
       HEAP32[$754 + 4 >> 2] = 0;
       HEAP32[$754 + 8 >> 2] = 0;
       $763 = HEAP32[$755 >> 2] | 0;
      }
      HEAP32[$755 >> 2] = $763 + 24;
     } else {
      $767 = HEAP32[$db >> 2] | 0;
      $769 = ($756 - $767 | 0) / 24 | 0;
      $770 = $769 + 1 | 0;
      if (($770 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $774 = ($758 - $767 | 0) / 24 | 0;
      if ($774 >>> 0 < 1073741823) {
       $776 = $774 << 1;
       $$0$i$i$i180 = $776 >>> 0 < $770 >>> 0 ? $770 : $776;
      } else $$0$i$i$i180 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i180, $769, $db + 12 | 0);
      $779 = $__v$i$i239 + 8 | 0;
      $780 = HEAP32[$779 >> 2] | 0;
      if ($780) {
       HEAP32[$780 + 0 >> 2] = HEAP32[$21 + 0 >> 2];
       HEAP32[$780 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
       HEAP32[$780 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
       HEAP32[$21 + 0 >> 2] = 0;
       HEAP32[$21 + 4 >> 2] = 0;
       HEAP32[$21 + 8 >> 2] = 0;
       $782 = $780 + 12 | 0;
       HEAP32[$782 + 0 >> 2] = HEAP32[$754 + 0 >> 2];
       HEAP32[$782 + 4 >> 2] = HEAP32[$754 + 4 >> 2];
       HEAP32[$782 + 8 >> 2] = HEAP32[$754 + 8 >> 2];
       HEAP32[$754 + 0 >> 2] = 0;
       HEAP32[$754 + 4 >> 2] = 0;
       HEAP32[$754 + 8 >> 2] = 0;
      }
      HEAP32[$779 >> 2] = $780 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 105:
    {
     HEAP8[$25 >> 0] = 16;
     $885 = $25 + 1 | 0;
     $886 = $885;
     HEAP8[$886 >> 0] = 99;
     HEAP8[$886 + 1 >> 0] = 104;
     HEAP8[$886 + 2 >> 0] = 97;
     HEAP8[$886 + 3 >> 0] = 114;
     $888 = $885 + 4 | 0;
     HEAP8[$888 >> 0] = 51;
     HEAP8[$888 + 1 >> 0] = 50;
     HEAP8[$888 + 2 >> 0] = 95;
     HEAP8[$888 + 3 >> 0] = 116;
     HEAP8[$25 + 9 >> 0] = 0;
     $890 = $25 + 12 | 0;
     HEAP32[$890 + 0 >> 2] = 0;
     HEAP32[$890 + 4 >> 2] = 0;
     HEAP32[$890 + 8 >> 2] = 0;
     $891 = $db + 4 | 0;
     $892 = HEAP32[$891 >> 2] | 0;
     $894 = HEAP32[$db + 8 >> 2] | 0;
     if ($892 >>> 0 < $894 >>> 0) {
      if (!$892) $899 = 0; else {
       HEAP32[$892 + 0 >> 2] = HEAP32[$25 + 0 >> 2];
       HEAP32[$892 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
       HEAP32[$892 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
       HEAP32[$25 + 0 >> 2] = 0;
       HEAP32[$25 + 4 >> 2] = 0;
       HEAP32[$25 + 8 >> 2] = 0;
       $897 = $892 + 12 | 0;
       HEAP32[$897 + 0 >> 2] = HEAP32[$890 + 0 >> 2];
       HEAP32[$897 + 4 >> 2] = HEAP32[$890 + 4 >> 2];
       HEAP32[$897 + 8 >> 2] = HEAP32[$890 + 8 >> 2];
       HEAP32[$890 + 0 >> 2] = 0;
       HEAP32[$890 + 4 >> 2] = 0;
       HEAP32[$890 + 8 >> 2] = 0;
       $899 = HEAP32[$891 >> 2] | 0;
      }
      HEAP32[$891 >> 2] = $899 + 24;
     } else {
      $903 = HEAP32[$db >> 2] | 0;
      $905 = ($892 - $903 | 0) / 24 | 0;
      $906 = $905 + 1 | 0;
      if (($906 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $910 = ($894 - $903 | 0) / 24 | 0;
      if ($910 >>> 0 < 1073741823) {
       $912 = $910 << 1;
       $$0$i$i$i216 = $912 >>> 0 < $906 >>> 0 ? $906 : $912;
      } else $$0$i$i$i216 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i216, $905, $db + 12 | 0);
      $915 = $__v$i$i239 + 8 | 0;
      $916 = HEAP32[$915 >> 2] | 0;
      if ($916) {
       HEAP32[$916 + 0 >> 2] = HEAP32[$25 + 0 >> 2];
       HEAP32[$916 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
       HEAP32[$916 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
       HEAP32[$25 + 0 >> 2] = 0;
       HEAP32[$25 + 4 >> 2] = 0;
       HEAP32[$25 + 8 >> 2] = 0;
       $918 = $916 + 12 | 0;
       HEAP32[$918 + 0 >> 2] = HEAP32[$890 + 0 >> 2];
       HEAP32[$918 + 4 >> 2] = HEAP32[$890 + 4 >> 2];
       HEAP32[$918 + 8 >> 2] = HEAP32[$890 + 8 >> 2];
       HEAP32[$890 + 0 >> 2] = 0;
       HEAP32[$890 + 4 >> 2] = 0;
       HEAP32[$890 + 8 >> 2] = 0;
      }
      HEAP32[$915 >> 2] = $916 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 115:
    {
     HEAP8[$26 >> 0] = 16;
     $922 = $26 + 1 | 0;
     $923 = $922;
     HEAP8[$923 >> 0] = 99;
     HEAP8[$923 + 1 >> 0] = 104;
     HEAP8[$923 + 2 >> 0] = 97;
     HEAP8[$923 + 3 >> 0] = 114;
     $925 = $922 + 4 | 0;
     HEAP8[$925 >> 0] = 49;
     HEAP8[$925 + 1 >> 0] = 54;
     HEAP8[$925 + 2 >> 0] = 95;
     HEAP8[$925 + 3 >> 0] = 116;
     HEAP8[$26 + 9 >> 0] = 0;
     $927 = $26 + 12 | 0;
     HEAP32[$927 + 0 >> 2] = 0;
     HEAP32[$927 + 4 >> 2] = 0;
     HEAP32[$927 + 8 >> 2] = 0;
     $928 = $db + 4 | 0;
     $929 = HEAP32[$928 >> 2] | 0;
     $931 = HEAP32[$db + 8 >> 2] | 0;
     if ($929 >>> 0 < $931 >>> 0) {
      if (!$929) $936 = 0; else {
       HEAP32[$929 + 0 >> 2] = HEAP32[$26 + 0 >> 2];
       HEAP32[$929 + 4 >> 2] = HEAP32[$26 + 4 >> 2];
       HEAP32[$929 + 8 >> 2] = HEAP32[$26 + 8 >> 2];
       HEAP32[$26 + 0 >> 2] = 0;
       HEAP32[$26 + 4 >> 2] = 0;
       HEAP32[$26 + 8 >> 2] = 0;
       $934 = $929 + 12 | 0;
       HEAP32[$934 + 0 >> 2] = HEAP32[$927 + 0 >> 2];
       HEAP32[$934 + 4 >> 2] = HEAP32[$927 + 4 >> 2];
       HEAP32[$934 + 8 >> 2] = HEAP32[$927 + 8 >> 2];
       HEAP32[$927 + 0 >> 2] = 0;
       HEAP32[$927 + 4 >> 2] = 0;
       HEAP32[$927 + 8 >> 2] = 0;
       $936 = HEAP32[$928 >> 2] | 0;
      }
      HEAP32[$928 >> 2] = $936 + 24;
     } else {
      $940 = HEAP32[$db >> 2] | 0;
      $942 = ($929 - $940 | 0) / 24 | 0;
      $943 = $942 + 1 | 0;
      if (($943 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $947 = ($931 - $940 | 0) / 24 | 0;
      if ($947 >>> 0 < 1073741823) {
       $949 = $947 << 1;
       $$0$i$i$i225 = $949 >>> 0 < $943 >>> 0 ? $943 : $949;
      } else $$0$i$i$i225 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i225, $942, $db + 12 | 0);
      $952 = $__v$i$i239 + 8 | 0;
      $953 = HEAP32[$952 >> 2] | 0;
      if ($953) {
       HEAP32[$953 + 0 >> 2] = HEAP32[$26 + 0 >> 2];
       HEAP32[$953 + 4 >> 2] = HEAP32[$26 + 4 >> 2];
       HEAP32[$953 + 8 >> 2] = HEAP32[$26 + 8 >> 2];
       HEAP32[$26 + 0 >> 2] = 0;
       HEAP32[$26 + 4 >> 2] = 0;
       HEAP32[$26 + 8 >> 2] = 0;
       $955 = $953 + 12 | 0;
       HEAP32[$955 + 0 >> 2] = HEAP32[$927 + 0 >> 2];
       HEAP32[$955 + 4 >> 2] = HEAP32[$927 + 4 >> 2];
       HEAP32[$955 + 8 >> 2] = HEAP32[$927 + 8 >> 2];
       HEAP32[$927 + 0 >> 2] = 0;
       HEAP32[$927 + 4 >> 2] = 0;
       HEAP32[$927 + 8 >> 2] = 0;
      }
      HEAP32[$952 >> 2] = $953 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 97:
    {
     HEAP8[$27 >> 0] = 8;
     $958 = $27 + 1 | 0;
     HEAP8[$958 >> 0] = 97;
     HEAP8[$958 + 1 >> 0] = 117;
     HEAP8[$958 + 2 >> 0] = 116;
     HEAP8[$958 + 3 >> 0] = 111;
     HEAP8[$27 + 5 >> 0] = 0;
     $960 = $27 + 12 | 0;
     HEAP32[$960 + 0 >> 2] = 0;
     HEAP32[$960 + 4 >> 2] = 0;
     HEAP32[$960 + 8 >> 2] = 0;
     $961 = $db + 4 | 0;
     $962 = HEAP32[$961 >> 2] | 0;
     $964 = HEAP32[$db + 8 >> 2] | 0;
     if ($962 >>> 0 < $964 >>> 0) {
      if (!$962) $969 = 0; else {
       HEAP32[$962 + 0 >> 2] = HEAP32[$27 + 0 >> 2];
       HEAP32[$962 + 4 >> 2] = HEAP32[$27 + 4 >> 2];
       HEAP32[$962 + 8 >> 2] = HEAP32[$27 + 8 >> 2];
       HEAP32[$27 + 0 >> 2] = 0;
       HEAP32[$27 + 4 >> 2] = 0;
       HEAP32[$27 + 8 >> 2] = 0;
       $967 = $962 + 12 | 0;
       HEAP32[$967 + 0 >> 2] = HEAP32[$960 + 0 >> 2];
       HEAP32[$967 + 4 >> 2] = HEAP32[$960 + 4 >> 2];
       HEAP32[$967 + 8 >> 2] = HEAP32[$960 + 8 >> 2];
       HEAP32[$960 + 0 >> 2] = 0;
       HEAP32[$960 + 4 >> 2] = 0;
       HEAP32[$960 + 8 >> 2] = 0;
       $969 = HEAP32[$961 >> 2] | 0;
      }
      HEAP32[$961 >> 2] = $969 + 24;
     } else {
      $973 = HEAP32[$db >> 2] | 0;
      $975 = ($962 - $973 | 0) / 24 | 0;
      $976 = $975 + 1 | 0;
      if (($976 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $980 = ($964 - $973 | 0) / 24 | 0;
      if ($980 >>> 0 < 1073741823) {
       $982 = $980 << 1;
       $$0$i$i$i234 = $982 >>> 0 < $976 >>> 0 ? $976 : $982;
      } else $$0$i$i$i234 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i234, $975, $db + 12 | 0);
      $985 = $__v$i$i239 + 8 | 0;
      $986 = HEAP32[$985 >> 2] | 0;
      if ($986) {
       HEAP32[$986 + 0 >> 2] = HEAP32[$27 + 0 >> 2];
       HEAP32[$986 + 4 >> 2] = HEAP32[$27 + 4 >> 2];
       HEAP32[$986 + 8 >> 2] = HEAP32[$27 + 8 >> 2];
       HEAP32[$27 + 0 >> 2] = 0;
       HEAP32[$27 + 4 >> 2] = 0;
       HEAP32[$27 + 8 >> 2] = 0;
       $988 = $986 + 12 | 0;
       HEAP32[$988 + 0 >> 2] = HEAP32[$960 + 0 >> 2];
       HEAP32[$988 + 4 >> 2] = HEAP32[$960 + 4 >> 2];
       HEAP32[$988 + 8 >> 2] = HEAP32[$960 + 8 >> 2];
       HEAP32[$960 + 0 >> 2] = 0;
       HEAP32[$960 + 4 >> 2] = 0;
       HEAP32[$960 + 8 >> 2] = 0;
      }
      HEAP32[$985 >> 2] = $986 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   case 110:
    {
     $991 = _malloc(16) | 0;
     HEAP32[$28 + 8 >> 2] = $991;
     HEAP32[$28 >> 2] = 17;
     HEAP32[$28 + 4 >> 2] = 14;
     dest = $991 + 0 | 0;
     src = 61264;
     stop = dest + 14 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$991 + 14 >> 0] = 0;
     $995 = $28 + 12 | 0;
     HEAP32[$995 + 0 >> 2] = 0;
     HEAP32[$995 + 4 >> 2] = 0;
     HEAP32[$995 + 8 >> 2] = 0;
     $996 = $db + 4 | 0;
     $997 = HEAP32[$996 >> 2] | 0;
     $999 = HEAP32[$db + 8 >> 2] | 0;
     if ($997 >>> 0 < $999 >>> 0) {
      if (!$997) $1004 = 0; else {
       HEAP32[$997 + 0 >> 2] = HEAP32[$28 + 0 >> 2];
       HEAP32[$997 + 4 >> 2] = HEAP32[$28 + 4 >> 2];
       HEAP32[$997 + 8 >> 2] = HEAP32[$28 + 8 >> 2];
       HEAP32[$28 + 0 >> 2] = 0;
       HEAP32[$28 + 4 >> 2] = 0;
       HEAP32[$28 + 8 >> 2] = 0;
       $1002 = $997 + 12 | 0;
       HEAP32[$1002 + 0 >> 2] = HEAP32[$995 + 0 >> 2];
       HEAP32[$1002 + 4 >> 2] = HEAP32[$995 + 4 >> 2];
       HEAP32[$1002 + 8 >> 2] = HEAP32[$995 + 8 >> 2];
       HEAP32[$995 + 0 >> 2] = 0;
       HEAP32[$995 + 4 >> 2] = 0;
       HEAP32[$995 + 8 >> 2] = 0;
       $1004 = HEAP32[$996 >> 2] | 0;
      }
      HEAP32[$996 >> 2] = $1004 + 24;
     } else {
      $1008 = HEAP32[$db >> 2] | 0;
      $1010 = ($997 - $1008 | 0) / 24 | 0;
      $1011 = $1010 + 1 | 0;
      if (($1011 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $1015 = ($999 - $1008 | 0) / 24 | 0;
      if ($1015 >>> 0 < 1073741823) {
       $1017 = $1015 << 1;
       $$0$i$i$i242 = $1017 >>> 0 < $1011 >>> 0 ? $1011 : $1017;
      } else $$0$i$i$i242 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i242, $1010, $db + 12 | 0);
      $1020 = $__v$i$i239 + 8 | 0;
      $1021 = HEAP32[$1020 >> 2] | 0;
      if ($1021) {
       HEAP32[$1021 + 0 >> 2] = HEAP32[$28 + 0 >> 2];
       HEAP32[$1021 + 4 >> 2] = HEAP32[$28 + 4 >> 2];
       HEAP32[$1021 + 8 >> 2] = HEAP32[$28 + 8 >> 2];
       HEAP32[$28 + 0 >> 2] = 0;
       HEAP32[$28 + 4 >> 2] = 0;
       HEAP32[$28 + 8 >> 2] = 0;
       $1023 = $1021 + 12 | 0;
       HEAP32[$1023 + 0 >> 2] = HEAP32[$995 + 0 >> 2];
       HEAP32[$1023 + 4 >> 2] = HEAP32[$995 + 4 >> 2];
       HEAP32[$1023 + 8 >> 2] = HEAP32[$995 + 8 >> 2];
       HEAP32[$995 + 0 >> 2] = 0;
       HEAP32[$995 + 4 >> 2] = 0;
       HEAP32[$995 + 8 >> 2] = 0;
      }
      HEAP32[$1020 >> 2] = $1021 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
     $$0 = $first + 2 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   default:
    {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
   break;
  }
 case 118:
  {
   HEAP8[$0 >> 0] = 8;
   $32 = $0 + 1 | 0;
   HEAP8[$32 >> 0] = 118;
   HEAP8[$32 + 1 >> 0] = 111;
   HEAP8[$32 + 2 >> 0] = 105;
   HEAP8[$32 + 3 >> 0] = 100;
   HEAP8[$0 + 5 >> 0] = 0;
   $34 = $0 + 12 | 0;
   HEAP32[$34 + 0 >> 2] = 0;
   HEAP32[$34 + 4 >> 2] = 0;
   HEAP32[$34 + 8 >> 2] = 0;
   $35 = $db + 4 | 0;
   $36 = HEAP32[$35 >> 2] | 0;
   $38 = HEAP32[$db + 8 >> 2] | 0;
   if ($36 >>> 0 < $38 >>> 0) {
    if (!$36) $43 = 0; else {
     HEAP32[$36 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
     HEAP32[$36 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
     HEAP32[$36 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
     HEAP32[$0 + 0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$0 + 8 >> 2] = 0;
     $41 = $36 + 12 | 0;
     HEAP32[$41 + 0 >> 2] = HEAP32[$34 + 0 >> 2];
     HEAP32[$41 + 4 >> 2] = HEAP32[$34 + 4 >> 2];
     HEAP32[$41 + 8 >> 2] = HEAP32[$34 + 8 >> 2];
     HEAP32[$34 + 0 >> 2] = 0;
     HEAP32[$34 + 4 >> 2] = 0;
     HEAP32[$34 + 8 >> 2] = 0;
     $43 = HEAP32[$35 >> 2] | 0;
    }
    HEAP32[$35 >> 2] = $43 + 24;
   } else {
    $47 = HEAP32[$db >> 2] | 0;
    $49 = ($36 - $47 | 0) / 24 | 0;
    $50 = $49 + 1 | 0;
    if (($50 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $54 = ($38 - $47 | 0) / 24 | 0;
    if ($54 >>> 0 < 1073741823) {
     $56 = $54 << 1;
     $$0$i$i$i = $56 >>> 0 < $50 >>> 0 ? $50 : $56;
    } else $$0$i$i$i = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239, $$0$i$i$i, $49, $db + 12 | 0);
    $59 = $__v$i$i239 + 8 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    if ($60) {
     HEAP32[$60 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
     HEAP32[$60 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
     HEAP32[$60 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
     HEAP32[$0 + 0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$0 + 8 >> 2] = 0;
     $62 = $60 + 12 | 0;
     HEAP32[$62 + 0 >> 2] = HEAP32[$34 + 0 >> 2];
     HEAP32[$62 + 4 >> 2] = HEAP32[$34 + 4 >> 2];
     HEAP32[$62 + 8 >> 2] = HEAP32[$34 + 8 >> 2];
     HEAP32[$34 + 0 >> 2] = 0;
     HEAP32[$34 + 4 >> 2] = 0;
     HEAP32[$34 + 8 >> 2] = 0;
    }
    HEAP32[$59 >> 2] = $60 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i239);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
   $$0 = $first + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 return 0;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$0 = 0.0, $$0$i$i151 = 0, $$0$i$i216 = 0, $$0$i149 = 0, $$0$i206 = 0, $$0$i211 = 0, $$012$i = 0, $$013$i = 0, $$01332$i = 0, $$01333$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3127$i = 0, $$lcssa55$i = 0, $$pn$i = 0.0, $$pre = 0, $$pre$i1 = 0, $$pre$i110 = 0, $$pre$i123 = 0, $$pre$i136 = 0, $$pre$i153 = 0, $$pre$i166 = 0, $$pre$i179 = 0, $$pre$i18 = 0, $$pre$i19 = 0, $$pre$i192 = 0, $$pre$i32 = 0, $$pre$i45 = 0, $$pre$i5 = 0, $$pre$i58 = 0, $$pre$i71 = 0, $$pre$i84 = 0, $$pre$i97 = 0, $$pre$phi$iZ2D = 0.0, $$pre3$i = 0, $$pre3$i$pre$pre = 0, $$pre3$i100 = 0, $$pre3$i100$pre$pre = 0, $$pre3$i113 = 0, $$pre3$i113$pre$pre = 0, $$pre3$i126 = 0, $$pre3$i126$pre$pre = 0, $$pre3$i139 = 0, $$pre3$i139$pre$pre = 0, $$pre3$i156 = 0, $$pre3$i156$pre$pre = 0, $$pre3$i169 = 0, $$pre3$i169$pre$pre = 0, $$pre3$i182 = 0, $$pre3$i182$pre$pre = 0, $$pre3$i195 = 0, $$pre3$i195$pre$pre = 0, $$pre3$i22 = 0, $$pre3$i22$pre$pre = 0, $$pre3$i35 = 0, $$pre3$i35$pre$pre = 0, $$pre3$i48 = 0, $$pre3$i48$pre$pre = 0, $$pre3$i61 = 0, $$pre3$i61$pre$pre = 0, $$pre3$i74 = 0, $$pre3$i74$pre$pre = 0, $$pre3$i8 = 0, $$pre3$i8$pre$pre = 0, $$pre3$i87 = 0, $$pre3$i87$pre$pre = 0, $$sink$off0$us$i = 0, $$sink$off0$us98$i = 0, $0 = 0, $1 = 0, $10 = 0, $1000 = 0, $1007 = 0, $101 = 0, $1015 = 0, $102 = 0, $1021 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $103 = 0, $1034 = 0, $1044 = 0, $1048 = 0, $1049 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1058 = 0, $1065 = 0, $1073 = 0, $1079 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1092 = 0, $11 = 0, $110 = 0, $1102 = 0, $1106 = 0, $1108 = 0, $1109 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1118 = 0, $1123 = 0, $1124 = 0, $1128 = 0, $1134 = 0, $1141 = 0, $1149 = 0, $1155 = 0, $1159 = 0, $1160 = 0, $1161 = 0, $1168 = 0, $1178 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $1190 = 0, $1191 = 0, $1194 = 0, $1195 = 0, $12 = 0, $120 = 0, $1204 = 0, $1209 = 0, $1210 = 0, $1211 = 0, $1217 = 0, $1219 = 0, $1222 = 0, $1224 = 0, $1229 = 0, $1230 = 0, $1232 = 0, $1233 = 0, $1246 = 0, $1248 = 0, $1258 = 0, $1260 = 0, $1272 = 0, $1274 = 0, $129 = 0, $1296 = 0, $1308 = 0, $1312 = 0, $1315 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $1322 = 0, $1336 = 0, $1339 = 0, $1341 = 0, $1343 = 0, $1344 = 0, $135 = 0, $1350 = 0, $1352 = 0, $1357 = 0, $1360 = 0, $1365 = 0, $1367 = 0, $1369 = 0, $1370 = 0, $1376 = 0, $1378 = 0, $1383 = 0, $1386 = 0, $1390 = 0, $1393 = 0, $1398 = 0, $1403 = 0, $1405 = 0, $1408 = 0, $1410 = 0, $1414 = 0, $1415 = 0, $1417 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1426 = 0, $1436 = 0, $1441 = 0, $1449 = 0.0, $1451 = 0, $1454 = 0, $1456 = 0, $1458 = 0, $1460 = 0, $1463 = 0, $1465 = 0, $1468 = 0, $1469 = 0, $1472 = 0, $1473 = 0, $1474 = 0.0, $1479 = 0, $1480 = 0.0, $1481 = 0, $1483 = 0, $1485 = 0, $1488 = 0, $1490 = 0, $1493 = 0, $1494 = 0, $1497 = 0.0, $150 = 0, $1501 = 0, $1504 = 0, $1511 = 0.0, $1529 = 0.0, $1531 = 0, $1546 = 0.0, $1547 = 0, $1550 = 0, $1553 = 0.0, $1554 = 0, $1557 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1565 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $160 = 0, $1600 = 0, $161 = 0, $162 = 0, $169 = 0, $179 = 0, $18 = 0, $182 = 0, $185 = 0, $189 = 0, $2 = 0, $202 = 0, $208 = 0, $215 = 0, $223 = 0, $229 = 0, $233 = 0, $234 = 0, $235 = 0, $242 = 0, $25 = 0, $252 = 0, $255 = 0, $257 = 0, $263 = 0, $270 = 0, $278 = 0, $284 = 0, $288 = 0, $289 = 0, $290 = 0, $297 = 0, $3 = 0, $307 = 0, $311 = 0, $315 = 0, $321 = 0, $328 = 0, $33 = 0, $336 = 0, $342 = 0, $346 = 0, $347 = 0, $348 = 0, $355 = 0, $365 = 0, $369 = 0, $378 = 0, $383 = 0, $39 = 0, $391 = 0, $393 = 0, $396 = 0, $399 = 0, $4 = 0, $405 = 0, $412 = 0, $420 = 0, $426 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $439 = 0, $44 = 0, $449 = 0, $45 = 0, $453 = 0, $455 = 0, $461 = 0, $468 = 0, $476 = 0, $482 = 0, $486 = 0, $487 = 0, $488 = 0, $495 = 0, $5 = 0, $505 = 0, $508 = 0, $514 = 0, $52 = 0, $521 = 0, $529 = 0, $535 = 0, $539 = 0, $540 = 0, $541 = 0, $548 = 0, $558 = 0, $561 = 0, $567 = 0, $574 = 0, $582 = 0, $588 = 0, $592 = 0, $593 = 0, $594 = 0, $6 = 0, $601 = 0, $611 = 0, $615 = 0, $62 = 0, $621 = 0, $628 = 0, $636 = 0, $642 = 0, $646 = 0, $647 = 0, $648 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $659 = 0, $669 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $677 = 0, $678 = 0, $680 = 0, $683 = 0, $688 = 0, $69 = 0, $690 = 0, $7 = 0, $70 = 0, $702 = 0.0, $709 = 0, $711 = 0, $717 = 0, $724 = 0, $732 = 0, $738 = 0, $742 = 0, $743 = 0, $744 = 0, $751 = 0, $76 = 0, $761 = 0, $766 = 0, $770 = 0, $774 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $791 = 0, $792 = 0, $793 = 0, $8 = 0, $803 = 0, $804 = 0, $813 = 0, $822 = 0, $824 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $843 = 0, $845 = 0, $857 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $867 = 0, $869 = 0, $870 = 0, $871 = 0, $872 = 0, $880 = 0, $882 = 0, $884 = 0, $887 = 0, $889 = 0, $892 = 0, $893 = 0, $896 = 0.0, $897 = 0, $898 = 0, $9 = 0, $903 = 0, $91 = 0, $915 = 0.0, $919 = 0.0, $920 = 0, $923 = 0, $926 = 0.0, $927 = 0, $930 = 0, $933 = 0, $934 = 0, $940 = 0, $941 = 0, $947 = 0, $954 = 0, $962 = 0, $968 = 0, $97 = 0, $972 = 0, $973 = 0, $974 = 0, $981 = 0, $991 = 0, $994 = 0, $a$0$lcssa180$i = 0, $a$0106$i = 0, $a$1$i = 0, $a$2$ph44$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$483$i = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0, $bits$0$ph = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$174 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$372 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$i = 0, $c$i104 = 0, $c$i117 = 0, $c$i12 = 0, $c$i130 = 0, $c$i143 = 0, $c$i160 = 0, $c$i173 = 0, $c$i186 = 0, $c$i199 = 0, $c$i26 = 0, $c$i39 = 0, $c$i52 = 0, $c$i65 = 0, $c$i78 = 0, $c$i91 = 0, $carry$0108$i = 0, $carry1$0$us$i = 0, $carry1$0$us94$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us99$i = 0, $carry3$086$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$030$i = 0, $denormal$031$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us89$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i12 = 0, $gotdig$2$i = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3123$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1124$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$073 = 0, $i$081$i = 0, $i$1$i = 0, $i$271 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$0126$i = 0, $j$072$i = 0, $j$073$i = 0, $j$074$i = 0, $j$2$i = 0, $j$3115$i = 0, $k$0$lcssa$i = 0, $k$0125$i = 0, $k$068$i = 0, $k$069$i = 0, $k$070$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4107$i = 0, $k$5$in$us$i = 0, $k$5$in$us93$i = 0, $k$5$us$i = 0, $k$5$us95$i = 0, $k$684$i = 0, $lnz$0$lcssa$i = 0, $lnz$0122$i = 0, $lnz$062$i = 0, $lnz$063$i = 0, $lnz$064$i = 0, $lnz$2$i = 0, $or$cond22$i = 0, $or$cond9$i = 0, $rp$0$lcssa181$i = 0, $rp$0105$i = 0, $rp$1$i19 = 0, $rp$2$ph42$i = 0, $rp$3$i$ph = 0, $rp$3$ph40$i = 0, $rp$482$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge = 0, $storemerge$i = 0, $storemerge371 = 0, $storemerge372 = 0, $storemerge373 = 0, $storemerge374 = 0, $storemerge375 = 0, $storemerge376 = 0, $storemerge377 = 0, $storemerge378 = 0, $storemerge379 = 0, $storemerge380 = 0, $storemerge381 = 0, $storemerge382 = 0, $storemerge383 = 0, $storemerge384 = 0, $storemerge385 = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$i = 0.0, $y$0$i$i217 = 0.0, $y$0$i150 = 0.0, $y$0$i207 = 0.0, $y$0$i212 = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $z$0$i = 0, $z$1$ph43$i = 0, $z$1$us$i = 0, $z$1$us90$i = 0, $z$2$us$i = 0, $z$2$us92$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us102$i = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0, $k$4107$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 $c$i199 = sp + 518 | 0;
 $c$i186 = sp + 517 | 0;
 $c$i173 = sp + 512 | 0;
 $c$i160 = sp + 514 | 0;
 $c$i143 = sp + 519 | 0;
 $c$i130 = sp + 515 | 0;
 $c$i117 = sp + 516 | 0;
 $c$i104 = sp + 513 | 0;
 $c$i91 = sp + 527 | 0;
 $c$i78 = sp + 520 | 0;
 $c$i65 = sp + 521 | 0;
 $c$i52 = sp + 522 | 0;
 $c$i39 = sp + 523 | 0;
 $c$i26 = sp + 524 | 0;
 $c$i12 = sp + 525 | 0;
 $c$i = sp + 526 | 0;
 $x$i = sp;
 if (($prec | 0) == 1) {
  $bits$0$ph = 53;
  $emin$0$ph = -1074;
 } else if (($prec | 0) == 2) {
  $bits$0$ph = 53;
  $emin$0$ph = -1074;
 } else if (!$prec) {
  $bits$0$ph = 24;
  $emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $0 = $f + 4 | 0;
 $1 = $f + 100 | 0;
 $2 = $f + 104 | 0;
 $3 = $f + 8 | 0;
 $4 = $f + 74 | 0;
 $5 = $f + 20 | 0;
 $6 = $f + 44 | 0;
 $7 = $f + 36 | 0;
 $8 = $f + 16 | 0;
 $9 = $f + 28 | 0;
 $10 = $f + 32 | 0;
 $11 = $f + 108 | 0;
 L6 : while (1) {
  $12 = HEAP32[$0 >> 2] | 0;
  if ($12 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $12 + 1;
   $65 = HEAPU8[$12 >> 0] | 0;
  } else {
   $18 = HEAP32[$2 >> 2] | 0;
   if ($18) if ((HEAP32[$11 >> 2] | 0) >= ($18 | 0)) {
    label = 17;
    break;
   }
   if (!(HEAP32[$3 >> 2] | 0)) {
    $25 = HEAP8[$4 >> 0] | 0;
    HEAP8[$4 >> 0] = $25 + 255 | $25;
    if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$5 >> 2] = 0;
    $33 = HEAP32[$f >> 2] | 0;
    if ($33 & 20) {
     label = 13;
     break;
    }
    $39 = HEAP32[$6 >> 2] | 0;
    HEAP32[$3 >> 2] = $39;
    HEAP32[$0 >> 2] = $39;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i, 1) | 0) != 1) {
    label = 17;
    break;
   }
   $43 = HEAP8[$c$i >> 0] | 0;
   $44 = $43 & 255;
   $45 = HEAP32[$2 >> 2] | 0;
   $$pre$i1 = HEAP32[$3 >> 2] | 0;
   $$pre3$i$pre$pre = HEAP32[$0 >> 2] | 0;
   if (!$45) {
    $$pre3$i = $$pre3$i$pre$pre;
    $storemerge384 = $$pre$i1;
   } else {
    $52 = $45 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
    if (($$pre$i1 - $$pre3$i$pre$pre | 0) > ($52 | 0)) {
     $$pre3$i = $$pre3$i$pre$pre;
     $storemerge384 = $$pre3$i$pre$pre + $52 | 0;
    } else {
     $$pre3$i = $$pre3$i$pre$pre;
     $storemerge384 = $$pre$i1;
    }
   }
   HEAP32[$1 >> 2] = $storemerge384;
   if ($$pre$i1) HEAP32[$11 >> 2] = $$pre$i1 + 1 - $$pre3$i + (HEAP32[$11 >> 2] | 0);
   $62 = $$pre3$i + -1 | 0;
   if ((HEAP8[$62 >> 0] | 0) == $43 << 24 >> 24) $65 = $44; else {
    HEAP8[$62 >> 0] = $43;
    $65 = $44;
   }
  }
  switch ($65 | 0) {
  case 9:
  case 10:
  case 11:
  case 12:
  case 13:
  case 32:
   break;
  default:
   {
    label = 26;
    break L6;
   }
  }
 }
 L31 : do if ((label | 0) == 13) if (!($33 & 4)) label = 17; else {
  HEAP32[$f >> 2] = $33 | 32;
  label = 17;
 } else if ((label | 0) == 26) if (($65 | 0) == 43 | ($65 | 0) == 45) {
  $69 = 1 - ((($65 | 0) == 45 & 1) << 1) | 0;
  $70 = HEAP32[$0 >> 2] | 0;
  if ($70 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $70 + 1;
   $c$0 = HEAPU8[$70 >> 0] | 0;
   $sign$0 = $69;
   break;
  }
  $76 = HEAP32[$2 >> 2] | 0;
  if (!$76) label = 31; else if ((HEAP32[$11 >> 2] | 0) < ($76 | 0)) label = 31;
  L41 : do if ((label | 0) == 31) {
   do if (!(HEAP32[$3 >> 2] | 0)) {
    $83 = HEAP8[$4 >> 0] | 0;
    HEAP8[$4 >> 0] = $83 + 255 | $83;
    if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$5 >> 2] = 0;
    $91 = HEAP32[$f >> 2] | 0;
    if (!($91 & 20)) {
     $97 = HEAP32[$6 >> 2] | 0;
     HEAP32[$3 >> 2] = $97;
     HEAP32[$0 >> 2] = $97;
     break;
    }
    if (!($91 & 4)) break L41;
    HEAP32[$f >> 2] = $91 | 32;
    break L41;
   } while (0);
   if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i12, 1) | 0) == 1) {
    $101 = HEAP8[$c$i12 >> 0] | 0;
    $102 = $101 & 255;
    $103 = HEAP32[$2 >> 2] | 0;
    $$pre$i5 = HEAP32[$3 >> 2] | 0;
    $$pre3$i8$pre$pre = HEAP32[$0 >> 2] | 0;
    if (!$103) {
     $$pre3$i8 = $$pre3$i8$pre$pre;
     $storemerge385 = $$pre$i5;
    } else {
     $110 = $103 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
     if (($$pre$i5 - $$pre3$i8$pre$pre | 0) > ($110 | 0)) {
      $$pre3$i8 = $$pre3$i8$pre$pre;
      $storemerge385 = $$pre3$i8$pre$pre + $110 | 0;
     } else {
      $$pre3$i8 = $$pre3$i8$pre$pre;
      $storemerge385 = $$pre$i5;
     }
    }
    HEAP32[$1 >> 2] = $storemerge385;
    if ($$pre$i5) HEAP32[$11 >> 2] = $$pre$i5 + 1 - $$pre3$i8 + (HEAP32[$11 >> 2] | 0);
    $120 = $$pre3$i8 + -1 | 0;
    if ((HEAP8[$120 >> 0] | 0) == $101 << 24 >> 24) {
     $c$0 = $102;
     $sign$0 = $69;
     break L31;
    }
    HEAP8[$120 >> 0] = $101;
    $c$0 = $102;
    $sign$0 = $69;
    break L31;
   }
  } while (0);
  HEAP32[$1 >> 2] = 0;
  $c$0 = -1;
  $sign$0 = $69;
 } else {
  $c$0 = $65;
  $sign$0 = 1;
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$1 >> 2] = 0;
  $c$0 = -1;
  $sign$0 = 1;
 }
 $c$174 = $c$0;
 $i$073 = 0;
 while (1) {
  if (($c$174 | 32 | 0) != (HEAP8[63808 + $i$073 >> 0] | 0)) {
   $c$1$lcssa = $c$174;
   $i$0$lcssa = $i$073;
   break;
  }
  L69 : do if ($i$073 >>> 0 < 7) {
   $129 = HEAP32[$0 >> 2] | 0;
   if ($129 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $129 + 1;
    $c$2 = HEAPU8[$129 >> 0] | 0;
    break;
   }
   $135 = HEAP32[$2 >> 2] | 0;
   if (!$135) label = 54; else if ((HEAP32[$11 >> 2] | 0) < ($135 | 0)) label = 54;
   L76 : do if ((label | 0) == 54) {
    label = 0;
    do if (!(HEAP32[$3 >> 2] | 0)) {
     $142 = HEAP8[$4 >> 0] | 0;
     HEAP8[$4 >> 0] = $142 + 255 | $142;
     if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
     HEAP32[$8 >> 2] = 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$5 >> 2] = 0;
     $150 = HEAP32[$f >> 2] | 0;
     if (!($150 & 20)) {
      $156 = HEAP32[$6 >> 2] | 0;
      HEAP32[$3 >> 2] = $156;
      HEAP32[$0 >> 2] = $156;
      break;
     }
     if (!($150 & 4)) break L76;
     HEAP32[$f >> 2] = $150 | 32;
     break L76;
    } while (0);
    if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i26, 1) | 0) == 1) {
     $160 = HEAP8[$c$i26 >> 0] | 0;
     $161 = $160 & 255;
     $162 = HEAP32[$2 >> 2] | 0;
     $$pre$i19 = HEAP32[$3 >> 2] | 0;
     $$pre3$i22$pre$pre = HEAP32[$0 >> 2] | 0;
     if (!$162) {
      $$pre3$i22 = $$pre3$i22$pre$pre;
      $storemerge383 = $$pre$i19;
     } else {
      $169 = $162 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
      if (($$pre$i19 - $$pre3$i22$pre$pre | 0) > ($169 | 0)) {
       $$pre3$i22 = $$pre3$i22$pre$pre;
       $storemerge383 = $$pre3$i22$pre$pre + $169 | 0;
      } else {
       $$pre3$i22 = $$pre3$i22$pre$pre;
       $storemerge383 = $$pre$i19;
      }
     }
     HEAP32[$1 >> 2] = $storemerge383;
     if ($$pre$i19) HEAP32[$11 >> 2] = $$pre$i19 + 1 - $$pre3$i22 + (HEAP32[$11 >> 2] | 0);
     $179 = $$pre3$i22 + -1 | 0;
     if ((HEAP8[$179 >> 0] | 0) == $160 << 24 >> 24) {
      $c$2 = $161;
      break L69;
     }
     HEAP8[$179 >> 0] = $160;
     $c$2 = $161;
     break L69;
    }
   } while (0);
   HEAP32[$1 >> 2] = 0;
   $c$2 = -1;
  } else $c$2 = $c$174; while (0);
  $182 = $i$073 + 1 | 0;
  if ($182 >>> 0 < 8) {
   $c$174 = $c$2;
   $i$073 = $182;
  } else {
   $c$1$lcssa = $c$2;
   $i$0$lcssa = $182;
   break;
  }
 }
 do if (($i$0$lcssa | 0) == 3) label = 74; else if (($i$0$lcssa | 0) != 8) {
  $185 = ($pok | 0) != 0;
  if ($i$0$lcssa >>> 0 > 3 & $185) if (($i$0$lcssa | 0) == 8) break; else {
   label = 74;
   break;
  }
  L105 : do if (!$i$0$lcssa) {
   $c$372 = $c$1$lcssa;
   $i$271 = 0;
   while (1) {
    if (($c$372 | 32 | 0) != (HEAP8[64392 + $i$271 >> 0] | 0)) {
     $c$5 = $c$372;
     $i$3 = $i$271;
     break L105;
    }
    L109 : do if ($i$271 >>> 0 < 2) {
     $202 = HEAP32[$0 >> 2] | 0;
     if ($202 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $202 + 1;
      $c$4 = HEAPU8[$202 >> 0] | 0;
      break;
     }
     $208 = HEAP32[$2 >> 2] | 0;
     if (!$208) label = 85; else if ((HEAP32[$11 >> 2] | 0) < ($208 | 0)) label = 85;
     L116 : do if ((label | 0) == 85) {
      label = 0;
      do if (!(HEAP32[$3 >> 2] | 0)) {
       $215 = HEAP8[$4 >> 0] | 0;
       HEAP8[$4 >> 0] = $215 + 255 | $215;
       if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$5 >> 2] = 0;
       $223 = HEAP32[$f >> 2] | 0;
       if (!($223 & 20)) {
        $229 = HEAP32[$6 >> 2] | 0;
        HEAP32[$3 >> 2] = $229;
        HEAP32[$0 >> 2] = $229;
        break;
       }
       if (!($223 & 4)) break L116;
       HEAP32[$f >> 2] = $223 | 32;
       break L116;
      } while (0);
      if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i39, 1) | 0) == 1) {
       $233 = HEAP8[$c$i39 >> 0] | 0;
       $234 = $233 & 255;
       $235 = HEAP32[$2 >> 2] | 0;
       $$pre$i32 = HEAP32[$3 >> 2] | 0;
       $$pre3$i35$pre$pre = HEAP32[$0 >> 2] | 0;
       if (!$235) {
        $$pre3$i35 = $$pre3$i35$pre$pre;
        $storemerge382 = $$pre$i32;
       } else {
        $242 = $235 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
        if (($$pre$i32 - $$pre3$i35$pre$pre | 0) > ($242 | 0)) {
         $$pre3$i35 = $$pre3$i35$pre$pre;
         $storemerge382 = $$pre3$i35$pre$pre + $242 | 0;
        } else {
         $$pre3$i35 = $$pre3$i35$pre$pre;
         $storemerge382 = $$pre$i32;
        }
       }
       HEAP32[$1 >> 2] = $storemerge382;
       if ($$pre$i32) HEAP32[$11 >> 2] = $$pre$i32 + 1 - $$pre3$i35 + (HEAP32[$11 >> 2] | 0);
       $252 = $$pre3$i35 + -1 | 0;
       if ((HEAP8[$252 >> 0] | 0) == $233 << 24 >> 24) {
        $c$4 = $234;
        break L109;
       }
       HEAP8[$252 >> 0] = $233;
       $c$4 = $234;
       break L109;
      }
     } while (0);
     HEAP32[$1 >> 2] = 0;
     $c$4 = -1;
    } else $c$4 = $c$372; while (0);
    $255 = $i$271 + 1 | 0;
    if ($255 >>> 0 < 3) {
     $c$372 = $c$4;
     $i$271 = $255;
    } else {
     $c$5 = $c$4;
     $i$3 = $255;
     break;
    }
   }
  } else {
   $c$5 = $c$1$lcssa;
   $i$3 = $i$0$lcssa;
  } while (0);
  if (!$i$3) {
   L147 : do if (($c$5 | 0) == 48) {
    $399 = HEAP32[$0 >> 2] | 0;
    L149 : do if ($399 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $399 + 1;
     $453 = HEAPU8[$399 >> 0] | 0;
    } else {
     $405 = HEAP32[$2 >> 2] | 0;
     if (!$405) label = 163; else if ((HEAP32[$11 >> 2] | 0) < ($405 | 0)) label = 163;
     L153 : do if ((label | 0) == 163) {
      do if (!(HEAP32[$3 >> 2] | 0)) {
       $412 = HEAP8[$4 >> 0] | 0;
       HEAP8[$4 >> 0] = $412 + 255 | $412;
       if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$5 >> 2] = 0;
       $420 = HEAP32[$f >> 2] | 0;
       if (!($420 & 20)) {
        $426 = HEAP32[$6 >> 2] | 0;
        HEAP32[$3 >> 2] = $426;
        HEAP32[$0 >> 2] = $426;
        break;
       }
       if (!($420 & 4)) break L153;
       HEAP32[$f >> 2] = $420 | 32;
       break L153;
      } while (0);
      if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i78, 1) | 0) == 1) {
       $430 = HEAP8[$c$i78 >> 0] | 0;
       $431 = $430 & 255;
       $432 = HEAP32[$2 >> 2] | 0;
       $$pre$i71 = HEAP32[$3 >> 2] | 0;
       $$pre3$i74$pre$pre = HEAP32[$0 >> 2] | 0;
       if (!$432) {
        $$pre3$i74 = $$pre3$i74$pre$pre;
        $storemerge374 = $$pre$i71;
       } else {
        $439 = $432 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
        if (($$pre$i71 - $$pre3$i74$pre$pre | 0) > ($439 | 0)) {
         $$pre3$i74 = $$pre3$i74$pre$pre;
         $storemerge374 = $$pre3$i74$pre$pre + $439 | 0;
        } else {
         $$pre3$i74 = $$pre3$i74$pre$pre;
         $storemerge374 = $$pre$i71;
        }
       }
       HEAP32[$1 >> 2] = $storemerge374;
       if ($$pre$i71) HEAP32[$11 >> 2] = $$pre$i71 + 1 - $$pre3$i74 + (HEAP32[$11 >> 2] | 0);
       $449 = $$pre3$i74 + -1 | 0;
       if ((HEAP8[$449 >> 0] | 0) == $430 << 24 >> 24) {
        $453 = $431;
        break L149;
       }
       HEAP8[$449 >> 0] = $430;
       $453 = $431;
       break L149;
      }
     } while (0);
     HEAP32[$1 >> 2] = 0;
     $c$6 = 48;
     break L147;
    } while (0);
    if (($453 | 32 | 0) != 120) {
     if (!(HEAP32[$1 >> 2] | 0)) {
      $c$6 = 48;
      break;
     }
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $c$6 = 48;
     break;
    }
    $455 = HEAP32[$0 >> 2] | 0;
    L181 : do if ($455 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $455 + 1;
     $c$0$i = HEAPU8[$455 >> 0] | 0;
     $gotdig$0$i = 0;
    } else {
     $461 = HEAP32[$2 >> 2] | 0;
     if (!$461) label = 184; else if ((HEAP32[$11 >> 2] | 0) < ($461 | 0)) label = 184;
     L186 : do if ((label | 0) == 184) {
      do if (!(HEAP32[$3 >> 2] | 0)) {
       $468 = HEAP8[$4 >> 0] | 0;
       HEAP8[$4 >> 0] = $468 + 255 | $468;
       if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$5 >> 2] = 0;
       $476 = HEAP32[$f >> 2] | 0;
       if (!($476 & 20)) {
        $482 = HEAP32[$6 >> 2] | 0;
        HEAP32[$3 >> 2] = $482;
        HEAP32[$0 >> 2] = $482;
        break;
       }
       if (!($476 & 4)) break L186;
       HEAP32[$f >> 2] = $476 | 32;
       break L186;
      } while (0);
      if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i91, 1) | 0) == 1) {
       $486 = HEAP8[$c$i91 >> 0] | 0;
       $487 = $486 & 255;
       $488 = HEAP32[$2 >> 2] | 0;
       $$pre$i84 = HEAP32[$3 >> 2] | 0;
       $$pre3$i87$pre$pre = HEAP32[$0 >> 2] | 0;
       if (!$488) {
        $$pre3$i87 = $$pre3$i87$pre$pre;
        $storemerge379 = $$pre$i84;
       } else {
        $495 = $488 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
        if (($$pre$i84 - $$pre3$i87$pre$pre | 0) > ($495 | 0)) {
         $$pre3$i87 = $$pre3$i87$pre$pre;
         $storemerge379 = $$pre3$i87$pre$pre + $495 | 0;
        } else {
         $$pre3$i87 = $$pre3$i87$pre$pre;
         $storemerge379 = $$pre$i84;
        }
       }
       HEAP32[$1 >> 2] = $storemerge379;
       if ($$pre$i84) HEAP32[$11 >> 2] = $$pre$i84 + 1 - $$pre3$i87 + (HEAP32[$11 >> 2] | 0);
       $505 = $$pre3$i87 + -1 | 0;
       if ((HEAP8[$505 >> 0] | 0) == $486 << 24 >> 24) {
        $c$0$i = $487;
        $gotdig$0$i = 0;
        break L181;
       }
       HEAP8[$505 >> 0] = $486;
       $c$0$i = $487;
       $gotdig$0$i = 0;
       break L181;
      }
     } while (0);
     HEAP32[$1 >> 2] = 0;
     $c$0$i = -1;
     $gotdig$0$i = 0;
    } while (0);
    L208 : while (1) {
     if (($c$0$i | 0) == 46) {
      label = 221;
      break;
     } else if (($c$0$i | 0) != 48) {
      $688 = 0;
      $690 = 0;
      $783 = 0;
      $785 = 0;
      $c$2$i = $c$0$i;
      $gotdig$2$i = $gotdig$0$i;
      $gotrad$0$i = 0;
      $gottail$0$i = 0;
      $scale$0$i = 1.0;
      $x$0$i = 0;
      $y$0$i = 0.0;
      break;
     }
     $508 = HEAP32[$0 >> 2] | 0;
     if ($508 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $508 + 1;
      $c$0$i = HEAPU8[$508 >> 0] | 0;
      $gotdig$0$i = 1;
      continue;
     }
     $514 = HEAP32[$2 >> 2] | 0;
     if (!$514) label = 205; else if ((HEAP32[$11 >> 2] | 0) < ($514 | 0)) label = 205;
     L216 : do if ((label | 0) == 205) {
      label = 0;
      do if (!(HEAP32[$3 >> 2] | 0)) {
       $521 = HEAP8[$4 >> 0] | 0;
       HEAP8[$4 >> 0] = $521 + 255 | $521;
       if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$5 >> 2] = 0;
       $529 = HEAP32[$f >> 2] | 0;
       if (!($529 & 20)) {
        $535 = HEAP32[$6 >> 2] | 0;
        HEAP32[$3 >> 2] = $535;
        HEAP32[$0 >> 2] = $535;
        break;
       }
       if (!($529 & 4)) break L216;
       HEAP32[$f >> 2] = $529 | 32;
       break L216;
      } while (0);
      if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i104, 1) | 0) == 1) {
       $539 = HEAP8[$c$i104 >> 0] | 0;
       $540 = $539 & 255;
       $541 = HEAP32[$2 >> 2] | 0;
       $$pre$i97 = HEAP32[$3 >> 2] | 0;
       $$pre3$i100$pre$pre = HEAP32[$0 >> 2] | 0;
       if (!$541) {
        $$pre3$i100 = $$pre3$i100$pre$pre;
        $storemerge378 = $$pre$i97;
       } else {
        $548 = $541 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
        if (($$pre$i97 - $$pre3$i100$pre$pre | 0) > ($548 | 0)) {
         $$pre3$i100 = $$pre3$i100$pre$pre;
         $storemerge378 = $$pre3$i100$pre$pre + $548 | 0;
        } else {
         $$pre3$i100 = $$pre3$i100$pre$pre;
         $storemerge378 = $$pre$i97;
        }
       }
       HEAP32[$1 >> 2] = $storemerge378;
       if ($$pre$i97) HEAP32[$11 >> 2] = $$pre$i97 + 1 - $$pre3$i100 + (HEAP32[$11 >> 2] | 0);
       $558 = $$pre3$i100 + -1 | 0;
       if ((HEAP8[$558 >> 0] | 0) == $539 << 24 >> 24) {
        $c$0$i = $540;
        $gotdig$0$i = 1;
        continue L208;
       }
       HEAP8[$558 >> 0] = $539;
       $c$0$i = $540;
       $gotdig$0$i = 1;
       continue L208;
      }
     } while (0);
     HEAP32[$1 >> 2] = 0;
     $c$0$i = -1;
     $gotdig$0$i = 1;
    }
    L238 : do if ((label | 0) == 221) {
     $561 = HEAP32[$0 >> 2] | 0;
     L240 : do if ($561 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $561 + 1;
      $c$1$ph$i = HEAPU8[$561 >> 0] | 0;
     } else {
      $567 = HEAP32[$2 >> 2] | 0;
      if (!$567) label = 225; else if ((HEAP32[$11 >> 2] | 0) < ($567 | 0)) label = 225;
      L245 : do if ((label | 0) == 225) {
       do if (!(HEAP32[$3 >> 2] | 0)) {
        $574 = HEAP8[$4 >> 0] | 0;
        HEAP8[$4 >> 0] = $574 + 255 | $574;
        if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
        HEAP32[$8 >> 2] = 0;
        HEAP32[$9 >> 2] = 0;
        HEAP32[$5 >> 2] = 0;
        $582 = HEAP32[$f >> 2] | 0;
        if (!($582 & 20)) {
         $588 = HEAP32[$6 >> 2] | 0;
         HEAP32[$3 >> 2] = $588;
         HEAP32[$0 >> 2] = $588;
         break;
        }
        if (!($582 & 4)) break L245;
        HEAP32[$f >> 2] = $582 | 32;
        break L245;
       } while (0);
       if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i117, 1) | 0) == 1) {
        $592 = HEAP8[$c$i117 >> 0] | 0;
        $593 = $592 & 255;
        $594 = HEAP32[$2 >> 2] | 0;
        $$pre$i110 = HEAP32[$3 >> 2] | 0;
        $$pre3$i113$pre$pre = HEAP32[$0 >> 2] | 0;
        if (!$594) {
         $$pre3$i113 = $$pre3$i113$pre$pre;
         $storemerge376 = $$pre$i110;
        } else {
         $601 = $594 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
         if (($$pre$i110 - $$pre3$i113$pre$pre | 0) > ($601 | 0)) {
          $$pre3$i113 = $$pre3$i113$pre$pre;
          $storemerge376 = $$pre3$i113$pre$pre + $601 | 0;
         } else {
          $$pre3$i113 = $$pre3$i113$pre$pre;
          $storemerge376 = $$pre$i110;
         }
        }
        HEAP32[$1 >> 2] = $storemerge376;
        if ($$pre$i110) HEAP32[$11 >> 2] = $$pre$i110 + 1 - $$pre3$i113 + (HEAP32[$11 >> 2] | 0);
        $611 = $$pre3$i113 + -1 | 0;
        if ((HEAP8[$611 >> 0] | 0) == $592 << 24 >> 24) {
         $c$1$ph$i = $593;
         break L240;
        }
        HEAP8[$611 >> 0] = $592;
        $c$1$ph$i = $593;
        break L240;
       }
      } while (0);
      HEAP32[$1 >> 2] = 0;
      $688 = 0;
      $690 = 0;
      $783 = 0;
      $785 = 0;
      $c$2$i = -1;
      $gotdig$2$i = $gotdig$0$i;
      $gotrad$0$i = 1;
      $gottail$0$i = 0;
      $scale$0$i = 1.0;
      $x$0$i = 0;
      $y$0$i = 0.0;
      break L238;
     } while (0);
     if (($c$1$ph$i | 0) == 48) {
      $672 = 0;
      $673 = 0;
      L268 : while (1) {
       $615 = HEAP32[$0 >> 2] | 0;
       do if ($615 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $615 + 1;
        $677 = HEAPU8[$615 >> 0] | 0;
       } else {
        $621 = HEAP32[$2 >> 2] | 0;
        if ($621) if ((HEAP32[$11 >> 2] | 0) >= ($621 | 0)) {
         $646 = $672;
         $647 = $673;
         break L268;
        }
        if (!(HEAP32[$3 >> 2] | 0)) {
         $628 = HEAP8[$4 >> 0] | 0;
         HEAP8[$4 >> 0] = $628 + 255 | $628;
         if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
         HEAP32[$8 >> 2] = 0;
         HEAP32[$9 >> 2] = 0;
         HEAP32[$5 >> 2] = 0;
         $636 = HEAP32[$f >> 2] | 0;
         if ($636 & 20) {
          label = 250;
          break L268;
         }
         $642 = HEAP32[$6 >> 2] | 0;
         HEAP32[$3 >> 2] = $642;
         HEAP32[$0 >> 2] = $642;
        }
        if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i130, 1) | 0) != 1) {
         $646 = $672;
         $647 = $673;
         break L268;
        }
        $650 = HEAP8[$c$i130 >> 0] | 0;
        $651 = $650 & 255;
        $652 = HEAP32[$2 >> 2] | 0;
        $$pre$i123 = HEAP32[$3 >> 2] | 0;
        $$pre3$i126$pre$pre = HEAP32[$0 >> 2] | 0;
        do if (!$652) {
         $$pre3$i126 = $$pre3$i126$pre$pre;
         $storemerge377 = $$pre$i123;
        } else {
         $659 = $652 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
         if (($$pre$i123 - $$pre3$i126$pre$pre | 0) <= ($659 | 0)) {
          $$pre3$i126 = $$pre3$i126$pre$pre;
          $storemerge377 = $$pre$i123;
          break;
         }
         $$pre3$i126 = $$pre3$i126$pre$pre;
         $storemerge377 = $$pre3$i126$pre$pre + $659 | 0;
        } while (0);
        HEAP32[$1 >> 2] = $storemerge377;
        if ($$pre$i123) HEAP32[$11 >> 2] = $$pre$i123 + 1 - $$pre3$i126 + (HEAP32[$11 >> 2] | 0);
        $669 = $$pre3$i126 + -1 | 0;
        if ((HEAP8[$669 >> 0] | 0) == $650 << 24 >> 24) {
         $677 = $651;
         break;
        }
        HEAP8[$669 >> 0] = $650;
        $677 = $651;
       } while (0);
       $674 = _i64Add($672 | 0, $673 | 0, -1, -1) | 0;
       $675 = tempRet0;
       if (($677 | 0) == 48) {
        $672 = $674;
        $673 = $675;
       } else {
        $688 = 0;
        $690 = 0;
        $783 = $674;
        $785 = $675;
        $c$2$i = $677;
        $gotdig$2$i = 1;
        $gotrad$0$i = 1;
        $gottail$0$i = 0;
        $scale$0$i = 1.0;
        $x$0$i = 0;
        $y$0$i = 0.0;
        break L238;
       }
      }
      if ((label | 0) == 250) if (!($636 & 4)) {
       $646 = $672;
       $647 = $673;
      } else {
       HEAP32[$f >> 2] = $636 | 32;
       $646 = $672;
       $647 = $673;
      }
      HEAP32[$1 >> 2] = 0;
      $648 = _i64Add($646 | 0, $647 | 0, -1, -1) | 0;
      $688 = 0;
      $690 = 0;
      $783 = $648;
      $785 = tempRet0;
      $c$2$i = -1;
      $gotdig$2$i = 1;
      $gotrad$0$i = 1;
      $gottail$0$i = 0;
      $scale$0$i = 1.0;
      $x$0$i = 0;
      $y$0$i = 0.0;
     } else {
      $688 = 0;
      $690 = 0;
      $783 = 0;
      $785 = 0;
      $c$2$i = $c$1$ph$i;
      $gotdig$2$i = $gotdig$0$i;
      $gotrad$0$i = 1;
      $gottail$0$i = 0;
      $scale$0$i = 1.0;
      $x$0$i = 0;
      $y$0$i = 0.0;
     }
    } while (0);
    L297 : while (1) {
     $678 = $c$2$i + -48 | 0;
     do if ($678 >>> 0 < 10) {
      $d$0$i = $678;
      label = 268;
     } else {
      $680 = $c$2$i | 32;
      $683 = ($c$2$i | 0) == 46;
      if (!(($680 + -97 | 0) >>> 0 < 6 | $683)) {
       $c$2$lcssa$i = $c$2$i;
       break L297;
      }
      if ($683) if (!$gotrad$0$i) {
       $1575 = $690;
       $1576 = $688;
       $1577 = $690;
       $1578 = $688;
       $gotdig$3$i = $gotdig$2$i;
       $gotrad$1$i = 1;
       $gottail$2$i = $gottail$0$i;
       $scale$2$i = $scale$0$i;
       $x$2$i = $x$0$i;
       $y$2$i = $y$0$i;
       break;
      } else {
       $c$2$lcssa$i = 46;
       break L297;
      } else {
       $d$0$i = ($c$2$i | 0) > 57 ? $680 + -87 | 0 : $678;
       label = 268;
       break;
      }
     } while (0);
     if ((label | 0) == 268) {
      label = 0;
      do if (($688 | 0) < 0 | ($688 | 0) == 0 & $690 >>> 0 < 8) {
       $gottail$1$i = $gottail$0$i;
       $scale$1$i = $scale$0$i;
       $x$1$i = $d$0$i + ($x$0$i << 4) | 0;
       $y$1$i = $y$0$i;
      } else {
       if (($688 | 0) < 0 | ($688 | 0) == 0 & $690 >>> 0 < 14) {
        $702 = $scale$0$i * .0625;
        $gottail$1$i = $gottail$0$i;
        $scale$1$i = $702;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i + $702 * +($d$0$i | 0);
        break;
       }
       if (($d$0$i | 0) == 0 | ($gottail$0$i | 0) != 0) {
        $gottail$1$i = $gottail$0$i;
        $scale$1$i = $scale$0$i;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i;
       } else {
        $gottail$1$i = 1;
        $scale$1$i = $scale$0$i;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i + $scale$0$i * .5;
       }
      } while (0);
      $709 = _i64Add($690 | 0, $688 | 0, 1, 0) | 0;
      $1575 = $783;
      $1576 = $785;
      $1577 = $709;
      $1578 = tempRet0;
      $gotdig$3$i = 1;
      $gotrad$1$i = $gotrad$0$i;
      $gottail$2$i = $gottail$1$i;
      $scale$2$i = $scale$1$i;
      $x$2$i = $x$1$i;
      $y$2$i = $y$1$i;
     }
     $711 = HEAP32[$0 >> 2] | 0;
     if ($711 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $711 + 1;
      $688 = $1578;
      $690 = $1577;
      $783 = $1575;
      $785 = $1576;
      $c$2$i = HEAPU8[$711 >> 0] | 0;
      $gotdig$2$i = $gotdig$3$i;
      $gotrad$0$i = $gotrad$1$i;
      $gottail$0$i = $gottail$2$i;
      $scale$0$i = $scale$2$i;
      $x$0$i = $x$2$i;
      $y$0$i = $y$2$i;
      continue;
     }
     $717 = HEAP32[$2 >> 2] | 0;
     if (!$717) label = 279; else if ((HEAP32[$11 >> 2] | 0) < ($717 | 0)) label = 279;
     L321 : do if ((label | 0) == 279) {
      label = 0;
      do if (!(HEAP32[$3 >> 2] | 0)) {
       $724 = HEAP8[$4 >> 0] | 0;
       HEAP8[$4 >> 0] = $724 + 255 | $724;
       if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$5 >> 2] = 0;
       $732 = HEAP32[$f >> 2] | 0;
       if (!($732 & 20)) {
        $738 = HEAP32[$6 >> 2] | 0;
        HEAP32[$3 >> 2] = $738;
        HEAP32[$0 >> 2] = $738;
        break;
       }
       if (!($732 & 4)) break L321;
       HEAP32[$f >> 2] = $732 | 32;
       break L321;
      } while (0);
      if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i143, 1) | 0) == 1) {
       $742 = HEAP8[$c$i143 >> 0] | 0;
       $743 = $742 & 255;
       $744 = HEAP32[$2 >> 2] | 0;
       $$pre$i136 = HEAP32[$3 >> 2] | 0;
       $$pre3$i139$pre$pre = HEAP32[$0 >> 2] | 0;
       if (!$744) {
        $$pre3$i139 = $$pre3$i139$pre$pre;
        $storemerge375 = $$pre$i136;
       } else {
        $751 = $744 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
        if (($$pre$i136 - $$pre3$i139$pre$pre | 0) > ($751 | 0)) {
         $$pre3$i139 = $$pre3$i139$pre$pre;
         $storemerge375 = $$pre3$i139$pre$pre + $751 | 0;
        } else {
         $$pre3$i139 = $$pre3$i139$pre$pre;
         $storemerge375 = $$pre$i136;
        }
       }
       HEAP32[$1 >> 2] = $storemerge375;
       if ($$pre$i136) HEAP32[$11 >> 2] = $$pre$i136 + 1 - $$pre3$i139 + (HEAP32[$11 >> 2] | 0);
       $761 = $$pre3$i139 + -1 | 0;
       if ((HEAP8[$761 >> 0] | 0) == $742 << 24 >> 24) {
        $688 = $1578;
        $690 = $1577;
        $783 = $1575;
        $785 = $1576;
        $c$2$i = $743;
        $gotdig$2$i = $gotdig$3$i;
        $gotrad$0$i = $gotrad$1$i;
        $gottail$0$i = $gottail$2$i;
        $scale$0$i = $scale$2$i;
        $x$0$i = $x$2$i;
        $y$0$i = $y$2$i;
        continue L297;
       }
       HEAP8[$761 >> 0] = $742;
       $688 = $1578;
       $690 = $1577;
       $783 = $1575;
       $785 = $1576;
       $c$2$i = $743;
       $gotdig$2$i = $gotdig$3$i;
       $gotrad$0$i = $gotrad$1$i;
       $gottail$0$i = $gottail$2$i;
       $scale$0$i = $scale$2$i;
       $x$0$i = $x$2$i;
       $y$0$i = $y$2$i;
       continue L297;
      }
     } while (0);
     HEAP32[$1 >> 2] = 0;
     $688 = $1578;
     $690 = $1577;
     $783 = $1575;
     $785 = $1576;
     $c$2$i = -1;
     $gotdig$2$i = $gotdig$3$i;
     $gotrad$0$i = $gotrad$1$i;
     $gottail$0$i = $gottail$2$i;
     $scale$0$i = $scale$2$i;
     $x$0$i = $x$2$i;
     $y$0$i = $y$2$i;
    }
    if (!$gotdig$2$i) {
     $766 = (HEAP32[$1 >> 2] | 0) == 0;
     if (!$766) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     if (!$pok) {
      HEAP32[$2 >> 2] = 0;
      $774 = HEAP32[$3 >> 2] | 0;
      HEAP32[$11 >> 2] = $774 - (HEAP32[$0 >> 2] | 0);
      HEAP32[$1 >> 2] = $774;
     } else if (!$766) {
      $770 = HEAP32[$0 >> 2] | 0;
      HEAP32[$0 >> 2] = $770 + -1;
      if ($gotrad$0$i) HEAP32[$0 >> 2] = $770 + -2;
     }
     $$0 = +($sign$0 | 0) * 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    $781 = ($gotrad$0$i | 0) == 0;
    $782 = $781 ? $690 : $783;
    $784 = $781 ? $688 : $785;
    if (($688 | 0) < 0 | ($688 | 0) == 0 & $690 >>> 0 < 8) {
     $792 = $690;
     $793 = $688;
     $x$325$i = $x$0$i;
     while (1) {
      $791 = $x$325$i << 4;
      $792 = _i64Add($792 | 0, $793 | 0, 1, 0) | 0;
      $793 = tempRet0;
      if (!(($793 | 0) < 0 | ($793 | 0) == 0 & $792 >>> 0 < 8)) {
       $x$3$lcssa$i = $791;
       break;
      } else $x$325$i = $791;
     }
    } else $x$3$lcssa$i = $x$0$i;
    do if (($c$2$lcssa$i | 32 | 0) == 112) {
     $803 = _scanexp($f, $pok) | 0;
     $804 = tempRet0;
     if (($803 | 0) == 0 & ($804 | 0) == -2147483648) if (!$pok) {
      HEAP32[$2 >> 2] = 0;
      $813 = HEAP32[$3 >> 2] | 0;
      HEAP32[$11 >> 2] = $813 - (HEAP32[$0 >> 2] | 0);
      HEAP32[$1 >> 2] = $813;
      $$0 = 0.0;
      STACKTOP = sp;
      return +$$0;
     } else {
      if (!(HEAP32[$1 >> 2] | 0)) {
       $826 = 0;
       $827 = 0;
       break;
      }
      HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      $826 = 0;
      $827 = 0;
      break;
     } else {
      $826 = $803;
      $827 = $804;
     }
    } else if (!(HEAP32[$1 >> 2] | 0)) {
     $826 = 0;
     $827 = 0;
    } else {
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $826 = 0;
     $827 = 0;
    } while (0);
    $822 = _bitshift64Shl($782 | 0, $784 | 0, 2) | 0;
    $824 = _i64Add($822 | 0, tempRet0 | 0, -32, -1) | 0;
    $828 = _i64Add($824 | 0, tempRet0 | 0, $826 | 0, $827 | 0) | 0;
    $829 = tempRet0;
    if (!$x$3$lcssa$i) {
     $$0 = +($sign$0 | 0) * 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    if (($829 | 0) > 0 | ($829 | 0) == 0 & $828 >>> 0 > (0 - $emin$0$ph | 0) >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
     STACKTOP = sp;
     return +$$0;
    }
    $843 = $emin$0$ph + -106 | 0;
    $845 = (($843 | 0) < 0) << 31 >> 31;
    if (($829 | 0) < ($845 | 0) | ($829 | 0) == ($845 | 0) & $828 >>> 0 < $843 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
     STACKTOP = sp;
     return +$$0;
    }
    if (($x$3$lcssa$i | 0) > -1) {
     $860 = $828;
     $861 = $829;
     $x$420$i = $x$3$lcssa$i;
     $y$321$i = $y$0$i;
     while (1) {
      $857 = $x$420$i << 1;
      if (!($y$321$i >= .5)) {
       $$pn$i = $y$321$i;
       $x$5$i = $857;
      } else {
       $$pn$i = $y$321$i + -1.0;
       $x$5$i = $857 | 1;
      }
      $y$4$i = $y$321$i + $$pn$i;
      $862 = _i64Add($860 | 0, $861 | 0, -1, -1) | 0;
      $863 = tempRet0;
      if (($x$5$i | 0) > -1) {
       $860 = $862;
       $861 = $863;
       $x$420$i = $x$5$i;
       $y$321$i = $y$4$i;
      } else {
       $869 = $862;
       $870 = $863;
       $x$4$lcssa$i = $x$5$i;
       $y$3$lcssa$i = $y$4$i;
       break;
      }
     }
    } else {
     $869 = $828;
     $870 = $829;
     $x$4$lcssa$i = $x$3$lcssa$i;
     $y$3$lcssa$i = $y$0$i;
    }
    $867 = _i64Subtract(32, 0, $emin$0$ph | 0, (($emin$0$ph | 0) < 0) << 31 >> 31 | 0) | 0;
    $871 = _i64Add($869 | 0, $870 | 0, $867 | 0, tempRet0 | 0) | 0;
    $872 = tempRet0;
    if (0 > ($872 | 0) | 0 == ($872 | 0) & $bits$0$ph >>> 0 > $871 >>> 0) if (($871 | 0) < 0) {
     $$0711$i = 0;
     label = 328;
    } else {
     $$07$i = $871;
     label = 326;
    } else {
     $$07$i = $bits$0$ph;
     label = 326;
    }
    if ((label | 0) == 326) if (($$07$i | 0) < 53) {
     $$0711$i = $$07$i;
     label = 328;
    } else {
     $$0712$i = $$07$i;
     $$pre$phi$iZ2D = +($sign$0 | 0);
     $bias$0$i = 0.0;
    }
    if ((label | 0) == 328) {
     $880 = 84 - $$0711$i | 0;
     do if (($880 | 0) > 1023) {
      $882 = $880 + -1023 | 0;
      if (($882 | 0) <= 1023) {
       $$0$i149 = $882;
       $y$0$i150 = 8988465674311579538646525.0e283;
       break;
      }
      $884 = $880 + -2046 | 0;
      $$0$i149 = ($884 | 0) > 1023 ? 1023 : $884;
      $y$0$i150 = inf;
     } else {
      if (($880 | 0) >= -1022) {
       $$0$i149 = $880;
       $y$0$i150 = 1.0;
       break;
      }
      $887 = $880 + 1022 | 0;
      if (($887 | 0) >= -1022) {
       $$0$i149 = $887;
       $y$0$i150 = 2.2250738585072014e-308;
       break;
      }
      $889 = $880 + 2044 | 0;
      $$0$i149 = ($889 | 0) < -1022 ? -1022 : $889;
      $y$0$i150 = 0.0;
     } while (0);
     $892 = _bitshift64Shl($$0$i149 + 1023 | 0, 0, 52) | 0;
     $893 = tempRet0;
     HEAP32[tempDoublePtr >> 2] = $892;
     HEAP32[tempDoublePtr + 4 >> 2] = $893;
     $896 = +($sign$0 | 0);
     HEAPF64[tempDoublePtr >> 3] = $y$0$i150 * +HEAPF64[tempDoublePtr >> 3];
     $897 = HEAP32[tempDoublePtr >> 2] | 0;
     $898 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     HEAPF64[tempDoublePtr >> 3] = $896;
     $903 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $898 & 2147483647;
     HEAP32[tempDoublePtr >> 2] = $897;
     HEAP32[tempDoublePtr + 4 >> 2] = $903;
     $$0712$i = $$0711$i;
     $$pre$phi$iZ2D = $896;
     $bias$0$i = +HEAPF64[tempDoublePtr >> 3];
    }
    $or$cond9$i = ($$0712$i | 0) < 32 & $y$3$lcssa$i != 0.0 & ($x$4$lcssa$i & 1 | 0) == 0;
    $915 = $$pre$phi$iZ2D * ($or$cond9$i ? 0.0 : $y$3$lcssa$i) + ($bias$0$i + $$pre$phi$iZ2D * +((($or$cond9$i & 1) + $x$4$lcssa$i | 0) >>> 0)) - $bias$0$i;
    if (!($915 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
    do if (($869 | 0) > 1023) {
     $919 = $915 * 8988465674311579538646525.0e283;
     $920 = $869 + -1023 | 0;
     if (($920 | 0) <= 1023) {
      $$0$i$i151 = $920;
      $y$0$i$i = $919;
      break;
     }
     $923 = $869 + -2046 | 0;
     $$0$i$i151 = ($923 | 0) > 1023 ? 1023 : $923;
     $y$0$i$i = $919 * 8988465674311579538646525.0e283;
    } else {
     if (($869 | 0) >= -1022) {
      $$0$i$i151 = $869;
      $y$0$i$i = $915;
      break;
     }
     $926 = $915 * 2.2250738585072014e-308;
     $927 = $869 + 1022 | 0;
     if (($927 | 0) >= -1022) {
      $$0$i$i151 = $927;
      $y$0$i$i = $926;
      break;
     }
     $930 = $869 + 2044 | 0;
     $$0$i$i151 = ($930 | 0) < -1022 ? -1022 : $930;
     $y$0$i$i = $926 * 2.2250738585072014e-308;
    } while (0);
    $933 = _bitshift64Shl($$0$i$i151 + 1023 | 0, 0, 52) | 0;
    $934 = tempRet0;
    HEAP32[tempDoublePtr >> 2] = $933;
    HEAP32[tempDoublePtr + 4 >> 2] = $934;
    $$0 = $y$0$i$i * +HEAPF64[tempDoublePtr >> 3];
    STACKTOP = sp;
    return +$$0;
   } else $c$6 = $c$5; while (0);
   $sum$i = $emin$0$ph + $bits$0$ph | 0;
   $940 = 0 - $sum$i | 0;
   $$012$i = $c$6;
   $gotdig$0$i12 = 0;
   L418 : while (1) {
    if (($$012$i | 0) == 46) {
     label = 368;
     break;
    } else if (($$012$i | 0) != 48) {
     $$2$i = $$012$i;
     $1579 = 0;
     $1580 = 0;
     $gotdig$2$i13 = $gotdig$0$i12;
     $gotrad$0$i14 = 0;
     break;
    }
    $941 = HEAP32[$0 >> 2] | 0;
    if ($941 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $941 + 1;
     $$012$i = HEAPU8[$941 >> 0] | 0;
     $gotdig$0$i12 = 1;
     continue;
    }
    $947 = HEAP32[$2 >> 2] | 0;
    if (!$947) label = 352; else if ((HEAP32[$11 >> 2] | 0) < ($947 | 0)) label = 352;
    L426 : do if ((label | 0) == 352) {
     label = 0;
     do if (!(HEAP32[$3 >> 2] | 0)) {
      $954 = HEAP8[$4 >> 0] | 0;
      HEAP8[$4 >> 0] = $954 + 255 | $954;
      if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$9 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      $962 = HEAP32[$f >> 2] | 0;
      if (!($962 & 20)) {
       $968 = HEAP32[$6 >> 2] | 0;
       HEAP32[$3 >> 2] = $968;
       HEAP32[$0 >> 2] = $968;
       break;
      }
      if (!($962 & 4)) break L426;
      HEAP32[$f >> 2] = $962 | 32;
      break L426;
     } while (0);
     if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i160, 1) | 0) == 1) {
      $972 = HEAP8[$c$i160 >> 0] | 0;
      $973 = $972 & 255;
      $974 = HEAP32[$2 >> 2] | 0;
      $$pre$i153 = HEAP32[$3 >> 2] | 0;
      $$pre3$i156$pre$pre = HEAP32[$0 >> 2] | 0;
      if (!$974) {
       $$pre3$i156 = $$pre3$i156$pre$pre;
       $storemerge373 = $$pre$i153;
      } else {
       $981 = $974 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
       if (($$pre$i153 - $$pre3$i156$pre$pre | 0) > ($981 | 0)) {
        $$pre3$i156 = $$pre3$i156$pre$pre;
        $storemerge373 = $$pre3$i156$pre$pre + $981 | 0;
       } else {
        $$pre3$i156 = $$pre3$i156$pre$pre;
        $storemerge373 = $$pre$i153;
       }
      }
      HEAP32[$1 >> 2] = $storemerge373;
      if ($$pre$i153) HEAP32[$11 >> 2] = $$pre$i153 + 1 - $$pre3$i156 + (HEAP32[$11 >> 2] | 0);
      $991 = $$pre3$i156 + -1 | 0;
      if ((HEAP8[$991 >> 0] | 0) == $972 << 24 >> 24) {
       $$012$i = $973;
       $gotdig$0$i12 = 1;
       continue L418;
      }
      HEAP8[$991 >> 0] = $972;
      $$012$i = $973;
      $gotdig$0$i12 = 1;
      continue L418;
     }
    } while (0);
    HEAP32[$1 >> 2] = 0;
    $$012$i = -1;
    $gotdig$0$i12 = 1;
   }
   L448 : do if ((label | 0) == 368) {
    $994 = HEAP32[$0 >> 2] | 0;
    L450 : do if ($994 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $994 + 1;
     $$1$ph$i = HEAPU8[$994 >> 0] | 0;
    } else {
     $1000 = HEAP32[$2 >> 2] | 0;
     if (!$1000) label = 372; else if ((HEAP32[$11 >> 2] | 0) < ($1000 | 0)) label = 372;
     L455 : do if ((label | 0) == 372) {
      do if (!(HEAP32[$3 >> 2] | 0)) {
       $1007 = HEAP8[$4 >> 0] | 0;
       HEAP8[$4 >> 0] = $1007 + 255 | $1007;
       if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$5 >> 2] = 0;
       $1015 = HEAP32[$f >> 2] | 0;
       if (!($1015 & 20)) {
        $1021 = HEAP32[$6 >> 2] | 0;
        HEAP32[$3 >> 2] = $1021;
        HEAP32[$0 >> 2] = $1021;
        break;
       }
       if (!($1015 & 4)) break L455;
       HEAP32[$f >> 2] = $1015 | 32;
       break L455;
      } while (0);
      if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i173, 1) | 0) == 1) {
       $1025 = HEAP8[$c$i173 >> 0] | 0;
       $1026 = $1025 & 255;
       $1027 = HEAP32[$2 >> 2] | 0;
       $$pre$i166 = HEAP32[$3 >> 2] | 0;
       $$pre3$i169$pre$pre = HEAP32[$0 >> 2] | 0;
       if (!$1027) {
        $$pre3$i169 = $$pre3$i169$pre$pre;
        $storemerge371 = $$pre$i166;
       } else {
        $1034 = $1027 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
        if (($$pre$i166 - $$pre3$i169$pre$pre | 0) > ($1034 | 0)) {
         $$pre3$i169 = $$pre3$i169$pre$pre;
         $storemerge371 = $$pre3$i169$pre$pre + $1034 | 0;
        } else {
         $$pre3$i169 = $$pre3$i169$pre$pre;
         $storemerge371 = $$pre$i166;
        }
       }
       HEAP32[$1 >> 2] = $storemerge371;
       if ($$pre$i166) HEAP32[$11 >> 2] = $$pre$i166 + 1 - $$pre3$i169 + (HEAP32[$11 >> 2] | 0);
       $1044 = $$pre3$i169 + -1 | 0;
       if ((HEAP8[$1044 >> 0] | 0) == $1025 << 24 >> 24) {
        $$1$ph$i = $1026;
        break L450;
       }
       HEAP8[$1044 >> 0] = $1025;
       $$1$ph$i = $1026;
       break L450;
      }
     } while (0);
     HEAP32[$1 >> 2] = 0;
     $$2$i = -1;
     $1579 = 0;
     $1580 = 0;
     $gotdig$2$i13 = $gotdig$0$i12;
     $gotrad$0$i14 = 1;
     break L448;
    } while (0);
    if (($$1$ph$i | 0) == 48) {
     $1048 = 0;
     $1049 = 0;
     while (1) {
      $1050 = _i64Add($1048 | 0, $1049 | 0, -1, -1) | 0;
      $1051 = tempRet0;
      $1052 = HEAP32[$0 >> 2] | 0;
      if ($1052 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $1052 + 1;
       $$1$be$i = HEAPU8[$1052 >> 0] | 0;
      } else {
       $1058 = HEAP32[$2 >> 2] | 0;
       if ($1058) if ((HEAP32[$11 >> 2] | 0) >= ($1058 | 0)) {
        $1581 = $1050;
        $1582 = $1051;
        break;
       }
       if (!(HEAP32[$3 >> 2] | 0)) {
        $1065 = HEAP8[$4 >> 0] | 0;
        HEAP8[$4 >> 0] = $1065 + 255 | $1065;
        if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
        HEAP32[$8 >> 2] = 0;
        HEAP32[$9 >> 2] = 0;
        HEAP32[$5 >> 2] = 0;
        $1073 = HEAP32[$f >> 2] | 0;
        if ($1073 & 20) {
         label = 397;
         break;
        }
        $1079 = HEAP32[$6 >> 2] | 0;
        HEAP32[$3 >> 2] = $1079;
        HEAP32[$0 >> 2] = $1079;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i186, 1) | 0) != 1) {
        $1581 = $1050;
        $1582 = $1051;
        break;
       }
       $1083 = HEAP8[$c$i186 >> 0] | 0;
       $1084 = $1083 & 255;
       $1085 = HEAP32[$2 >> 2] | 0;
       $$pre$i179 = HEAP32[$3 >> 2] | 0;
       $$pre3$i182$pre$pre = HEAP32[$0 >> 2] | 0;
       if (!$1085) {
        $$pre3$i182 = $$pre3$i182$pre$pre;
        $storemerge372 = $$pre$i179;
       } else {
        $1092 = $1085 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
        if (($$pre$i179 - $$pre3$i182$pre$pre | 0) > ($1092 | 0)) {
         $$pre3$i182 = $$pre3$i182$pre$pre;
         $storemerge372 = $$pre3$i182$pre$pre + $1092 | 0;
        } else {
         $$pre3$i182 = $$pre3$i182$pre$pre;
         $storemerge372 = $$pre$i179;
        }
       }
       HEAP32[$1 >> 2] = $storemerge372;
       if ($$pre$i179) HEAP32[$11 >> 2] = $$pre$i179 + 1 - $$pre3$i182 + (HEAP32[$11 >> 2] | 0);
       $1102 = $$pre3$i182 + -1 | 0;
       if ((HEAP8[$1102 >> 0] | 0) == $1083 << 24 >> 24) $$1$be$i = $1084; else {
        HEAP8[$1102 >> 0] = $1083;
        $$1$be$i = $1084;
       }
      }
      if (($$1$be$i | 0) == 48) {
       $1048 = $1050;
       $1049 = $1051;
      } else {
       $$2$i = $$1$be$i;
       $1579 = $1050;
       $1580 = $1051;
       $gotdig$2$i13 = 1;
       $gotrad$0$i14 = 1;
       break L448;
      }
     }
     if ((label | 0) == 397) if (!($1073 & 4)) {
      $1581 = $1050;
      $1582 = $1051;
     } else {
      HEAP32[$f >> 2] = $1073 | 32;
      $1581 = $1050;
      $1582 = $1051;
     }
     HEAP32[$1 >> 2] = 0;
     $$2$i = -1;
     $1579 = $1581;
     $1580 = $1582;
     $gotdig$2$i13 = 1;
     $gotrad$0$i14 = 1;
    } else {
     $$2$i = $$1$ph$i;
     $1579 = 0;
     $1580 = 0;
     $gotdig$2$i13 = $gotdig$0$i12;
     $gotrad$0$i14 = 1;
    }
   } while (0);
   HEAP32[$x$i >> 2] = 0;
   $1106 = $$2$i + -48 | 0;
   $1108 = ($$2$i | 0) == 46;
   L508 : do if ($1106 >>> 0 < 10 | $1108) {
    $1109 = $x$i + 496 | 0;
    $$3127$i = $$2$i;
    $1112 = 0;
    $1113 = 0;
    $1583 = $1108;
    $1584 = $1106;
    $1585 = $1579;
    $1586 = $1580;
    $gotdig$3123$i = $gotdig$2$i13;
    $gotrad$1124$i = $gotrad$0$i14;
    $j$0126$i = 0;
    $k$0125$i = 0;
    $lnz$0122$i = 0;
    L510 : while (1) {
     do if ($1583) if (!$gotrad$1124$i) {
      $1587 = $1112;
      $1588 = $1113;
      $1589 = $1112;
      $1590 = $1113;
      $gotdig$4$i = $gotdig$3123$i;
      $gotrad$2$i = 1;
      $j$2$i = $j$0126$i;
      $k$2$i = $k$0125$i;
      $lnz$2$i = $lnz$0122$i;
     } else break L510; else {
      $1114 = _i64Add($1112 | 0, $1113 | 0, 1, 0) | 0;
      $1115 = tempRet0;
      $1116 = ($$3127$i | 0) != 48;
      if (($k$0125$i | 0) >= 125) {
       if (!$1116) {
        $1587 = $1585;
        $1588 = $1586;
        $1589 = $1114;
        $1590 = $1115;
        $gotdig$4$i = $gotdig$3123$i;
        $gotrad$2$i = $gotrad$1124$i;
        $j$2$i = $j$0126$i;
        $k$2$i = $k$0125$i;
        $lnz$2$i = $lnz$0122$i;
        break;
       }
       HEAP32[$1109 >> 2] = HEAP32[$1109 >> 2] | 1;
       $1587 = $1585;
       $1588 = $1586;
       $1589 = $1114;
       $1590 = $1115;
       $gotdig$4$i = $gotdig$3123$i;
       $gotrad$2$i = $gotrad$1124$i;
       $j$2$i = $j$0126$i;
       $k$2$i = $k$0125$i;
       $lnz$2$i = $lnz$0122$i;
       break;
      }
      $1118 = $x$i + ($k$0125$i << 2) | 0;
      if (!$j$0126$i) $storemerge$i = $1584; else $storemerge$i = $$3127$i + -48 + ((HEAP32[$1118 >> 2] | 0) * 10 | 0) | 0;
      HEAP32[$1118 >> 2] = $storemerge$i;
      $1123 = $j$0126$i + 1 | 0;
      $1124 = ($1123 | 0) == 9;
      $1587 = $1585;
      $1588 = $1586;
      $1589 = $1114;
      $1590 = $1115;
      $gotdig$4$i = 1;
      $gotrad$2$i = $gotrad$1124$i;
      $j$2$i = $1124 ? 0 : $1123;
      $k$2$i = ($1124 & 1) + $k$0125$i | 0;
      $lnz$2$i = $1116 ? $1114 : $lnz$0122$i;
     } while (0);
     $1128 = HEAP32[$0 >> 2] | 0;
     L523 : do if ($1128 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $1128 + 1;
      $$3$be$i = HEAPU8[$1128 >> 0] | 0;
     } else {
      $1134 = HEAP32[$2 >> 2] | 0;
      if (!$1134) label = 425; else if ((HEAP32[$11 >> 2] | 0) < ($1134 | 0)) label = 425;
      L528 : do if ((label | 0) == 425) {
       label = 0;
       do if (!(HEAP32[$3 >> 2] | 0)) {
        $1141 = HEAP8[$4 >> 0] | 0;
        HEAP8[$4 >> 0] = $1141 + 255 | $1141;
        if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
        HEAP32[$8 >> 2] = 0;
        HEAP32[$9 >> 2] = 0;
        HEAP32[$5 >> 2] = 0;
        $1149 = HEAP32[$f >> 2] | 0;
        if (!($1149 & 20)) {
         $1155 = HEAP32[$6 >> 2] | 0;
         HEAP32[$3 >> 2] = $1155;
         HEAP32[$0 >> 2] = $1155;
         break;
        }
        if (!($1149 & 4)) break L528;
        HEAP32[$f >> 2] = $1149 | 32;
        break L528;
       } while (0);
       if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i199, 1) | 0) == 1) {
        $1159 = HEAP8[$c$i199 >> 0] | 0;
        $1160 = $1159 & 255;
        $1161 = HEAP32[$2 >> 2] | 0;
        $$pre$i192 = HEAP32[$3 >> 2] | 0;
        $$pre3$i195$pre$pre = HEAP32[$0 >> 2] | 0;
        if (!$1161) {
         $$pre3$i195 = $$pre3$i195$pre$pre;
         $storemerge = $$pre$i192;
        } else {
         $1168 = $1161 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
         if (($$pre$i192 - $$pre3$i195$pre$pre | 0) > ($1168 | 0)) {
          $$pre3$i195 = $$pre3$i195$pre$pre;
          $storemerge = $$pre3$i195$pre$pre + $1168 | 0;
         } else {
          $$pre3$i195 = $$pre3$i195$pre$pre;
          $storemerge = $$pre$i192;
         }
        }
        HEAP32[$1 >> 2] = $storemerge;
        if ($$pre$i192) HEAP32[$11 >> 2] = $$pre$i192 + 1 - $$pre3$i195 + (HEAP32[$11 >> 2] | 0);
        $1178 = $$pre3$i195 + -1 | 0;
        if ((HEAP8[$1178 >> 0] | 0) == $1159 << 24 >> 24) {
         $$3$be$i = $1160;
         break L523;
        }
        HEAP8[$1178 >> 0] = $1159;
        $$3$be$i = $1160;
        break L523;
       }
      } while (0);
      HEAP32[$1 >> 2] = 0;
      $$3$be$i = -1;
     } while (0);
     $1584 = $$3$be$i + -48 | 0;
     $1583 = ($$3$be$i | 0) == 46;
     if (!($1584 >>> 0 < 10 | $1583)) {
      $$3$lcssa$i = $$3$be$i;
      $1186 = $1589;
      $1187 = $1587;
      $1189 = $1590;
      $1190 = $1588;
      $gotdig$3$lcssa$i = $gotdig$4$i;
      $gotrad$1$lcssa$i = $gotrad$2$i;
      $j$0$lcssa$i = $j$2$i;
      $k$0$lcssa$i = $k$2$i;
      $lnz$0$lcssa$i = $lnz$2$i;
      label = 442;
      break L508;
     } else {
      $$3127$i = $$3$be$i;
      $1112 = $1589;
      $1113 = $1590;
      $1585 = $1587;
      $1586 = $1588;
      $gotdig$3123$i = $gotdig$4$i;
      $gotrad$1124$i = $gotrad$2$i;
      $j$0126$i = $j$2$i;
      $k$0125$i = $k$2$i;
      $lnz$0122$i = $lnz$2$i;
     }
    }
    $1591 = $1112;
    $1592 = $1113;
    $1593 = $1585;
    $1594 = $1586;
    $1595 = ($gotdig$3123$i | 0) != 0;
    $j$074$i = $j$0126$i;
    $k$070$i = $k$0125$i;
    $lnz$064$i = $lnz$0122$i;
    label = 450;
   } else {
    $$3$lcssa$i = $$2$i;
    $1186 = 0;
    $1187 = $1579;
    $1189 = 0;
    $1190 = $1580;
    $gotdig$3$lcssa$i = $gotdig$2$i13;
    $gotrad$1$lcssa$i = $gotrad$0$i14;
    $j$0$lcssa$i = 0;
    $k$0$lcssa$i = 0;
    $lnz$0$lcssa$i = 0;
    label = 442;
   } while (0);
   do if ((label | 0) == 442) {
    $1184 = ($gotrad$1$lcssa$i | 0) == 0;
    $1185 = $1184 ? $1186 : $1187;
    $1188 = $1184 ? $1189 : $1190;
    $1191 = ($gotdig$3$lcssa$i | 0) != 0;
    if (!($1191 & ($$3$lcssa$i | 32 | 0) == 101)) if (($$3$lcssa$i | 0) > -1) {
     $1591 = $1186;
     $1592 = $1189;
     $1593 = $1185;
     $1594 = $1188;
     $1595 = $1191;
     $j$074$i = $j$0$lcssa$i;
     $k$070$i = $k$0$lcssa$i;
     $lnz$064$i = $lnz$0$lcssa$i;
     label = 450;
     break;
    } else {
     $1596 = $1186;
     $1597 = $1189;
     $1598 = $1191;
     $1599 = $1185;
     $1600 = $1188;
     $j$073$i = $j$0$lcssa$i;
     $k$069$i = $k$0$lcssa$i;
     $lnz$063$i = $lnz$0$lcssa$i;
     label = 452;
     break;
    }
    $1194 = _scanexp($f, $pok) | 0;
    $1195 = tempRet0;
    do if (($1194 | 0) == 0 & ($1195 | 0) == -2147483648) if (!$pok) {
     HEAP32[$2 >> 2] = 0;
     $1204 = HEAP32[$3 >> 2] | 0;
     HEAP32[$11 >> 2] = $1204 - (HEAP32[$0 >> 2] | 0);
     HEAP32[$1 >> 2] = $1204;
     $$0 = 0.0;
     STACKTOP = sp;
     return +$$0;
    } else {
     if (!(HEAP32[$1 >> 2] | 0)) {
      $1209 = 0;
      $1210 = 0;
      break;
     }
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $1209 = 0;
     $1210 = 0;
     break;
    } else {
     $1209 = $1194;
     $1210 = $1195;
    } while (0);
    $1211 = _i64Add($1209 | 0, $1210 | 0, $1185 | 0, $1188 | 0) | 0;
    $1229 = $1211;
    $1230 = $1186;
    $1232 = tempRet0;
    $1233 = $1189;
    $j$072$i = $j$0$lcssa$i;
    $k$068$i = $k$0$lcssa$i;
    $lnz$062$i = $lnz$0$lcssa$i;
   } while (0);
   if ((label | 0) == 450) if (!(HEAP32[$1 >> 2] | 0)) {
    $1596 = $1591;
    $1597 = $1592;
    $1598 = $1595;
    $1599 = $1593;
    $1600 = $1594;
    $j$073$i = $j$074$i;
    $k$069$i = $k$070$i;
    $lnz$063$i = $lnz$064$i;
    label = 452;
   } else {
    $1217 = (HEAP32[$0 >> 2] | 0) + -1 | 0;
    HEAP32[$0 >> 2] = $1217;
    if ($1595) {
     $1229 = $1593;
     $1230 = $1591;
     $1232 = $1594;
     $1233 = $1592;
     $j$072$i = $j$074$i;
     $k$068$i = $k$070$i;
     $lnz$062$i = $lnz$064$i;
    } else {
     $1222 = $1217;
     label = 454;
    }
   }
   if ((label | 0) == 452) if ($1598) {
    $1229 = $1599;
    $1230 = $1596;
    $1232 = $1600;
    $1233 = $1597;
    $j$072$i = $j$073$i;
    $k$068$i = $k$069$i;
    $lnz$062$i = $lnz$063$i;
   } else {
    $1222 = HEAP32[$0 >> 2] | 0;
    label = 454;
   }
   if ((label | 0) == 454) {
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    HEAP32[$2 >> 2] = 0;
    $1219 = HEAP32[$3 >> 2] | 0;
    HEAP32[$11 >> 2] = $1219 - $1222;
    HEAP32[$1 >> 2] = $1219;
    $$0 = 0.0;
    STACKTOP = sp;
    return +$$0;
   }
   $1224 = HEAP32[$x$i >> 2] | 0;
   if (!$1224) {
    $$0 = +($sign$0 | 0) * 0.0;
    STACKTOP = sp;
    return +$$0;
   }
   if (($1229 | 0) == ($1230 | 0) & ($1232 | 0) == ($1233 | 0) & (($1233 | 0) < 0 | ($1233 | 0) == 0 & $1230 >>> 0 < 10)) if ($bits$0$ph >>> 0 > 30 | ($1224 >>> $bits$0$ph | 0) == 0) {
    $$0 = +($sign$0 | 0) * +($1224 >>> 0);
    STACKTOP = sp;
    return +$$0;
   }
   $1246 = ($emin$0$ph | 0) / -2 | 0;
   $1248 = (($1246 | 0) < 0) << 31 >> 31;
   if (($1232 | 0) > ($1248 | 0) | ($1232 | 0) == ($1248 | 0) & $1229 >>> 0 > $1246 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $$0 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
    STACKTOP = sp;
    return +$$0;
   }
   $1258 = $emin$0$ph + -106 | 0;
   $1260 = (($1258 | 0) < 0) << 31 >> 31;
   if (($1232 | 0) < ($1260 | 0) | ($1232 | 0) == ($1260 | 0) & $1229 >>> 0 < $1258 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
    STACKTOP = sp;
    return +$$0;
   }
   if (!$j$072$i) $k$3$i = $k$068$i; else {
    if (($j$072$i | 0) < 9) {
     $1272 = $x$i + ($k$068$i << 2) | 0;
     $1274 = HEAP32[$1272 >> 2] | 0;
     $j$3115$i = $j$072$i;
     do {
      $1274 = $1274 * 10 | 0;
      $j$3115$i = $j$3115$i + 1 | 0;
     } while (($j$3115$i | 0) != 9);
     HEAP32[$1272 >> 2] = $1274;
    }
    $k$3$i = $k$068$i + 1 | 0;
   }
   if (($lnz$062$i | 0) < 9) if (($lnz$062$i | 0) <= ($1229 | 0) & ($1229 | 0) < 18) {
    if (($1229 | 0) == 9) {
     $$0 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0);
     STACKTOP = sp;
     return +$$0;
    }
    if (($1229 | 0) < 9) {
     $$0 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0) / +(HEAP32[63832 + (8 - $1229 << 2) >> 2] | 0);
     STACKTOP = sp;
     return +$$0;
    }
    $1296 = $bits$0$ph + 27 + (Math_imul($1229, -3) | 0) | 0;
    $$pre$i18 = HEAP32[$x$i >> 2] | 0;
    if (($1296 | 0) > 30 | ($$pre$i18 >>> $1296 | 0) == 0) {
     $$0 = +($sign$0 | 0) * +($$pre$i18 >>> 0) * +(HEAP32[63832 + ($1229 + -10 << 2) >> 2] | 0);
     STACKTOP = sp;
     return +$$0;
    }
   }
   $1308 = ($1229 | 0) % 9 | 0;
   if (!$1308) {
    $a$2$ph44$i = 0;
    $e2$0$ph$i = 0;
    $rp$2$ph42$i = $1229;
    $z$1$ph43$i = $k$3$i;
   } else {
    $1312 = ($1229 | 0) > -1 ? $1308 : $1308 + 9 | 0;
    $1315 = HEAP32[63832 + (8 - $1312 << 2) >> 2] | 0;
    if (!$k$3$i) {
     $a$0$lcssa180$i = 0;
     $rp$0$lcssa181$i = $1229;
     $z$0$i = 0;
    } else {
     $1317 = 1e9 / ($1315 | 0) | 0;
     $a$0106$i = 0;
     $carry$0108$i = 0;
     $k$4107$i = 0;
     $rp$0105$i = $1229;
     while (1) {
      $1318 = $x$i + ($k$4107$i << 2) | 0;
      $1319 = HEAP32[$1318 >> 2] | 0;
      $1322 = (($1319 >>> 0) / ($1315 >>> 0) | 0) + $carry$0108$i | 0;
      HEAP32[$1318 >> 2] = $1322;
      $carry$0108$i = Math_imul(($1319 >>> 0) % ($1315 >>> 0) | 0, $1317) | 0;
      $k$4107$i$looptemp = $k$4107$i;
      $k$4107$i = $k$4107$i + 1 | 0;
      if (($k$4107$i$looptemp | 0) == ($a$0106$i | 0) & ($1322 | 0) == 0) {
       $a$1$i = $k$4107$i & 127;
       $rp$1$i19 = $rp$0105$i + -9 | 0;
      } else {
       $a$1$i = $a$0106$i;
       $rp$1$i19 = $rp$0105$i;
      }
      if (($k$4107$i | 0) == ($k$3$i | 0)) break; else {
       $a$0106$i = $a$1$i;
       $rp$0105$i = $rp$1$i19;
      }
     }
     if (!$carry$0108$i) {
      $a$0$lcssa180$i = $a$1$i;
      $rp$0$lcssa181$i = $rp$1$i19;
      $z$0$i = $k$3$i;
     } else {
      HEAP32[$x$i + ($k$3$i << 2) >> 2] = $carry$0108$i;
      $a$0$lcssa180$i = $a$1$i;
      $rp$0$lcssa181$i = $rp$1$i19;
      $z$0$i = $k$3$i + 1 | 0;
     }
    }
    $a$2$ph44$i = $a$0$lcssa180$i;
    $e2$0$ph$i = 0;
    $rp$2$ph42$i = 9 - $1312 + $rp$0$lcssa181$i | 0;
    $z$1$ph43$i = $z$0$i;
   }
   L627 : while (1) {
    $1336 = $x$i + ($a$2$ph44$i << 2) | 0;
    if (($rp$2$ph42$i | 0) < 18) {
     $e2$0$us$i = $e2$0$ph$i;
     $z$1$us$i = $z$1$ph43$i;
     while (1) {
      $carry1$0$us$i = 0;
      $k$5$in$us$i = $z$1$us$i + 127 | 0;
      $z$2$us$i = $z$1$us$i;
      while (1) {
       $k$5$us$i = $k$5$in$us$i & 127;
       $1339 = $x$i + ($k$5$us$i << 2) | 0;
       $1341 = _bitshift64Shl(HEAP32[$1339 >> 2] | 0, 0, 29) | 0;
       $1343 = _i64Add($1341 | 0, tempRet0 | 0, $carry1$0$us$i | 0, 0) | 0;
       $1344 = tempRet0;
       if ($1344 >>> 0 > 0 | ($1344 | 0) == 0 & $1343 >>> 0 > 1e9) {
        $1350 = ___udivdi3($1343 | 0, $1344 | 0, 1e9, 0) | 0;
        $1352 = ___uremdi3($1343 | 0, $1344 | 0, 1e9, 0) | 0;
        $$sink$off0$us$i = $1352;
        $carry1$1$us$i = $1350;
       } else {
        $$sink$off0$us$i = $1343;
        $carry1$1$us$i = 0;
       }
       HEAP32[$1339 >> 2] = $$sink$off0$us$i;
       $1357 = ($k$5$us$i | 0) == ($a$2$ph44$i | 0);
       if (($k$5$us$i | 0) != ($z$2$us$i + 127 & 127 | 0) | $1357) $z$3$us$i = $z$2$us$i; else $z$3$us$i = ($$sink$off0$us$i | 0) == 0 ? $k$5$us$i : $z$2$us$i;
       if ($1357) break; else {
        $carry1$0$us$i = $carry1$1$us$i;
        $k$5$in$us$i = $k$5$us$i + -1 | 0;
        $z$2$us$i = $z$3$us$i;
       }
      }
      $1360 = $e2$0$us$i + -29 | 0;
      if (!$carry1$1$us$i) {
       $e2$0$us$i = $1360;
       $z$1$us$i = $z$3$us$i;
      } else {
       $$lcssa55$i = $1360;
       $carry1$1$lcssa$lcssa$i = $carry1$1$us$i;
       $z$3$lcssa$lcssa$i = $z$3$us$i;
       break;
      }
     }
    } else {
     if (($rp$2$ph42$i | 0) == 18) {
      $e2$0$us89$i = $e2$0$ph$i;
      $z$1$us90$i = $z$1$ph43$i;
     } else {
      $a$3$ph$i = $a$2$ph44$i;
      $e2$1$ph$i = $e2$0$ph$i;
      $rp$3$ph40$i = $rp$2$ph42$i;
      $z$5$ph$i = $z$1$ph43$i;
      break;
     }
     while (1) {
      if ((HEAP32[$1336 >> 2] | 0) >>> 0 >= 9007199) {
       $a$3$ph$i = $a$2$ph44$i;
       $e2$1$ph$i = $e2$0$us89$i;
       $rp$3$ph40$i = 18;
       $z$5$ph$i = $z$1$us90$i;
       break L627;
      }
      $carry1$0$us94$i = 0;
      $k$5$in$us93$i = $z$1$us90$i + 127 | 0;
      $z$2$us92$i = $z$1$us90$i;
      while (1) {
       $k$5$us95$i = $k$5$in$us93$i & 127;
       $1365 = $x$i + ($k$5$us95$i << 2) | 0;
       $1367 = _bitshift64Shl(HEAP32[$1365 >> 2] | 0, 0, 29) | 0;
       $1369 = _i64Add($1367 | 0, tempRet0 | 0, $carry1$0$us94$i | 0, 0) | 0;
       $1370 = tempRet0;
       if ($1370 >>> 0 > 0 | ($1370 | 0) == 0 & $1369 >>> 0 > 1e9) {
        $1376 = ___udivdi3($1369 | 0, $1370 | 0, 1e9, 0) | 0;
        $1378 = ___uremdi3($1369 | 0, $1370 | 0, 1e9, 0) | 0;
        $$sink$off0$us98$i = $1378;
        $carry1$1$us99$i = $1376;
       } else {
        $$sink$off0$us98$i = $1369;
        $carry1$1$us99$i = 0;
       }
       HEAP32[$1365 >> 2] = $$sink$off0$us98$i;
       $1383 = ($k$5$us95$i | 0) == ($a$2$ph44$i | 0);
       if (($k$5$us95$i | 0) != ($z$2$us92$i + 127 & 127 | 0) | $1383) $z$3$us102$i = $z$2$us92$i; else $z$3$us102$i = ($$sink$off0$us98$i | 0) == 0 ? $k$5$us95$i : $z$2$us92$i;
       if ($1383) break; else {
        $carry1$0$us94$i = $carry1$1$us99$i;
        $k$5$in$us93$i = $k$5$us95$i + -1 | 0;
        $z$2$us92$i = $z$3$us102$i;
       }
      }
      $1386 = $e2$0$us89$i + -29 | 0;
      if (!$carry1$1$us99$i) {
       $e2$0$us89$i = $1386;
       $z$1$us90$i = $z$3$us102$i;
      } else {
       $$lcssa55$i = $1386;
       $carry1$1$lcssa$lcssa$i = $carry1$1$us99$i;
       $z$3$lcssa$lcssa$i = $z$3$us102$i;
       break;
      }
     }
    }
    $1390 = $a$2$ph44$i + 127 & 127;
    if (($1390 | 0) == ($z$3$lcssa$lcssa$i | 0)) {
     $1393 = $z$3$lcssa$lcssa$i + 127 & 127;
     $1398 = $x$i + (($z$3$lcssa$lcssa$i + 126 & 127) << 2) | 0;
     HEAP32[$1398 >> 2] = HEAP32[$1398 >> 2] | HEAP32[$x$i + ($1393 << 2) >> 2];
     $z$4$i = $1393;
    } else $z$4$i = $z$3$lcssa$lcssa$i;
    HEAP32[$x$i + ($1390 << 2) >> 2] = $carry1$1$lcssa$lcssa$i;
    $a$2$ph44$i = $1390;
    $e2$0$ph$i = $$lcssa55$i;
    $rp$2$ph42$i = $rp$2$ph42$i + 9 | 0;
    $z$1$ph43$i = $z$4$i;
   }
   L658 : while (1) {
    $1436 = $z$5$ph$i + 1 & 127;
    $1441 = $x$i + (($z$5$ph$i + 127 & 127) << 2) | 0;
    $a$3$i$ph = $a$3$ph$i;
    $e2$1$i$ph = $e2$1$ph$i;
    $rp$3$i$ph = $rp$3$ph40$i;
    while (1) {
     $1414 = ($rp$3$i$ph | 0) == 18;
     $$21$i = ($rp$3$i$ph | 0) > 27 ? 9 : 1;
     $a$3$i = $a$3$i$ph;
     $e2$1$i = $e2$1$i$ph;
     while (1) {
      $i$081$i = 0;
      while (1) {
       $1405 = $i$081$i + $a$3$i & 127;
       if (($1405 | 0) == ($z$5$ph$i | 0)) {
        $i$1$i = 2;
        break;
       }
       $1408 = HEAP32[$x$i + ($1405 << 2) >> 2] | 0;
       $1410 = HEAP32[63824 + ($i$081$i << 2) >> 2] | 0;
       if ($1408 >>> 0 < $1410 >>> 0) {
        $i$1$i = 2;
        break;
       }
       $1403 = $i$081$i + 1 | 0;
       if ($1408 >>> 0 > $1410 >>> 0) {
        $i$1$i = $i$081$i;
        break;
       }
       if (($1403 | 0) < 2) $i$081$i = $1403; else {
        $i$1$i = $1403;
        break;
       }
      }
      if (($i$1$i | 0) == 2 & $1414) break L658;
      $1417 = $$21$i + $e2$1$i | 0;
      if (($a$3$i | 0) == ($z$5$ph$i | 0)) {
       $a$3$i = $z$5$ph$i;
       $e2$1$i = $1417;
      } else break;
     }
     $1420 = (1 << $$21$i) + -1 | 0;
     $1421 = 1e9 >>> $$21$i;
     $a$483$i = $a$3$i;
     $carry3$086$i = 0;
     $k$684$i = $a$3$i;
     $rp$482$i = $rp$3$i$ph;
     do {
      $1422 = $x$i + ($k$684$i << 2) | 0;
      $1423 = HEAP32[$1422 >> 2] | 0;
      $1426 = ($1423 >>> $$21$i) + $carry3$086$i | 0;
      HEAP32[$1422 >> 2] = $1426;
      $carry3$086$i = Math_imul($1423 & $1420, $1421) | 0;
      $or$cond22$i = ($k$684$i | 0) == ($a$483$i | 0) & ($1426 | 0) == 0;
      $k$684$i = $k$684$i + 1 & 127;
      $rp$482$i = $or$cond22$i ? $rp$482$i + -9 | 0 : $rp$482$i;
      $a$483$i = $or$cond22$i ? $k$684$i : $a$483$i;
     } while (($k$684$i | 0) != ($z$5$ph$i | 0));
     if (!$carry3$086$i) {
      $a$3$i$ph = $a$483$i;
      $e2$1$i$ph = $1417;
      $rp$3$i$ph = $rp$482$i;
      continue;
     }
     if (($1436 | 0) != ($a$483$i | 0)) break;
     HEAP32[$1441 >> 2] = HEAP32[$1441 >> 2] | 1;
     $a$3$i$ph = $a$483$i;
     $e2$1$i$ph = $1417;
     $rp$3$i$ph = $rp$482$i;
    }
    HEAP32[$x$i + ($z$5$ph$i << 2) >> 2] = $carry3$086$i;
    $a$3$ph$i = $a$483$i;
    $e2$1$ph$i = $1417;
    $rp$3$ph40$i = $rp$482$i;
    $z$5$ph$i = $1436;
   }
   $1415 = $a$3$i & 127;
   if (($1415 | 0) == ($z$5$ph$i | 0)) {
    HEAP32[$x$i + ($1436 + -1 << 2) >> 2] = 0;
    $z$7$i = $1436;
   } else $z$7$i = $z$5$ph$i;
   $1449 = +((HEAP32[$x$i + ($1415 << 2) >> 2] | 0) >>> 0);
   $1451 = $a$3$i + 1 & 127;
   if (($1451 | 0) == ($z$7$i | 0)) {
    $1565 = $z$7$i + 1 & 127;
    HEAP32[$x$i + ($1565 + -1 << 2) >> 2] = 0;
    $z$7$1$i = $1565;
   } else $z$7$1$i = $z$7$i;
   $1511 = +($sign$0 | 0);
   $1474 = $1511 * ($1449 * 1.0e9 + +((HEAP32[$x$i + ($1451 << 2) >> 2] | 0) >>> 0));
   $1531 = $e2$1$i + 53 | 0;
   $1454 = $1531 - $emin$0$ph | 0;
   if (($1454 | 0) < ($bits$0$ph | 0)) if (($1454 | 0) < 0) {
    $$01332$i = 0;
    $denormal$031$i = 1;
    label = 527;
   } else {
    $$013$i = $1454;
    $denormal$0$i = 1;
    label = 526;
   } else {
    $$013$i = $bits$0$ph;
    $denormal$0$i = 0;
    label = 526;
   }
   if ((label | 0) == 526) if (($$013$i | 0) < 53) {
    $$01332$i = $$013$i;
    $denormal$031$i = $denormal$0$i;
    label = 527;
   } else {
    $$01333$i = $$013$i;
    $bias$0$i24 = 0.0;
    $denormal$030$i = $denormal$0$i;
    $frac$0$i = 0.0;
    $y$1$i23 = $1474;
   }
   if ((label | 0) == 527) {
    $1456 = 105 - $$01332$i | 0;
    do if (($1456 | 0) > 1023) {
     $1458 = $1456 + -1023 | 0;
     if (($1458 | 0) > 1023) {
      $1460 = $1456 + -2046 | 0;
      $$0$i206 = ($1460 | 0) > 1023 ? 1023 : $1460;
      $y$0$i207 = inf;
     } else {
      $$0$i206 = $1458;
      $y$0$i207 = 8988465674311579538646525.0e283;
     }
    } else if (($1456 | 0) < -1022) {
     $1463 = $1456 + 1022 | 0;
     if (($1463 | 0) >= -1022) {
      $$0$i206 = $1463;
      $y$0$i207 = 2.2250738585072014e-308;
      break;
     }
     $1465 = $1456 + 2044 | 0;
     $$0$i206 = ($1465 | 0) < -1022 ? -1022 : $1465;
     $y$0$i207 = 0.0;
    } else {
     $$0$i206 = $1456;
     $y$0$i207 = 1.0;
    } while (0);
    $1468 = _bitshift64Shl($$0$i206 + 1023 | 0, 0, 52) | 0;
    $1469 = tempRet0;
    HEAP32[tempDoublePtr >> 2] = $1468;
    HEAP32[tempDoublePtr + 4 >> 2] = $1469;
    HEAPF64[tempDoublePtr >> 3] = $y$0$i207 * +HEAPF64[tempDoublePtr >> 3];
    $1472 = HEAP32[tempDoublePtr >> 2] | 0;
    $1473 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    HEAPF64[tempDoublePtr >> 3] = $1474;
    $1479 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $1473 & 2147483647;
    HEAP32[tempDoublePtr >> 2] = $1472;
    HEAP32[tempDoublePtr + 4 >> 2] = $1479;
    $1480 = +HEAPF64[tempDoublePtr >> 3];
    $1481 = 53 - $$01332$i | 0;
    do if (($1481 | 0) > 1023) {
     $1483 = $1481 + -1023 | 0;
     if (($1483 | 0) <= 1023) {
      $$0$i211 = $1483;
      $y$0$i212 = 8988465674311579538646525.0e283;
      break;
     }
     $1485 = $1481 + -2046 | 0;
     $$0$i211 = ($1485 | 0) > 1023 ? 1023 : $1485;
     $y$0$i212 = inf;
    } else {
     if (($1481 | 0) >= -1022) {
      $$0$i211 = $1481;
      $y$0$i212 = 1.0;
      break;
     }
     $1488 = $1481 + 1022 | 0;
     if (($1488 | 0) >= -1022) {
      $$0$i211 = $1488;
      $y$0$i212 = 2.2250738585072014e-308;
      break;
     }
     $1490 = $1481 + 2044 | 0;
     $$0$i211 = ($1490 | 0) < -1022 ? -1022 : $1490;
     $y$0$i212 = 0.0;
    } while (0);
    $1493 = _bitshift64Shl($$0$i211 + 1023 | 0, 0, 52) | 0;
    $1494 = tempRet0;
    HEAP32[tempDoublePtr >> 2] = $1493;
    HEAP32[tempDoublePtr + 4 >> 2] = $1494;
    $1497 = +_fmodl($1474, $y$0$i212 * +HEAPF64[tempDoublePtr >> 3]);
    $$01333$i = $$01332$i;
    $bias$0$i24 = $1480;
    $denormal$030$i = $denormal$031$i;
    $frac$0$i = $1497;
    $y$1$i23 = $1480 + ($1474 - $1497);
   }
   $1501 = $a$3$i + 2 & 127;
   do if (($1501 | 0) == ($z$7$1$i | 0)) $frac$2$i = $frac$0$i; else {
    $1504 = HEAP32[$x$i + ($1501 << 2) >> 2] | 0;
    do if ($1504 >>> 0 < 5e8) {
     if (!$1504) if (($a$3$i + 3 & 127 | 0) == ($z$7$1$i | 0)) {
      $frac$1$i = $frac$0$i;
      break;
     }
     $frac$1$i = $1511 * .25 + $frac$0$i;
    } else {
     if ($1504 >>> 0 > 5e8) {
      $frac$1$i = $1511 * .75 + $frac$0$i;
      break;
     }
     if (($a$3$i + 3 & 127 | 0) == ($z$7$1$i | 0)) {
      $frac$1$i = $1511 * .5 + $frac$0$i;
      break;
     } else {
      $frac$1$i = $1511 * .75 + $frac$0$i;
      break;
     }
    } while (0);
    if ((53 - $$01333$i | 0) > 1) {
     if (+_fmodl($frac$1$i, 1.0) != 0.0) {
      $frac$2$i = $frac$1$i;
      break;
     }
     $frac$2$i = $frac$1$i + 1.0;
    } else $frac$2$i = $frac$1$i;
   } while (0);
   $1529 = $y$1$i23 + $frac$2$i - $bias$0$i24;
   do if (($1531 & 2147483647 | 0) > (-2 - $sum$i | 0)) {
    if (!(+Math_abs(+$1529) >= 9007199254740992.0)) {
     $denormal$2$i = $denormal$030$i;
     $e2$2$i = $e2$1$i;
     $y$2$i25 = $1529;
    } else {
     $denormal$2$i = ($denormal$030$i | 0) != 0 & ($$01333$i | 0) == ($1454 | 0) ? 0 : $denormal$030$i;
     $e2$2$i = $e2$1$i + 1 | 0;
     $y$2$i25 = $1529 * .5;
    }
    if (($e2$2$i + 50 | 0) <= ($940 | 0)) if (!(($denormal$2$i | 0) != 0 & $frac$2$i != 0.0)) {
     $e2$3$i = $e2$2$i;
     $y$3$i = $y$2$i25;
     break;
    }
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $e2$3$i = $e2$2$i;
    $y$3$i = $y$2$i25;
   } else {
    $e2$3$i = $e2$1$i;
    $y$3$i = $1529;
   } while (0);
   do if (($e2$3$i | 0) > 1023) {
    $1546 = $y$3$i * 8988465674311579538646525.0e283;
    $1547 = $e2$3$i + -1023 | 0;
    if (($1547 | 0) <= 1023) {
     $$0$i$i216 = $1547;
     $y$0$i$i217 = $1546;
     break;
    }
    $1550 = $e2$3$i + -2046 | 0;
    $$0$i$i216 = ($1550 | 0) > 1023 ? 1023 : $1550;
    $y$0$i$i217 = $1546 * 8988465674311579538646525.0e283;
   } else {
    if (($e2$3$i | 0) >= -1022) {
     $$0$i$i216 = $e2$3$i;
     $y$0$i$i217 = $y$3$i;
     break;
    }
    $1553 = $y$3$i * 2.2250738585072014e-308;
    $1554 = $e2$3$i + 1022 | 0;
    if (($1554 | 0) >= -1022) {
     $$0$i$i216 = $1554;
     $y$0$i$i217 = $1553;
     break;
    }
    $1557 = $e2$3$i + 2044 | 0;
    $$0$i$i216 = ($1557 | 0) < -1022 ? -1022 : $1557;
    $y$0$i$i217 = $1553 * 2.2250738585072014e-308;
   } while (0);
   $1560 = _bitshift64Shl($$0$i$i216 + 1023 | 0, 0, 52) | 0;
   $1561 = tempRet0;
   HEAP32[tempDoublePtr >> 2] = $1560;
   HEAP32[tempDoublePtr + 4 >> 2] = $1561;
   $$0 = $y$0$i$i217 * +HEAPF64[tempDoublePtr >> 3];
   STACKTOP = sp;
   return +$$0;
  } else if (($i$3 | 0) == 3) {
   $257 = HEAP32[$0 >> 2] | 0;
   L742 : do if ($257 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $257 + 1;
    $311 = HEAPU8[$257 >> 0] | 0;
   } else {
    $263 = HEAP32[$2 >> 2] | 0;
    if (!$263) label = 107; else if ((HEAP32[$11 >> 2] | 0) < ($263 | 0)) label = 107;
    L747 : do if ((label | 0) == 107) {
     do if (!(HEAP32[$3 >> 2] | 0)) {
      $270 = HEAP8[$4 >> 0] | 0;
      HEAP8[$4 >> 0] = $270 + 255 | $270;
      if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$9 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      $278 = HEAP32[$f >> 2] | 0;
      if (!($278 & 20)) {
       $284 = HEAP32[$6 >> 2] | 0;
       HEAP32[$3 >> 2] = $284;
       HEAP32[$0 >> 2] = $284;
       break;
      }
      if (!($278 & 4)) break L747;
      HEAP32[$f >> 2] = $278 | 32;
      break L747;
     } while (0);
     if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i52, 1) | 0) == 1) {
      $288 = HEAP8[$c$i52 >> 0] | 0;
      $289 = $288 & 255;
      $290 = HEAP32[$2 >> 2] | 0;
      $$pre$i45 = HEAP32[$3 >> 2] | 0;
      $$pre3$i48$pre$pre = HEAP32[$0 >> 2] | 0;
      if (!$290) {
       $$pre3$i48 = $$pre3$i48$pre$pre;
       $storemerge380 = $$pre$i45;
      } else {
       $297 = $290 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
       if (($$pre$i45 - $$pre3$i48$pre$pre | 0) > ($297 | 0)) {
        $$pre3$i48 = $$pre3$i48$pre$pre;
        $storemerge380 = $$pre3$i48$pre$pre + $297 | 0;
       } else {
        $$pre3$i48 = $$pre3$i48$pre$pre;
        $storemerge380 = $$pre$i45;
       }
      }
      HEAP32[$1 >> 2] = $storemerge380;
      if ($$pre$i45) HEAP32[$11 >> 2] = $$pre$i45 + 1 - $$pre3$i48 + (HEAP32[$11 >> 2] | 0);
      $307 = $$pre3$i48 + -1 | 0;
      if ((HEAP8[$307 >> 0] | 0) == $288 << 24 >> 24) {
       $311 = $289;
       break L742;
      }
      HEAP8[$307 >> 0] = $288;
      $311 = $289;
      break L742;
     }
    } while (0);
    HEAP32[$1 >> 2] = 0;
    $$0 = nan;
    STACKTOP = sp;
    return +$$0;
   } while (0);
   if (($311 | 0) == 40) $i$4 = 1; else {
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    }
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    $$0 = nan;
    STACKTOP = sp;
    return +$$0;
   }
   while (1) {
    $315 = HEAP32[$0 >> 2] | 0;
    L779 : do if ($315 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $315 + 1;
     $369 = HEAPU8[$315 >> 0] | 0;
    } else {
     $321 = HEAP32[$2 >> 2] | 0;
     if (!$321) label = 130; else if ((HEAP32[$11 >> 2] | 0) < ($321 | 0)) label = 130;
     L783 : do if ((label | 0) == 130) {
      label = 0;
      do if (!(HEAP32[$3 >> 2] | 0)) {
       $328 = HEAP8[$4 >> 0] | 0;
       HEAP8[$4 >> 0] = $328 + 255 | $328;
       if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$7 >> 2] & 31]($f, 0, 0) | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$5 >> 2] = 0;
       $336 = HEAP32[$f >> 2] | 0;
       if (!($336 & 20)) {
        $342 = HEAP32[$6 >> 2] | 0;
        HEAP32[$3 >> 2] = $342;
        HEAP32[$0 >> 2] = $342;
        break;
       }
       if (!($336 & 4)) break L783;
       HEAP32[$f >> 2] = $336 | 32;
       break L783;
      } while (0);
      if ((FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, $c$i65, 1) | 0) == 1) {
       $346 = HEAP8[$c$i65 >> 0] | 0;
       $347 = $346 & 255;
       $348 = HEAP32[$2 >> 2] | 0;
       $$pre$i58 = HEAP32[$3 >> 2] | 0;
       $$pre3$i61$pre$pre = HEAP32[$0 >> 2] | 0;
       if (!$348) {
        $$pre3$i61 = $$pre3$i61$pre$pre;
        $storemerge381 = $$pre$i58;
       } else {
        $355 = $348 - (HEAP32[$11 >> 2] | 0) + -1 | 0;
        if (($$pre$i58 - $$pre3$i61$pre$pre | 0) > ($355 | 0)) {
         $$pre3$i61 = $$pre3$i61$pre$pre;
         $storemerge381 = $$pre3$i61$pre$pre + $355 | 0;
        } else {
         $$pre3$i61 = $$pre3$i61$pre$pre;
         $storemerge381 = $$pre$i58;
        }
       }
       HEAP32[$1 >> 2] = $storemerge381;
       if ($$pre$i58) HEAP32[$11 >> 2] = $$pre$i58 + 1 - $$pre3$i61 + (HEAP32[$11 >> 2] | 0);
       $365 = $$pre3$i61 + -1 | 0;
       if ((HEAP8[$365 >> 0] | 0) == $346 << 24 >> 24) {
        $369 = $347;
        break L779;
       }
       HEAP8[$365 >> 0] = $346;
       $369 = $347;
       break L779;
      }
     } while (0);
     HEAP32[$1 >> 2] = 0;
     $369 = -1;
    } while (0);
    if (!(($369 + -48 | 0) >>> 0 < 10 | ($369 + -65 | 0) >>> 0 < 26)) if (!(($369 + -97 | 0) >>> 0 < 26 | ($369 | 0) == 95)) break;
    $i$4 = $i$4 + 1 | 0;
   }
   if (($369 | 0) == 41) {
    $$0 = nan;
    STACKTOP = sp;
    return +$$0;
   }
   $378 = (HEAP32[$1 >> 2] | 0) == 0;
   if (!$378) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   if (!$185) {
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    HEAP32[$2 >> 2] = 0;
    $383 = HEAP32[$3 >> 2] | 0;
    HEAP32[$11 >> 2] = $383 - (HEAP32[$0 >> 2] | 0);
    HEAP32[$1 >> 2] = $383;
    $$0 = 0.0;
    STACKTOP = sp;
    return +$$0;
   }
   if (($i$4 | 0) == 0 | $378) {
    $$0 = nan;
    STACKTOP = sp;
    return +$$0;
   }
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + (0 - $i$4);
   $$0 = nan;
   STACKTOP = sp;
   return +$$0;
  } else {
   $$pre = HEAP32[$0 >> 2] | 0;
   if (!(HEAP32[$1 >> 2] | 0)) $396 = $$pre; else {
    $391 = $$pre + -1 | 0;
    HEAP32[$0 >> 2] = $391;
    $396 = $391;
   }
   HEAP32[(___errno_location() | 0) >> 2] = 22;
   HEAP32[$2 >> 2] = 0;
   $393 = HEAP32[$3 >> 2] | 0;
   HEAP32[$11 >> 2] = $393 - $396;
   HEAP32[$1 >> 2] = $393;
   $$0 = 0.0;
   STACKTOP = sp;
   return +$$0;
  }
 } while (0);
 if ((label | 0) == 74) if (HEAP32[$1 >> 2] | 0) {
  $189 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $189 + -1;
  if (!($i$0$lcssa >>> 0 < 4 | ($pok | 0) == 0)) HEAP32[$0 >> 2] = $189 + (2 - $i$0$lcssa);
 }
 $$0 = +($sign$0 | 0) * inf;
 STACKTOP = sp;
 return +$$0;
}

function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$i = 0, $$8$i = 0, $$lcssa39$i = 0, $$pre$i$i = 0, $$pre$i110$i = 0, $$pre$i18$i = 0, $$pre$i32$i = 0, $$pre$i45$i = 0, $$pre$i5$i = 0, $$pre$i58$i = 0, $$pre$i71$i = 0, $$pre$i84$i = 0, $$pre$i97$i = 0, $$pre$phi219$iZ2D = 0, $$pre205$i = 0, $$pre211$i = 0, $$pre216$i = 0, $$pre3$i$i = 0, $$pre3$i$i$pre$pre = 0, $$pre3$i100$i = 0, $$pre3$i100$i$pre$pre = 0, $$pre3$i113$i = 0, $$pre3$i113$i$pre$pre = 0, $$pre3$i21$i = 0, $$pre3$i21$i$pre$pre = 0, $$pre3$i35$i = 0, $$pre3$i35$i$pre$pre = 0, $$pre3$i48$i = 0, $$pre3$i48$i$pre$pre = 0, $$pre3$i61$i = 0, $$pre3$i61$i$pre$pre = 0, $$pre3$i74$i = 0, $$pre3$i74$i$pre$pre = 0, $$pre3$i8$i = 0, $$pre3$i8$i$pre$pre = 0, $$pre3$i87$i = 0, $$pre3$i87$i$pre$pre = 0, $$sink$i$i = 0, $$size$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $118 = 0, $12 = 0, $126 = 0, $13 = 0, $132 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $145 = 0, $15 = 0, $155 = 0, $16 = 0, $161 = 0, $17 = 0, $173 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $189 = 0, $19 = 0, $190 = 0, $192 = 0, $194 = 0, $197 = 0, $2 = 0, $20 = 0, $200 = 0, $202 = 0, $21 = 0, $210 = 0, $214 = 0, $215 = 0, $220 = 0, $221 = 0, $225 = 0, $23 = 0, $232 = 0, $240 = 0, $246 = 0, $250 = 0, $251 = 0, $252 = 0, $259 = 0, $269 = 0, $27 = 0, $272 = 0, $274 = 0, $278 = 0, $28 = 0, $283 = 0, $284 = 0, $285 = 0, $288 = 0, $298 = 0, $306 = 0, $312 = 0, $316 = 0, $317 = 0, $324 = 0, $33 = 0, $334 = 0, $338 = 0, $34 = 0, $341 = 0, $345 = 0, $347 = 0, $349 = 0, $351 = 0, $354 = 0, $357 = 0, $358 = 0, $359 = 0, $360 = 0, $362 = 0, $367 = 0, $371 = 0, $376 = 0, $377 = 0, $379 = 0, $383 = 0, $39 = 0, $390 = 0, $398 = 0, $40 = 0, $404 = 0, $408 = 0, $409 = 0, $410 = 0, $417 = 0, $427 = 0, $431 = 0, $435 = 0, $44 = 0, $440 = 0, $443 = 0, $450 = 0, $458 = 0, $464 = 0, $468 = 0, $469 = 0, $470 = 0, $477 = 0, $487 = 0, $491 = 0, $495 = 0, $5 = 0, $500 = 0, $507 = 0, $51 = 0, $513 = 0, $520 = 0, $528 = 0, $534 = 0, $538 = 0, $539 = 0, $540 = 0, $547 = 0, $557 = 0, $561 = 0, $566 = 0, $570 = 0, $572 = 0, $576 = 0, $578 = 0, $584 = 0, $59 = 0, $591 = 0, $599 = 0, $605 = 0, $609 = 0, $610 = 0, $611 = 0, $618 = 0, $628 = 0, $632 = 0, $640 = 0, $641 = 0, $644 = 0, $646 = 0, $65 = 0, $650 = 0, $657 = 0, $665 = 0, $671 = 0, $675 = 0, $676 = 0, $677 = 0, $684 = 0, $69 = 0, $694 = 0, $698 = 0, $7 = 0, $70 = 0, $705 = 0, $707 = 0, $71 = 0, $711 = 0, $718 = 0, $726 = 0, $732 = 0, $736 = 0, $737 = 0, $738 = 0, $745 = 0, $755 = 0, $759 = 0, $765 = 0, $769 = 0, $772 = 0, $779 = 0, $78 = 0, $794 = 0, $798 = 0.0, $8 = 0, $88 = 0, $9 = 0, $91 = 0, $93 = 0, $97 = 0, $alloc$0$i = 0, $alloc$0200$i = 0, $alloc$1$i = 0, $alloc$2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $base$0$i = 0, $c$0101$i = 0, $c$i$i = 0, $c$i104$i = 0, $c$i117$i = 0, $c$i25$i = 0, $c$i39$i = 0, $c$i52$i = 0, $c$i65$i = 0, $c$i78$i = 0, $c$i91$i = 0, $dest$0$i = 0, $f = 0, $i$0$i$i = 0, $i$0$ph$i = 0, $i$0$ph21$i = 0, $i$0$ph21$lcssa$i = 0, $i$0$ph21$us106$i = 0, $i$1$lcssa$i = 0, $i$2$i = 0, $i$2$ph$i = 0, $i$2$ph$i$phi = 0, $i$3$i = 0, $i$4$i = 0, $invert$0$i = 0, $isdigittmp$i = 0, $k$0$ph$i = 0, $k$1$ph$i = 0, $matches$0111$i = 0, $matches$0111$i209 = 0, $matches$1$i = 0, $matches$2$i = 0, $matches$3$i = 0, $or$cond$us$i = 0, $p$0117$i = 0, $p$1$i = 0, $p$10$i = 0, $p$11$i = 0, $p$2$i = 0, $p$3$lcssa$i = 0, $p$397$i = 0, $p$4$i = 0, $p$5$i = 0, $p$6$i = 0, $p$7$i = 0, $p$7$ph$i = 0, $p$8$i = 0, $p$9$i = 0, $pos$0116$i = 0, $pos$1$i = 0, $pos$2$i = 0, $s$0109$i = 0, $s$1$i = 0, $s$2$ph$i = 0, $s$3$i = 0, $s$4$i = 0, $s$5$i = 0, $s$6$i = 0, $s$7$i = 0, $s$8$i = 0, $scanset$i = 0, $size$0$i = 0, $st$i = 0, $storemerge = 0, $storemerge307 = 0, $storemerge308 = 0, $storemerge309 = 0, $storemerge310 = 0, $storemerge311 = 0, $storemerge312 = 0, $storemerge313 = 0, $storemerge314 = 0, $storemerge315 = 0, $wc$i = 0, $wcs$0110$i = 0, $wcs$1$i = 0, $wcs$2$i = 0, $wcs$3$ph$i = 0, $wcs$3$ph141$i = 0, $wcs$4$i = 0, $wcs$5$i = 0, $wcs$6$i = 0, $wcs$7$i = 0, $wcs$8$i = 0, $wcs$9$i = 0, $width$0$lcssa$i = 0, $width$098$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $c$i117$i = sp + 405 | 0;
 $c$i104$i = sp + 144 | 0;
 $c$i91$i = sp + 406 | 0;
 $c$i78$i = sp + 145 | 0;
 $c$i65$i = sp + 404 | 0;
 $c$i52$i = sp + 16 | 0;
 $c$i39$i = sp + 146 | 0;
 $c$i25$i = sp + 409 | 0;
 $c$i$i = sp + 407 | 0;
 $st$i = sp;
 $scanset$i = sp + 147 | 0;
 $wc$i = sp + 8 | 0;
 $0 = sp + 408 | 0;
 $f = sp + 32 | 0;
 dest = $f + 0 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $1 = $f + 32 | 0;
 HEAP32[$1 >> 2] = 28;
 $2 = $f + 44 | 0;
 HEAP32[$2 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 HEAP32[$f + 84 >> 2] = $s;
 $5 = HEAP8[$fmt >> 0] | 0;
 if (!($5 << 24 >> 24)) {
  $matches$3$i = 0;
  STACKTOP = sp;
  return $matches$3$i | 0;
 }
 $7 = $f + 4 | 0;
 $8 = $f + 100 | 0;
 $9 = $f + 108 | 0;
 $10 = $f + 8 | 0;
 $11 = $scanset$i + 10 | 0;
 $12 = $scanset$i + 33 | 0;
 $13 = $st$i + 4 | 0;
 $14 = $scanset$i + 46 | 0;
 $15 = $scanset$i + 94 | 0;
 $16 = $f + 104 | 0;
 $17 = $f + 74 | 0;
 $18 = $f + 20 | 0;
 $19 = $f + 36 | 0;
 $20 = $f + 16 | 0;
 $21 = $f + 28 | 0;
 $23 = $5;
 $matches$0111$i = 0;
 $p$0117$i = $fmt;
 $pos$0116$i = 0;
 $s$0109$i = 0;
 $wcs$0110$i = 0;
 L4 : while (1) {
  L6 : do if ($23 << 24 >> 24 == 32) {
   $p$1$i = $p$0117$i;
   label = 5;
  } else if ((($23 & 255) + -9 | 0) >>> 0 < 5) {
   $p$1$i = $p$0117$i;
   label = 5;
  } else {
   $102 = $23 << 24 >> 24 == 37;
   L9 : do if ($102) {
    $103 = $p$0117$i + 1 | 0;
    $104 = HEAP8[$103 >> 0] | 0;
    do if ($104 << 24 >> 24 == 37) break L9; else if ($104 << 24 >> 24 == 42) {
     $dest$0$i = 0;
     $p$2$i = $p$0117$i + 2 | 0;
    } else {
     $isdigittmp$i = ($104 & 255) + -48 | 0;
     if ($isdigittmp$i >>> 0 < 10) if ((HEAP8[$p$0117$i + 2 >> 0] | 0) == 36) {
      HEAP32[$c$i52$i >> 2] = HEAP32[$ap >> 2];
      $i$0$i$i = $isdigittmp$i;
      while (1) {
       $arglist_current = HEAP32[$c$i52$i >> 2] | 0;
       $173 = HEAP32[$arglist_current >> 2] | 0;
       HEAP32[$c$i52$i >> 2] = $arglist_current + 4;
       if ($i$0$i$i >>> 0 > 1) $i$0$i$i = $i$0$i$i + -1 | 0; else break;
      }
      $dest$0$i = $173;
      $p$2$i = $p$0117$i + 3 | 0;
      break;
     }
     $arglist_current2 = HEAP32[$ap >> 2] | 0;
     $176 = HEAP32[$arglist_current2 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current2 + 4;
     $dest$0$i = $176;
     $p$2$i = $103;
    } while (0);
    $177 = HEAP8[$p$2$i >> 0] | 0;
    $178 = $177 & 255;
    if (($178 + -48 | 0) >>> 0 < 10) {
     $182 = $178;
     $p$397$i = $p$2$i;
     $width$098$i = 0;
     while (1) {
      $181 = ($width$098$i * 10 | 0) + -48 + $182 | 0;
      $183 = $p$397$i + 1 | 0;
      $184 = HEAP8[$183 >> 0] | 0;
      $182 = $184 & 255;
      if (($182 + -48 | 0) >>> 0 >= 10) {
       $$lcssa39$i = $184;
       $p$3$lcssa$i = $183;
       $width$0$lcssa$i = $181;
       break;
      } else {
       $p$397$i = $183;
       $width$098$i = $181;
      }
     }
    } else {
     $$lcssa39$i = $177;
     $p$3$lcssa$i = $p$2$i;
     $width$0$lcssa$i = 0;
    }
    if ($$lcssa39$i << 24 >> 24 == 109) {
     $189 = $p$3$lcssa$i + 1 | 0;
     $192 = HEAP8[$189 >> 0] | 0;
     $alloc$0$i = ($dest$0$i | 0) != 0 & 1;
     $p$4$i = $189;
     $s$1$i = 0;
     $wcs$1$i = 0;
    } else {
     $192 = $$lcssa39$i;
     $alloc$0$i = 0;
     $p$4$i = $p$3$lcssa$i;
     $s$1$i = $s$0109$i;
     $wcs$1$i = $wcs$0110$i;
    }
    $190 = $p$4$i + 1 | 0;
    switch ($192 & 255 | 0) {
    case 104:
     {
      $194 = (HEAP8[$190 >> 0] | 0) == 104;
      $p$5$i = $194 ? $p$4$i + 2 | 0 : $190;
      $size$0$i = $194 ? -2 : -1;
      break;
     }
    case 116:
    case 122:
     {
      $p$5$i = $190;
      $size$0$i = 1;
      break;
     }
    case 108:
     {
      $197 = (HEAP8[$190 >> 0] | 0) == 108;
      $p$5$i = $197 ? $p$4$i + 2 | 0 : $190;
      $size$0$i = $197 ? 3 : 1;
      break;
     }
    case 76:
     {
      $p$5$i = $190;
      $size$0$i = 2;
      break;
     }
    case 110:
    case 112:
    case 67:
    case 83:
    case 91:
    case 99:
    case 115:
    case 88:
    case 71:
    case 70:
    case 69:
    case 65:
    case 103:
    case 102:
    case 101:
    case 97:
    case 120:
    case 117:
    case 111:
    case 105:
    case 100:
     {
      $p$5$i = $p$4$i;
      $size$0$i = 0;
      break;
     }
    case 106:
     {
      $p$5$i = $190;
      $size$0$i = 3;
      break;
     }
    default:
     {
      $alloc$0200$i = $alloc$0$i;
      $matches$0111$i209 = $matches$0111$i;
      $s$6$i = $s$1$i;
      $wcs$7$i = $wcs$1$i;
      label = 326;
      break L4;
     }
    }
    $200 = HEAPU8[$p$5$i >> 0] | 0;
    $202 = ($200 & 47 | 0) == 3;
    $$$i = $202 ? $200 | 32 : $200;
    $$size$0$i = $202 ? 1 : $size$0$i;
    if (($$$i | 0) == 99) {
     $283 = ($width$0$lcssa$i | 0) < 1 ? 1 : $width$0$lcssa$i;
     $pos$1$i = $pos$0116$i;
    } else if (($$$i | 0) == 110) {
     if (!$dest$0$i) {
      $matches$1$i = $matches$0111$i;
      $p$11$i = $p$5$i;
      $pos$2$i = $pos$0116$i;
      $s$5$i = $s$1$i;
      $wcs$6$i = $wcs$1$i;
      break L6;
     }
     switch ($$size$0$i | 0) {
     case -2:
      {
       HEAP8[$dest$0$i >> 0] = $pos$0116$i;
       $matches$1$i = $matches$0111$i;
       $p$11$i = $p$5$i;
       $pos$2$i = $pos$0116$i;
       $s$5$i = $s$1$i;
       $wcs$6$i = $wcs$1$i;
       break L6;
       break;
      }
     case -1:
      {
       HEAP16[$dest$0$i >> 1] = $pos$0116$i;
       $matches$1$i = $matches$0111$i;
       $p$11$i = $p$5$i;
       $pos$2$i = $pos$0116$i;
       $s$5$i = $s$1$i;
       $wcs$6$i = $wcs$1$i;
       break L6;
       break;
      }
     case 0:
      {
       HEAP32[$dest$0$i >> 2] = $pos$0116$i;
       $matches$1$i = $matches$0111$i;
       $p$11$i = $p$5$i;
       $pos$2$i = $pos$0116$i;
       $s$5$i = $s$1$i;
       $wcs$6$i = $wcs$1$i;
       break L6;
       break;
      }
     case 1:
      {
       HEAP32[$dest$0$i >> 2] = $pos$0116$i;
       $matches$1$i = $matches$0111$i;
       $p$11$i = $p$5$i;
       $pos$2$i = $pos$0116$i;
       $s$5$i = $s$1$i;
       $wcs$6$i = $wcs$1$i;
       break L6;
       break;
      }
     case 3:
      {
       $210 = $dest$0$i;
       HEAP32[$210 >> 2] = $pos$0116$i;
       HEAP32[$210 + 4 >> 2] = (($pos$0116$i | 0) < 0) << 31 >> 31;
       $matches$1$i = $matches$0111$i;
       $p$11$i = $p$5$i;
       $pos$2$i = $pos$0116$i;
       $s$5$i = $s$1$i;
       $wcs$6$i = $wcs$1$i;
       break L6;
       break;
      }
     default:
      {
       $matches$1$i = $matches$0111$i;
       $p$11$i = $p$5$i;
       $pos$2$i = $pos$0116$i;
       $s$5$i = $s$1$i;
       $wcs$6$i = $wcs$1$i;
       break L6;
      }
     }
    } else if (($$$i | 0) == 91) {
     $283 = $width$0$lcssa$i;
     $pos$1$i = $pos$0116$i;
    } else {
     HEAP32[$16 >> 2] = 0;
     $214 = HEAP32[$10 >> 2] | 0;
     $215 = HEAP32[$7 >> 2] | 0;
     HEAP32[$9 >> 2] = $214 - $215;
     HEAP32[$8 >> 2] = $214;
     $220 = $215;
     $221 = $214;
     L47 : while (1) {
      if ($220 >>> 0 < $221 >>> 0) {
       HEAP32[$7 >> 2] = $220 + 1;
       $272 = HEAPU8[$220 >> 0] | 0;
      } else {
       $225 = HEAP32[$16 >> 2] | 0;
       if (!(($225 | 0) == 0 ? 1 : (HEAP32[$9 >> 2] | 0) < ($225 | 0))) {
        label = 94;
        break;
       }
       if (!(HEAP32[$10 >> 2] | 0)) {
        $232 = HEAP8[$17 >> 0] | 0;
        HEAP8[$17 >> 0] = $232 + 255 | $232;
        if ((HEAP32[$18 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$19 >> 2] & 31]($f, 0, 0) | 0;
        HEAP32[$20 >> 2] = 0;
        HEAP32[$21 >> 2] = 0;
        HEAP32[$18 >> 2] = 0;
        $240 = HEAP32[$f >> 2] | 0;
        if ($240 & 20) {
         label = 90;
         break;
        }
        $246 = HEAP32[$2 >> 2] | 0;
        HEAP32[$10 >> 2] = $246;
        HEAP32[$7 >> 2] = $246;
       }
       if ((FUNCTION_TABLE_iiii[HEAP32[$1 >> 2] & 31]($f, $c$i25$i, 1) | 0) != 1) {
        label = 94;
        break;
       }
       $250 = HEAP8[$c$i25$i >> 0] | 0;
       $251 = $250 & 255;
       $252 = HEAP32[$16 >> 2] | 0;
       $$pre$i18$i = HEAP32[$10 >> 2] | 0;
       $$pre3$i21$i$pre$pre = HEAP32[$7 >> 2] | 0;
       if (!$252) {
        $$pre3$i21$i = $$pre3$i21$i$pre$pre;
        $storemerge314 = $$pre$i18$i;
       } else {
        $259 = $252 - (HEAP32[$9 >> 2] | 0) + -1 | 0;
        if (($$pre$i18$i - $$pre3$i21$i$pre$pre | 0) > ($259 | 0)) {
         $$pre3$i21$i = $$pre3$i21$i$pre$pre;
         $storemerge314 = $$pre3$i21$i$pre$pre + $259 | 0;
        } else {
         $$pre3$i21$i = $$pre3$i21$i$pre$pre;
         $storemerge314 = $$pre$i18$i;
        }
       }
       HEAP32[$8 >> 2] = $storemerge314;
       if ($$pre$i18$i) HEAP32[$9 >> 2] = $$pre$i18$i + 1 - $$pre3$i21$i + (HEAP32[$9 >> 2] | 0);
       $269 = $$pre3$i21$i + -1 | 0;
       if ((HEAP8[$269 >> 0] | 0) == $250 << 24 >> 24) $272 = $251; else {
        HEAP8[$269 >> 0] = $250;
        $272 = $251;
       }
      }
      switch ($272 | 0) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
       break;
      default:
       {
        label = 104;
        break L47;
       }
      }
      $220 = HEAP32[$7 >> 2] | 0;
      $221 = HEAP32[$8 >> 2] | 0;
     }
     if ((label | 0) == 90) {
      label = 0;
      if (!($240 & 4)) label = 94; else {
       HEAP32[$f >> 2] = $240 | 32;
       label = 94;
      }
     } else if ((label | 0) == 104) {
      label = 0;
      $$pre205$i = HEAP32[$7 >> 2] | 0;
      if (!(HEAP32[$8 >> 2] | 0)) $278 = $$pre205$i; else {
       $274 = $$pre205$i + -1 | 0;
       HEAP32[$7 >> 2] = $274;
       $278 = $274;
      }
     }
     if ((label | 0) == 94) {
      label = 0;
      HEAP32[$8 >> 2] = 0;
      $278 = HEAP32[$7 >> 2] | 0;
     }
     $283 = $width$0$lcssa$i;
     $pos$1$i = (HEAP32[$9 >> 2] | 0) + $pos$0116$i + $278 - (HEAP32[$10 >> 2] | 0) | 0;
    }
    HEAP32[$16 >> 2] = $283;
    $284 = HEAP32[$10 >> 2] | 0;
    $285 = HEAP32[$7 >> 2] | 0;
    $288 = $284 - $285 | 0;
    HEAP32[$9 >> 2] = $288;
    if (($283 | 0) != 0 & ($288 | 0) > ($283 | 0)) $$sink$i$i = $285 + $283 | 0; else $$sink$i$i = $284;
    HEAP32[$8 >> 2] = $$sink$i$i;
    if ($285 >>> 0 < $$sink$i$i >>> 0) {
     HEAP32[$7 >> 2] = $285 + 1;
     $338 = $$sink$i$i;
    } else {
     if (!(($283 | 0) == 0 | ($288 | 0) < ($283 | 0))) {
      label = 127;
      break L4;
     }
     if (!$284) {
      $298 = HEAP8[$17 >> 0] | 0;
      HEAP8[$17 >> 0] = $298 + 255 | $298;
      if ((HEAP32[$18 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$19 >> 2] & 31]($f, 0, 0) | 0;
      HEAP32[$20 >> 2] = 0;
      HEAP32[$21 >> 2] = 0;
      HEAP32[$18 >> 2] = 0;
      $306 = HEAP32[$f >> 2] | 0;
      if ($306 & 20) {
       label = 116;
       break L4;
      }
      $312 = HEAP32[$2 >> 2] | 0;
      HEAP32[$10 >> 2] = $312;
      HEAP32[$7 >> 2] = $312;
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[$1 >> 2] & 31]($f, $c$i52$i, 1) | 0) != 1) {
      label = 127;
      break L4;
     }
     $316 = HEAP8[$c$i52$i >> 0] | 0;
     $317 = HEAP32[$16 >> 2] | 0;
     $$pre$i45$i = HEAP32[$10 >> 2] | 0;
     $$pre3$i48$i$pre$pre = HEAP32[$7 >> 2] | 0;
     if (!$317) {
      $$pre3$i48$i = $$pre3$i48$i$pre$pre;
      $storemerge307 = $$pre$i45$i;
     } else {
      $324 = $317 - (HEAP32[$9 >> 2] | 0) + -1 | 0;
      if (($$pre$i45$i - $$pre3$i48$i$pre$pre | 0) > ($324 | 0)) {
       $$pre3$i48$i = $$pre3$i48$i$pre$pre;
       $storemerge307 = $$pre3$i48$i$pre$pre + $324 | 0;
      } else {
       $$pre3$i48$i = $$pre3$i48$i$pre$pre;
       $storemerge307 = $$pre$i45$i;
      }
     }
     HEAP32[$8 >> 2] = $storemerge307;
     if ($$pre$i45$i) HEAP32[$9 >> 2] = $$pre$i45$i + 1 - $$pre3$i48$i + (HEAP32[$9 >> 2] | 0);
     $334 = $$pre3$i48$i + -1 | 0;
     if ((HEAP8[$334 >> 0] | 0) == $316 << 24 >> 24) $338 = $storemerge307; else {
      HEAP8[$334 >> 0] = $316;
      $338 = HEAP32[$8 >> 2] | 0;
     }
    }
    if ($338) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    L107 : do switch ($$$i | 0) {
    case 111:
     {
      $base$0$i = 8;
      label = 308;
      break;
     }
    case 117:
    case 100:
     {
      $base$0$i = 10;
      label = 308;
      break;
     }
    case 105:
     {
      $base$0$i = 0;
      label = 308;
      break;
     }
    case 120:
    case 88:
    case 112:
     {
      $base$0$i = 16;
      label = 308;
      break;
     }
    case 71:
    case 103:
    case 70:
    case 102:
    case 69:
    case 101:
    case 65:
    case 97:
     {
      $798 = +___floatscan($f, $$size$0$i, 0);
      if ((HEAP32[$9 >> 2] | 0) == ((HEAP32[$10 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0)) {
       $alloc$2$i = $alloc$0$i;
       $matches$2$i = $matches$0111$i;
       $s$8$i = $s$1$i;
       $wcs$9$i = $wcs$1$i;
       break L4;
      }
      if (!$dest$0$i) {
       $p$10$i = $p$5$i;
       $s$4$i = $s$1$i;
       $wcs$5$i = $wcs$1$i;
      } else if (!$$size$0$i) {
       HEAPF32[$dest$0$i >> 2] = $798;
       $p$10$i = $p$5$i;
       $s$4$i = $s$1$i;
       $wcs$5$i = $wcs$1$i;
       break L107;
      } else if (($$size$0$i | 0) == 1) {
       HEAPF64[$dest$0$i >> 3] = $798;
       $p$10$i = $p$5$i;
       $s$4$i = $s$1$i;
       $wcs$5$i = $wcs$1$i;
       break L107;
      } else if (($$size$0$i | 0) == 2) {
       HEAPF64[$dest$0$i >> 3] = $798;
       $p$10$i = $p$5$i;
       $s$4$i = $s$1$i;
       $wcs$5$i = $wcs$1$i;
       break L107;
      } else {
       $p$10$i = $p$5$i;
       $s$4$i = $s$1$i;
       $wcs$5$i = $wcs$1$i;
       break L107;
      }
      break;
     }
    case 91:
    case 99:
    case 115:
     {
      $341 = ($$$i | 0) == 99;
      L119 : do if (($$$i & 239 | 0) == 99) {
       _memset($scanset$i | 0, -1, 257) | 0;
       HEAP8[$scanset$i >> 0] = 0;
       if (($$$i | 0) == 115) {
        HEAP8[$12 >> 0] = 0;
        HEAP8[$11 + 0 >> 0] = 0;
        HEAP8[$11 + 1 >> 0] = 0;
        HEAP8[$11 + 2 >> 0] = 0;
        HEAP8[$11 + 3 >> 0] = 0;
        HEAP8[$11 + 4 >> 0] = 0;
        $p$9$i = $p$5$i;
       } else $p$9$i = $p$5$i;
      } else {
       $345 = $p$5$i + 1 | 0;
       $347 = (HEAP8[$345 >> 0] | 0) == 94;
       $invert$0$i = $347 & 1;
       $349 = $347 ? $345 : $p$5$i;
       $p$6$i = $347 ? $p$5$i + 2 | 0 : $345;
       _memset($scanset$i | 0, $347 & 1 | 0, 257) | 0;
       HEAP8[$scanset$i >> 0] = 0;
       $351 = HEAP8[$p$6$i >> 0] | 0;
       if ($351 << 24 >> 24 == 45) {
        $354 = ($invert$0$i ^ 1) & 255;
        HEAP8[$14 >> 0] = $354;
        $$pre$phi219$iZ2D = $354;
        $p$7$ph$i = $349 + 2 | 0;
       } else if ($351 << 24 >> 24 == 93) {
        $357 = ($invert$0$i ^ 1) & 255;
        HEAP8[$15 >> 0] = $357;
        $$pre$phi219$iZ2D = $357;
        $p$7$ph$i = $349 + 2 | 0;
       } else {
        $$pre$phi219$iZ2D = ($invert$0$i ^ 1) & 255;
        $p$7$ph$i = $p$6$i;
       }
       $p$7$i = $p$7$ph$i;
       while (1) {
        $358 = HEAP8[$p$7$i >> 0] | 0;
        if (!($358 << 24 >> 24)) {
         $alloc$0200$i = $alloc$0$i;
         $matches$0111$i209 = $matches$0111$i;
         $s$6$i = $s$1$i;
         $wcs$7$i = $wcs$1$i;
         label = 326;
         break L4;
        } else if ($358 << 24 >> 24 == 45) {
         $359 = $p$7$i + 1 | 0;
         $360 = HEAP8[$359 >> 0] | 0;
         if ($360 << 24 >> 24 == 93 | $360 << 24 >> 24 == 0) {
          $371 = 45;
          $p$8$i = $p$7$i;
         } else {
          $362 = HEAP8[$p$7$i + -1 >> 0] | 0;
          if (($362 & 255) < ($360 & 255)) {
           $c$0101$i = $362 & 255;
           do {
            $c$0101$i = $c$0101$i + 1 | 0;
            HEAP8[$scanset$i + $c$0101$i >> 0] = $$pre$phi219$iZ2D;
            $367 = HEAP8[$359 >> 0] | 0;
           } while (($c$0101$i | 0) < ($367 & 255 | 0));
           $371 = $367;
           $p$8$i = $359;
          } else {
           $371 = $360;
           $p$8$i = $359;
          }
         }
        } else if ($358 << 24 >> 24 == 93) {
         $p$9$i = $p$7$i;
         break L119;
        } else {
         $371 = $358;
         $p$8$i = $p$7$i;
        }
        HEAP8[$scanset$i + (($371 & 255) + 1) >> 0] = $$pre$phi219$iZ2D;
        $p$7$i = $p$8$i + 1 | 0;
       }
      } while (0);
      $$8$i = $341 ? $283 + 1 | 0 : 31;
      $376 = ($$size$0$i | 0) == 1;
      $377 = ($alloc$0$i | 0) != 0;
      L138 : do if ($376) {
       if ($377) {
        $379 = _malloc($$8$i << 2) | 0;
        if (!$379) {
         $alloc$0200$i = $alloc$0$i;
         $matches$0111$i209 = $matches$0111$i;
         $s$6$i = 0;
         $wcs$7$i = $379;
         label = 326;
         break L4;
        } else $wcs$2$i = $379;
       } else $wcs$2$i = $dest$0$i;
       HEAP32[$st$i >> 2] = 0;
       HEAP32[$13 >> 2] = 0;
       $i$0$ph$i = 0;
       $k$0$ph$i = $$8$i;
       $wcs$3$ph$i = $wcs$2$i;
       L239 : while (1) {
        if (!$wcs$3$ph$i) {
         $or$cond$us$i = $377 & ($i$0$ph$i | 0) == ($k$0$ph$i | 0);
         while (1) {
          $431 = HEAP32[$7 >> 2] | 0;
          L245 : do if ($431 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
           HEAP32[$7 >> 2] = $431 + 1;
           $435 = HEAPU8[$431 >> 0] | 0;
          } else {
           $383 = HEAP32[$16 >> 2] | 0;
           L248 : do if (($383 | 0) == 0 ? 1 : (HEAP32[$9 >> 2] | 0) < ($383 | 0)) {
            do if (!(HEAP32[$10 >> 2] | 0)) {
             $390 = HEAP8[$17 >> 0] | 0;
             HEAP8[$17 >> 0] = $390 + 255 | $390;
             if ((HEAP32[$18 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$19 >> 2] & 31]($f, 0, 0) | 0;
             HEAP32[$20 >> 2] = 0;
             HEAP32[$21 >> 2] = 0;
             HEAP32[$18 >> 2] = 0;
             $398 = HEAP32[$f >> 2] | 0;
             if (!($398 & 20)) {
              $404 = HEAP32[$2 >> 2] | 0;
              HEAP32[$10 >> 2] = $404;
              HEAP32[$7 >> 2] = $404;
              break;
             }
             if (!($398 & 4)) break L248;
             HEAP32[$f >> 2] = $398 | 32;
             break L248;
            } while (0);
            if ((FUNCTION_TABLE_iiii[HEAP32[$1 >> 2] & 31]($f, $c$i65$i, 1) | 0) != 1) break;
            $408 = HEAP8[$c$i65$i >> 0] | 0;
            $409 = $408 & 255;
            $410 = HEAP32[$16 >> 2] | 0;
            $$pre$i58$i = HEAP32[$10 >> 2] | 0;
            $$pre3$i61$i$pre$pre = HEAP32[$7 >> 2] | 0;
            do if (!$410) {
             $$pre3$i61$i = $$pre3$i61$i$pre$pre;
             $storemerge313 = $$pre$i58$i;
            } else {
             $417 = $410 - (HEAP32[$9 >> 2] | 0) + -1 | 0;
             if (($$pre$i58$i - $$pre3$i61$i$pre$pre | 0) <= ($417 | 0)) {
              $$pre3$i61$i = $$pre3$i61$i$pre$pre;
              $storemerge313 = $$pre$i58$i;
              break;
             }
             $$pre3$i61$i = $$pre3$i61$i$pre$pre;
             $storemerge313 = $$pre3$i61$i$pre$pre + $417 | 0;
            } while (0);
            HEAP32[$8 >> 2] = $storemerge313;
            if ($$pre$i58$i) HEAP32[$9 >> 2] = $$pre$i58$i + 1 - $$pre3$i61$i + (HEAP32[$9 >> 2] | 0);
            $427 = $$pre3$i61$i + -1 | 0;
            if ((HEAP8[$427 >> 0] | 0) == $408 << 24 >> 24) {
             $435 = $409;
             break L245;
            }
            HEAP8[$427 >> 0] = $408;
            $435 = $409;
            break L245;
           } while (0);
           HEAP32[$8 >> 2] = 0;
           $435 = -1;
          } while (0);
          if (!(HEAP8[$scanset$i + ($435 + 1) >> 0] | 0)) {
           $i$0$ph21$lcssa$i = $i$0$ph$i;
           $wcs$3$ph141$i = 0;
           break L239;
          }
          HEAP8[$0 >> 0] = $435;
          $440 = _mbrtowc($wc$i, $0, 1, $st$i) | 0;
          if (($440 | 0) == -2) continue; else if (($440 | 0) == -1) {
           $alloc$0200$i = $alloc$0$i;
           $matches$0111$i209 = $matches$0111$i;
           $s$6$i = 0;
           $wcs$7$i = 0;
           label = 326;
           break L4;
          }
          if ($or$cond$us$i) {
           $i$1$lcssa$i = $i$0$ph$i;
           break;
          }
         }
        } else {
         if ($377) $i$0$ph21$us106$i = $i$0$ph$i; else {
          $i$0$ph21$i = $i$0$ph$i;
          label = 198;
          break;
         }
         while (1) {
          while (1) {
           $491 = HEAP32[$7 >> 2] | 0;
           L278 : do if ($491 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
            HEAP32[$7 >> 2] = $491 + 1;
            $495 = HEAPU8[$491 >> 0] | 0;
           } else {
            $443 = HEAP32[$16 >> 2] | 0;
            L281 : do if (($443 | 0) == 0 ? 1 : (HEAP32[$9 >> 2] | 0) < ($443 | 0)) {
             do if (!(HEAP32[$10 >> 2] | 0)) {
              $450 = HEAP8[$17 >> 0] | 0;
              HEAP8[$17 >> 0] = $450 + 255 | $450;
              if ((HEAP32[$18 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$19 >> 2] & 31]($f, 0, 0) | 0;
              HEAP32[$20 >> 2] = 0;
              HEAP32[$21 >> 2] = 0;
              HEAP32[$18 >> 2] = 0;
              $458 = HEAP32[$f >> 2] | 0;
              if (!($458 & 20)) {
               $464 = HEAP32[$2 >> 2] | 0;
               HEAP32[$10 >> 2] = $464;
               HEAP32[$7 >> 2] = $464;
               break;
              }
              if (!($458 & 4)) break L281;
              HEAP32[$f >> 2] = $458 | 32;
              break L281;
             } while (0);
             if ((FUNCTION_TABLE_iiii[HEAP32[$1 >> 2] & 31]($f, $c$i78$i, 1) | 0) != 1) break;
             $468 = HEAP8[$c$i78$i >> 0] | 0;
             $469 = $468 & 255;
             $470 = HEAP32[$16 >> 2] | 0;
             $$pre$i71$i = HEAP32[$10 >> 2] | 0;
             $$pre3$i74$i$pre$pre = HEAP32[$7 >> 2] | 0;
             do if (!$470) {
              $$pre3$i74$i = $$pre3$i74$i$pre$pre;
              $storemerge312 = $$pre$i71$i;
             } else {
              $477 = $470 - (HEAP32[$9 >> 2] | 0) + -1 | 0;
              if (($$pre$i71$i - $$pre3$i74$i$pre$pre | 0) <= ($477 | 0)) {
               $$pre3$i74$i = $$pre3$i74$i$pre$pre;
               $storemerge312 = $$pre$i71$i;
               break;
              }
              $$pre3$i74$i = $$pre3$i74$i$pre$pre;
              $storemerge312 = $$pre3$i74$i$pre$pre + $477 | 0;
             } while (0);
             HEAP32[$8 >> 2] = $storemerge312;
             if ($$pre$i71$i) HEAP32[$9 >> 2] = $$pre$i71$i + 1 - $$pre3$i74$i + (HEAP32[$9 >> 2] | 0);
             $487 = $$pre3$i74$i + -1 | 0;
             if ((HEAP8[$487 >> 0] | 0) == $468 << 24 >> 24) {
              $495 = $469;
              break L278;
             }
             HEAP8[$487 >> 0] = $468;
             $495 = $469;
             break L278;
            } while (0);
            HEAP32[$8 >> 2] = 0;
            $495 = -1;
           } while (0);
           if (!(HEAP8[$scanset$i + ($495 + 1) >> 0] | 0)) {
            $i$0$ph21$lcssa$i = $i$0$ph21$us106$i;
            $wcs$3$ph141$i = $wcs$3$ph$i;
            break L239;
           }
           HEAP8[$0 >> 0] = $495;
           $500 = _mbrtowc($wc$i, $0, 1, $st$i) | 0;
           if (($500 | 0) == -1) {
            $alloc$0200$i = $alloc$0$i;
            $matches$0111$i209 = $matches$0111$i;
            $s$6$i = 0;
            $wcs$7$i = $wcs$3$ph$i;
            label = 326;
            break L4;
           } else if (($500 | 0) != -2) break;
          }
          HEAP32[$wcs$3$ph$i + ($i$0$ph21$us106$i << 2) >> 2] = HEAP32[$wc$i >> 2];
          $i$0$ph21$us106$i = $i$0$ph21$us106$i + 1 | 0;
          if (($i$0$ph21$us106$i | 0) == ($k$0$ph$i | 0)) {
           $i$1$lcssa$i = $k$0$ph$i;
           break;
          }
         }
        }
        $570 = $k$0$ph$i << 1 | 1;
        $572 = _realloc($wcs$3$ph$i, $570 << 2) | 0;
        if (!$572) {
         $alloc$0200$i = $alloc$0$i;
         $matches$0111$i209 = $matches$0111$i;
         $s$6$i = 0;
         $wcs$7$i = $wcs$3$ph$i;
         label = 326;
         break L4;
        }
        $i$0$ph$i = $i$1$lcssa$i;
        $k$0$ph$i = $570;
        $wcs$3$ph$i = $572;
       }
       L308 : do if ((label | 0) == 198) while (1) {
        label = 0;
        while (1) {
         $507 = HEAP32[$7 >> 2] | 0;
         L313 : do if ($507 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
          HEAP32[$7 >> 2] = $507 + 1;
          $561 = HEAPU8[$507 >> 0] | 0;
         } else {
          $513 = HEAP32[$16 >> 2] | 0;
          L316 : do if (($513 | 0) == 0 ? 1 : (HEAP32[$9 >> 2] | 0) < ($513 | 0)) {
           do if (!(HEAP32[$10 >> 2] | 0)) {
            $520 = HEAP8[$17 >> 0] | 0;
            HEAP8[$17 >> 0] = $520 + 255 | $520;
            if ((HEAP32[$18 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$19 >> 2] & 31]($f, 0, 0) | 0;
            HEAP32[$20 >> 2] = 0;
            HEAP32[$21 >> 2] = 0;
            HEAP32[$18 >> 2] = 0;
            $528 = HEAP32[$f >> 2] | 0;
            if (!($528 & 20)) {
             $534 = HEAP32[$2 >> 2] | 0;
             HEAP32[$10 >> 2] = $534;
             HEAP32[$7 >> 2] = $534;
             break;
            }
            if (!($528 & 4)) break L316;
            HEAP32[$f >> 2] = $528 | 32;
            break L316;
           } while (0);
           if ((FUNCTION_TABLE_iiii[HEAP32[$1 >> 2] & 31]($f, $c$i91$i, 1) | 0) != 1) break;
           $538 = HEAP8[$c$i91$i >> 0] | 0;
           $539 = $538 & 255;
           $540 = HEAP32[$16 >> 2] | 0;
           $$pre$i84$i = HEAP32[$10 >> 2] | 0;
           $$pre3$i87$i$pre$pre = HEAP32[$7 >> 2] | 0;
           do if (!$540) {
            $$pre3$i87$i = $$pre3$i87$i$pre$pre;
            $storemerge311 = $$pre$i84$i;
           } else {
            $547 = $540 - (HEAP32[$9 >> 2] | 0) + -1 | 0;
            if (($$pre$i84$i - $$pre3$i87$i$pre$pre | 0) <= ($547 | 0)) {
             $$pre3$i87$i = $$pre3$i87$i$pre$pre;
             $storemerge311 = $$pre$i84$i;
             break;
            }
            $$pre3$i87$i = $$pre3$i87$i$pre$pre;
            $storemerge311 = $$pre3$i87$i$pre$pre + $547 | 0;
           } while (0);
           HEAP32[$8 >> 2] = $storemerge311;
           if ($$pre$i84$i) HEAP32[$9 >> 2] = $$pre$i84$i + 1 - $$pre3$i87$i + (HEAP32[$9 >> 2] | 0);
           $557 = $$pre3$i87$i + -1 | 0;
           if ((HEAP8[$557 >> 0] | 0) == $538 << 24 >> 24) {
            $561 = $539;
            break L313;
           }
           HEAP8[$557 >> 0] = $538;
           $561 = $539;
           break L313;
          } while (0);
          HEAP32[$8 >> 2] = 0;
          $561 = -1;
         } while (0);
         if (!(HEAP8[$scanset$i + ($561 + 1) >> 0] | 0)) {
          $i$0$ph21$lcssa$i = $i$0$ph21$i;
          $wcs$3$ph141$i = $wcs$3$ph$i;
          break L308;
         }
         HEAP8[$0 >> 0] = $561;
         $566 = _mbrtowc($wc$i, $0, 1, $st$i) | 0;
         if (($566 | 0) == -1) {
          $alloc$0200$i = 0;
          $matches$0111$i209 = $matches$0111$i;
          $s$6$i = 0;
          $wcs$7$i = $wcs$3$ph$i;
          label = 326;
          break L4;
         } else if (($566 | 0) != -2) break;
        }
        HEAP32[$wcs$3$ph$i + ($i$0$ph21$i << 2) >> 2] = HEAP32[$wc$i >> 2];
        $i$0$ph21$i = $i$0$ph21$i + 1 | 0;
        label = 198;
       } while (0);
       if (!(HEAP32[$st$i >> 2] | 0)) {
        $i$4$i = $i$0$ph21$lcssa$i;
        $s$3$i = 0;
        $wcs$4$i = $wcs$3$ph141$i;
       } else {
        $alloc$0200$i = $alloc$0$i;
        $matches$0111$i209 = $matches$0111$i;
        $s$6$i = 0;
        $wcs$7$i = $wcs$3$ph141$i;
        label = 326;
        break L4;
       }
      } else {
       if ($377) {
        $576 = _malloc($$8$i) | 0;
        if (!$576) {
         $alloc$0200$i = $alloc$0$i;
         $matches$0111$i209 = $matches$0111$i;
         $s$6$i = 0;
         $wcs$7$i = 0;
         label = 326;
         break L4;
        } else {
         $i$2$ph$i = 0;
         $k$1$ph$i = $$8$i;
         $s$2$ph$i = $576;
        }
        while (1) {
         $i$2$i = $i$2$ph$i;
         do {
          $578 = HEAP32[$7 >> 2] | 0;
          L146 : do if ($578 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
           HEAP32[$7 >> 2] = $578 + 1;
           $632 = HEAPU8[$578 >> 0] | 0;
          } else {
           $584 = HEAP32[$16 >> 2] | 0;
           L149 : do if (($584 | 0) == 0 ? 1 : (HEAP32[$9 >> 2] | 0) < ($584 | 0)) {
            do if (!(HEAP32[$10 >> 2] | 0)) {
             $591 = HEAP8[$17 >> 0] | 0;
             HEAP8[$17 >> 0] = $591 + 255 | $591;
             if ((HEAP32[$18 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$19 >> 2] & 31]($f, 0, 0) | 0;
             HEAP32[$20 >> 2] = 0;
             HEAP32[$21 >> 2] = 0;
             HEAP32[$18 >> 2] = 0;
             $599 = HEAP32[$f >> 2] | 0;
             if (!($599 & 20)) {
              $605 = HEAP32[$2 >> 2] | 0;
              HEAP32[$10 >> 2] = $605;
              HEAP32[$7 >> 2] = $605;
              break;
             }
             if (!($599 & 4)) break L149;
             HEAP32[$f >> 2] = $599 | 32;
             break L149;
            } while (0);
            if ((FUNCTION_TABLE_iiii[HEAP32[$1 >> 2] & 31]($f, $c$i104$i, 1) | 0) != 1) break;
            $609 = HEAP8[$c$i104$i >> 0] | 0;
            $610 = $609 & 255;
            $611 = HEAP32[$16 >> 2] | 0;
            $$pre$i97$i = HEAP32[$10 >> 2] | 0;
            $$pre3$i100$i$pre$pre = HEAP32[$7 >> 2] | 0;
            do if (!$611) {
             $$pre3$i100$i = $$pre3$i100$i$pre$pre;
             $storemerge310 = $$pre$i97$i;
            } else {
             $618 = $611 - (HEAP32[$9 >> 2] | 0) + -1 | 0;
             if (($$pre$i97$i - $$pre3$i100$i$pre$pre | 0) <= ($618 | 0)) {
              $$pre3$i100$i = $$pre3$i100$i$pre$pre;
              $storemerge310 = $$pre$i97$i;
              break;
             }
             $$pre3$i100$i = $$pre3$i100$i$pre$pre;
             $storemerge310 = $$pre3$i100$i$pre$pre + $618 | 0;
            } while (0);
            HEAP32[$8 >> 2] = $storemerge310;
            if ($$pre$i97$i) HEAP32[$9 >> 2] = $$pre$i97$i + 1 - $$pre3$i100$i + (HEAP32[$9 >> 2] | 0);
            $628 = $$pre3$i100$i + -1 | 0;
            if ((HEAP8[$628 >> 0] | 0) == $609 << 24 >> 24) {
             $632 = $610;
             break L146;
            }
            HEAP8[$628 >> 0] = $609;
            $632 = $610;
            break L146;
           } while (0);
           HEAP32[$8 >> 2] = 0;
           $632 = -1;
          } while (0);
          if (!(HEAP8[$scanset$i + ($632 + 1) >> 0] | 0)) {
           $i$4$i = $i$2$i;
           $s$3$i = $s$2$ph$i;
           $wcs$4$i = 0;
           break L138;
          }
          HEAP8[$s$2$ph$i + $i$2$i >> 0] = $632;
          $i$2$i = $i$2$i + 1 | 0;
         } while (($i$2$i | 0) != ($k$1$ph$i | 0));
         $640 = $k$1$ph$i << 1 | 1;
         $641 = _realloc($s$2$ph$i, $640) | 0;
         if (!$641) {
          $alloc$0200$i = $alloc$0$i;
          $matches$0111$i209 = $matches$0111$i;
          $s$6$i = $s$2$ph$i;
          $wcs$7$i = 0;
          label = 326;
          break L4;
         } else {
          $i$2$ph$i$phi = $k$1$ph$i;
          $k$1$ph$i = $640;
          $s$2$ph$i = $641;
          $i$2$ph$i = $i$2$ph$i$phi;
         }
        }
       }
       if (!$dest$0$i) {
        $707 = $338;
        while (1) {
         $705 = HEAP32[$7 >> 2] | 0;
         L207 : do if ($705 >>> 0 < $707 >>> 0) {
          HEAP32[$7 >> 2] = $705 + 1;
          $759 = HEAPU8[$705 >> 0] | 0;
         } else {
          $711 = HEAP32[$16 >> 2] | 0;
          L210 : do if (($711 | 0) == 0 ? 1 : (HEAP32[$9 >> 2] | 0) < ($711 | 0)) {
           do if (!(HEAP32[$10 >> 2] | 0)) {
            $718 = HEAP8[$17 >> 0] | 0;
            HEAP8[$17 >> 0] = $718 + 255 | $718;
            if ((HEAP32[$18 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$19 >> 2] & 31]($f, 0, 0) | 0;
            HEAP32[$20 >> 2] = 0;
            HEAP32[$21 >> 2] = 0;
            HEAP32[$18 >> 2] = 0;
            $726 = HEAP32[$f >> 2] | 0;
            if (!($726 & 20)) {
             $732 = HEAP32[$2 >> 2] | 0;
             HEAP32[$10 >> 2] = $732;
             HEAP32[$7 >> 2] = $732;
             break;
            }
            if (!($726 & 4)) break L210;
            HEAP32[$f >> 2] = $726 | 32;
            break L210;
           } while (0);
           if ((FUNCTION_TABLE_iiii[HEAP32[$1 >> 2] & 31]($f, $c$i39$i, 1) | 0) != 1) break;
           $736 = HEAP8[$c$i39$i >> 0] | 0;
           $737 = $736 & 255;
           $738 = HEAP32[$16 >> 2] | 0;
           $$pre$i32$i = HEAP32[$10 >> 2] | 0;
           $$pre3$i35$i$pre$pre = HEAP32[$7 >> 2] | 0;
           do if (!$738) {
            $$pre3$i35$i = $$pre3$i35$i$pre$pre;
            $storemerge309 = $$pre$i32$i;
           } else {
            $745 = $738 - (HEAP32[$9 >> 2] | 0) + -1 | 0;
            if (($$pre$i32$i - $$pre3$i35$i$pre$pre | 0) <= ($745 | 0)) {
             $$pre3$i35$i = $$pre3$i35$i$pre$pre;
             $storemerge309 = $$pre$i32$i;
             break;
            }
            $$pre3$i35$i = $$pre3$i35$i$pre$pre;
            $storemerge309 = $$pre3$i35$i$pre$pre + $745 | 0;
           } while (0);
           HEAP32[$8 >> 2] = $storemerge309;
           if ($$pre$i32$i) HEAP32[$9 >> 2] = $$pre$i32$i + 1 - $$pre3$i35$i + (HEAP32[$9 >> 2] | 0);
           $755 = $$pre3$i35$i + -1 | 0;
           if ((HEAP8[$755 >> 0] | 0) == $736 << 24 >> 24) {
            $759 = $737;
            break L207;
           }
           HEAP8[$755 >> 0] = $736;
           $759 = $737;
           break L207;
          } while (0);
          HEAP32[$8 >> 2] = 0;
          $759 = -1;
         } while (0);
         if (!(HEAP8[$scanset$i + ($759 + 1) >> 0] | 0)) {
          $i$4$i = 0;
          $s$3$i = 0;
          $wcs$4$i = 0;
          break L138;
         }
         $707 = HEAP32[$8 >> 2] | 0;
        }
       } else {
        $646 = $338;
        $i$3$i = 0;
        while (1) {
         $644 = HEAP32[$7 >> 2] | 0;
         L178 : do if ($644 >>> 0 < $646 >>> 0) {
          HEAP32[$7 >> 2] = $644 + 1;
          $698 = HEAPU8[$644 >> 0] | 0;
         } else {
          $650 = HEAP32[$16 >> 2] | 0;
          L181 : do if (($650 | 0) == 0 ? 1 : (HEAP32[$9 >> 2] | 0) < ($650 | 0)) {
           do if (!(HEAP32[$10 >> 2] | 0)) {
            $657 = HEAP8[$17 >> 0] | 0;
            HEAP8[$17 >> 0] = $657 + 255 | $657;
            if ((HEAP32[$18 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$19 >> 2] & 31]($f, 0, 0) | 0;
            HEAP32[$20 >> 2] = 0;
            HEAP32[$21 >> 2] = 0;
            HEAP32[$18 >> 2] = 0;
            $665 = HEAP32[$f >> 2] | 0;
            if (!($665 & 20)) {
             $671 = HEAP32[$2 >> 2] | 0;
             HEAP32[$10 >> 2] = $671;
             HEAP32[$7 >> 2] = $671;
             break;
            }
            if (!($665 & 4)) break L181;
            HEAP32[$f >> 2] = $665 | 32;
            break L181;
           } while (0);
           if ((FUNCTION_TABLE_iiii[HEAP32[$1 >> 2] & 31]($f, $c$i117$i, 1) | 0) != 1) break;
           $675 = HEAP8[$c$i117$i >> 0] | 0;
           $676 = $675 & 255;
           $677 = HEAP32[$16 >> 2] | 0;
           $$pre$i110$i = HEAP32[$10 >> 2] | 0;
           $$pre3$i113$i$pre$pre = HEAP32[$7 >> 2] | 0;
           do if (!$677) {
            $$pre3$i113$i = $$pre3$i113$i$pre$pre;
            $storemerge308 = $$pre$i110$i;
           } else {
            $684 = $677 - (HEAP32[$9 >> 2] | 0) + -1 | 0;
            if (($$pre$i110$i - $$pre3$i113$i$pre$pre | 0) <= ($684 | 0)) {
             $$pre3$i113$i = $$pre3$i113$i$pre$pre;
             $storemerge308 = $$pre$i110$i;
             break;
            }
            $$pre3$i113$i = $$pre3$i113$i$pre$pre;
            $storemerge308 = $$pre3$i113$i$pre$pre + $684 | 0;
           } while (0);
           HEAP32[$8 >> 2] = $storemerge308;
           if ($$pre$i110$i) HEAP32[$9 >> 2] = $$pre$i110$i + 1 - $$pre3$i113$i + (HEAP32[$9 >> 2] | 0);
           $694 = $$pre3$i113$i + -1 | 0;
           if ((HEAP8[$694 >> 0] | 0) == $675 << 24 >> 24) {
            $698 = $676;
            break L178;
           }
           HEAP8[$694 >> 0] = $675;
           $698 = $676;
           break L178;
          } while (0);
          HEAP32[$8 >> 2] = 0;
          $698 = -1;
         } while (0);
         if (!(HEAP8[$scanset$i + ($698 + 1) >> 0] | 0)) {
          $i$4$i = $i$3$i;
          $s$3$i = $dest$0$i;
          $wcs$4$i = 0;
          break L138;
         }
         HEAP8[$dest$0$i + $i$3$i >> 0] = $698;
         $646 = HEAP32[$8 >> 2] | 0;
         $i$3$i = $i$3$i + 1 | 0;
        }
       }
      } while (0);
      $$pre211$i = HEAP32[$7 >> 2] | 0;
      if (!(HEAP32[$8 >> 2] | 0)) $769 = $$pre211$i; else {
       $765 = $$pre211$i + -1 | 0;
       HEAP32[$7 >> 2] = $765;
       $769 = $765;
      }
      $772 = $769 - (HEAP32[$10 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) | 0;
      if (!$772) {
       $alloc$2$i = $alloc$0$i;
       $matches$2$i = $matches$0111$i;
       $s$8$i = $s$3$i;
       $wcs$9$i = $wcs$4$i;
       break L4;
      }
      if (!(($772 | 0) == ($283 | 0) | $341 ^ 1)) {
       $alloc$2$i = $alloc$0$i;
       $matches$2$i = $matches$0111$i;
       $s$8$i = $s$3$i;
       $wcs$9$i = $wcs$4$i;
       break L4;
      }
      do if ($377) if ($376) {
       HEAP32[$dest$0$i >> 2] = $wcs$4$i;
       break;
      } else {
       HEAP32[$dest$0$i >> 2] = $s$3$i;
       break;
      } while (0);
      if ($341) {
       $p$10$i = $p$9$i;
       $s$4$i = $s$3$i;
       $wcs$5$i = $wcs$4$i;
      } else {
       if ($wcs$4$i) HEAP32[$wcs$4$i + ($i$4$i << 2) >> 2] = 0;
       if (!$s$3$i) {
        $p$10$i = $p$9$i;
        $s$4$i = 0;
        $wcs$5$i = $wcs$4$i;
        break L107;
       }
       HEAP8[$s$3$i + $i$4$i >> 0] = 0;
       $p$10$i = $p$9$i;
       $s$4$i = $s$3$i;
       $wcs$5$i = $wcs$4$i;
      }
      break;
     }
    default:
     {
      $p$10$i = $p$5$i;
      $s$4$i = $s$1$i;
      $wcs$5$i = $wcs$1$i;
     }
    } while (0);
    L359 : do if ((label | 0) == 308) {
     label = 0;
     $779 = ___intscan($f, $base$0$i, 0, -1, -1) | 0;
     if ((HEAP32[$9 >> 2] | 0) == ((HEAP32[$10 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0)) {
      $alloc$2$i = $alloc$0$i;
      $matches$2$i = $matches$0111$i;
      $s$8$i = $s$1$i;
      $wcs$9$i = $wcs$1$i;
      break L4;
     }
     if (($$$i | 0) == 112 & ($dest$0$i | 0) != 0) {
      HEAP32[$dest$0$i >> 2] = $779;
      $p$10$i = $p$5$i;
      $s$4$i = $s$1$i;
      $wcs$5$i = $wcs$1$i;
      break;
     }
     if (!$dest$0$i) {
      $p$10$i = $p$5$i;
      $s$4$i = $s$1$i;
      $wcs$5$i = $wcs$1$i;
     } else switch ($$size$0$i | 0) {
     case -2:
      {
       HEAP8[$dest$0$i >> 0] = $779;
       $p$10$i = $p$5$i;
       $s$4$i = $s$1$i;
       $wcs$5$i = $wcs$1$i;
       break L359;
       break;
      }
     case -1:
      {
       HEAP16[$dest$0$i >> 1] = $779;
       $p$10$i = $p$5$i;
       $s$4$i = $s$1$i;
       $wcs$5$i = $wcs$1$i;
       break L359;
       break;
      }
     case 0:
      {
       HEAP32[$dest$0$i >> 2] = $779;
       $p$10$i = $p$5$i;
       $s$4$i = $s$1$i;
       $wcs$5$i = $wcs$1$i;
       break L359;
       break;
      }
     case 1:
      {
       HEAP32[$dest$0$i >> 2] = $779;
       $p$10$i = $p$5$i;
       $s$4$i = $s$1$i;
       $wcs$5$i = $wcs$1$i;
       break L359;
       break;
      }
     case 3:
      {
       $794 = $dest$0$i;
       HEAP32[$794 >> 2] = $779;
       HEAP32[$794 + 4 >> 2] = tempRet0;
       $p$10$i = $p$5$i;
       $s$4$i = $s$1$i;
       $wcs$5$i = $wcs$1$i;
       break L359;
       break;
      }
     default:
      {
       $p$10$i = $p$5$i;
       $s$4$i = $s$1$i;
       $wcs$5$i = $wcs$1$i;
       break L359;
      }
     }
    } while (0);
    $matches$1$i = (($dest$0$i | 0) != 0 & 1) + $matches$0111$i | 0;
    $p$11$i = $p$10$i;
    $pos$2$i = (HEAP32[$9 >> 2] | 0) + $pos$1$i + (HEAP32[$7 >> 2] | 0) - (HEAP32[$10 >> 2] | 0) | 0;
    $s$5$i = $s$4$i;
    $wcs$6$i = $wcs$5$i;
    break L6;
   } while (0);
   $106 = $p$0117$i + ($102 & 1) | 0;
   HEAP32[$16 >> 2] = 0;
   $107 = HEAP32[$10 >> 2] | 0;
   $108 = HEAP32[$7 >> 2] | 0;
   HEAP32[$9 >> 2] = $107 - $108;
   HEAP32[$8 >> 2] = $107;
   if ($108 >>> 0 < $107 >>> 0) {
    HEAP32[$7 >> 2] = $108 + 1;
    $161 = HEAPU8[$108 >> 0] | 0;
   } else {
    if (!$107) {
     $118 = HEAP8[$17 >> 0] | 0;
     HEAP8[$17 >> 0] = $118 + 255 | $118;
     if ((HEAP32[$18 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$19 >> 2] & 31]($f, 0, 0) | 0;
     HEAP32[$20 >> 2] = 0;
     HEAP32[$21 >> 2] = 0;
     HEAP32[$18 >> 2] = 0;
     $126 = HEAP32[$f >> 2] | 0;
     if ($126 & 20) {
      label = 40;
      break L4;
     }
     $132 = HEAP32[$2 >> 2] | 0;
     HEAP32[$10 >> 2] = $132;
     HEAP32[$7 >> 2] = $132;
    }
    if ((FUNCTION_TABLE_iiii[HEAP32[$1 >> 2] & 31]($f, $c$i52$i, 1) | 0) != 1) {
     label = 54;
     break L4;
    }
    $136 = HEAP8[$c$i52$i >> 0] | 0;
    $137 = $136 & 255;
    $138 = HEAP32[$16 >> 2] | 0;
    $$pre$i5$i = HEAP32[$10 >> 2] | 0;
    $$pre3$i8$i$pre$pre = HEAP32[$7 >> 2] | 0;
    if (!$138) {
     $$pre3$i8$i = $$pre3$i8$i$pre$pre;
     $storemerge = $$pre$i5$i;
    } else {
     $145 = $138 - (HEAP32[$9 >> 2] | 0) + -1 | 0;
     if (($$pre$i5$i - $$pre3$i8$i$pre$pre | 0) > ($145 | 0)) {
      $$pre3$i8$i = $$pre3$i8$i$pre$pre;
      $storemerge = $$pre3$i8$i$pre$pre + $145 | 0;
     } else {
      $$pre3$i8$i = $$pre3$i8$i$pre$pre;
      $storemerge = $$pre$i5$i;
     }
    }
    HEAP32[$8 >> 2] = $storemerge;
    if ($$pre$i5$i) HEAP32[$9 >> 2] = $$pre$i5$i + 1 - $$pre3$i8$i + (HEAP32[$9 >> 2] | 0);
    $155 = $$pre3$i8$i + -1 | 0;
    if ((HEAP8[$155 >> 0] | 0) == $136 << 24 >> 24) $161 = $137; else {
     HEAP8[$155 >> 0] = $136;
     $161 = $137;
    }
   }
   if (($161 | 0) != (HEAPU8[$106 >> 0] | 0)) {
    label = 52;
    break L4;
   }
   $matches$1$i = $matches$0111$i;
   $p$11$i = $106;
   $pos$2$i = $pos$0116$i + 1 | 0;
   $s$5$i = $s$0109$i;
   $wcs$6$i = $wcs$0110$i;
  } while (0);
  if ((label | 0) == 5) {
   while (1) {
    label = 0;
    $27 = $p$1$i + 1 | 0;
    $28 = HEAP8[$27 >> 0] | 0;
    if ($28 << 24 >> 24 == 32) {
     $p$1$i = $27;
     label = 5;
     continue;
    }
    if ((($28 & 255) + -9 | 0) >>> 0 < 5) {
     $p$1$i = $27;
     label = 5;
    } else break;
   }
   HEAP32[$16 >> 2] = 0;
   $33 = HEAP32[$10 >> 2] | 0;
   $34 = HEAP32[$7 >> 2] | 0;
   HEAP32[$9 >> 2] = $33 - $34;
   HEAP32[$8 >> 2] = $33;
   $39 = $34;
   $40 = $33;
   L400 : while (1) {
    if ($39 >>> 0 < $40 >>> 0) {
     HEAP32[$7 >> 2] = $39 + 1;
     $91 = HEAPU8[$39 >> 0] | 0;
    } else {
     $44 = HEAP32[$16 >> 2] | 0;
     if (!(($44 | 0) == 0 ? 1 : (HEAP32[$9 >> 2] | 0) < ($44 | 0))) {
      label = 19;
      break;
     }
     if (!(HEAP32[$10 >> 2] | 0)) {
      $51 = HEAP8[$17 >> 0] | 0;
      HEAP8[$17 >> 0] = $51 + 255 | $51;
      if ((HEAP32[$18 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$19 >> 2] & 31]($f, 0, 0) | 0;
      HEAP32[$20 >> 2] = 0;
      HEAP32[$21 >> 2] = 0;
      HEAP32[$18 >> 2] = 0;
      $59 = HEAP32[$f >> 2] | 0;
      if ($59 & 20) {
       label = 15;
       break;
      }
      $65 = HEAP32[$2 >> 2] | 0;
      HEAP32[$10 >> 2] = $65;
      HEAP32[$7 >> 2] = $65;
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[$1 >> 2] & 31]($f, $c$i$i, 1) | 0) != 1) {
      label = 19;
      break;
     }
     $69 = HEAP8[$c$i$i >> 0] | 0;
     $70 = $69 & 255;
     $71 = HEAP32[$16 >> 2] | 0;
     $$pre$i$i = HEAP32[$10 >> 2] | 0;
     $$pre3$i$i$pre$pre = HEAP32[$7 >> 2] | 0;
     if (!$71) {
      $$pre3$i$i = $$pre3$i$i$pre$pre;
      $storemerge315 = $$pre$i$i;
     } else {
      $78 = $71 - (HEAP32[$9 >> 2] | 0) + -1 | 0;
      if (($$pre$i$i - $$pre3$i$i$pre$pre | 0) > ($78 | 0)) {
       $$pre3$i$i = $$pre3$i$i$pre$pre;
       $storemerge315 = $$pre3$i$i$pre$pre + $78 | 0;
      } else {
       $$pre3$i$i = $$pre3$i$i$pre$pre;
       $storemerge315 = $$pre$i$i;
      }
     }
     HEAP32[$8 >> 2] = $storemerge315;
     if ($$pre$i$i) HEAP32[$9 >> 2] = $$pre$i$i + 1 - $$pre3$i$i + (HEAP32[$9 >> 2] | 0);
     $88 = $$pre3$i$i + -1 | 0;
     if ((HEAP8[$88 >> 0] | 0) == $69 << 24 >> 24) $91 = $70; else {
      HEAP8[$88 >> 0] = $69;
      $91 = $70;
     }
    }
    switch ($91 | 0) {
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 32:
     break;
    default:
     {
      label = 29;
      break L400;
     }
    }
    $39 = HEAP32[$7 >> 2] | 0;
    $40 = HEAP32[$8 >> 2] | 0;
   }
   if ((label | 0) == 15) {
    label = 0;
    if (!($59 & 4)) label = 19; else {
     HEAP32[$f >> 2] = $59 | 32;
     label = 19;
    }
   } else if ((label | 0) == 29) {
    label = 0;
    $$pre216$i = HEAP32[$7 >> 2] | 0;
    if (!(HEAP32[$8 >> 2] | 0)) $97 = $$pre216$i; else {
     $93 = $$pre216$i + -1 | 0;
     HEAP32[$7 >> 2] = $93;
     $97 = $93;
    }
   }
   if ((label | 0) == 19) {
    label = 0;
    HEAP32[$8 >> 2] = 0;
    $97 = HEAP32[$7 >> 2] | 0;
   }
   $matches$1$i = $matches$0111$i;
   $p$11$i = $p$1$i;
   $pos$2$i = (HEAP32[$9 >> 2] | 0) + $pos$0116$i + $97 - (HEAP32[$10 >> 2] | 0) | 0;
   $s$5$i = $s$0109$i;
   $wcs$6$i = $wcs$0110$i;
  }
  $p$0117$i = $p$11$i + 1 | 0;
  $23 = HEAP8[$p$0117$i >> 0] | 0;
  if (!($23 << 24 >> 24)) {
   $matches$3$i = $matches$1$i;
   label = 330;
   break;
  } else {
   $matches$0111$i = $matches$1$i;
   $pos$0116$i = $pos$2$i;
   $s$0109$i = $s$5$i;
   $wcs$0110$i = $wcs$6$i;
  }
 }
 if ((label | 0) == 40) if (!($126 & 4)) label = 54; else {
  HEAP32[$f >> 2] = $126 | 32;
  label = 54;
 } else if ((label | 0) == 52) {
  if (!(HEAP32[$8 >> 2] | 0)) {
   $matches$3$i = $matches$0111$i;
   STACKTOP = sp;
   return $matches$3$i | 0;
  }
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  $matches$3$i = $matches$0111$i;
  STACKTOP = sp;
  return $matches$3$i | 0;
 } else if ((label | 0) == 116) if (!($306 & 4)) label = 127; else {
  HEAP32[$f >> 2] = $306 | 32;
  label = 127;
 } else if ((label | 0) == 330) {
  STACKTOP = sp;
  return $matches$3$i | 0;
 }
 if ((label | 0) == 54) {
  HEAP32[$8 >> 2] = 0;
  if (!$matches$0111$i) {
   $alloc$1$i = 0;
   $s$7$i = $s$0109$i;
   $wcs$8$i = $wcs$0110$i;
   label = 327;
  } else {
   $matches$3$i = $matches$0111$i;
   STACKTOP = sp;
   return $matches$3$i | 0;
  }
 } else if ((label | 0) == 127) {
  HEAP32[$8 >> 2] = 0;
  $alloc$0200$i = $alloc$0$i;
  $matches$0111$i209 = $matches$0111$i;
  $s$6$i = $s$1$i;
  $wcs$7$i = $wcs$1$i;
  label = 326;
 }
 if ((label | 0) == 326) if (!$matches$0111$i209) {
  $alloc$1$i = $alloc$0200$i;
  $s$7$i = $s$6$i;
  $wcs$8$i = $wcs$7$i;
  label = 327;
 } else {
  $alloc$2$i = $alloc$0200$i;
  $matches$2$i = $matches$0111$i209;
  $s$8$i = $s$6$i;
  $wcs$9$i = $wcs$7$i;
 }
 if ((label | 0) == 327) {
  $alloc$2$i = $alloc$1$i;
  $matches$2$i = -1;
  $s$8$i = $s$7$i;
  $wcs$9$i = $wcs$8$i;
 }
 if (!$alloc$2$i) {
  $matches$3$i = $matches$2$i;
  STACKTOP = sp;
  return $matches$3$i | 0;
 }
 _free($s$8$i);
 _free($wcs$9$i);
 $matches$3$i = $matches$2$i;
 STACKTOP = sp;
 return $matches$3$i | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i17$i = 0, $$0$i$i$i27$i = 0, $$0$i$i$i41$i = 0, $$0$i$i$i54$i = 0, $$0$i$i$i68$i = 0, $$0$i12 = 0, $$0$i2 = 0, $$02 = 0, $$07$i = 0, $$1$i3 = 0, $$2$i4 = 0, $$first = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $148 = 0, $149 = 0, $15 = 0, $153 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $164 = 0, $165 = 0, $173 = 0, $174 = 0, $181 = 0, $182 = 0, $188 = 0, $190 = 0, $191 = 0, $2 = 0, $202 = 0, $205 = 0, $207 = 0, $208 = 0, $211 = 0, $214 = 0, $217 = 0, $228 = 0, $23 = 0, $235 = 0, $236 = 0, $24 = 0, $241 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $252 = 0, $253 = 0, $261 = 0, $262 = 0, $269 = 0, $27 = 0, $270 = 0, $276 = 0, $283 = 0, $284 = 0, $286 = 0, $288 = 0, $289 = 0, $29 = 0, $3 = 0, $300 = 0, $303 = 0, $305 = 0, $306 = 0, $309 = 0, $31 = 0, $312 = 0, $315 = 0, $329 = 0, $33 = 0, $331 = 0, $332 = 0, $337 = 0, $338 = 0, $339 = 0, $340 = 0, $343 = 0, $344 = 0, $35 = 0, $352 = 0, $353 = 0, $36 = 0, $360 = 0, $361 = 0, $367 = 0, $374 = 0, $375 = 0, $377 = 0, $379 = 0, $38 = 0, $380 = 0, $391 = 0, $394 = 0, $396 = 0, $397 = 0, $4 = 0, $400 = 0, $403 = 0, $406 = 0, $42 = 0, $420 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $43 = 0, $432 = 0, $434 = 0, $439 = 0, $440 = 0, $442 = 0, $444 = 0, $445 = 0, $456 = 0, $459 = 0, $46 = 0, $461 = 0, $462 = 0, $465 = 0, $468 = 0, $47 = 0, $471 = 0, $484 = 0, $486 = 0, $49 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $497 = 0, $498 = 0, $5 = 0, $506 = 0, $507 = 0, $514 = 0, $515 = 0, $521 = 0, $528 = 0, $529 = 0, $53 = 0, $531 = 0, $533 = 0, $534 = 0, $545 = 0, $548 = 0, $550 = 0, $551 = 0, $554 = 0, $557 = 0, $560 = 0, $57 = 0, $578 = 0, $582 = 0, $584 = 0, $585 = 0, $586 = 0, $59 = 0, $592 = 0, $593 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $603 = 0, $606 = 0, $609 = 0, $611 = 0, $615 = 0, $616 = 0, $618 = 0, $619 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $636 = 0, $638 = 0, $64 = 0, $646 = 0, $647 = 0, $650 = 0, $651 = 0, $652 = 0, $655 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $676 = 0, $678 = 0, $686 = 0, $687 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $697 = 0, $7 = 0, $70 = 0, $705 = 0, $710 = 0, $711 = 0, $714 = 0, $722 = 0, $723 = 0, $725 = 0, $729 = 0, $730 = 0, $732 = 0, $741 = 0, $743 = 0, $746 = 0, $750 = 0, $752 = 0, $753 = 0, $756 = 0, $759 = 0, $762 = 0, $763 = 0, $771 = 0, $773 = 0, $776 = 0, $778 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $793 = 0, $795 = 0, $8 = 0, $803 = 0, $804 = 0, $807 = 0, $812 = 0, $814 = 0, $815 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $830 = 0, $832 = 0, $840 = 0, $841 = 0, $844 = 0, $845 = 0, $85 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $St$0$off0$i = 0, $__v$i$i65$i = 0, $cv$i$0 = 0, $cv$i$1 = 0, $cv$i$2 = 0, $first$4 = 0, $name$i13 = 0, $name1$i = 0, $name2$i14 = 0, $name3$i = 0, $name4$i = 0, $pop_subs$0$off0$i$ph67 = 0, $t0$0$i = 0, $t0$0$i15 = 0, $t0$1$i = 0, $t0$2$i$be = 0, $t0$2$i$ph$be = 0, $t0$2$i$ph66 = 0, $t0$2$i62 = 0, $tmp = 0, $tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $__v$i$i65$i = sp + 96 | 0;
 $name$i13 = sp + 84 | 0;
 $0 = sp;
 $1 = sp + 240 | 0;
 $2 = sp + 180 | 0;
 $name1$i = sp + 16 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 152 | 0;
 $5 = sp + 196 | 0;
 $name2$i14 = sp + 204 | 0;
 $6 = sp + 228 | 0;
 $7 = sp + 256 | 0;
 $8 = sp + 272 | 0;
 $name3$i = sp + 116 | 0;
 $9 = sp + 128 | 0;
 $10 = sp + 144 | 0;
 $name4$i = sp + 168 | 0;
 $11 = sp + 184 | 0;
 $12 = sp + 40 | 0;
 $13 = sp + 12 | 0;
 $14 = sp + 56 | 0;
 $15 = sp + 200 | 0;
 $tmp = sp + 72 | 0;
 $tmp3 = sp + 216 | 0;
 $16 = $last;
 if (($16 - $first | 0) <= 1) {
  $$02 = $first;
  STACKTOP = sp;
  return $$02 | 0;
 }
 $$first = (HEAP8[$first >> 0] | 0) == 76 ? $first + 1 | 0 : $first;
 $23 = HEAP8[$$first >> 0] | 0;
 $24 = $23 << 24 >> 24;
 if (($24 | 0) == 78) {
  L6 : do if (($$first | 0) == ($last | 0)) $$07$i = $last; else if ($23 << 24 >> 24 == 78) {
   $27 = $$first + 1 | 0;
   if (($27 | 0) == ($last | 0)) $$07$i = $$first; else {
    $29 = HEAP8[$27 >> 0] | 0;
    if ($29 << 24 >> 24 == 114) {
     $31 = $$first + 2 | 0;
     $$0$i2 = $31;
     $33 = HEAP8[$31 >> 0] | 0;
     $36 = $27;
     $cv$i$0 = 4;
    } else {
     $$0$i2 = $27;
     $33 = $29;
     $36 = $$first;
     $cv$i$0 = 0;
    }
    if ($33 << 24 >> 24 == 86) {
     $35 = $36 + 2 | 0;
     $$1$i3 = $35;
     $38 = HEAP8[$35 >> 0] | 0;
     $cv$i$1 = $cv$i$0 | 2;
    } else {
     $$1$i3 = $$0$i2;
     $38 = $33;
     $cv$i$1 = $cv$i$0;
    }
    if ($38 << 24 >> 24 == 75) {
     $$2$i4 = $$1$i3 + 1 | 0;
     $cv$i$2 = $cv$i$1 | 1;
    } else {
     $$2$i4 = $$1$i3;
     $cv$i$2 = $cv$i$1;
    }
    if (($$2$i4 | 0) == ($last | 0)) $$07$i = $$first; else {
     $42 = $db + 52 | 0;
     HEAP32[$42 >> 2] = 0;
     $43 = HEAP8[$$2$i4 >> 0] | 0;
     if ($43 << 24 >> 24 == 82) {
      HEAP32[$42 >> 2] = 1;
      $t0$0$i15 = $$2$i4 + 1 | 0;
     } else if ($43 << 24 >> 24 == 79) {
      HEAP32[$42 >> 2] = 2;
      $t0$0$i15 = $$2$i4 + 1 | 0;
     } else $t0$0$i15 = $$2$i4;
     $46 = $db + 4 | 0;
     $47 = HEAP32[$46 >> 2] | 0;
     $49 = HEAP32[$db + 8 >> 2] | 0;
     if ($47 >>> 0 < $49 >>> 0) {
      if (!$47) $53 = 0; else {
       HEAP32[$47 + 0 >> 2] = 0;
       HEAP32[$47 + 4 >> 2] = 0;
       HEAP32[$47 + 8 >> 2] = 0;
       HEAP32[$47 + 12 >> 2] = 0;
       HEAP32[$47 + 16 >> 2] = 0;
       HEAP32[$47 + 20 >> 2] = 0;
       $53 = HEAP32[$46 >> 2] | 0;
      }
      HEAP32[$46 >> 2] = $53 + 24;
     } else {
      $57 = HEAP32[$db >> 2] | 0;
      $59 = ($47 - $57 | 0) / 24 | 0;
      $60 = $59 + 1 | 0;
      if (($60 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      $64 = ($49 - $57 | 0) / 24 | 0;
      if ($64 >>> 0 < 1073741823) {
       $66 = $64 << 1;
       $$0$i$i$i$i = $66 >>> 0 < $60 >>> 0 ? $60 : $66;
      } else $$0$i$i$i$i = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i65$i, $$0$i$i$i$i, $59, $db + 12 | 0);
      $69 = $__v$i$i65$i + 8 | 0;
      $70 = HEAP32[$69 >> 2] | 0;
      if ($70) {
       HEAP32[$70 + 0 >> 2] = 0;
       HEAP32[$70 + 4 >> 2] = 0;
       HEAP32[$70 + 8 >> 2] = 0;
       HEAP32[$70 + 12 >> 2] = 0;
       HEAP32[$70 + 16 >> 2] = 0;
       HEAP32[$70 + 20 >> 2] = 0;
      }
      HEAP32[$69 >> 2] = $70 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i65$i);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i65$i);
     }
     if (($16 - $t0$0$i15 | 0) > 1) if ((HEAP8[$t0$0$i15 >> 0] | 0) == 83) if ((HEAP8[$t0$0$i15 + 1 >> 0] | 0) == 116) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj((HEAP32[$46 >> 2] | 0) + -24 | 0, 60976, 3);
      $t0$1$i = $t0$0$i15 + 2 | 0;
     } else $t0$1$i = $t0$0$i15; else $t0$1$i = $t0$0$i15; else $t0$1$i = $t0$0$i15;
     if (($t0$1$i | 0) == ($last | 0)) {
      $141 = HEAP32[$46 >> 2] | 0;
      $142 = $141 + -24 | 0;
      $144 = $141;
      while (1) {
       $143 = $144 + -24 | 0;
       HEAP32[$46 >> 2] = $143;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($143);
       $144 = HEAP32[$46 >> 2] | 0;
       if (($144 | 0) == ($142 | 0)) {
        $$07$i = $$first;
        break L6;
       }
      }
     }
     $85 = HEAP8[$t0$1$i >> 0] | 0;
     if ($85 << 24 >> 24 == 69) {
      HEAP32[$db + 48 >> 2] = $cv$i$2;
      $$07$i = $t0$1$i + 1 | 0;
      break;
     }
     $89 = $name3$i + 1 | 0;
     $90 = $db + 12 | 0;
     $91 = $db + 16 | 0;
     $92 = $db + 20 | 0;
     $93 = $db + 24 | 0;
     $94 = $9 + 12 | 0;
     $95 = $9 + 4 | 0;
     $96 = $9 + 8 | 0;
     $97 = $db + 28 | 0;
     $98 = $__v$i$i65$i + 8 | 0;
     $99 = $name3$i + 8 | 0;
     $100 = $name3$i + 4 | 0;
     $101 = $12 + 12 | 0;
     $102 = $12 + 4 | 0;
     $103 = $12 + 8 | 0;
     $104 = $__v$i$i65$i + 8 | 0;
     $105 = $11 + 1 | 0;
     $106 = $11 + 8 | 0;
     $107 = $11 + 4 | 0;
     $108 = $0 + 1 | 0;
     $109 = $1 + 12 | 0;
     $110 = $1 + 4 | 0;
     $111 = $1 + 8 | 0;
     $112 = $__v$i$i65$i + 8 | 0;
     $113 = $0 + 8 | 0;
     $114 = $0 + 4 | 0;
     $115 = $4 + 12 | 0;
     $116 = $4 + 4 | 0;
     $117 = $4 + 8 | 0;
     $118 = $__v$i$i65$i + 8 | 0;
     $119 = $3 + 1 | 0;
     $120 = $3 + 8 | 0;
     $121 = $3 + 4 | 0;
     $122 = $7 + 12 | 0;
     $123 = $7 + 4 | 0;
     $124 = $7 + 8 | 0;
     $125 = $__v$i$i65$i + 8 | 0;
     $126 = $6 + 1 | 0;
     $127 = $6 + 8 | 0;
     $128 = $6 + 4 | 0;
     $129 = $name4$i + 1 | 0;
     $130 = $name4$i + 8 | 0;
     $131 = $name4$i + 4 | 0;
     $132 = $name$i13 + 1 | 0;
     $133 = $name$i13 + 8 | 0;
     $134 = $name$i13 + 4 | 0;
     $135 = $name1$i + 1 | 0;
     $136 = $name1$i + 8 | 0;
     $137 = $name1$i + 4 | 0;
     $138 = $name2$i14 + 1 | 0;
     $139 = $name2$i14 + 8 | 0;
     $140 = $name2$i14 + 4 | 0;
     $844 = $85;
     $pop_subs$0$off0$i$ph67 = 0;
     $t0$2$i$ph66 = $t0$1$i;
     L53 : while (1) {
      $148 = $844;
      $t0$2$i62 = $t0$2$i$ph66;
      L55 : while (1) {
       L57 : do switch ($148 << 24 >> 24 | 0) {
       case 83:
        {
         label = 38;
         break L55;
         break;
        }
       case 84:
        {
         label = 71;
         break L55;
         break;
        }
       case 68:
        {
         label = 101;
         break L55;
         break;
        }
       case 73:
        {
         $420 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($t0$2$i62, $last, $db) | 0;
         if (($420 | 0) == ($t0$2$i62 | 0) | ($420 | 0) == ($last | 0)) {
          $$07$i = $$first;
          break L6;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name3$i, (HEAP32[$46 >> 2] | 0) + -24 | 0);
         $425 = HEAP32[$46 >> 2] | 0;
         $426 = $425 + -24 | 0;
         $428 = $425;
         do {
          $427 = $428 + -24 | 0;
          HEAP32[$46 >> 2] = $427;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($427);
          $428 = HEAP32[$46 >> 2] | 0;
         } while (($428 | 0) != ($426 | 0));
         $432 = HEAP8[$name3$i >> 0] | 0;
         $434 = ($432 & 1) == 0;
         if ($434) {
          $439 = $89;
          $440 = ($432 & 255) >>> 1;
         } else {
          $439 = HEAP32[$99 >> 2] | 0;
          $440 = HEAP32[$100 >> 2] | 0;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($425 + -48 | 0, $439, $440) | 0;
         $442 = (HEAP32[$46 >> 2] | 0) + -24 | 0;
         HEAP32[$10 >> 2] = HEAP32[$90 >> 2];
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($9, $442, $10);
         $444 = HEAP32[$92 >> 2] | 0;
         $445 = HEAP32[$93 >> 2] | 0;
         if ($444 >>> 0 < $445 >>> 0) {
          if (!$444) $456 = 0; else {
           HEAP32[$444 + 12 >> 2] = HEAP32[$94 >> 2];
           HEAP32[$444 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$444 + 4 >> 2] = HEAP32[$95 >> 2];
           HEAP32[$444 + 8 >> 2] = HEAP32[$96 >> 2];
           HEAP32[$96 >> 2] = 0;
           HEAP32[$95 >> 2] = 0;
           HEAP32[$9 >> 2] = 0;
           $456 = HEAP32[$92 >> 2] | 0;
          }
          HEAP32[$92 >> 2] = $456 + 16;
         } else {
          $459 = HEAP32[$91 >> 2] | 0;
          $461 = $444 - $459 >> 4;
          $462 = $461 + 1 | 0;
          if (($462 | 0) < 0) {
           label = 144;
           break L53;
          }
          $465 = $445 - $459 | 0;
          if ($465 >> 4 >>> 0 < 1073741823) {
           $468 = $465 >> 3;
           $$0$i$i$i54$i = $468 >>> 0 < $462 >>> 0 ? $462 : $468;
          } else $$0$i$i$i54$i = 2147483647;
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i65$i, $$0$i$i$i54$i, $461, $97);
          $471 = HEAP32[$98 >> 2] | 0;
          if ($471) {
           HEAP32[$471 + 12 >> 2] = HEAP32[$94 >> 2];
           HEAP32[$471 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$471 + 4 >> 2] = HEAP32[$95 >> 2];
           HEAP32[$471 + 8 >> 2] = HEAP32[$96 >> 2];
           HEAP32[$96 >> 2] = 0;
           HEAP32[$95 >> 2] = 0;
           HEAP32[$9 >> 2] = 0;
          }
          HEAP32[$98 >> 2] = $471 + 16;
          __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($91, $__v$i$i65$i);
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i65$i);
         }
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($9);
         if ($434) {
          $t0$2$i$be = $420;
          break L57;
         }
         _free(HEAP32[$99 >> 2] | 0);
         $t0$2$i$be = $420;
         break;
        }
       case 76:
        {
         $484 = $t0$2$i62 + 1 | 0;
         if (($484 | 0) == ($last | 0)) {
          $$07$i = $$first;
          break L6;
         } else $t0$2$i$be = $484;
         break;
        }
       default:
        {
         label = 154;
         break L55;
        }
       } while (0);
       $148 = HEAP8[$t0$2$i$be >> 0] | 0;
       if ($148 << 24 >> 24 == 69) {
        label = 187;
        break L53;
       } else $t0$2$i62 = $t0$2$i$be;
      }
      do if ((label | 0) == 38) {
       label = 0;
       $149 = $t0$2$i62 + 1 | 0;
       if (($149 | 0) != ($last | 0)) if ((HEAP8[$149 >> 0] | 0) == 116) {
        label = 154;
        break;
       }
       $153 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($t0$2$i62, $last, $db) | 0;
       if (($153 | 0) == ($t0$2$i62 | 0) | ($153 | 0) == ($last | 0)) {
        $$07$i = $$first;
        break L6;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i13, (HEAP32[$46 >> 2] | 0) + -24 | 0);
       $158 = HEAP32[$46 >> 2] | 0;
       $159 = $158 + -24 | 0;
       $161 = $158;
       do {
        $160 = $161 + -24 | 0;
        HEAP32[$46 >> 2] = $160;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($160);
        $161 = HEAP32[$46 >> 2] | 0;
       } while (($161 | 0) != ($159 | 0));
       $164 = $158 + -48 | 0;
       $165 = HEAP8[$164 >> 0] | 0;
       if (!($165 & 1)) $173 = ($165 & 255) >>> 1; else $173 = HEAP32[$158 + -44 >> 2] | 0;
       do if (!$173) {
        if (($164 | 0) == ($name$i13 | 0)) break;
        $228 = HEAP8[$name$i13 >> 0] | 0;
        if (!($228 & 1)) {
         $235 = $132;
         $236 = ($228 & 255) >>> 1;
        } else {
         $235 = HEAP32[$133 >> 2] | 0;
         $236 = HEAP32[$134 >> 2] | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($164, $235, $236);
       } else {
        __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($0, 59112, $name$i13);
        $174 = HEAP8[$0 >> 0] | 0;
        if (!($174 & 1)) {
         $181 = $108;
         $182 = ($174 & 255) >>> 1;
        } else {
         $181 = HEAP32[$113 >> 2] | 0;
         $182 = HEAP32[$114 >> 2] | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($164, $181, $182) | 0;
        if (HEAP8[$0 >> 0] & 1) _free(HEAP32[$113 >> 2] | 0);
        $188 = (HEAP32[$46 >> 2] | 0) + -24 | 0;
        HEAP32[$2 >> 2] = HEAP32[$90 >> 2];
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($1, $188, $2);
        $190 = HEAP32[$92 >> 2] | 0;
        $191 = HEAP32[$93 >> 2] | 0;
        if ($190 >>> 0 < $191 >>> 0) {
         if (!$190) $202 = 0; else {
          HEAP32[$190 + 12 >> 2] = HEAP32[$109 >> 2];
          HEAP32[$190 >> 2] = HEAP32[$1 >> 2];
          HEAP32[$190 + 4 >> 2] = HEAP32[$110 >> 2];
          HEAP32[$190 + 8 >> 2] = HEAP32[$111 >> 2];
          HEAP32[$111 >> 2] = 0;
          HEAP32[$110 >> 2] = 0;
          HEAP32[$1 >> 2] = 0;
          $202 = HEAP32[$92 >> 2] | 0;
         }
         HEAP32[$92 >> 2] = $202 + 16;
        } else {
         $205 = HEAP32[$91 >> 2] | 0;
         $207 = $190 - $205 >> 4;
         $208 = $207 + 1 | 0;
         if (($208 | 0) < 0) {
          label = 57;
          break L53;
         }
         $211 = $191 - $205 | 0;
         if ($211 >> 4 >>> 0 < 1073741823) {
          $214 = $211 >> 3;
          $$0$i$i$i17$i = $214 >>> 0 < $208 >>> 0 ? $208 : $214;
         } else $$0$i$i$i17$i = 2147483647;
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i65$i, $$0$i$i$i17$i, $207, $97);
         $217 = HEAP32[$112 >> 2] | 0;
         if ($217) {
          HEAP32[$217 + 12 >> 2] = HEAP32[$109 >> 2];
          HEAP32[$217 >> 2] = HEAP32[$1 >> 2];
          HEAP32[$217 + 4 >> 2] = HEAP32[$110 >> 2];
          HEAP32[$217 + 8 >> 2] = HEAP32[$111 >> 2];
          HEAP32[$111 >> 2] = 0;
          HEAP32[$110 >> 2] = 0;
          HEAP32[$1 >> 2] = 0;
         }
         HEAP32[$112 >> 2] = $217 + 16;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($91, $__v$i$i65$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i65$i);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($1);
       } while (0);
       if (!(HEAP8[$name$i13 >> 0] & 1)) {
        $t0$2$i$ph$be = $153;
        break;
       }
       _free(HEAP32[$133 >> 2] | 0);
       $t0$2$i$ph$be = $153;
      } else if ((label | 0) == 71) {
       label = 0;
       $241 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($t0$2$i62, $last, $db) | 0;
       if (($241 | 0) == ($t0$2$i62 | 0) | ($241 | 0) == ($last | 0)) {
        $$07$i = $$first;
        break L6;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name1$i, (HEAP32[$46 >> 2] | 0) + -24 | 0);
       $246 = HEAP32[$46 >> 2] | 0;
       $247 = $246 + -24 | 0;
       $249 = $246;
       do {
        $248 = $249 + -24 | 0;
        HEAP32[$46 >> 2] = $248;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($248);
        $249 = HEAP32[$46 >> 2] | 0;
       } while (($249 | 0) != ($247 | 0));
       $252 = $246 + -48 | 0;
       $253 = HEAP8[$252 >> 0] | 0;
       if (!($253 & 1)) $261 = ($253 & 255) >>> 1; else $261 = HEAP32[$246 + -44 >> 2] | 0;
       do if (!$261) {
        if (($252 | 0) == ($name1$i | 0)) break;
        $276 = HEAP8[$name1$i >> 0] | 0;
        if (!($276 & 1)) {
         $283 = $135;
         $284 = ($276 & 255) >>> 1;
        } else {
         $283 = HEAP32[$136 >> 2] | 0;
         $284 = HEAP32[$137 >> 2] | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($252, $283, $284);
       } else {
        __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($3, 59112, $name1$i);
        $262 = HEAP8[$3 >> 0] | 0;
        if (!($262 & 1)) {
         $269 = $119;
         $270 = ($262 & 255) >>> 1;
        } else {
         $269 = HEAP32[$120 >> 2] | 0;
         $270 = HEAP32[$121 >> 2] | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($252, $269, $270) | 0;
        if (!(HEAP8[$3 >> 0] & 1)) break;
        _free(HEAP32[$120 >> 2] | 0);
       } while (0);
       $286 = (HEAP32[$46 >> 2] | 0) + -24 | 0;
       HEAP32[$5 >> 2] = HEAP32[$90 >> 2];
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4, $286, $5);
       $288 = HEAP32[$92 >> 2] | 0;
       $289 = HEAP32[$93 >> 2] | 0;
       if ($288 >>> 0 < $289 >>> 0) {
        if (!$288) $300 = 0; else {
         HEAP32[$288 + 12 >> 2] = HEAP32[$115 >> 2];
         HEAP32[$288 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$288 + 4 >> 2] = HEAP32[$116 >> 2];
         HEAP32[$288 + 8 >> 2] = HEAP32[$117 >> 2];
         HEAP32[$117 >> 2] = 0;
         HEAP32[$116 >> 2] = 0;
         HEAP32[$4 >> 2] = 0;
         $300 = HEAP32[$92 >> 2] | 0;
        }
        HEAP32[$92 >> 2] = $300 + 16;
       } else {
        $303 = HEAP32[$91 >> 2] | 0;
        $305 = $288 - $303 >> 4;
        $306 = $305 + 1 | 0;
        if (($306 | 0) < 0) {
         label = 93;
         break L53;
        }
        $309 = $289 - $303 | 0;
        if ($309 >> 4 >>> 0 < 1073741823) {
         $312 = $309 >> 3;
         $$0$i$i$i27$i = $312 >>> 0 < $306 >>> 0 ? $306 : $312;
        } else $$0$i$i$i27$i = 2147483647;
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i65$i, $$0$i$i$i27$i, $305, $97);
        $315 = HEAP32[$118 >> 2] | 0;
        if ($315) {
         HEAP32[$315 + 12 >> 2] = HEAP32[$115 >> 2];
         HEAP32[$315 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$315 + 4 >> 2] = HEAP32[$116 >> 2];
         HEAP32[$315 + 8 >> 2] = HEAP32[$117 >> 2];
         HEAP32[$117 >> 2] = 0;
         HEAP32[$116 >> 2] = 0;
         HEAP32[$4 >> 2] = 0;
        }
        HEAP32[$118 >> 2] = $315 + 16;
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($91, $__v$i$i65$i);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i65$i);
       }
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
       if (!(HEAP8[$name1$i >> 0] & 1)) {
        $t0$2$i$ph$be = $241;
        break;
       }
       _free(HEAP32[$136 >> 2] | 0);
       $t0$2$i$ph$be = $241;
      } else if ((label | 0) == 101) {
       label = 0;
       $329 = $t0$2$i62 + 1 | 0;
       if (($329 | 0) != ($last | 0)) {
        $331 = HEAP8[$329 >> 0] | 0;
        if (!($331 << 24 >> 24 == 84 | $331 << 24 >> 24 == 116)) {
         label = 154;
         break;
        }
       }
       $332 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($t0$2$i62, $last, $db) | 0;
       if (($332 | 0) == ($t0$2$i62 | 0) | ($332 | 0) == ($last | 0)) {
        $$07$i = $$first;
        break L6;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name2$i14, (HEAP32[$46 >> 2] | 0) + -24 | 0);
       $337 = HEAP32[$46 >> 2] | 0;
       $338 = $337 + -24 | 0;
       $340 = $337;
       do {
        $339 = $340 + -24 | 0;
        HEAP32[$46 >> 2] = $339;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($339);
        $340 = HEAP32[$46 >> 2] | 0;
       } while (($340 | 0) != ($338 | 0));
       $343 = $337 + -48 | 0;
       $344 = HEAP8[$343 >> 0] | 0;
       if (!($344 & 1)) $352 = ($344 & 255) >>> 1; else $352 = HEAP32[$337 + -44 >> 2] | 0;
       do if (!$352) {
        if (($343 | 0) == ($name2$i14 | 0)) break;
        $367 = HEAP8[$name2$i14 >> 0] | 0;
        if (!($367 & 1)) {
         $374 = $138;
         $375 = ($367 & 255) >>> 1;
        } else {
         $374 = HEAP32[$139 >> 2] | 0;
         $375 = HEAP32[$140 >> 2] | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($343, $374, $375);
       } else {
        __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($6, 59112, $name2$i14);
        $353 = HEAP8[$6 >> 0] | 0;
        if (!($353 & 1)) {
         $360 = $126;
         $361 = ($353 & 255) >>> 1;
        } else {
         $360 = HEAP32[$127 >> 2] | 0;
         $361 = HEAP32[$128 >> 2] | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($343, $360, $361) | 0;
        if (!(HEAP8[$6 >> 0] & 1)) break;
        _free(HEAP32[$127 >> 2] | 0);
       } while (0);
       $377 = (HEAP32[$46 >> 2] | 0) + -24 | 0;
       HEAP32[$8 >> 2] = HEAP32[$90 >> 2];
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($7, $377, $8);
       $379 = HEAP32[$92 >> 2] | 0;
       $380 = HEAP32[$93 >> 2] | 0;
       if ($379 >>> 0 < $380 >>> 0) {
        if (!$379) $391 = 0; else {
         HEAP32[$379 + 12 >> 2] = HEAP32[$122 >> 2];
         HEAP32[$379 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$379 + 4 >> 2] = HEAP32[$123 >> 2];
         HEAP32[$379 + 8 >> 2] = HEAP32[$124 >> 2];
         HEAP32[$124 >> 2] = 0;
         HEAP32[$123 >> 2] = 0;
         HEAP32[$7 >> 2] = 0;
         $391 = HEAP32[$92 >> 2] | 0;
        }
        HEAP32[$92 >> 2] = $391 + 16;
       } else {
        $394 = HEAP32[$91 >> 2] | 0;
        $396 = $379 - $394 >> 4;
        $397 = $396 + 1 | 0;
        if (($397 | 0) < 0) {
         label = 125;
         break L53;
        }
        $400 = $380 - $394 | 0;
        if ($400 >> 4 >>> 0 < 1073741823) {
         $403 = $400 >> 3;
         $$0$i$i$i41$i = $403 >>> 0 < $397 >>> 0 ? $397 : $403;
        } else $$0$i$i$i41$i = 2147483647;
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i65$i, $$0$i$i$i41$i, $396, $97);
        $406 = HEAP32[$125 >> 2] | 0;
        if ($406) {
         HEAP32[$406 + 12 >> 2] = HEAP32[$122 >> 2];
         HEAP32[$406 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$406 + 4 >> 2] = HEAP32[$123 >> 2];
         HEAP32[$406 + 8 >> 2] = HEAP32[$124 >> 2];
         HEAP32[$124 >> 2] = 0;
         HEAP32[$123 >> 2] = 0;
         HEAP32[$7 >> 2] = 0;
        }
        HEAP32[$125 >> 2] = $406 + 16;
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($91, $__v$i$i65$i);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i65$i);
       }
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
       if (!(HEAP8[$name2$i14 >> 0] & 1)) {
        $t0$2$i$ph$be = $332;
        break;
       }
       _free(HEAP32[$139 >> 2] | 0);
       $t0$2$i$ph$be = $332;
      } while (0);
      do if ((label | 0) == 154) {
       label = 0;
       $486 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$2$i62, $last, $db) | 0;
       if (($486 | 0) == ($t0$2$i62 | 0) | ($486 | 0) == ($last | 0)) {
        $$07$i = $$first;
        break L6;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name4$i, (HEAP32[$46 >> 2] | 0) + -24 | 0);
       $491 = HEAP32[$46 >> 2] | 0;
       $492 = $491 + -24 | 0;
       $494 = $491;
       do {
        $493 = $494 + -24 | 0;
        HEAP32[$46 >> 2] = $493;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($493);
        $494 = HEAP32[$46 >> 2] | 0;
       } while (($494 | 0) != ($492 | 0));
       $497 = $491 + -48 | 0;
       $498 = HEAP8[$497 >> 0] | 0;
       if (!($498 & 1)) $506 = ($498 & 255) >>> 1; else $506 = HEAP32[$491 + -44 >> 2] | 0;
       do if (!$506) {
        if (($497 | 0) == ($name4$i | 0)) break;
        $521 = HEAP8[$name4$i >> 0] | 0;
        if (!($521 & 1)) {
         $528 = $129;
         $529 = ($521 & 255) >>> 1;
        } else {
         $528 = HEAP32[$130 >> 2] | 0;
         $529 = HEAP32[$131 >> 2] | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($497, $528, $529);
       } else {
        __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($11, 59112, $name4$i);
        $507 = HEAP8[$11 >> 0] | 0;
        if (!($507 & 1)) {
         $514 = $105;
         $515 = ($507 & 255) >>> 1;
        } else {
         $514 = HEAP32[$106 >> 2] | 0;
         $515 = HEAP32[$107 >> 2] | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($497, $514, $515) | 0;
        if (!(HEAP8[$11 >> 0] & 1)) break;
        _free(HEAP32[$106 >> 2] | 0);
       } while (0);
       $531 = (HEAP32[$46 >> 2] | 0) + -24 | 0;
       HEAP32[$13 >> 2] = HEAP32[$90 >> 2];
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($12, $531, $13);
       $533 = HEAP32[$92 >> 2] | 0;
       $534 = HEAP32[$93 >> 2] | 0;
       if ($533 >>> 0 < $534 >>> 0) {
        if (!$533) $545 = 0; else {
         HEAP32[$533 + 12 >> 2] = HEAP32[$101 >> 2];
         HEAP32[$533 >> 2] = HEAP32[$12 >> 2];
         HEAP32[$533 + 4 >> 2] = HEAP32[$102 >> 2];
         HEAP32[$533 + 8 >> 2] = HEAP32[$103 >> 2];
         HEAP32[$103 >> 2] = 0;
         HEAP32[$102 >> 2] = 0;
         HEAP32[$12 >> 2] = 0;
         $545 = HEAP32[$92 >> 2] | 0;
        }
        HEAP32[$92 >> 2] = $545 + 16;
       } else {
        $548 = HEAP32[$91 >> 2] | 0;
        $550 = $533 - $548 >> 4;
        $551 = $550 + 1 | 0;
        if (($551 | 0) < 0) {
         label = 176;
         break L53;
        }
        $554 = $534 - $548 | 0;
        if ($554 >> 4 >>> 0 < 1073741823) {
         $557 = $554 >> 3;
         $$0$i$i$i68$i = $557 >>> 0 < $551 >>> 0 ? $551 : $557;
        } else $$0$i$i$i68$i = 2147483647;
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i65$i, $$0$i$i$i68$i, $550, $97);
        $560 = HEAP32[$104 >> 2] | 0;
        if ($560) {
         HEAP32[$560 + 12 >> 2] = HEAP32[$101 >> 2];
         HEAP32[$560 >> 2] = HEAP32[$12 >> 2];
         HEAP32[$560 + 4 >> 2] = HEAP32[$102 >> 2];
         HEAP32[$560 + 8 >> 2] = HEAP32[$103 >> 2];
         HEAP32[$103 >> 2] = 0;
         HEAP32[$102 >> 2] = 0;
         HEAP32[$12 >> 2] = 0;
        }
        HEAP32[$104 >> 2] = $560 + 16;
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($91, $__v$i$i65$i);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i65$i);
       }
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($12);
       if (!(HEAP8[$name4$i >> 0] & 1)) {
        $t0$2$i$ph$be = $486;
        break;
       }
       _free(HEAP32[$130 >> 2] | 0);
       $t0$2$i$ph$be = $486;
      } while (0);
      $844 = HEAP8[$t0$2$i$ph$be >> 0] | 0;
      if ($844 << 24 >> 24 == 69) {
       label = 185;
       break;
      } else {
       $pop_subs$0$off0$i$ph67 = 1;
       $t0$2$i$ph66 = $t0$2$i$ph$be;
      }
     }
     if ((label | 0) == 57) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 93) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 125) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 144) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 176) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 185) {
      HEAP32[$db + 48 >> 2] = $cv$i$2;
      $845 = $t0$2$i$ph$be + 1 | 0;
     } else if ((label | 0) == 187) {
      $578 = $t0$2$i$be + 1 | 0;
      HEAP32[$db + 48 >> 2] = $cv$i$2;
      if ($pop_subs$0$off0$i$ph67) $845 = $578; else {
       $$07$i = $578;
       break;
      }
     }
     $582 = HEAP32[$92 >> 2] | 0;
     if ((HEAP32[$db + 16 >> 2] | 0) == ($582 | 0)) $$07$i = $845; else {
      $584 = $582 + -16 | 0;
      $586 = $582;
      do {
       $585 = $586 + -16 | 0;
       HEAP32[$92 >> 2] = $585;
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($585);
       $586 = HEAP32[$92 >> 2] | 0;
      } while (($586 | 0) != ($584 | 0));
      $$07$i = $845;
     }
    }
   }
  } else $$07$i = $$first; while (0);
  $$02 = ($$07$i | 0) == ($$first | 0) ? $first : $$07$i;
  STACKTOP = sp;
  return $$02 | 0;
 } else if (($24 | 0) == 90) {
  if (($$first | 0) == ($last | 0)) {
   $$0$i12 = $last;
   $697 = ($$0$i12 | 0) == ($$first | 0);
   $first$4 = $697 ? $first : $$0$i12;
   STACKTOP = sp;
   return $first$4 | 0;
  }
  if ($23 << 24 >> 24 != 90) {
   $$0$i12 = $$first;
   $697 = ($$0$i12 | 0) == ($$first | 0);
   $first$4 = $697 ? $first : $$0$i12;
   STACKTOP = sp;
   return $first$4 | 0;
  }
  $592 = $$first + 1 | 0;
  $593 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($592, $last, $db) | 0;
  if (($593 | 0) == ($592 | 0) | ($593 | 0) == ($last | 0)) {
   $$0$i12 = $$first;
   $697 = ($$0$i12 | 0) == ($$first | 0);
   $first$4 = $697 ? $first : $$0$i12;
   STACKTOP = sp;
   return $first$4 | 0;
  }
  if ((HEAP8[$593 >> 0] | 0) != 69) {
   $$0$i12 = $$first;
   $697 = ($$0$i12 | 0) == ($$first | 0);
   $first$4 = $697 ? $first : $$0$i12;
   STACKTOP = sp;
   return $first$4 | 0;
  }
  $598 = $593 + 1 | 0;
  if (($598 | 0) == ($last | 0)) {
   $$0$i12 = $$first;
   $697 = ($$0$i12 | 0) == ($$first | 0);
   $first$4 = $697 ? $first : $$0$i12;
   STACKTOP = sp;
   return $first$4 | 0;
  }
  $601 = HEAP8[$598 >> 0] | 0;
  if (($601 | 0) == 115) {
   $603 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($593 + 2 | 0, $last) | 0;
   $606 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($606 | 0)) {
    $$0$i12 = $603;
    $697 = ($$0$i12 | 0) == ($$first | 0);
    $first$4 = $697 ? $first : $$0$i12;
    STACKTOP = sp;
    return $first$4 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($606 + -24 | 0, 60952, 16) | 0;
   $$0$i12 = $603;
   $697 = ($$0$i12 | 0) == ($$first | 0);
   $first$4 = $697 ? $first : $$0$i12;
   STACKTOP = sp;
   return $first$4 | 0;
  } else if (($601 | 0) == 100) {
   $609 = $593 + 2 | 0;
   if (($609 | 0) == ($last | 0)) {
    $$0$i12 = $$first;
    $697 = ($$0$i12 | 0) == ($$first | 0);
    $first$4 = $697 ? $first : $$0$i12;
    STACKTOP = sp;
    return $first$4 | 0;
   }
   $611 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($609, $last) | 0;
   if (($611 | 0) == ($last | 0)) {
    $$0$i12 = $$first;
    $697 = ($$0$i12 | 0) == ($$first | 0);
    $first$4 = $697 ? $first : $$0$i12;
    STACKTOP = sp;
    return $first$4 | 0;
   }
   if ((HEAP8[$611 >> 0] | 0) != 95) {
    $$0$i12 = $$first;
    $697 = ($$0$i12 | 0) == ($$first | 0);
    $first$4 = $697 ? $first : $$0$i12;
    STACKTOP = sp;
    return $first$4 | 0;
   }
   $615 = $611 + 1 | 0;
   $616 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($615, $last, $db) | 0;
   $618 = $db + 4 | 0;
   $619 = HEAP32[$618 >> 2] | 0;
   if (($616 | 0) == ($615 | 0)) {
    $650 = $619 + -24 | 0;
    $652 = $619;
    do {
     $651 = $652 + -24 | 0;
     HEAP32[$618 >> 2] = $651;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($651);
     $652 = HEAP32[$618 >> 2] | 0;
    } while (($652 | 0) != ($650 | 0));
    $$0$i12 = $$first;
    $697 = ($$0$i12 | 0) == ($$first | 0);
    $first$4 = $697 ? $first : $$0$i12;
    STACKTOP = sp;
    return $first$4 | 0;
   }
   if ((($619 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
    $$0$i12 = $$first;
    $697 = ($$0$i12 | 0) == ($$first | 0);
    $first$4 = $697 ? $first : $$0$i12;
    STACKTOP = sp;
    return $first$4 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($__v$i$i65$i, $619 + -24 | 0);
   $627 = HEAP32[$618 >> 2] | 0;
   $628 = $627 + -24 | 0;
   $630 = $627;
   do {
    $629 = $630 + -24 | 0;
    HEAP32[$618 >> 2] = $629;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($629);
    $630 = HEAP32[$618 >> 2] | 0;
   } while (($630 | 0) != ($628 | 0));
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($627 + -48 | 0, 59112, 2) | 0;
   $636 = HEAP8[$__v$i$i65$i >> 0] | 0;
   $638 = ($636 & 1) == 0;
   if ($638) {
    $646 = $__v$i$i65$i + 1 | 0;
    $647 = ($636 & 255) >>> 1;
   } else {
    $646 = HEAP32[$__v$i$i65$i + 8 >> 2] | 0;
    $647 = HEAP32[$__v$i$i65$i + 4 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$618 >> 2] | 0) + -24 | 0, $646, $647) | 0;
   if ($638) {
    $$0$i12 = $616;
    $697 = ($$0$i12 | 0) == ($$first | 0);
    $first$4 = $697 ? $first : $$0$i12;
    STACKTOP = sp;
    return $first$4 | 0;
   }
   _free(HEAP32[$__v$i$i65$i + 8 >> 2] | 0);
   $$0$i12 = $616;
   $697 = ($$0$i12 | 0) == ($$first | 0);
   $first$4 = $697 ? $first : $$0$i12;
   STACKTOP = sp;
   return $first$4 | 0;
  } else {
   $655 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($598, $last, $db) | 0;
   if (($655 | 0) == ($598 | 0)) {
    $690 = $db + 4 | 0;
    $691 = HEAP32[$690 >> 2] | 0;
    $692 = $691 + -24 | 0;
    $694 = $691;
    do {
     $693 = $694 + -24 | 0;
     HEAP32[$690 >> 2] = $693;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($693);
     $694 = HEAP32[$690 >> 2] | 0;
    } while (($694 | 0) != ($692 | 0));
    $$0$i12 = $$first;
    $697 = ($$0$i12 | 0) == ($$first | 0);
    $first$4 = $697 ? $first : $$0$i12;
    STACKTOP = sp;
    return $first$4 | 0;
   }
   $657 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($655, $last) | 0;
   $658 = $db + 4 | 0;
   $659 = HEAP32[$658 >> 2] | 0;
   if ((($659 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
    $$0$i12 = $657;
    $697 = ($$0$i12 | 0) == ($$first | 0);
    $first$4 = $697 ? $first : $$0$i12;
    STACKTOP = sp;
    return $first$4 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i13, $659 + -24 | 0);
   $667 = HEAP32[$658 >> 2] | 0;
   $668 = $667 + -24 | 0;
   $670 = $667;
   do {
    $669 = $670 + -24 | 0;
    HEAP32[$658 >> 2] = $669;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($669);
    $670 = HEAP32[$658 >> 2] | 0;
   } while (($670 | 0) != ($668 | 0));
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($667 + -48 | 0, 59112, 2) | 0;
   $676 = HEAP8[$name$i13 >> 0] | 0;
   $678 = ($676 & 1) == 0;
   if ($678) {
    $686 = $name$i13 + 1 | 0;
    $687 = ($676 & 255) >>> 1;
   } else {
    $686 = HEAP32[$name$i13 + 8 >> 2] | 0;
    $687 = HEAP32[$name$i13 + 4 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$658 >> 2] | 0) + -24 | 0, $686, $687) | 0;
   if ($678) {
    $$0$i12 = $657;
    $697 = ($$0$i12 | 0) == ($$first | 0);
    $first$4 = $697 ? $first : $$0$i12;
    STACKTOP = sp;
    return $first$4 | 0;
   }
   _free(HEAP32[$name$i13 + 8 >> 2] | 0);
   $$0$i12 = $657;
   $697 = ($$0$i12 | 0) == ($$first | 0);
   $first$4 = $697 ? $first : $$0$i12;
   STACKTOP = sp;
   return $first$4 | 0;
  }
 } else {
  do if (($16 - $$first | 0) > 1) {
   if ($23 << 24 >> 24 == 83) if ((HEAP8[$$first + 1 >> 0] | 0) == 116) {
    $705 = $$first + 2 | 0;
    if (($705 | 0) == ($last | 0)) {
     $St$0$off0$i = 0;
     $t0$0$i = $last;
    } else {
     $St$0$off0$i = 0;
     $t0$0$i = (HEAP8[$705 >> 0] | 0) == 76 ? $$first + 3 | 0 : $705;
    }
   } else {
    $St$0$off0$i = 1;
    $t0$0$i = $$first;
   } else {
    $St$0$off0$i = 1;
    $t0$0$i = $$first;
   }
   $710 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$0$i, $last, $db) | 0;
   $711 = ($710 | 0) == ($t0$0$i | 0);
   if ($711 | $St$0$off0$i) $$0$i = $711 ? $$first : $710; else {
    $714 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($714 | 0)) break;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($714 + -24 | 0, 0, 59552, 5) | 0;
    $$0$i = $710;
   }
   if (($$0$i | 0) != ($$first | 0)) {
    if (($$0$i | 0) == ($last | 0)) {
     $$02 = $last;
     STACKTOP = sp;
     return $$02 | 0;
    }
    if ((HEAP8[$$0$i >> 0] | 0) != 73) {
     $$02 = $$0$i;
     STACKTOP = sp;
     return $$02 | 0;
    }
    $722 = $db + 4 | 0;
    $723 = HEAP32[$722 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($723 | 0)) {
     $$02 = $first;
     STACKTOP = sp;
     return $$02 | 0;
    }
    $725 = $db + 16 | 0;
    HEAP32[$15 >> 2] = HEAP32[$db + 12 >> 2];
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($14, $723 + -24 | 0, $15);
    $729 = $db + 20 | 0;
    $730 = HEAP32[$729 >> 2] | 0;
    $732 = HEAP32[$db + 24 >> 2] | 0;
    if ($730 >>> 0 < $732 >>> 0) {
     if (!$730) $746 = 0; else {
      HEAP32[$730 + 12 >> 2] = HEAP32[$14 + 12 >> 2];
      HEAP32[$730 >> 2] = HEAP32[$14 >> 2];
      $741 = $14 + 4 | 0;
      HEAP32[$730 + 4 >> 2] = HEAP32[$741 >> 2];
      $743 = $14 + 8 | 0;
      HEAP32[$730 + 8 >> 2] = HEAP32[$743 >> 2];
      HEAP32[$743 >> 2] = 0;
      HEAP32[$741 >> 2] = 0;
      HEAP32[$14 >> 2] = 0;
      $746 = HEAP32[$729 >> 2] | 0;
     }
     HEAP32[$729 >> 2] = $746 + 16;
    } else {
     $750 = HEAP32[$725 >> 2] | 0;
     $752 = $730 - $750 >> 4;
     $753 = $752 + 1 | 0;
     if (($753 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $756 = $732 - $750 | 0;
     if ($756 >> 4 >>> 0 < 1073741823) {
      $759 = $756 >> 3;
      $$0$i$i$i = $759 >>> 0 < $753 >>> 0 ? $753 : $759;
     } else $$0$i$i$i = 2147483647;
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i65$i, $$0$i$i$i, $752, $db + 28 | 0);
     $762 = $__v$i$i65$i + 8 | 0;
     $763 = HEAP32[$762 >> 2] | 0;
     if ($763) {
      HEAP32[$763 + 12 >> 2] = HEAP32[$14 + 12 >> 2];
      HEAP32[$763 >> 2] = HEAP32[$14 >> 2];
      $771 = $14 + 4 | 0;
      HEAP32[$763 + 4 >> 2] = HEAP32[$771 >> 2];
      $773 = $14 + 8 | 0;
      HEAP32[$763 + 8 >> 2] = HEAP32[$773 >> 2];
      HEAP32[$773 >> 2] = 0;
      HEAP32[$771 >> 2] = 0;
      HEAP32[$14 >> 2] = 0;
     }
     HEAP32[$762 >> 2] = $763 + 16;
     __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($725, $__v$i$i65$i);
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i65$i);
    }
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($14);
    $776 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($$0$i, $last, $db) | 0;
    if (($776 | 0) == ($$0$i | 0)) {
     $$02 = $first;
     STACKTOP = sp;
     return $$02 | 0;
    }
    $778 = HEAP32[$722 >> 2] | 0;
    if ((($778 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$02 = $first;
     STACKTOP = sp;
     return $$02 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp, $778 + -24 | 0);
    $786 = HEAP32[$722 >> 2] | 0;
    $787 = $786 + -24 | 0;
    $789 = $786;
    do {
     $788 = $789 + -24 | 0;
     HEAP32[$722 >> 2] = $788;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($788);
     $789 = HEAP32[$722 >> 2] | 0;
    } while (($789 | 0) != ($787 | 0));
    $793 = HEAP8[$tmp >> 0] | 0;
    $795 = ($793 & 1) == 0;
    if ($795) {
     $803 = $tmp + 1 | 0;
     $804 = ($793 & 255) >>> 1;
    } else {
     $803 = HEAP32[$tmp + 8 >> 2] | 0;
     $804 = HEAP32[$tmp + 4 >> 2] | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($786 + -48 | 0, $803, $804) | 0;
    if ($795) {
     $$02 = $776;
     STACKTOP = sp;
     return $$02 | 0;
    }
    _free(HEAP32[$tmp + 8 >> 2] | 0);
    $$02 = $776;
    STACKTOP = sp;
    return $$02 | 0;
   }
  } while (0);
  $807 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$first, $last, $db) | 0;
  if (($807 | 0) == ($$first | 0) | ($807 | 0) == ($last | 0)) {
   $$02 = $first;
   STACKTOP = sp;
   return $$02 | 0;
  }
  if ((HEAP8[$807 >> 0] | 0) != 73) {
   $$02 = $first;
   STACKTOP = sp;
   return $$02 | 0;
  }
  $812 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($807, $last, $db) | 0;
  if (($812 | 0) == ($807 | 0)) {
   $$02 = $first;
   STACKTOP = sp;
   return $$02 | 0;
  }
  $814 = $db + 4 | 0;
  $815 = HEAP32[$814 >> 2] | 0;
  if ((($815 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
   $$02 = $first;
   STACKTOP = sp;
   return $$02 | 0;
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp3, $815 + -24 | 0);
  $823 = HEAP32[$814 >> 2] | 0;
  $824 = $823 + -24 | 0;
  $826 = $823;
  do {
   $825 = $826 + -24 | 0;
   HEAP32[$814 >> 2] = $825;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($825);
   $826 = HEAP32[$814 >> 2] | 0;
  } while (($826 | 0) != ($824 | 0));
  $830 = HEAP8[$tmp3 >> 0] | 0;
  $832 = ($830 & 1) == 0;
  if ($832) {
   $840 = $tmp3 + 1 | 0;
   $841 = ($830 & 255) >>> 1;
  } else {
   $840 = HEAP32[$tmp3 + 8 >> 2] | 0;
   $841 = HEAP32[$tmp3 + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($823 + -48 | 0, $840, $841) | 0;
  if ($832) {
   $$02 = $812;
   STACKTOP = sp;
   return $$02 | 0;
  }
  _free(HEAP32[$tmp3 + 8 >> 2] | 0);
  $$02 = $812;
  STACKTOP = sp;
  return $$02 | 0;
 }
 return 0;
}

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$3$i = 0, $$sum$i19$i = 0, $$sum2$i21$i = 0, $$sum3132$i$i = 0, $$sum67$i$i = 0, $100 = 0, $1000 = 0, $1003 = 0, $1005 = 0, $1008 = 0, $1013 = 0, $1019 = 0, $1023 = 0, $1024 = 0, $1031 = 0, $1040 = 0, $1043 = 0, $1048 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $106 = 0, $1064 = 0, $1066 = 0, $1067 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $13 = 0, $132 = 0, $138 = 0, $14 = 0, $141 = 0, $144 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $197 = 0, $201 = 0, $207 = 0, $214 = 0, $217 = 0, $225 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $25 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $261 = 0, $264 = 0, $269 = 0, $276 = 0, $28 = 0, $282 = 0, $285 = 0, $286 = 0, $290 = 0, $300 = 0, $303 = 0, $307 = 0, $309 = 0, $31 = 0, $310 = 0, $312 = 0, $314 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $334 = 0, $335 = 0, $337 = 0, $34 = 0, $346 = 0, $348 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $368 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $379 = 0, $38 = 0, $380 = 0, $389 = 0, $394 = 0, $398 = 0, $4 = 0, $404 = 0, $41 = 0, $411 = 0, $414 = 0, $422 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $46 = 0, $463 = 0, $467 = 0, $468 = 0, $47 = 0, $475 = 0, $484 = 0, $487 = 0, $49 = 0, $492 = 0, $499 = 0, $5 = 0, $500 = 0, $501 = 0, $509 = 0, $51 = 0, $511 = 0, $512 = 0, $522 = 0, $526 = 0, $528 = 0, $529 = 0, $53 = 0, $538 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $561 = 0, $563 = 0, $565 = 0, $57 = 0, $570 = 0, $573 = 0, $575 = 0, $576 = 0, $577 = 0, $585 = 0, $586 = 0, $589 = 0, $59 = 0, $593 = 0, $597 = 0, $599 = 0, $6 = 0, $605 = 0, $609 = 0, $61 = 0, $613 = 0, $622 = 0, $623 = 0, $629 = 0, $631 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $643 = 0, $649 = 0, $65 = 0, $655 = 0, $656 = 0, $66 = 0, $661 = 0, $662 = 0, $663 = 0, $667 = 0, $67 = 0, $677 = 0, $679 = 0, $68 = 0, $685 = 0, $686 = 0, $69 = 0, $691 = 0, $693 = 0, $697 = 0, $7 = 0, $70 = 0, $703 = 0, $707 = 0, $713 = 0, $715 = 0, $720 = 0, $721 = 0, $725 = 0, $726 = 0, $731 = 0, $737 = 0, $742 = 0, $745 = 0, $746 = 0, $749 = 0, $751 = 0, $753 = 0, $756 = 0, $767 = 0, $77 = 0, $772 = 0, $774 = 0, $777 = 0, $779 = 0, $782 = 0, $785 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $794 = 0, $795 = 0, $80 = 0, $800 = 0, $801 = 0, $81 = 0, $810 = 0, $815 = 0, $819 = 0, $825 = 0, $833 = 0, $839 = 0, $84 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $848 = 0, $849 = 0, $855 = 0, $860 = 0, $861 = 0, $864 = 0, $866 = 0, $869 = 0, $874 = 0, $880 = 0, $884 = 0, $885 = 0, $89 = 0, $892 = 0, $90 = 0, $901 = 0, $904 = 0, $909 = 0, $91 = 0, $916 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $929 = 0, $93 = 0, $930 = 0, $935 = 0, $94 = 0, $940 = 0, $941 = 0, $944 = 0, $945 = 0, $948 = 0, $95 = 0, $954 = 0, $955 = 0, $961 = 0, $965 = 0, $971 = 0, $973 = 0, $978 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $987 = 0, $988 = 0, $99 = 0, $994 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$028$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$074$i = 0, $sp$173$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0, $965$looptemp = 0;
 sp = STACKTOP;
 do if ($bytes >>> 0 < 245) {
  if ($bytes >>> 0 < 11) $5 = 16; else $5 = $bytes + 11 & -8;
  $4 = $5 >>> 3;
  $6 = HEAP32[15758] | 0;
  $7 = $6 >>> $4;
  if ($7 & 3) {
   $12 = ($7 & 1 ^ 1) + $4 | 0;
   $13 = $12 << 1;
   $14 = 63072 + ($13 << 2) | 0;
   $15 = 63072 + ($13 + 2 << 2) | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   do if (($14 | 0) == ($18 | 0)) HEAP32[15758] = $6 & ~(1 << $12); else {
    if ($18 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
    $25 = $18 + 12 | 0;
    if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$25 >> 2] = $14;
     HEAP32[$15 >> 2] = $18;
     break;
    } else _abort();
   } while (0);
   $28 = $12 << 3;
   HEAP32[$16 + 4 >> 2] = $28 | 3;
   $31 = $16 + ($28 | 4) | 0;
   HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1;
   $mem$0 = $17;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
  $34 = HEAP32[15760] | 0;
  if ($5 >>> 0 > $34 >>> 0) {
   if ($7) {
    $38 = 2 << $4;
    $41 = $7 << $4 & ($38 | 0 - $38);
    $44 = ($41 & 0 - $41) + -1 | 0;
    $46 = $44 >>> 12 & 16;
    $47 = $44 >>> $46;
    $49 = $47 >>> 5 & 8;
    $51 = $47 >>> $49;
    $53 = $51 >>> 2 & 4;
    $55 = $51 >>> $53;
    $57 = $55 >>> 1 & 2;
    $59 = $55 >>> $57;
    $61 = $59 >>> 1 & 1;
    $64 = ($49 | $46 | $53 | $57 | $61) + ($59 >>> $61) | 0;
    $65 = $64 << 1;
    $66 = 63072 + ($65 << 2) | 0;
    $67 = 63072 + ($65 + 2 << 2) | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = $68 + 8 | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    do if (($66 | 0) == ($70 | 0)) {
     HEAP32[15758] = $6 & ~(1 << $64);
     $89 = $34;
    } else {
     if ($70 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
     $77 = $70 + 12 | 0;
     if ((HEAP32[$77 >> 2] | 0) == ($68 | 0)) {
      HEAP32[$77 >> 2] = $66;
      HEAP32[$67 >> 2] = $70;
      $89 = HEAP32[15760] | 0;
      break;
     } else _abort();
    } while (0);
    $80 = $64 << 3;
    $81 = $80 - $5 | 0;
    HEAP32[$68 + 4 >> 2] = $5 | 3;
    $84 = $68 + $5 | 0;
    HEAP32[$68 + ($5 | 4) >> 2] = $81 | 1;
    HEAP32[$68 + $80 >> 2] = $81;
    if ($89) {
     $90 = HEAP32[15763] | 0;
     $91 = $89 >>> 3;
     $92 = $91 << 1;
     $93 = 63072 + ($92 << 2) | 0;
     $94 = HEAP32[15758] | 0;
     $95 = 1 << $91;
     if (!($94 & $95)) {
      HEAP32[15758] = $94 | $95;
      $$pre$phiZ2D = 63072 + ($92 + 2 << 2) | 0;
      $F4$0 = $93;
     } else {
      $99 = 63072 + ($92 + 2 << 2) | 0;
      $100 = HEAP32[$99 >> 2] | 0;
      if ($100 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $99;
       $F4$0 = $100;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $90;
     HEAP32[$F4$0 + 12 >> 2] = $90;
     HEAP32[$90 + 8 >> 2] = $F4$0;
     HEAP32[$90 + 12 >> 2] = $93;
    }
    HEAP32[15760] = $81;
    HEAP32[15763] = $84;
    $mem$0 = $69;
    STACKTOP = sp;
    return $mem$0 | 0;
   }
   $106 = HEAP32[15759] | 0;
   if (!$106) $nb$0 = $5; else {
    $110 = ($106 & 0 - $106) + -1 | 0;
    $112 = $110 >>> 12 & 16;
    $113 = $110 >>> $112;
    $115 = $113 >>> 5 & 8;
    $117 = $113 >>> $115;
    $119 = $117 >>> 2 & 4;
    $121 = $117 >>> $119;
    $123 = $121 >>> 1 & 2;
    $125 = $121 >>> $123;
    $127 = $125 >>> 1 & 1;
    $132 = HEAP32[63336 + (($115 | $112 | $119 | $123 | $127) + ($125 >>> $127) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$132 + 4 >> 2] & -8) - $5 | 0;
    $t$0$i = $132;
    $v$0$i = $132;
    while (1) {
     $138 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$138) {
      $141 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$141) break; else $144 = $141;
     } else $144 = $138;
     $147 = (HEAP32[$144 + 4 >> 2] & -8) - $5 | 0;
     $148 = $147 >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $148 ? $147 : $rsize$0$i;
     $t$0$i = $144;
     $v$0$i = $148 ? $144 : $v$0$i;
    }
    $149 = HEAP32[15762] | 0;
    if ($v$0$i >>> 0 < $149 >>> 0) _abort();
    $151 = $v$0$i + $5 | 0;
    if ($v$0$i >>> 0 >= $151 >>> 0) _abort();
    $154 = HEAP32[$v$0$i + 24 >> 2] | 0;
    $156 = HEAP32[$v$0$i + 12 >> 2] | 0;
    do if (($156 | 0) == ($v$0$i | 0)) {
     $167 = $v$0$i + 20 | 0;
     $168 = HEAP32[$167 >> 2] | 0;
     if (!$168) {
      $170 = $v$0$i + 16 | 0;
      $171 = HEAP32[$170 >> 2] | 0;
      if (!$171) {
       $R$1$i = 0;
       break;
      } else {
       $R$0$i = $171;
       $RP$0$i = $170;
      }
     } else {
      $R$0$i = $168;
      $RP$0$i = $167;
     }
     while (1) {
      $173 = $R$0$i + 20 | 0;
      $174 = HEAP32[$173 >> 2] | 0;
      if ($174) {
       $R$0$i = $174;
       $RP$0$i = $173;
       continue;
      }
      $176 = $R$0$i + 16 | 0;
      $177 = HEAP32[$176 >> 2] | 0;
      if (!$177) break; else {
       $R$0$i = $177;
       $RP$0$i = $176;
      }
     }
     if ($RP$0$i >>> 0 < $149 >>> 0) _abort(); else {
      HEAP32[$RP$0$i >> 2] = 0;
      $R$1$i = $R$0$i;
      break;
     }
    } else {
     $159 = HEAP32[$v$0$i + 8 >> 2] | 0;
     if ($159 >>> 0 < $149 >>> 0) _abort();
     $161 = $159 + 12 | 0;
     if ((HEAP32[$161 >> 2] | 0) != ($v$0$i | 0)) _abort();
     $164 = $156 + 8 | 0;
     if ((HEAP32[$164 >> 2] | 0) == ($v$0$i | 0)) {
      HEAP32[$161 >> 2] = $156;
      HEAP32[$164 >> 2] = $159;
      $R$1$i = $156;
      break;
     } else _abort();
    } while (0);
    do if ($154) {
     $182 = HEAP32[$v$0$i + 28 >> 2] | 0;
     $183 = 63336 + ($182 << 2) | 0;
     if (($v$0$i | 0) == (HEAP32[$183 >> 2] | 0)) {
      HEAP32[$183 >> 2] = $R$1$i;
      if (!$R$1$i) {
       HEAP32[15759] = HEAP32[15759] & ~(1 << $182);
       break;
      }
     } else {
      if ($154 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
      $192 = $154 + 16 | 0;
      if ((HEAP32[$192 >> 2] | 0) == ($v$0$i | 0)) HEAP32[$192 >> 2] = $R$1$i; else HEAP32[$154 + 20 >> 2] = $R$1$i;
      if (!$R$1$i) break;
     }
     $197 = HEAP32[15762] | 0;
     if ($R$1$i >>> 0 < $197 >>> 0) _abort();
     HEAP32[$R$1$i + 24 >> 2] = $154;
     $201 = HEAP32[$v$0$i + 16 >> 2] | 0;
     do if ($201) if ($201 >>> 0 < $197 >>> 0) _abort(); else {
      HEAP32[$R$1$i + 16 >> 2] = $201;
      HEAP32[$201 + 24 >> 2] = $R$1$i;
      break;
     } while (0);
     $207 = HEAP32[$v$0$i + 20 >> 2] | 0;
     if ($207) if ($207 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i + 20 >> 2] = $207;
      HEAP32[$207 + 24 >> 2] = $R$1$i;
      break;
     }
    } while (0);
    if ($rsize$0$i >>> 0 < 16) {
     $214 = $rsize$0$i + $5 | 0;
     HEAP32[$v$0$i + 4 >> 2] = $214 | 3;
     $217 = $v$0$i + ($214 + 4) | 0;
     HEAP32[$217 >> 2] = HEAP32[$217 >> 2] | 1;
    } else {
     HEAP32[$v$0$i + 4 >> 2] = $5 | 3;
     HEAP32[$v$0$i + ($5 | 4) >> 2] = $rsize$0$i | 1;
     HEAP32[$v$0$i + ($rsize$0$i + $5) >> 2] = $rsize$0$i;
     $225 = HEAP32[15760] | 0;
     if ($225) {
      $227 = HEAP32[15763] | 0;
      $228 = $225 >>> 3;
      $229 = $228 << 1;
      $230 = 63072 + ($229 << 2) | 0;
      $231 = HEAP32[15758] | 0;
      $232 = 1 << $228;
      if (!($231 & $232)) {
       HEAP32[15758] = $231 | $232;
       $$pre$phi$iZ2D = 63072 + ($229 + 2 << 2) | 0;
       $F1$0$i = $230;
      } else {
       $236 = 63072 + ($229 + 2 << 2) | 0;
       $237 = HEAP32[$236 >> 2] | 0;
       if ($237 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $236;
        $F1$0$i = $237;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $227;
      HEAP32[$F1$0$i + 12 >> 2] = $227;
      HEAP32[$227 + 8 >> 2] = $F1$0$i;
      HEAP32[$227 + 12 >> 2] = $230;
     }
     HEAP32[15760] = $rsize$0$i;
     HEAP32[15763] = $151;
    }
    $mem$0 = $v$0$i + 8 | 0;
    STACKTOP = sp;
    return $mem$0 | 0;
   }
  } else $nb$0 = $5;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $245 = $bytes + 11 | 0;
  $246 = $245 & -8;
  $247 = HEAP32[15759] | 0;
  if (!$247) $nb$0 = $246; else {
   $249 = 0 - $246 | 0;
   $250 = $245 >>> 8;
   if (!$250) $idx$0$i = 0; else if ($246 >>> 0 > 16777215) $idx$0$i = 31; else {
    $255 = ($250 + 1048320 | 0) >>> 16 & 8;
    $256 = $250 << $255;
    $259 = ($256 + 520192 | 0) >>> 16 & 4;
    $261 = $256 << $259;
    $264 = ($261 + 245760 | 0) >>> 16 & 2;
    $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
    $idx$0$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1;
   }
   $276 = HEAP32[63336 + ($idx$0$i << 2) >> 2] | 0;
   L9 : do if (!$276) {
    $rsize$2$i = $249;
    $t$1$i = 0;
    $v$2$i = 0;
   } else {
    if (($idx$0$i | 0) == 31) $282 = 0; else $282 = 25 - ($idx$0$i >>> 1) | 0;
    $rsize$0$i15 = $249;
    $rst$0$i = 0;
    $sizebits$0$i = $246 << $282;
    $t$0$i14 = $276;
    $v$0$i16 = 0;
    while (1) {
     $285 = HEAP32[$t$0$i14 + 4 >> 2] & -8;
     $286 = $285 - $246 | 0;
     if ($286 >>> 0 < $rsize$0$i15 >>> 0) if (($285 | 0) == ($246 | 0)) {
      $rsize$2$i = $286;
      $t$1$i = $t$0$i14;
      $v$2$i = $t$0$i14;
      break L9;
     } else {
      $rsize$1$i = $286;
      $v$1$i = $t$0$i14;
     } else {
      $rsize$1$i = $rsize$0$i15;
      $v$1$i = $v$0$i16;
     }
     $290 = HEAP32[$t$0$i14 + 20 >> 2] | 0;
     $t$0$i14 = HEAP32[$t$0$i14 + ($sizebits$0$i >>> 31 << 2) + 16 >> 2] | 0;
     $rst$1$i = ($290 | 0) == 0 | ($290 | 0) == ($t$0$i14 | 0) ? $rst$0$i : $290;
     if (!$t$0$i14) {
      $rsize$2$i = $rsize$1$i;
      $t$1$i = $rst$1$i;
      $v$2$i = $v$1$i;
      break;
     } else {
      $rsize$0$i15 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i16 = $v$1$i;
     }
    }
   } while (0);
   if (($t$1$i | 0) == 0 & ($v$2$i | 0) == 0) {
    $300 = 2 << $idx$0$i;
    $303 = $247 & ($300 | 0 - $300);
    if (!$303) {
     $nb$0 = $246;
     break;
    }
    $307 = ($303 & 0 - $303) + -1 | 0;
    $309 = $307 >>> 12 & 16;
    $310 = $307 >>> $309;
    $312 = $310 >>> 5 & 8;
    $314 = $310 >>> $312;
    $316 = $314 >>> 2 & 4;
    $318 = $314 >>> $316;
    $320 = $318 >>> 1 & 2;
    $322 = $318 >>> $320;
    $324 = $322 >>> 1 & 1;
    $t$2$ph$i = HEAP32[63336 + (($312 | $309 | $316 | $320 | $324) + ($322 >>> $324) << 2) >> 2] | 0;
   } else $t$2$ph$i = $t$1$i;
   if (!$t$2$ph$i) {
    $rsize$3$lcssa$i = $rsize$2$i;
    $v$3$lcssa$i = $v$2$i;
   } else {
    $rsize$331$i = $rsize$2$i;
    $t$230$i = $t$2$ph$i;
    $v$332$i = $v$2$i;
    while (1) {
     $334 = (HEAP32[$t$230$i + 4 >> 2] & -8) - $246 | 0;
     $335 = $334 >>> 0 < $rsize$331$i >>> 0;
     $$rsize$3$i = $335 ? $334 : $rsize$331$i;
     $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
     $337 = HEAP32[$t$230$i + 16 >> 2] | 0;
     if ($337) {
      $rsize$331$i = $$rsize$3$i;
      $t$230$i = $337;
      $v$332$i = $t$2$v$3$i;
      continue;
     }
     $t$230$i = HEAP32[$t$230$i + 20 >> 2] | 0;
     if (!$t$230$i) {
      $rsize$3$lcssa$i = $$rsize$3$i;
      $v$3$lcssa$i = $t$2$v$3$i;
      break;
     } else {
      $rsize$331$i = $$rsize$3$i;
      $v$332$i = $t$2$v$3$i;
     }
    }
   }
   if (!$v$3$lcssa$i) $nb$0 = $246; else if ($rsize$3$lcssa$i >>> 0 < ((HEAP32[15760] | 0) - $246 | 0) >>> 0) {
    $346 = HEAP32[15762] | 0;
    if ($v$3$lcssa$i >>> 0 < $346 >>> 0) _abort();
    $348 = $v$3$lcssa$i + $246 | 0;
    if ($v$3$lcssa$i >>> 0 >= $348 >>> 0) _abort();
    $351 = HEAP32[$v$3$lcssa$i + 24 >> 2] | 0;
    $353 = HEAP32[$v$3$lcssa$i + 12 >> 2] | 0;
    do if (($353 | 0) == ($v$3$lcssa$i | 0)) {
     $364 = $v$3$lcssa$i + 20 | 0;
     $365 = HEAP32[$364 >> 2] | 0;
     if (!$365) {
      $367 = $v$3$lcssa$i + 16 | 0;
      $368 = HEAP32[$367 >> 2] | 0;
      if (!$368) {
       $R$1$i20 = 0;
       break;
      } else {
       $R$0$i18 = $368;
       $RP$0$i17 = $367;
      }
     } else {
      $R$0$i18 = $365;
      $RP$0$i17 = $364;
     }
     while (1) {
      $370 = $R$0$i18 + 20 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if ($371) {
       $R$0$i18 = $371;
       $RP$0$i17 = $370;
       continue;
      }
      $373 = $R$0$i18 + 16 | 0;
      $374 = HEAP32[$373 >> 2] | 0;
      if (!$374) break; else {
       $R$0$i18 = $374;
       $RP$0$i17 = $373;
      }
     }
     if ($RP$0$i17 >>> 0 < $346 >>> 0) _abort(); else {
      HEAP32[$RP$0$i17 >> 2] = 0;
      $R$1$i20 = $R$0$i18;
      break;
     }
    } else {
     $356 = HEAP32[$v$3$lcssa$i + 8 >> 2] | 0;
     if ($356 >>> 0 < $346 >>> 0) _abort();
     $358 = $356 + 12 | 0;
     if ((HEAP32[$358 >> 2] | 0) != ($v$3$lcssa$i | 0)) _abort();
     $361 = $353 + 8 | 0;
     if ((HEAP32[$361 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
      HEAP32[$358 >> 2] = $353;
      HEAP32[$361 >> 2] = $356;
      $R$1$i20 = $353;
      break;
     } else _abort();
    } while (0);
    do if ($351) {
     $379 = HEAP32[$v$3$lcssa$i + 28 >> 2] | 0;
     $380 = 63336 + ($379 << 2) | 0;
     if (($v$3$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
      HEAP32[$380 >> 2] = $R$1$i20;
      if (!$R$1$i20) {
       HEAP32[15759] = HEAP32[15759] & ~(1 << $379);
       break;
      }
     } else {
      if ($351 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
      $389 = $351 + 16 | 0;
      if ((HEAP32[$389 >> 2] | 0) == ($v$3$lcssa$i | 0)) HEAP32[$389 >> 2] = $R$1$i20; else HEAP32[$351 + 20 >> 2] = $R$1$i20;
      if (!$R$1$i20) break;
     }
     $394 = HEAP32[15762] | 0;
     if ($R$1$i20 >>> 0 < $394 >>> 0) _abort();
     HEAP32[$R$1$i20 + 24 >> 2] = $351;
     $398 = HEAP32[$v$3$lcssa$i + 16 >> 2] | 0;
     do if ($398) if ($398 >>> 0 < $394 >>> 0) _abort(); else {
      HEAP32[$R$1$i20 + 16 >> 2] = $398;
      HEAP32[$398 + 24 >> 2] = $R$1$i20;
      break;
     } while (0);
     $404 = HEAP32[$v$3$lcssa$i + 20 >> 2] | 0;
     if ($404) if ($404 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i20 + 20 >> 2] = $404;
      HEAP32[$404 + 24 >> 2] = $R$1$i20;
      break;
     }
    } while (0);
    L87 : do if ($rsize$3$lcssa$i >>> 0 < 16) {
     $411 = $rsize$3$lcssa$i + $246 | 0;
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $411 | 3;
     $414 = $v$3$lcssa$i + ($411 + 4) | 0;
     HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1;
    } else {
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $246 | 3;
     HEAP32[$v$3$lcssa$i + ($246 | 4) >> 2] = $rsize$3$lcssa$i | 1;
     HEAP32[$v$3$lcssa$i + ($rsize$3$lcssa$i + $246) >> 2] = $rsize$3$lcssa$i;
     $422 = $rsize$3$lcssa$i >>> 3;
     if ($rsize$3$lcssa$i >>> 0 < 256) {
      $424 = $422 << 1;
      $425 = 63072 + ($424 << 2) | 0;
      $426 = HEAP32[15758] | 0;
      $427 = 1 << $422;
      do if (!($426 & $427)) {
       HEAP32[15758] = $426 | $427;
       $$pre$phi$i26Z2D = 63072 + ($424 + 2 << 2) | 0;
       $F5$0$i = $425;
      } else {
       $431 = 63072 + ($424 + 2 << 2) | 0;
       $432 = HEAP32[$431 >> 2] | 0;
       if ($432 >>> 0 >= (HEAP32[15762] | 0) >>> 0) {
        $$pre$phi$i26Z2D = $431;
        $F5$0$i = $432;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i26Z2D >> 2] = $348;
      HEAP32[$F5$0$i + 12 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $F5$0$i;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $425;
      break;
     }
     $438 = $rsize$3$lcssa$i >>> 8;
     if (!$438) $I7$0$i = 0; else if ($rsize$3$lcssa$i >>> 0 > 16777215) $I7$0$i = 31; else {
      $443 = ($438 + 1048320 | 0) >>> 16 & 8;
      $444 = $438 << $443;
      $447 = ($444 + 520192 | 0) >>> 16 & 4;
      $449 = $444 << $447;
      $452 = ($449 + 245760 | 0) >>> 16 & 2;
      $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0;
      $I7$0$i = $rsize$3$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1;
     }
     $463 = 63336 + ($I7$0$i << 2) | 0;
     HEAP32[$v$3$lcssa$i + ($246 + 28) >> 2] = $I7$0$i;
     HEAP32[$v$3$lcssa$i + ($246 + 20) >> 2] = 0;
     HEAP32[$v$3$lcssa$i + ($246 + 16) >> 2] = 0;
     $467 = HEAP32[15759] | 0;
     $468 = 1 << $I7$0$i;
     if (!($467 & $468)) {
      HEAP32[15759] = $467 | $468;
      HEAP32[$463 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $463;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348;
      break;
     }
     $475 = HEAP32[$463 >> 2] | 0;
     if (($I7$0$i | 0) == 31) $484 = 0; else $484 = 25 - ($I7$0$i >>> 1) | 0;
     L107 : do if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) $T$0$lcssa$i = $475; else {
      $K12$029$i = $rsize$3$lcssa$i << $484;
      $T$028$i = $475;
      while (1) {
       $492 = $T$028$i + ($K12$029$i >>> 31 << 2) + 16 | 0;
       $487 = HEAP32[$492 >> 2] | 0;
       if (!$487) break;
       if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
        $T$0$lcssa$i = $487;
        break L107;
       } else {
        $K12$029$i = $K12$029$i << 1;
        $T$028$i = $487;
       }
      }
      if ($492 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
       HEAP32[$492 >> 2] = $348;
       HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $T$028$i;
       HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348;
       HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348;
       break L87;
      }
     } while (0);
     $499 = $T$0$lcssa$i + 8 | 0;
     $500 = HEAP32[$499 >> 2] | 0;
     $501 = HEAP32[15762] | 0;
     if ($T$0$lcssa$i >>> 0 >= $501 >>> 0 & $500 >>> 0 >= $501 >>> 0) {
      HEAP32[$500 + 12 >> 2] = $348;
      HEAP32[$499 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $500;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $T$0$lcssa$i;
      HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $mem$0 = $v$3$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $mem$0 | 0;
   } else $nb$0 = $246;
  }
 } while (0);
 $509 = HEAP32[15760] | 0;
 if ($509 >>> 0 >= $nb$0 >>> 0) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[15763] | 0;
  if ($511 >>> 0 > 15) {
   HEAP32[15763] = $512 + $nb$0;
   HEAP32[15760] = $511;
   HEAP32[$512 + ($nb$0 + 4) >> 2] = $511 | 1;
   HEAP32[$512 + $509 >> 2] = $511;
   HEAP32[$512 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[15760] = 0;
   HEAP32[15763] = 0;
   HEAP32[$512 + 4 >> 2] = $509 | 3;
   $522 = $512 + ($509 + 4) | 0;
   HEAP32[$522 >> 2] = HEAP32[$522 >> 2] | 1;
  }
  $mem$0 = $512 + 8 | 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 $526 = HEAP32[15761] | 0;
 if ($526 >>> 0 > $nb$0 >>> 0) {
  $528 = $526 - $nb$0 | 0;
  HEAP32[15761] = $528;
  $529 = HEAP32[15764] | 0;
  HEAP32[15764] = $529 + $nb$0;
  HEAP32[$529 + ($nb$0 + 4) >> 2] = $528 | 1;
  HEAP32[$529 + 4 >> 2] = $nb$0 | 3;
  $mem$0 = $529 + 8 | 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 do if (!(HEAP32[15876] | 0)) {
  $538 = _sysconf(30) | 0;
  if (!($538 + -1 & $538)) {
   HEAP32[15878] = $538;
   HEAP32[15877] = $538;
   HEAP32[15879] = -1;
   HEAP32[15880] = -1;
   HEAP32[15881] = 0;
   HEAP32[15869] = 0;
   HEAP32[15876] = (_time(0) | 0) & -16 ^ 1431655768;
   break;
  } else _abort();
 } while (0);
 $545 = $nb$0 + 48 | 0;
 $546 = HEAP32[15878] | 0;
 $547 = $nb$0 + 47 | 0;
 $548 = $546 + $547 | 0;
 $549 = 0 - $546 | 0;
 $550 = $548 & $549;
 if ($550 >>> 0 <= $nb$0 >>> 0) {
  $mem$0 = 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 $552 = HEAP32[15868] | 0;
 if ($552) {
  $554 = HEAP32[15866] | 0;
  $555 = $554 + $550 | 0;
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $mem$0 = 0;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
 }
 L266 : do if (!(HEAP32[15869] & 4)) {
  $561 = HEAP32[15764] | 0;
  L268 : do if (!$561) label = 181; else {
   $sp$0$i$i = 63480 | 0;
   while (1) {
    $563 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($563 >>> 0 <= $561 >>> 0) {
     $565 = $sp$0$i$i + 4 | 0;
     if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) break;
    }
    $570 = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$570) {
     label = 181;
     break L268;
    } else $sp$0$i$i = $570;
   }
   if (!$sp$0$i$i) label = 181; else {
    $597 = $548 - (HEAP32[15761] | 0) & $549;
    if ($597 >>> 0 < 2147483647) {
     $599 = _sbrk($597 | 0) | 0;
     if (($599 | 0) == ((HEAP32[$sp$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
      $br$0$i = $599;
      $ssize$1$i = $597;
      label = 190;
     } else {
      $br$030$i = $599;
      $ssize$129$i = $597;
      label = 191;
     }
    } else $tsize$03141$i = 0;
   }
  } while (0);
  do if ((label | 0) == 181) {
   $573 = _sbrk(0) | 0;
   if (($573 | 0) == (-1 | 0)) $tsize$03141$i = 0; else {
    $575 = $573;
    $576 = HEAP32[15877] | 0;
    $577 = $576 + -1 | 0;
    if (!($577 & $575)) $ssize$0$i = $550; else $ssize$0$i = $550 - $575 + ($577 + $575 & 0 - $576) | 0;
    $585 = HEAP32[15866] | 0;
    $586 = $585 + $ssize$0$i | 0;
    if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
     $589 = HEAP32[15868] | 0;
     if ($589) if ($586 >>> 0 <= $585 >>> 0 | $586 >>> 0 > $589 >>> 0) {
      $tsize$03141$i = 0;
      break;
     }
     $593 = _sbrk($ssize$0$i | 0) | 0;
     if (($593 | 0) == ($573 | 0)) {
      $br$0$i = $573;
      $ssize$1$i = $ssize$0$i;
      label = 190;
     } else {
      $br$030$i = $593;
      $ssize$129$i = $ssize$0$i;
      label = 191;
     }
    } else $tsize$03141$i = 0;
   }
  } while (0);
  L288 : do if ((label | 0) == 190) if (($br$0$i | 0) == (-1 | 0)) $tsize$03141$i = $ssize$1$i; else {
   $tbase$245$i = $br$0$i;
   $tsize$244$i = $ssize$1$i;
   label = 201;
   break L266;
  } else if ((label | 0) == 191) {
   $605 = 0 - $ssize$129$i | 0;
   do if (($br$030$i | 0) != (-1 | 0) & $ssize$129$i >>> 0 < 2147483647 & $545 >>> 0 > $ssize$129$i >>> 0) {
    $609 = HEAP32[15878] | 0;
    $613 = $547 - $ssize$129$i + $609 & 0 - $609;
    if ($613 >>> 0 < 2147483647) if ((_sbrk($613 | 0) | 0) == (-1 | 0)) {
     _sbrk($605 | 0) | 0;
     $tsize$03141$i = 0;
     break L288;
    } else {
     $ssize$2$i = $613 + $ssize$129$i | 0;
     break;
    } else $ssize$2$i = $ssize$129$i;
   } else $ssize$2$i = $ssize$129$i; while (0);
   if (($br$030$i | 0) == (-1 | 0)) $tsize$03141$i = 0; else {
    $tbase$245$i = $br$030$i;
    $tsize$244$i = $ssize$2$i;
    label = 201;
    break L266;
   }
  } while (0);
  HEAP32[15869] = HEAP32[15869] | 4;
  $tsize$1$i = $tsize$03141$i;
  label = 198;
 } else {
  $tsize$1$i = 0;
  label = 198;
 } while (0);
 if ((label | 0) == 198) if ($550 >>> 0 < 2147483647) {
  $622 = _sbrk($550 | 0) | 0;
  $623 = _sbrk(0) | 0;
  if (($622 | 0) != (-1 | 0) & ($623 | 0) != (-1 | 0) & $622 >>> 0 < $623 >>> 0) {
   $629 = $623 - $622 | 0;
   $631 = $629 >>> 0 > ($nb$0 + 40 | 0) >>> 0;
   if ($631) {
    $tbase$245$i = $622;
    $tsize$244$i = $631 ? $629 : $tsize$1$i;
    label = 201;
   }
  }
 }
 if ((label | 0) == 201) {
  $633 = (HEAP32[15866] | 0) + $tsize$244$i | 0;
  HEAP32[15866] = $633;
  if ($633 >>> 0 > (HEAP32[15867] | 0) >>> 0) HEAP32[15867] = $633;
  $636 = HEAP32[15764] | 0;
  L308 : do if (!$636) {
   $638 = HEAP32[15762] | 0;
   if (($638 | 0) == 0 | $tbase$245$i >>> 0 < $638 >>> 0) HEAP32[15762] = $tbase$245$i;
   HEAP32[15870] = $tbase$245$i;
   HEAP32[15871] = $tsize$244$i;
   HEAP32[15873] = 0;
   HEAP32[15767] = HEAP32[15876];
   HEAP32[15766] = -1;
   $i$02$i$i = 0;
   do {
    $642 = $i$02$i$i << 1;
    $643 = 63072 + ($642 << 2) | 0;
    HEAP32[63072 + ($642 + 3 << 2) >> 2] = $643;
    HEAP32[63072 + ($642 + 2 << 2) >> 2] = $643;
    $i$02$i$i = $i$02$i$i + 1 | 0;
   } while (($i$02$i$i | 0) != 32);
   $649 = $tbase$245$i + 8 | 0;
   if (!($649 & 7)) $655 = 0; else $655 = 0 - $649 & 7;
   $656 = $tsize$244$i + -40 - $655 | 0;
   HEAP32[15764] = $tbase$245$i + $655;
   HEAP32[15761] = $656;
   HEAP32[$tbase$245$i + ($655 + 4) >> 2] = $656 | 1;
   HEAP32[$tbase$245$i + ($tsize$244$i + -36) >> 2] = 40;
   HEAP32[15765] = HEAP32[15880];
  } else {
   $sp$074$i = 63480 | 0;
   while (1) {
    $661 = HEAP32[$sp$074$i >> 2] | 0;
    $662 = $sp$074$i + 4 | 0;
    $663 = HEAP32[$662 >> 2] | 0;
    if (($tbase$245$i | 0) == ($661 + $663 | 0)) {
     label = 213;
     break;
    }
    $667 = HEAP32[$sp$074$i + 8 >> 2] | 0;
    if (!$667) break; else $sp$074$i = $667;
   }
   if ((label | 0) == 213) if (!(HEAP32[$sp$074$i + 12 >> 2] & 8)) if ($636 >>> 0 >= $661 >>> 0 & $636 >>> 0 < $tbase$245$i >>> 0) {
    HEAP32[$662 >> 2] = $663 + $tsize$244$i;
    $677 = (HEAP32[15761] | 0) + $tsize$244$i | 0;
    $679 = $636 + 8 | 0;
    if (!($679 & 7)) $685 = 0; else $685 = 0 - $679 & 7;
    $686 = $677 - $685 | 0;
    HEAP32[15764] = $636 + $685;
    HEAP32[15761] = $686;
    HEAP32[$636 + ($685 + 4) >> 2] = $686 | 1;
    HEAP32[$636 + ($677 + 4) >> 2] = 40;
    HEAP32[15765] = HEAP32[15880];
    break;
   }
   $691 = HEAP32[15762] | 0;
   if ($tbase$245$i >>> 0 < $691 >>> 0) {
    HEAP32[15762] = $tbase$245$i;
    $756 = $tbase$245$i;
   } else $756 = $691;
   $693 = $tbase$245$i + $tsize$244$i | 0;
   $sp$173$i = 63480 | 0;
   while (1) {
    if ((HEAP32[$sp$173$i >> 2] | 0) == ($693 | 0)) {
     label = 223;
     break;
    }
    $697 = HEAP32[$sp$173$i + 8 >> 2] | 0;
    if (!$697) break; else $sp$173$i = $697;
   }
   if ((label | 0) == 223) if (!(HEAP32[$sp$173$i + 12 >> 2] & 8)) {
    HEAP32[$sp$173$i >> 2] = $tbase$245$i;
    $703 = $sp$173$i + 4 | 0;
    HEAP32[$703 >> 2] = (HEAP32[$703 >> 2] | 0) + $tsize$244$i;
    $707 = $tbase$245$i + 8 | 0;
    if (!($707 & 7)) $713 = 0; else $713 = 0 - $707 & 7;
    $715 = $tbase$245$i + ($tsize$244$i + 8) | 0;
    if (!($715 & 7)) $720 = 0; else $720 = 0 - $715 & 7;
    $721 = $tbase$245$i + ($720 + $tsize$244$i) | 0;
    $$sum$i19$i = $713 + $nb$0 | 0;
    $725 = $tbase$245$i + $$sum$i19$i | 0;
    $726 = $721 - ($tbase$245$i + $713) - $nb$0 | 0;
    HEAP32[$tbase$245$i + ($713 + 4) >> 2] = $nb$0 | 3;
    L335 : do if (($721 | 0) == ($636 | 0)) {
     $731 = (HEAP32[15761] | 0) + $726 | 0;
     HEAP32[15761] = $731;
     HEAP32[15764] = $725;
     HEAP32[$tbase$245$i + ($$sum$i19$i + 4) >> 2] = $731 | 1;
    } else {
     if (($721 | 0) == (HEAP32[15763] | 0)) {
      $737 = (HEAP32[15760] | 0) + $726 | 0;
      HEAP32[15760] = $737;
      HEAP32[15763] = $725;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 4) >> 2] = $737 | 1;
      HEAP32[$tbase$245$i + ($737 + $$sum$i19$i) >> 2] = $737;
      break;
     }
     $$sum2$i21$i = $tsize$244$i + 4 | 0;
     $742 = HEAP32[$tbase$245$i + ($$sum2$i21$i + $720) >> 2] | 0;
     if (($742 & 3 | 0) == 1) {
      $745 = $742 & -8;
      $746 = $742 >>> 3;
      L343 : do if ($742 >>> 0 < 256) {
       $749 = HEAP32[$tbase$245$i + (($720 | 8) + $tsize$244$i) >> 2] | 0;
       $751 = HEAP32[$tbase$245$i + ($tsize$244$i + 12 + $720) >> 2] | 0;
       $753 = 63072 + ($746 << 1 << 2) | 0;
       do if (($749 | 0) != ($753 | 0)) {
        if ($749 >>> 0 < $756 >>> 0) _abort();
        if ((HEAP32[$749 + 12 >> 2] | 0) == ($721 | 0)) break;
        _abort();
       } while (0);
       if (($751 | 0) == ($749 | 0)) {
        HEAP32[15758] = HEAP32[15758] & ~(1 << $746);
        break;
       }
       do if (($751 | 0) == ($753 | 0)) $$pre$phi59$i$iZ2D = $751 + 8 | 0; else {
        if ($751 >>> 0 < $756 >>> 0) _abort();
        $767 = $751 + 8 | 0;
        if ((HEAP32[$767 >> 2] | 0) == ($721 | 0)) {
         $$pre$phi59$i$iZ2D = $767;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$749 + 12 >> 2] = $751;
       HEAP32[$$pre$phi59$i$iZ2D >> 2] = $749;
      } else {
       $772 = HEAP32[$tbase$245$i + (($720 | 24) + $tsize$244$i) >> 2] | 0;
       $774 = HEAP32[$tbase$245$i + ($tsize$244$i + 12 + $720) >> 2] | 0;
       do if (($774 | 0) == ($721 | 0)) {
        $$sum67$i$i = $720 | 16;
        $785 = $tbase$245$i + ($$sum2$i21$i + $$sum67$i$i) | 0;
        $786 = HEAP32[$785 >> 2] | 0;
        if (!$786) {
         $788 = $tbase$245$i + ($$sum67$i$i + $tsize$244$i) | 0;
         $789 = HEAP32[$788 >> 2] | 0;
         if (!$789) {
          $R$1$i$i = 0;
          break;
         } else {
          $R$0$i$i = $789;
          $RP$0$i$i = $788;
         }
        } else {
         $R$0$i$i = $786;
         $RP$0$i$i = $785;
        }
        while (1) {
         $791 = $R$0$i$i + 20 | 0;
         $792 = HEAP32[$791 >> 2] | 0;
         if ($792) {
          $R$0$i$i = $792;
          $RP$0$i$i = $791;
          continue;
         }
         $794 = $R$0$i$i + 16 | 0;
         $795 = HEAP32[$794 >> 2] | 0;
         if (!$795) break; else {
          $R$0$i$i = $795;
          $RP$0$i$i = $794;
         }
        }
        if ($RP$0$i$i >>> 0 < $756 >>> 0) _abort(); else {
         HEAP32[$RP$0$i$i >> 2] = 0;
         $R$1$i$i = $R$0$i$i;
         break;
        }
       } else {
        $777 = HEAP32[$tbase$245$i + (($720 | 8) + $tsize$244$i) >> 2] | 0;
        if ($777 >>> 0 < $756 >>> 0) _abort();
        $779 = $777 + 12 | 0;
        if ((HEAP32[$779 >> 2] | 0) != ($721 | 0)) _abort();
        $782 = $774 + 8 | 0;
        if ((HEAP32[$782 >> 2] | 0) == ($721 | 0)) {
         HEAP32[$779 >> 2] = $774;
         HEAP32[$782 >> 2] = $777;
         $R$1$i$i = $774;
         break;
        } else _abort();
       } while (0);
       if (!$772) break;
       $800 = HEAP32[$tbase$245$i + ($tsize$244$i + 28 + $720) >> 2] | 0;
       $801 = 63336 + ($800 << 2) | 0;
       do if (($721 | 0) == (HEAP32[$801 >> 2] | 0)) {
        HEAP32[$801 >> 2] = $R$1$i$i;
        if ($R$1$i$i) break;
        HEAP32[15759] = HEAP32[15759] & ~(1 << $800);
        break L343;
       } else {
        if ($772 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
        $810 = $772 + 16 | 0;
        if ((HEAP32[$810 >> 2] | 0) == ($721 | 0)) HEAP32[$810 >> 2] = $R$1$i$i; else HEAP32[$772 + 20 >> 2] = $R$1$i$i;
        if (!$R$1$i$i) break L343;
       } while (0);
       $815 = HEAP32[15762] | 0;
       if ($R$1$i$i >>> 0 < $815 >>> 0) _abort();
       HEAP32[$R$1$i$i + 24 >> 2] = $772;
       $$sum3132$i$i = $720 | 16;
       $819 = HEAP32[$tbase$245$i + ($$sum3132$i$i + $tsize$244$i) >> 2] | 0;
       do if ($819) if ($819 >>> 0 < $815 >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 16 >> 2] = $819;
        HEAP32[$819 + 24 >> 2] = $R$1$i$i;
        break;
       } while (0);
       $825 = HEAP32[$tbase$245$i + ($$sum2$i21$i + $$sum3132$i$i) >> 2] | 0;
       if (!$825) break;
       if ($825 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 20 >> 2] = $825;
        HEAP32[$825 + 24 >> 2] = $R$1$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $tbase$245$i + (($745 | $720) + $tsize$244$i) | 0;
      $qsize$0$i$i = $745 + $726 | 0;
     } else {
      $oldfirst$0$i$i = $721;
      $qsize$0$i$i = $726;
     }
     $833 = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$833 >> 2] = HEAP32[$833 >> 2] & -2;
     HEAP32[$tbase$245$i + ($$sum$i19$i + 4) >> 2] = $qsize$0$i$i | 1;
     HEAP32[$tbase$245$i + ($qsize$0$i$i + $$sum$i19$i) >> 2] = $qsize$0$i$i;
     $839 = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $841 = $839 << 1;
      $842 = 63072 + ($841 << 2) | 0;
      $843 = HEAP32[15758] | 0;
      $844 = 1 << $839;
      do if (!($843 & $844)) {
       HEAP32[15758] = $843 | $844;
       $$pre$phi$i24$iZ2D = 63072 + ($841 + 2 << 2) | 0;
       $F4$0$i$i = $842;
      } else {
       $848 = 63072 + ($841 + 2 << 2) | 0;
       $849 = HEAP32[$848 >> 2] | 0;
       if ($849 >>> 0 >= (HEAP32[15762] | 0) >>> 0) {
        $$pre$phi$i24$iZ2D = $848;
        $F4$0$i$i = $849;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i24$iZ2D >> 2] = $725;
      HEAP32[$F4$0$i$i + 12 >> 2] = $725;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 8) >> 2] = $F4$0$i$i;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 12) >> 2] = $842;
      break;
     }
     $855 = $qsize$0$i$i >>> 8;
     do if (!$855) $I7$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I7$0$i$i = 31;
       break;
      }
      $860 = ($855 + 1048320 | 0) >>> 16 & 8;
      $861 = $855 << $860;
      $864 = ($861 + 520192 | 0) >>> 16 & 4;
      $866 = $861 << $864;
      $869 = ($866 + 245760 | 0) >>> 16 & 2;
      $874 = 14 - ($864 | $860 | $869) + ($866 << $869 >>> 15) | 0;
      $I7$0$i$i = $qsize$0$i$i >>> ($874 + 7 | 0) & 1 | $874 << 1;
     } while (0);
     $880 = 63336 + ($I7$0$i$i << 2) | 0;
     HEAP32[$tbase$245$i + ($$sum$i19$i + 28) >> 2] = $I7$0$i$i;
     HEAP32[$tbase$245$i + ($$sum$i19$i + 20) >> 2] = 0;
     HEAP32[$tbase$245$i + ($$sum$i19$i + 16) >> 2] = 0;
     $884 = HEAP32[15759] | 0;
     $885 = 1 << $I7$0$i$i;
     if (!($884 & $885)) {
      HEAP32[15759] = $884 | $885;
      HEAP32[$880 >> 2] = $725;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 24) >> 2] = $880;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 12) >> 2] = $725;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 8) >> 2] = $725;
      break;
     }
     $892 = HEAP32[$880 >> 2] | 0;
     if (($I7$0$i$i | 0) == 31) $901 = 0; else $901 = 25 - ($I7$0$i$i >>> 1) | 0;
     L432 : do if ((HEAP32[$892 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) $T$0$lcssa$i26$i = $892; else {
      $K8$053$i$i = $qsize$0$i$i << $901;
      $T$052$i$i = $892;
      while (1) {
       $909 = $T$052$i$i + ($K8$053$i$i >>> 31 << 2) + 16 | 0;
       $904 = HEAP32[$909 >> 2] | 0;
       if (!$904) break;
       if ((HEAP32[$904 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i26$i = $904;
        break L432;
       } else {
        $K8$053$i$i = $K8$053$i$i << 1;
        $T$052$i$i = $904;
       }
      }
      if ($909 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
       HEAP32[$909 >> 2] = $725;
       HEAP32[$tbase$245$i + ($$sum$i19$i + 24) >> 2] = $T$052$i$i;
       HEAP32[$tbase$245$i + ($$sum$i19$i + 12) >> 2] = $725;
       HEAP32[$tbase$245$i + ($$sum$i19$i + 8) >> 2] = $725;
       break L335;
      }
     } while (0);
     $916 = $T$0$lcssa$i26$i + 8 | 0;
     $917 = HEAP32[$916 >> 2] | 0;
     $918 = HEAP32[15762] | 0;
     if ($T$0$lcssa$i26$i >>> 0 >= $918 >>> 0 & $917 >>> 0 >= $918 >>> 0) {
      HEAP32[$917 + 12 >> 2] = $725;
      HEAP32[$916 >> 2] = $725;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 8) >> 2] = $917;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 12) >> 2] = $T$0$lcssa$i26$i;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 24) >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $mem$0 = $tbase$245$i + ($713 | 8) | 0;
    STACKTOP = sp;
    return $mem$0 | 0;
   }
   $sp$0$i$i$i = 63480 | 0;
   while (1) {
    $926 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($926 >>> 0 <= $636 >>> 0) {
     $929 = HEAP32[$sp$0$i$i$i + 4 >> 2] | 0;
     $930 = $926 + $929 | 0;
     if ($930 >>> 0 > $636 >>> 0) break;
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $935 = $926 + ($929 + -39) | 0;
   if (!($935 & 7)) $940 = 0; else $940 = 0 - $935 & 7;
   $941 = $926 + ($929 + -47 + $940) | 0;
   $944 = $941 >>> 0 < ($636 + 16 | 0) >>> 0 ? $636 : $941;
   $945 = $944 + 8 | 0;
   $948 = $tbase$245$i + 8 | 0;
   if (!($948 & 7)) $954 = 0; else $954 = 0 - $948 & 7;
   $955 = $tsize$244$i + -40 - $954 | 0;
   HEAP32[15764] = $tbase$245$i + $954;
   HEAP32[15761] = $955;
   HEAP32[$tbase$245$i + ($954 + 4) >> 2] = $955 | 1;
   HEAP32[$tbase$245$i + ($tsize$244$i + -36) >> 2] = 40;
   HEAP32[15765] = HEAP32[15880];
   HEAP32[$944 + 4 >> 2] = 27;
   HEAP32[$945 + 0 >> 2] = HEAP32[15870];
   HEAP32[$945 + 4 >> 2] = HEAP32[15871];
   HEAP32[$945 + 8 >> 2] = HEAP32[15872];
   HEAP32[$945 + 12 >> 2] = HEAP32[15873];
   HEAP32[15870] = $tbase$245$i;
   HEAP32[15871] = $tsize$244$i;
   HEAP32[15873] = 0;
   HEAP32[15872] = $945;
   $961 = $944 + 28 | 0;
   HEAP32[$961 >> 2] = 7;
   if (($944 + 32 | 0) >>> 0 < $930 >>> 0) {
    $965 = $961;
    do {
     $965$looptemp = $965;
     $965 = $965 + 4 | 0;
     HEAP32[$965 >> 2] = 7;
    } while (($965$looptemp + 8 | 0) >>> 0 < $930 >>> 0);
   }
   if (($944 | 0) != ($636 | 0)) {
    $971 = $944 - $636 | 0;
    $973 = $636 + ($971 + 4) | 0;
    HEAP32[$973 >> 2] = HEAP32[$973 >> 2] & -2;
    HEAP32[$636 + 4 >> 2] = $971 | 1;
    HEAP32[$636 + $971 >> 2] = $971;
    $978 = $971 >>> 3;
    if ($971 >>> 0 < 256) {
     $980 = $978 << 1;
     $981 = 63072 + ($980 << 2) | 0;
     $982 = HEAP32[15758] | 0;
     $983 = 1 << $978;
     do if (!($982 & $983)) {
      HEAP32[15758] = $982 | $983;
      $$pre$phi$i$iZ2D = 63072 + ($980 + 2 << 2) | 0;
      $F$0$i$i = $981;
     } else {
      $987 = 63072 + ($980 + 2 << 2) | 0;
      $988 = HEAP32[$987 >> 2] | 0;
      if ($988 >>> 0 >= (HEAP32[15762] | 0) >>> 0) {
       $$pre$phi$i$iZ2D = $987;
       $F$0$i$i = $988;
       break;
      }
      _abort();
     } while (0);
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $636;
     HEAP32[$F$0$i$i + 12 >> 2] = $636;
     HEAP32[$636 + 8 >> 2] = $F$0$i$i;
     HEAP32[$636 + 12 >> 2] = $981;
     break;
    }
    $994 = $971 >>> 8;
    if (!$994) $I1$0$i$i = 0; else if ($971 >>> 0 > 16777215) $I1$0$i$i = 31; else {
     $999 = ($994 + 1048320 | 0) >>> 16 & 8;
     $1000 = $994 << $999;
     $1003 = ($1000 + 520192 | 0) >>> 16 & 4;
     $1005 = $1000 << $1003;
     $1008 = ($1005 + 245760 | 0) >>> 16 & 2;
     $1013 = 14 - ($1003 | $999 | $1008) + ($1005 << $1008 >>> 15) | 0;
     $I1$0$i$i = $971 >>> ($1013 + 7 | 0) & 1 | $1013 << 1;
    }
    $1019 = 63336 + ($I1$0$i$i << 2) | 0;
    HEAP32[$636 + 28 >> 2] = $I1$0$i$i;
    HEAP32[$636 + 20 >> 2] = 0;
    HEAP32[$636 + 16 >> 2] = 0;
    $1023 = HEAP32[15759] | 0;
    $1024 = 1 << $I1$0$i$i;
    if (!($1023 & $1024)) {
     HEAP32[15759] = $1023 | $1024;
     HEAP32[$1019 >> 2] = $636;
     HEAP32[$636 + 24 >> 2] = $1019;
     HEAP32[$636 + 12 >> 2] = $636;
     HEAP32[$636 + 8 >> 2] = $636;
     break;
    }
    $1031 = HEAP32[$1019 >> 2] | 0;
    if (($I1$0$i$i | 0) == 31) $1040 = 0; else $1040 = 25 - ($I1$0$i$i >>> 1) | 0;
    L483 : do if ((HEAP32[$1031 + 4 >> 2] & -8 | 0) == ($971 | 0)) $T$0$lcssa$i$i = $1031; else {
     $K2$015$i$i = $971 << $1040;
     $T$014$i$i = $1031;
     while (1) {
      $1048 = $T$014$i$i + ($K2$015$i$i >>> 31 << 2) + 16 | 0;
      $1043 = HEAP32[$1048 >> 2] | 0;
      if (!$1043) break;
      if ((HEAP32[$1043 + 4 >> 2] & -8 | 0) == ($971 | 0)) {
       $T$0$lcssa$i$i = $1043;
       break L483;
      } else {
       $K2$015$i$i = $K2$015$i$i << 1;
       $T$014$i$i = $1043;
      }
     }
     if ($1048 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
      HEAP32[$1048 >> 2] = $636;
      HEAP32[$636 + 24 >> 2] = $T$014$i$i;
      HEAP32[$636 + 12 >> 2] = $636;
      HEAP32[$636 + 8 >> 2] = $636;
      break L308;
     }
    } while (0);
    $1055 = $T$0$lcssa$i$i + 8 | 0;
    $1056 = HEAP32[$1055 >> 2] | 0;
    $1057 = HEAP32[15762] | 0;
    if ($T$0$lcssa$i$i >>> 0 >= $1057 >>> 0 & $1056 >>> 0 >= $1057 >>> 0) {
     HEAP32[$1056 + 12 >> 2] = $636;
     HEAP32[$1055 >> 2] = $636;
     HEAP32[$636 + 8 >> 2] = $1056;
     HEAP32[$636 + 12 >> 2] = $T$0$lcssa$i$i;
     HEAP32[$636 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $1064 = HEAP32[15761] | 0;
  if ($1064 >>> 0 > $nb$0 >>> 0) {
   $1066 = $1064 - $nb$0 | 0;
   HEAP32[15761] = $1066;
   $1067 = HEAP32[15764] | 0;
   HEAP32[15764] = $1067 + $nb$0;
   HEAP32[$1067 + ($nb$0 + 4) >> 2] = $1066 | 1;
   HEAP32[$1067 + 4 >> 2] = $nb$0 | 3;
   $mem$0 = $1067 + 8 | 0;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;
 return $mem$0 | 0;
}

function __ZN7Scanner10scanSymbolEP10LexContext($this, $ctx) {
 $this = $this | 0;
 $ctx = $ctx | 0;
 var $$$i$i16 = 0, $$0$i29$i = 0, $$014$i$i$i = 0, $$014$i$i$i5 = 0, $$014$i$i3$i = 0, $$05$i$i$i = 0, $$05$i$i$i4 = 0, $$05$i$i2$i = 0, $$lcssa$i$i = 0, $$lcssa$i$i$i = 0, $$lcssa$i$i$i10 = 0, $$lcssa$i$i$i27 = 0, $$lcssa$i$i22 = 0, $$lcssa$i$i25$i = 0, $$lcssa$i$i8$i = 0, $$lcssa$i11$i = 0, $$lcssa2$i$i$i = 0, $$lcssa2$i$i$i9 = 0, $$lcssa2$i$i7$i = 0, $$ph$i$i = 0, $$size$i$i = 0, $$size$i$i$i = 0, $$size$i$i17 = 0, $$size$i$i20$i = 0, $$size$i7$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $121 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $132 = 0, $133 = 0, $134 = 0, $139 = 0, $145 = 0, $148 = 0, $149 = 0, $152 = 0, $153 = 0, $153$phi = 0, $154 = 0, $155 = 0, $159 = 0, $162 = 0, $17 = 0, $172 = 0, $175 = 0, $178 = 0, $179 = 0, $183 = 0, $184 = 0, $184$phi = 0, $185 = 0, $186 = 0, $190 = 0, $191 = 0, $198 = 0, $2 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $215 = 0, $221 = 0, $223 = 0, $225 = 0, $228 = 0, $230 = 0, $234 = 0, $235 = 0, $239 = 0, $243 = 0, $255 = 0, $26 = 0, $262 = 0, $264 = 0, $266 = 0, $269 = 0, $27 = 0, $271 = 0, $278 = 0, $29 = 0, $293 = 0, $294 = 0, $3 = 0, $30 = 0, $301 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $315 = 0, $316 = 0, $317 = 0, $324 = 0, $326 = 0, $329 = 0, $330 = 0, $334 = 0, $335 = 0, $339 = 0, $340 = 0, $347 = 0, $349 = 0, $351 = 0, $354 = 0, $356 = 0, $361 = 0, $363 = 0, $365 = 0, $37 = 0, $376 = 0, $377 = 0, $38 = 0, $384 = 0, $386 = 0, $388 = 0, $391 = 0, $393 = 0, $4 = 0, $401 = 0, $403 = 0, $405 = 0, $41 = 0, $417 = 0, $426 = 0, $43 = 0, $433 = 0, $435 = 0, $437 = 0, $44 = 0, $440 = 0, $442 = 0, $449 = 0, $46 = 0, $461 = 0, $464 = 0, $465 = 0, $472 = 0, $474 = 0, $476 = 0, $479 = 0, $481 = 0, $486 = 0, $487 = 0, $497 = 0, $52 = 0, $530 = 0, $531 = 0, $551 = 0, $555 = 0, $56 = 0, $561 = 0, $567 = 0, $568 = 0, $569 = 0, $572 = 0, $575 = 0, $581 = 0, $582 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $596 = 0, $597 = 0, $598 = 0, $6 = 0, $605 = 0, $607 = 0, $608 = 0, $612 = 0, $618 = 0, $619 = 0, $62 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $633 = 0, $634 = 0, $635 = 0, $642 = 0, $644 = 0, $645 = 0, $646 = 0, $653 = 0, $654 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $677 = 0, $679 = 0, $68 = 0, $68$phi = 0, $681 = 0, $682 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $696 = 0, $697 = 0, $698 = 0, $70 = 0, $705 = 0, $707 = 0, $711 = 0, $712 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $726 = 0, $727 = 0, $728 = 0, $735 = 0, $737 = 0, $74 = 0, $748 = 0, $749 = 0, $75 = 0, $8 = 0, $82 = 0, $89 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$i$i = 0, $__p$0$i$i$i = 0, $__p$0$i$i24 = 0, $__p$0$i$i27$i = 0, $__p$0$i3$i = 0, $f$i$i$i$i = 0, $i$01$i$i$i = 0, $prev_before$i = 0, $prev_data$i = 0, $prev_tk$i$i = 0, $ret$0$i = 0, $ret$0$i$i = 0, $ret$0$i15 = 0, $ret$0$i31 = 0, $ret$2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $f$i$i$i$i = sp;
 $prev_tk$i$i = sp + 124 | 0;
 $0 = sp + 168 | 0;
 $1 = sp + 148 | 0;
 $2 = sp + 188 | 0;
 $prev_data$i = sp + 112 | 0;
 $prev_before$i = sp + 136 | 0;
 $3 = sp + 200 | 0;
 $4 = HEAP32[$ctx >> 2] | 0;
 $6 = HEAP32[$4 + 12 >> 2] | 0;
 $8 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = HEAP8[$8 + $6 >> 0] | 0;
 $11 = $6 + 1 | 0;
 $13 = HEAP32[$4 + 8 >> 2] | 0;
 if ($11 >>> 0 < $13 >>> 0) $44 = HEAP8[$8 + $11 >> 0] | 0; else $44 = 0;
 $17 = $6 + 2 | 0;
 if ($17 >>> 0 < $13 >>> 0) $46 = HEAP8[$8 + $17 >> 0] | 0; else $46 = 0;
 $21 = $ctx + 36 | 0;
 do if (HEAP8[HEAP32[$21 >> 2] >> 0] | 0) {
  $26 = HEAP32[$ctx + 4 >> 2] | 0;
  $27 = __ZN7Scanner14scanPrevSymbolEP10LexContextc($this, $ctx) | 0;
  if ($27) {
   $29 = HEAP32[$26 >> 2] | 0;
   HEAP32[$3 >> 2] = $27;
   $30 = $29 + 4 | 0;
   $31 = HEAP32[$30 >> 2] | 0;
   if (($31 | 0) == (HEAP32[$29 + 8 >> 2] | 0)) {
    __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($29, $3);
    break;
   }
   if (!$31) $37 = 0; else {
    HEAP32[$31 >> 2] = $27;
    $37 = HEAP32[$30 >> 2] | 0;
   }
   HEAP32[$30 >> 2] = $37 + 4;
  }
 } while (0);
 $38 = $this + 1 | 0;
 if (!(HEAP8[$38 >> 0] | 0)) {
  $41 = __ZN7Scanner13scanPostDerefEP10LexContext($ctx) | 0;
  if ($41) {
   $ret$2 = $41;
   STACKTOP = sp;
   return $ret$2 | 0;
  }
  HEAP8[$prev_tk$i$i >> 0] = $10;
  $43 = $prev_tk$i$i + 1 | 0;
  HEAP8[$43 >> 0] = $44;
  HEAP8[$prev_tk$i$i + 2 >> 0] = $46;
  HEAP8[$prev_tk$i$i + 3 >> 0] = 0;
  $52 = $10 & 255;
  $56 = (HEAPU8[2968 + $52 >> 0] | 0) + (HEAPU8[2968 + ($46 & 255) >> 0] | 0) | 0;
  if ($56 >>> 0 < 51) {
   $59 = HEAP32[2760 + ($56 << 2) >> 2] | 0;
   if ($10 << 24 >> 24 == (HEAP8[$59 >> 0] | 0)) {
    $62 = $59 + 1 | 0;
    $63 = HEAP8[$62 >> 0] | 0;
    if ($44 << 24 >> 24 == 0 ? 1 : $44 << 24 >> 24 != $63 << 24 >> 24) {
     $$lcssa$i$i$i = $44;
     $$lcssa2$i$i$i = $63;
    } else {
     $$014$i$i$i = $43;
     $$05$i$i$i = $62;
     $68 = $59;
     while (1) {
      $$014$i$i$i = $$014$i$i$i + 1 | 0;
      $67 = $68 + 2 | 0;
      $69 = HEAP8[$$014$i$i$i >> 0] | 0;
      $70 = HEAP8[$67 >> 0] | 0;
      if ($69 << 24 >> 24 == 0 ? 1 : $69 << 24 >> 24 != $70 << 24 >> 24) {
       $$lcssa$i$i$i = $69;
       $$lcssa2$i$i$i = $70;
       break;
      } else {
       $68$phi = $$05$i$i$i;
       $$05$i$i$i = $67;
       $68 = $68$phi;
      }
     }
    }
    if ($$lcssa$i$i$i << 24 >> 24 == $$lcssa2$i$i$i << 24 >> 24) {
     $74 = $ctx + 40 | 0;
     $75 = HEAP32[$74 >> 2] | 0;
     HEAP32[$74 >> 2] = $75 + 1;
     HEAP8[(HEAP32[$21 >> 2] | 0) + $75 >> 0] = $10;
     HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$74 >> 2] | 0) >> 0] = 0;
     $82 = HEAP32[$74 >> 2] | 0;
     HEAP32[$74 >> 2] = $82 + 1;
     HEAP8[(HEAP32[$21 >> 2] | 0) + $82 >> 0] = $44;
     HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$74 >> 2] | 0) >> 0] = 0;
     $89 = HEAP32[$74 >> 2] | 0;
     HEAP32[$74 >> 2] = $89 + 1;
     HEAP8[(HEAP32[$21 >> 2] | 0) + $89 >> 0] = $46;
     HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$74 >> 2] | 0) >> 0] = 0;
     $96 = $ctx + 4 | 0;
     $97 = HEAP32[$96 >> 2] | 0;
     $98 = HEAP32[$21 >> 2] | 0;
     $99 = $ctx + 8 | 0;
     HEAP32[$f$i$i$i$i + 0 >> 2] = HEAP32[$99 + 0 >> 2];
     HEAP32[$f$i$i$i$i + 4 >> 2] = HEAP32[$99 + 4 >> 2];
     HEAP32[$f$i$i$i$i + 8 >> 2] = HEAP32[$99 + 8 >> 2];
     HEAP32[$f$i$i$i$i + 12 >> 2] = HEAP32[$99 + 12 >> 2];
     HEAP32[$f$i$i$i$i + 16 >> 2] = HEAP32[$99 + 16 >> 2];
     $100 = $97 + 72 | 0;
     $101 = HEAP32[$100 >> 2] | 0;
     HEAP32[$100 >> 2] = $101 + 72;
     HEAP32[$101 >> 2] = 0;
     HEAP32[$101 + 4 >> 2] = 211;
     $104 = $101 + 28 | 0;
     HEAP32[$104 + 0 >> 2] = HEAP32[$f$i$i$i$i + 0 >> 2];
     HEAP32[$104 + 4 >> 2] = HEAP32[$f$i$i$i$i + 4 >> 2];
     HEAP32[$104 + 8 >> 2] = HEAP32[$f$i$i$i$i + 8 >> 2];
     HEAP32[$104 + 12 >> 2] = HEAP32[$f$i$i$i$i + 12 >> 2];
     HEAP32[$104 + 16 >> 2] = HEAP32[$f$i$i$i$i + 16 >> 2];
     $105 = $101 + 8 | 0;
     $106 = $97 + 48 | 0;
     HEAP32[$105 + 0 >> 2] = HEAP32[$106 + 0 >> 2];
     HEAP32[$105 + 4 >> 2] = HEAP32[$106 + 4 >> 2];
     HEAP32[$105 + 8 >> 2] = HEAP32[$106 + 8 >> 2];
     HEAP32[$105 + 12 >> 2] = HEAP32[$106 + 12 >> 2];
     HEAP32[$105 + 16 >> 2] = HEAP32[$106 + 16 >> 2];
     HEAP32[$101 + 52 >> 2] = $98;
     HEAP32[$101 + 56 >> 2] = 0;
     HEAP32[$101 + 60 >> 2] = 0;
     HEAP32[$101 + 64 >> 2] = 60816;
     $112 = __ZN18ReservedKeywordMap11in_word_setEPKcj($prev_tk$i$i, _strlen($prev_tk$i$i | 0) | 0) | 0;
     if (!$112) {
      $116 = (HEAP32[$96 >> 2] | 0) + 48 | 0;
      HEAP32[$0 + 0 >> 2] = HEAP32[$116 + 0 >> 2];
      HEAP32[$0 + 4 >> 2] = HEAP32[$116 + 4 >> 2];
      HEAP32[$0 + 8 >> 2] = HEAP32[$116 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$116 + 12 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[$116 + 16 >> 2];
     } else {
      $114 = $112 + 4 | 0;
      HEAP32[$0 + 0 >> 2] = HEAP32[$114 + 0 >> 2];
      HEAP32[$0 + 4 >> 2] = HEAP32[$114 + 4 >> 2];
      HEAP32[$0 + 8 >> 2] = HEAP32[$114 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$114 + 12 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[$114 + 16 >> 2];
     };
     HEAP32[$105 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
     HEAP32[$105 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
     HEAP32[$105 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
     HEAP32[$105 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
     HEAP32[$105 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
     $119 = (HEAP32[$21 >> 2] | 0) + (HEAP32[$74 >> 2] | 0) | 0;
     HEAP32[$21 >> 2] = $119;
     HEAP8[$119 >> 0] = 0;
     HEAP32[$74 >> 2] = 0;
     $121 = (HEAP32[$21 >> 2] | 0) + 1 | 0;
     HEAP32[$21 >> 2] = $121;
     HEAP8[$121 >> 0] = 0;
     HEAP32[$ctx + 28 >> 2] = 2;
     $ret$0$i = $101;
    } else label = 23;
   } else label = 23;
  } else label = 23;
  if ((label | 0) == 23) if ($10 << 24 >> 24 == 36 & $44 << 24 >> 24 == 36) {
   $125 = $ctx + 4 | 0;
   $126 = HEAP32[$125 >> 2] | 0;
   $127 = $ctx + 8 | 0;
   HEAP32[$f$i$i$i$i + 0 >> 2] = HEAP32[$127 + 0 >> 2];
   HEAP32[$f$i$i$i$i + 4 >> 2] = HEAP32[$127 + 4 >> 2];
   HEAP32[$f$i$i$i$i + 8 >> 2] = HEAP32[$127 + 8 >> 2];
   HEAP32[$f$i$i$i$i + 12 >> 2] = HEAP32[$127 + 12 >> 2];
   HEAP32[$f$i$i$i$i + 16 >> 2] = HEAP32[$127 + 16 >> 2];
   $128 = $126 + 72 | 0;
   $129 = HEAP32[$128 >> 2] | 0;
   HEAP32[$128 >> 2] = $129 + 72;
   HEAP32[$129 >> 2] = 0;
   HEAP32[$129 + 4 >> 2] = 211;
   $132 = $129 + 28 | 0;
   HEAP32[$132 + 0 >> 2] = HEAP32[$f$i$i$i$i + 0 >> 2];
   HEAP32[$132 + 4 >> 2] = HEAP32[$f$i$i$i$i + 4 >> 2];
   HEAP32[$132 + 8 >> 2] = HEAP32[$f$i$i$i$i + 8 >> 2];
   HEAP32[$132 + 12 >> 2] = HEAP32[$f$i$i$i$i + 12 >> 2];
   HEAP32[$132 + 16 >> 2] = HEAP32[$f$i$i$i$i + 16 >> 2];
   $133 = $129 + 8 | 0;
   $134 = $126 + 48 | 0;
   HEAP32[$133 + 0 >> 2] = HEAP32[$134 + 0 >> 2];
   HEAP32[$133 + 4 >> 2] = HEAP32[$134 + 4 >> 2];
   HEAP32[$133 + 8 >> 2] = HEAP32[$134 + 8 >> 2];
   HEAP32[$133 + 12 >> 2] = HEAP32[$134 + 12 >> 2];
   HEAP32[$133 + 16 >> 2] = HEAP32[$134 + 16 >> 2];
   HEAP32[$129 + 52 >> 2] = 33736;
   HEAP32[$129 + 56 >> 2] = 0;
   HEAP32[$129 + 60 >> 2] = 0;
   HEAP32[$129 + 64 >> 2] = 60816;
   $139 = HEAP32[$125 >> 2] | 0;
   do if ((($46 << 24 >> 24 | 32) + -97 | 0) >>> 0 < 26 | $46 << 24 >> 24 == 95) {
    HEAP32[$1 + 0 >> 2] = HEAP32[10705];
    HEAP32[$1 + 4 >> 2] = HEAP32[10706];
    HEAP32[$1 + 8 >> 2] = HEAP32[10707];
    HEAP32[$1 + 12 >> 2] = HEAP32[10708];
    HEAP32[$1 + 16 >> 2] = HEAP32[10709];
   } else {
    $145 = HEAP32[1268] | 0;
    if ((HEAP8[$145 >> 0] | 0) == 36) {
     $148 = $145 + 1 | 0;
     $149 = HEAP8[$148 >> 0] | 0;
     if ($149 << 24 >> 24 == 36) {
      $$014$i$i3$i = 33737;
      $$05$i$i2$i = $148;
      $153 = $145;
      while (1) {
       $$014$i$i3$i = $$014$i$i3$i + 1 | 0;
       $152 = $153 + 2 | 0;
       $154 = HEAP8[$$014$i$i3$i >> 0] | 0;
       $155 = HEAP8[$152 >> 0] | 0;
       if ($154 << 24 >> 24 == 0 ? 1 : $154 << 24 >> 24 != $155 << 24 >> 24) {
        $$lcssa$i$i8$i = $154;
        $$lcssa2$i$i7$i = $155;
        break;
       } else {
        $153$phi = $$05$i$i2$i;
        $$05$i$i2$i = $152;
        $153 = $153$phi;
       }
      }
     } else {
      $$lcssa$i$i8$i = 36;
      $$lcssa2$i$i7$i = $149;
     }
     if ($$lcssa$i$i8$i << 24 >> 24 == $$lcssa2$i$i7$i << 24 >> 24) {
      HEAP32[$1 + 0 >> 2] = HEAP32[1269];
      HEAP32[$1 + 4 >> 2] = HEAP32[1270];
      HEAP32[$1 + 8 >> 2] = HEAP32[1271];
      HEAP32[$1 + 12 >> 2] = HEAP32[1272];
      HEAP32[$1 + 16 >> 2] = HEAP32[1273];
      break;
     }
    }
    $159 = $139 + 48 | 0;
    HEAP32[$1 + 0 >> 2] = HEAP32[$159 + 0 >> 2];
    HEAP32[$1 + 4 >> 2] = HEAP32[$159 + 4 >> 2];
    HEAP32[$1 + 8 >> 2] = HEAP32[$159 + 8 >> 2];
    HEAP32[$1 + 12 >> 2] = HEAP32[$159 + 12 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[$159 + 16 >> 2];
   } while (0);
   HEAP32[$133 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$133 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$133 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$133 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
   HEAP32[$133 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$ctx + 28 >> 2] = 1;
   $ret$0$i = $129;
  } else $ret$0$i = 0;
  if ($ret$0$i) {
   $ret$2 = $ret$0$i;
   STACKTOP = sp;
   return $ret$2 | 0;
  }
  HEAP8[$prev_tk$i$i >> 0] = $10;
  $162 = $prev_tk$i$i + 1 | 0;
  HEAP8[$162 >> 0] = $44;
  HEAP8[$prev_tk$i$i + 2 >> 0] = 0;
  $172 = (HEAPU8[2496 + $52 >> 0] | 0) + (HEAPU8[($44 & 255) + 2500 >> 0] | 0) | 0;
  if ($172 >>> 0 < 201) {
   $175 = HEAP32[1648 + ($172 << 2) >> 2] | 0;
   if ($10 << 24 >> 24 == (HEAP8[$175 >> 0] | 0)) {
    $178 = $175 + 1 | 0;
    $179 = HEAP8[$178 >> 0] | 0;
    if ($44 << 24 >> 24 == 0 ? 1 : $44 << 24 >> 24 != $179 << 24 >> 24) {
     $$lcssa$i$i$i10 = $44;
     $$lcssa2$i$i$i9 = $179;
    } else {
     $$014$i$i$i5 = $162;
     $$05$i$i$i4 = $178;
     $184 = $175;
     while (1) {
      $$014$i$i$i5 = $$014$i$i$i5 + 1 | 0;
      $183 = $184 + 2 | 0;
      $185 = HEAP8[$$014$i$i$i5 >> 0] | 0;
      $186 = HEAP8[$183 >> 0] | 0;
      if ($185 << 24 >> 24 == 0 ? 1 : $185 << 24 >> 24 != $186 << 24 >> 24) {
       $$lcssa$i$i$i10 = $185;
       $$lcssa2$i$i$i9 = $186;
       break;
      } else {
       $184$phi = $$05$i$i$i4;
       $$05$i$i$i4 = $183;
       $184 = $184$phi;
      }
     }
    }
    if ($$lcssa$i$i$i10 << 24 >> 24 == $$lcssa2$i$i$i9 << 24 >> 24) {
     $190 = $ctx + 40 | 0;
     $191 = HEAP32[$190 >> 2] | 0;
     HEAP32[$190 >> 2] = $191 + 1;
     HEAP8[(HEAP32[$21 >> 2] | 0) + $191 >> 0] = $10;
     HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$190 >> 2] | 0) >> 0] = 0;
     $198 = HEAP32[$190 >> 2] | 0;
     HEAP32[$190 >> 2] = $198 + 1;
     HEAP8[(HEAP32[$21 >> 2] | 0) + $198 >> 0] = $44;
     HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$190 >> 2] | 0) >> 0] = 0;
     $205 = $ctx + 4 | 0;
     $206 = HEAP32[$205 >> 2] | 0;
     $207 = HEAP32[$21 >> 2] | 0;
     $208 = $ctx + 8 | 0;
     HEAP32[$f$i$i$i$i + 0 >> 2] = HEAP32[$208 + 0 >> 2];
     HEAP32[$f$i$i$i$i + 4 >> 2] = HEAP32[$208 + 4 >> 2];
     HEAP32[$f$i$i$i$i + 8 >> 2] = HEAP32[$208 + 8 >> 2];
     HEAP32[$f$i$i$i$i + 12 >> 2] = HEAP32[$208 + 12 >> 2];
     HEAP32[$f$i$i$i$i + 16 >> 2] = HEAP32[$208 + 16 >> 2];
     $209 = $206 + 72 | 0;
     $210 = HEAP32[$209 >> 2] | 0;
     HEAP32[$209 >> 2] = $210 + 72;
     HEAP32[$210 >> 2] = 0;
     HEAP32[$210 + 4 >> 2] = 211;
     $213 = $210 + 28 | 0;
     HEAP32[$213 + 0 >> 2] = HEAP32[$f$i$i$i$i + 0 >> 2];
     HEAP32[$213 + 4 >> 2] = HEAP32[$f$i$i$i$i + 4 >> 2];
     HEAP32[$213 + 8 >> 2] = HEAP32[$f$i$i$i$i + 8 >> 2];
     HEAP32[$213 + 12 >> 2] = HEAP32[$f$i$i$i$i + 12 >> 2];
     HEAP32[$213 + 16 >> 2] = HEAP32[$f$i$i$i$i + 16 >> 2];
     $214 = $210 + 8 | 0;
     $215 = $206 + 48 | 0;
     HEAP32[$214 + 0 >> 2] = HEAP32[$215 + 0 >> 2];
     HEAP32[$214 + 4 >> 2] = HEAP32[$215 + 4 >> 2];
     HEAP32[$214 + 8 >> 2] = HEAP32[$215 + 8 >> 2];
     HEAP32[$214 + 12 >> 2] = HEAP32[$215 + 12 >> 2];
     HEAP32[$214 + 16 >> 2] = HEAP32[$215 + 16 >> 2];
     HEAP32[$210 + 52 >> 2] = $207;
     HEAP32[$210 + 56 >> 2] = 0;
     HEAP32[$210 + 60 >> 2] = 0;
     HEAP32[$210 + 64 >> 2] = 60816;
     $221 = __ZN18ReservedKeywordMap11in_word_setEPKcj($prev_tk$i$i, _strlen($prev_tk$i$i | 0) | 0) | 0;
     if (!$221) {
      $225 = (HEAP32[$205 >> 2] | 0) + 48 | 0;
      HEAP32[$0 + 0 >> 2] = HEAP32[$225 + 0 >> 2];
      HEAP32[$0 + 4 >> 2] = HEAP32[$225 + 4 >> 2];
      HEAP32[$0 + 8 >> 2] = HEAP32[$225 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$225 + 12 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[$225 + 16 >> 2];
     } else {
      $223 = $221 + 4 | 0;
      HEAP32[$0 + 0 >> 2] = HEAP32[$223 + 0 >> 2];
      HEAP32[$0 + 4 >> 2] = HEAP32[$223 + 4 >> 2];
      HEAP32[$0 + 8 >> 2] = HEAP32[$223 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$223 + 12 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[$223 + 16 >> 2];
     };
     HEAP32[$214 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
     HEAP32[$214 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
     HEAP32[$214 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
     HEAP32[$214 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
     HEAP32[$214 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
     $228 = (HEAP32[$21 >> 2] | 0) + (HEAP32[$190 >> 2] | 0) | 0;
     HEAP32[$21 >> 2] = $228;
     HEAP8[$228 >> 0] = 0;
     HEAP32[$190 >> 2] = 0;
     $230 = (HEAP32[$21 >> 2] | 0) + 1 | 0;
     HEAP32[$21 >> 2] = $230;
     HEAP8[$230 >> 0] = 0;
     HEAP32[$ctx + 28 >> 2] = 1;
     $ret$0$i15 = $210;
    } else label = 43;
   } else label = 43;
  } else label = 43;
  L65 : do if ((label | 0) == 43) if ($10 << 24 >> 24 == 47 & $44 << 24 >> 24 == 61) {
   $234 = $ctx + 4 | 0;
   $235 = HEAP32[$234 >> 2] | 0;
   $239 = HEAP32[$235 + 72 >> 2] | 0;
   $243 = HEAP32[((HEAP32[$235 + 68 >> 2] | 0) == ($239 | 0) ? 0 : $239 + -72 | 0) + 52 >> 2] | 0;
   dest = $f$i$i$i$i + 0 | 0;
   stop = dest + 108 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$f$i$i$i$i + 4 >> 2] = $243;
   HEAP32[$f$i$i$i$i + 8 >> 2] = -1;
   HEAP32[$f$i$i$i$i + 44 >> 2] = $243;
   HEAP32[$f$i$i$i$i + 76 >> 2] = -1;
   HEAP32[$f$i$i$i$i + 104 >> 2] = 0;
   HEAP32[$f$i$i$i$i + 108 >> 2] = ~$243;
   HEAP32[$f$i$i$i$i + 100 >> 2] = -1;
   do if (!(+___floatscan($f$i$i$i$i, 1, 1) != 0.0)) {
    $255 = _strlen($243 | 0) | 0;
    if ($255 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
    if ($255 >>> 0 < 11) {
     HEAP8[$1 >> 0] = $255 << 1;
     $__p$0$i$i = $1 + 1 | 0;
    } else {
     $262 = $255 + 16 & -16;
     $$size$i$i = ($262 | 0) == 0 ? 1 : $262;
     $264 = _malloc($$size$i$i) | 0;
     L76 : do if (!$264) {
      while (1) {
       $266 = HEAP32[15470] | 0;
       HEAP32[15470] = $266 + 0;
       if (!$266) break;
       FUNCTION_TABLE_v[$266 & 3]();
       $269 = _malloc($$size$i$i) | 0;
       if ($269) {
        $$lcssa$i$i = $269;
        break L76;
       }
      }
      $271 = ___cxa_allocate_exception(4) | 0;
      HEAP32[$271 >> 2] = 61776;
      ___cxa_throw($271 | 0, 61824, 94);
     } else $$lcssa$i$i = $264; while (0);
     HEAP32[$1 + 8 >> 2] = $$lcssa$i$i;
     HEAP32[$1 >> 2] = $262 | 1;
     HEAP32[$1 + 4 >> 2] = $255;
     $__p$0$i$i = $$lcssa$i$i;
    }
    _memcpy($__p$0$i$i | 0, $243 | 0, $255 | 0) | 0;
    HEAP8[$__p$0$i$i + $255 >> 0] = 0;
    if (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1, 1496) | 0) {
     $278 = HEAP8[$243 >> 0] | 0;
     if ((($278 << 24 >> 24) + -65 | 0) >>> 0 >= 26) if (!($278 << 24 >> 24 == 41 | $278 << 24 >> 24 == 93 | $278 << 24 >> 24 == 125)) {
      if (HEAP8[$1 >> 0] & 1) _free(HEAP32[$1 + 8 >> 2] | 0);
      if ($278 << 24 >> 24 == 36) break; else {
       $ret$0$i15 = 0;
       break L65;
      }
     }
    }
    if (HEAP8[$1 >> 0] & 1) _free(HEAP32[$1 + 8 >> 2] | 0);
   } while (0);
   $293 = $ctx + 40 | 0;
   $294 = HEAP32[$293 >> 2] | 0;
   HEAP32[$293 >> 2] = $294 + 1;
   HEAP8[(HEAP32[$21 >> 2] | 0) + $294 >> 0] = 47;
   HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$293 >> 2] | 0) >> 0] = 0;
   $301 = HEAP32[$293 >> 2] | 0;
   HEAP32[$293 >> 2] = $301 + 1;
   HEAP8[(HEAP32[$21 >> 2] | 0) + $301 >> 0] = 61;
   HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$293 >> 2] | 0) >> 0] = 0;
   $308 = HEAP32[$234 >> 2] | 0;
   $309 = HEAP32[$21 >> 2] | 0;
   $310 = $ctx + 8 | 0;
   HEAP32[$f$i$i$i$i + 0 >> 2] = HEAP32[$310 + 0 >> 2];
   HEAP32[$f$i$i$i$i + 4 >> 2] = HEAP32[$310 + 4 >> 2];
   HEAP32[$f$i$i$i$i + 8 >> 2] = HEAP32[$310 + 8 >> 2];
   HEAP32[$f$i$i$i$i + 12 >> 2] = HEAP32[$310 + 12 >> 2];
   HEAP32[$f$i$i$i$i + 16 >> 2] = HEAP32[$310 + 16 >> 2];
   $311 = $308 + 72 | 0;
   $312 = HEAP32[$311 >> 2] | 0;
   HEAP32[$311 >> 2] = $312 + 72;
   HEAP32[$312 >> 2] = 0;
   HEAP32[$312 + 4 >> 2] = 211;
   $315 = $312 + 28 | 0;
   HEAP32[$315 + 0 >> 2] = HEAP32[$f$i$i$i$i + 0 >> 2];
   HEAP32[$315 + 4 >> 2] = HEAP32[$f$i$i$i$i + 4 >> 2];
   HEAP32[$315 + 8 >> 2] = HEAP32[$f$i$i$i$i + 8 >> 2];
   HEAP32[$315 + 12 >> 2] = HEAP32[$f$i$i$i$i + 12 >> 2];
   HEAP32[$315 + 16 >> 2] = HEAP32[$f$i$i$i$i + 16 >> 2];
   $316 = $312 + 8 | 0;
   $317 = $308 + 48 | 0;
   HEAP32[$316 + 0 >> 2] = HEAP32[$317 + 0 >> 2];
   HEAP32[$316 + 4 >> 2] = HEAP32[$317 + 4 >> 2];
   HEAP32[$316 + 8 >> 2] = HEAP32[$317 + 8 >> 2];
   HEAP32[$316 + 12 >> 2] = HEAP32[$317 + 12 >> 2];
   HEAP32[$316 + 16 >> 2] = HEAP32[$317 + 16 >> 2];
   HEAP32[$312 + 52 >> 2] = $309;
   HEAP32[$312 + 56 >> 2] = 0;
   HEAP32[$312 + 60 >> 2] = 0;
   HEAP32[$312 + 64 >> 2] = 60816;
   $324 = (HEAP32[$21 >> 2] | 0) + (HEAP32[$293 >> 2] | 0) | 0;
   HEAP32[$21 >> 2] = $324;
   HEAP8[$324 >> 0] = 0;
   HEAP32[$293 >> 2] = 0;
   $326 = (HEAP32[$21 >> 2] | 0) + 1 | 0;
   HEAP32[$21 >> 2] = $326;
   HEAP8[$326 >> 0] = 0;
   HEAP32[$ctx + 28 >> 2] = 1;
   $ret$0$i15 = $312;
  } else $ret$0$i15 = 0; while (0);
  if ($ret$0$i15) {
   $ret$2 = $ret$0$i15;
   STACKTOP = sp;
   return $ret$2 | 0;
  }
 }
 $329 = $ctx + 4 | 0;
 $330 = HEAP32[$329 >> 2] | 0;
 $334 = HEAP32[$330 + 72 >> 2] | 0;
 $335 = (HEAP32[$330 + 68 >> 2] | 0) == ($334 | 0);
 $$$i$i16 = $335 ? 0 : $334 + -72 | 0;
 if ($335) $339 = 60816; else $339 = HEAP32[$$$i$i16 + 52 >> 2] | 0;
 $340 = _strlen($339 | 0) | 0;
 if ($340 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($340 >>> 0 < 11) {
  HEAP8[$prev_data$i >> 0] = $340 << 1;
  $__p$0$i$i24 = $prev_data$i + 1 | 0;
 } else {
  $347 = $340 + 16 & -16;
  $$size$i$i17 = ($347 | 0) == 0 ? 1 : $347;
  $349 = _malloc($$size$i$i17) | 0;
  L105 : do if (!$349) {
   while (1) {
    $351 = HEAP32[15470] | 0;
    HEAP32[15470] = $351 + 0;
    if (!$351) break;
    FUNCTION_TABLE_v[$351 & 3]();
    $354 = _malloc($$size$i$i17) | 0;
    if ($354) {
     $$lcssa$i$i22 = $354;
     break L105;
    }
   }
   $356 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$356 >> 2] = 61776;
   ___cxa_throw($356 | 0, 61824, 94);
  } else $$lcssa$i$i22 = $349; while (0);
  HEAP32[$prev_data$i + 8 >> 2] = $$lcssa$i$i22;
  HEAP32[$prev_data$i >> 2] = $347 | 1;
  HEAP32[$prev_data$i + 4 >> 2] = $340;
  $__p$0$i$i24 = $$lcssa$i$i22;
 }
 _memcpy($__p$0$i$i24 | 0, $339 | 0, $340 | 0) | 0;
 HEAP8[$__p$0$i$i24 + $340 >> 0] = 0;
 $361 = HEAP32[$329 >> 2] | 0;
 $363 = HEAP32[$361 + 72 >> 2] | 0;
 $365 = HEAP32[$361 + 68 >> 2] | 0;
 if (((($363 - $365 | 0) / 72 | 0) + -2 | 0) > -1) {
  $376 = HEAP32[(($365 + 144 | 0) >>> 0 > $363 >>> 0 ? 0 : $363 + -144 | 0) + 52 >> 2] | 0;
  $377 = _strlen($376 | 0) | 0;
  if ($377 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($377 >>> 0 < 11) {
   HEAP8[$prev_before$i >> 0] = $377 << 1;
   $__p$0$i3$i = $prev_before$i + 1 | 0;
  } else {
   $384 = $377 + 16 & -16;
   $$size$i7$i = ($384 | 0) == 0 ? 1 : $384;
   $386 = _malloc($$size$i7$i) | 0;
   L120 : do if (!$386) {
    while (1) {
     $388 = HEAP32[15470] | 0;
     HEAP32[15470] = $388 + 0;
     if (!$388) break;
     FUNCTION_TABLE_v[$388 & 3]();
     $391 = _malloc($$size$i7$i) | 0;
     if ($391) {
      $$lcssa$i11$i = $391;
      break L120;
     }
    }
    $393 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$393 >> 2] = 61776;
    ___cxa_throw($393 | 0, 61824, 94);
   } else $$lcssa$i11$i = $386; while (0);
   HEAP32[$prev_before$i + 8 >> 2] = $$lcssa$i11$i;
   HEAP32[$prev_before$i >> 2] = $384 | 1;
   HEAP32[$prev_before$i + 4 >> 2] = $377;
   $__p$0$i3$i = $$lcssa$i11$i;
  }
  _memcpy($__p$0$i3$i | 0, $376 | 0, $377 | 0) | 0;
  HEAP8[$__p$0$i3$i + $377 >> 0] = 0;
 } else {
  HEAP8[$prev_before$i >> 0] = 0;
  HEAP8[$prev_before$i + 1 >> 0] = 0;
 }
 L129 : do if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_before$i, 37696) | 0)) label = 145; else {
  $401 = HEAP32[$329 >> 2] | 0;
  $403 = HEAP32[$401 + 72 >> 2] | 0;
  $405 = HEAP32[$401 + 68 >> 2] | 0;
  do if ((($403 - $405 | 0) / 72 | 0) >>> 0 >= 2) {
   $417 = HEAP32[(($405 | 0) == ($403 | 0) ? 0 : $403 + -72 | 0) + 52 >> 2] | 0;
   if ((HEAP32[(($405 + 144 | 0) >>> 0 > $403 >>> 0 ? 0 : $403 + -144 | 0) + 8 >> 2] | 0) == 151) if (((HEAP8[$417 >> 0] | 32) + -97 | 0) >>> 0 < 26) {
    $426 = _strlen($417 | 0) | 0;
    if ($426 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
    if ($426 >>> 0 < 11) {
     HEAP8[$2 >> 0] = $426 << 1;
     $__p$0$i$i$i = $2 + 1 | 0;
    } else {
     $433 = $426 + 16 & -16;
     $$size$i$i$i = ($433 | 0) == 0 ? 1 : $433;
     $435 = _malloc($$size$i$i$i) | 0;
     L141 : do if (!$435) {
      while (1) {
       $437 = HEAP32[15470] | 0;
       HEAP32[15470] = $437 + 0;
       if (!$437) break;
       FUNCTION_TABLE_v[$437 & 3]();
       $440 = _malloc($$size$i$i$i) | 0;
       if ($440) {
        $$lcssa$i$i$i27 = $440;
        break L141;
       }
      }
      $442 = ___cxa_allocate_exception(4) | 0;
      HEAP32[$442 >> 2] = 61776;
      ___cxa_throw($442 | 0, 61824, 94);
     } else $$lcssa$i$i$i27 = $435; while (0);
     HEAP32[$2 + 8 >> 2] = $$lcssa$i$i$i27;
     HEAP32[$2 >> 2] = $433 | 1;
     HEAP32[$2 + 4 >> 2] = $426;
     $__p$0$i$i$i = $$lcssa$i$i$i27;
    }
    _memcpy($__p$0$i$i$i | 0, $417 | 0, $426 | 0) | 0;
    HEAP8[$__p$0$i$i$i + $426 >> 0] = 0;
    L148 : do if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($2, 36816) | 0)) $$ph$i$i = 0; else {
     $449 = _strlen($417 | 0) | 0;
     if (!$449) $$ph$i$i = 1; else {
      $i$01$i$i$i = 0;
      while (1) {
       switch (HEAP8[$417 + $i$01$i$i$i >> 0] | 0) {
       case 120:
       case 117:
       case 115:
       case 114:
       case 112:
       case 111:
       case 108:
       case 109:
       case 105:
       case 103:
       case 101:
       case 100:
       case 99:
       case 97:
        break;
       default:
        {
         $$ph$i$i = 0;
         break L148;
        }
       }
       $i$01$i$i$i = $i$01$i$i$i + 1 | 0;
       if ($i$01$i$i$i >>> 0 >= $449 >>> 0) {
        $$ph$i$i = 1;
        break L148;
       }
      }
     }
    } while (0);
    if (!(HEAP8[$2 >> 0] & 1)) if ($$ph$i$i) {
     label = 145;
     break L129;
    } else break; else {
     _free(HEAP32[$2 + 8 >> 2] | 0);
     if ($$ph$i$i) {
      label = 145;
      break L129;
     } else break;
    }
   }
  } while (0);
  $461 = ($$$i$i16 | 0) != 0;
  if ($461) $464 = HEAP32[$$$i$i16 + 52 >> 2] | 0; else $464 = 60816;
  $465 = _strlen($464 | 0) | 0;
  if ($465 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($465 >>> 0 < 11) {
   HEAP8[$prev_tk$i$i >> 0] = $465 << 1;
   $__p$0$i$i27$i = $prev_tk$i$i + 1 | 0;
  } else {
   $472 = $465 + 16 & -16;
   $$size$i$i20$i = ($472 | 0) == 0 ? 1 : $472;
   $474 = _malloc($$size$i$i20$i) | 0;
   L167 : do if (!$474) {
    while (1) {
     $476 = HEAP32[15470] | 0;
     HEAP32[15470] = $476 + 0;
     if (!$476) break;
     FUNCTION_TABLE_v[$476 & 3]();
     $479 = _malloc($$size$i$i20$i) | 0;
     if ($479) {
      $$lcssa$i$i25$i = $479;
      break L167;
     }
    }
    $481 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$481 >> 2] = 61776;
    ___cxa_throw($481 | 0, 61824, 94);
   } else $$lcssa$i$i25$i = $474; while (0);
   HEAP32[$prev_tk$i$i + 8 >> 2] = $$lcssa$i$i25$i;
   HEAP32[$prev_tk$i$i >> 2] = $472 | 1;
   HEAP32[$prev_tk$i$i + 4 >> 2] = $465;
   $__p$0$i$i27$i = $$lcssa$i$i25$i;
  }
  _memcpy($__p$0$i$i27$i | 0, $464 | 0, $465 | 0) | 0;
  HEAP8[$__p$0$i$i27$i + $465 >> 0] = 0;
  $486 = $this + 12 | 0;
  $487 = HEAP8[$486 >> 0] | 0;
  if ($487 << 24 >> 24 == 0 & $461) if ((HEAP32[$$$i$i16 + 8 >> 2] | 0) == 211) if ($10 << 24 >> 24 == 41 | $10 << 24 >> 24 == 44 | $10 << 24 >> 24 == 45 | $10 << 24 >> 24 == 61) {
   $497 = 0;
   label = 123;
  } else {
   __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($0, $this + 44 | 0, $prev_tk$i$i);
   if ((HEAP32[$0 >> 2] | 0) == ($this + 48 | 0)) {
    $497 = HEAP8[$486 >> 0] | 0;
    label = 123;
   } else $$0$i29$i = 1;
  } else {
   $497 = 0;
   label = 123;
  } else {
   $497 = $487;
   label = 123;
  }
  L179 : do if ((label | 0) == 123) {
   if ($497 << 24 >> 24 == 0 & $461) if ((HEAP32[$$$i$i16 + 12 >> 2] & -2 | 0) == 30) {
    $$0$i29$i = 1;
    break;
   }
   if (!$461) {
    $$0$i29$i = $10 << 24 >> 24 == 47;
    break;
   }
   if ($10 << 24 >> 24 == 47 ? ((HEAP32[$$$i$i16 + 8 >> 2] | 0) + -172 | 0) >>> 0 > 2 : 0) if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_tk$i$i, 36880) | 0)) $$0$i29$i = 1; else {
    if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_tk$i$i, 36848) | 0)) {
     $$0$i29$i = 1;
     break;
    }
    if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_tk$i$i, 37776) | 0)) {
     $$0$i29$i = 1;
     break;
    }
    if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_tk$i$i, 36816) | 0)) {
     $$0$i29$i = 1;
     break;
    }
    dest = $f$i$i$i$i + 0 | 0;
    stop = dest + 108 | 0;
    do {
     HEAP32[dest >> 2] = 0;
     dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP32[$f$i$i$i$i + 4 >> 2] = $464;
    HEAP32[$f$i$i$i$i + 8 >> 2] = -1;
    HEAP32[$f$i$i$i$i + 44 >> 2] = $464;
    HEAP32[$f$i$i$i$i + 76 >> 2] = -1;
    HEAP32[$f$i$i$i$i + 104 >> 2] = 0;
    HEAP32[$f$i$i$i$i + 108 >> 2] = ~$464;
    HEAP32[$f$i$i$i$i + 100 >> 2] = -1;
    if (+___floatscan($f$i$i$i$i, 1, 1) != 0.0) {
     $$0$i29$i = 0;
     break;
    }
    if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_tk$i$i, 1496) | 0)) {
     $$0$i29$i = 0;
     break;
    }
    __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($1, $this + 68 | 0, $prev_tk$i$i);
    if ((HEAP32[$1 >> 2] | 0) != ($this + 72 | 0)) {
     $$0$i29$i = 1;
     break;
    }
    $530 = HEAP8[$464 >> 0] | 0;
    $531 = $530 << 24 >> 24;
    if (($531 + -65 | 0) >>> 0 < 26) {
     $$0$i29$i = 0;
     break;
    }
    switch ($530 << 24 >> 24) {
    case 37:
    case 64:
    case 36:
    case 41:
    case 93:
    case 125:
    case 95:
     {
      $$0$i29$i = 0;
      break L179;
      break;
     }
    default:
     {}
    }
    do if ((($531 | 32) + -97 | 0) >>> 0 < 26) {
     if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_tk$i$i, 38248) | 0)) break;
     if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_tk$i$i, 38320) | 0)) break;
     if (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_tk$i$i, 1504) | 0) {
      $$0$i29$i = 0;
      break L179;
     }
    } while (0);
    $$0$i29$i = 1;
   } else $$0$i29$i = 0;
  } while (0);
  if (HEAP8[$prev_tk$i$i >> 0] & 1) _free(HEAP32[$prev_tk$i$i + 8 >> 2] | 0);
  if ($$0$i29$i) label = 146; else label = 145;
 } while (0);
 do if ((label | 0) == 145) if ((__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_data$i, 38528) | 0) == 0 & $10 << 24 >> 24 == 47) label = 146; else {
  $608 = HEAP32[$329 >> 2] | 0;
  $612 = HEAP32[$608 + 72 >> 2] | 0;
  if ((HEAP32[$608 + 68 >> 2] | 0) == ($612 | 0)) $749 = 211; else $749 = HEAP32[$612 + -64 >> 2] | 0;
  if (!(HEAP8[$38 >> 0] | 0)) if (!(($749 | 0) == 157 | ($749 | 0) == 187)) if ($10 << 24 >> 24 == 37 | $10 << 24 >> 24 == 36 | $10 << 24 >> 24 == 64) {
   $645 = $ctx + 40 | 0;
   $646 = HEAP32[$645 >> 2] | 0;
   HEAP32[$645 >> 2] = $646 + 1;
   HEAP8[(HEAP32[$21 >> 2] | 0) + $646 >> 0] = $10;
   HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$645 >> 2] | 0) >> 0] = 0;
   $ret$0$i31 = 0;
   break;
  } else if ($10 << 24 >> 24 == 59) {
   $653 = $ctx + 40 | 0;
   $654 = HEAP32[$653 >> 2] | 0;
   HEAP32[$653 >> 2] = $654 + 1;
   HEAP8[(HEAP32[$21 >> 2] | 0) + $654 >> 0] = 59;
   HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$653 >> 2] | 0) >> 0] = 0;
   $661 = HEAP32[$329 >> 2] | 0;
   $662 = HEAP32[$21 >> 2] | 0;
   $663 = $ctx + 8 | 0;
   HEAP32[$f$i$i$i$i + 0 >> 2] = HEAP32[$663 + 0 >> 2];
   HEAP32[$f$i$i$i$i + 4 >> 2] = HEAP32[$663 + 4 >> 2];
   HEAP32[$f$i$i$i$i + 8 >> 2] = HEAP32[$663 + 8 >> 2];
   HEAP32[$f$i$i$i$i + 12 >> 2] = HEAP32[$663 + 12 >> 2];
   HEAP32[$f$i$i$i$i + 16 >> 2] = HEAP32[$663 + 16 >> 2];
   $664 = $661 + 72 | 0;
   $665 = HEAP32[$664 >> 2] | 0;
   HEAP32[$664 >> 2] = $665 + 72;
   HEAP32[$665 >> 2] = 0;
   HEAP32[$665 + 4 >> 2] = 211;
   $668 = $665 + 28 | 0;
   HEAP32[$668 + 0 >> 2] = HEAP32[$f$i$i$i$i + 0 >> 2];
   HEAP32[$668 + 4 >> 2] = HEAP32[$f$i$i$i$i + 4 >> 2];
   HEAP32[$668 + 8 >> 2] = HEAP32[$f$i$i$i$i + 8 >> 2];
   HEAP32[$668 + 12 >> 2] = HEAP32[$f$i$i$i$i + 12 >> 2];
   HEAP32[$668 + 16 >> 2] = HEAP32[$f$i$i$i$i + 16 >> 2];
   $669 = $665 + 8 | 0;
   $670 = $661 + 48 | 0;
   HEAP32[$669 + 0 >> 2] = HEAP32[$670 + 0 >> 2];
   HEAP32[$669 + 4 >> 2] = HEAP32[$670 + 4 >> 2];
   HEAP32[$669 + 8 >> 2] = HEAP32[$670 + 8 >> 2];
   HEAP32[$669 + 12 >> 2] = HEAP32[$670 + 12 >> 2];
   HEAP32[$669 + 16 >> 2] = HEAP32[$670 + 16 >> 2];
   HEAP32[$665 + 52 >> 2] = $662;
   HEAP32[$665 + 56 >> 2] = 0;
   HEAP32[$665 + 60 >> 2] = 0;
   HEAP32[$665 + 64 >> 2] = 60816;
   $677 = (HEAP32[$21 >> 2] | 0) + (HEAP32[$653 >> 2] | 0) | 0;
   HEAP32[$21 >> 2] = $677;
   HEAP8[$677 >> 0] = 0;
   HEAP32[$653 >> 2] = 0;
   $679 = (HEAP32[$21 >> 2] | 0) + 1 | 0;
   HEAP32[$21 >> 2] = $679;
   HEAP8[$679 >> 0] = 0;
   $ret$0$i31 = $665;
   break;
  } else {
   if (__ZN7Scanner11isPrototypeEP10LexContext($ctx) | 0) {
    $681 = $ctx + 40 | 0;
    $682 = HEAP32[$681 >> 2] | 0;
    HEAP32[$681 >> 2] = $682 + 1;
    HEAP8[(HEAP32[$21 >> 2] | 0) + $682 >> 0] = $10;
    HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$681 >> 2] | 0) >> 0] = 0;
    $689 = HEAP32[$329 >> 2] | 0;
    $690 = HEAP32[$21 >> 2] | 0;
    $691 = $ctx + 8 | 0;
    HEAP32[$f$i$i$i$i + 0 >> 2] = HEAP32[$691 + 0 >> 2];
    HEAP32[$f$i$i$i$i + 4 >> 2] = HEAP32[$691 + 4 >> 2];
    HEAP32[$f$i$i$i$i + 8 >> 2] = HEAP32[$691 + 8 >> 2];
    HEAP32[$f$i$i$i$i + 12 >> 2] = HEAP32[$691 + 12 >> 2];
    HEAP32[$f$i$i$i$i + 16 >> 2] = HEAP32[$691 + 16 >> 2];
    $692 = $689 + 72 | 0;
    $693 = HEAP32[$692 >> 2] | 0;
    HEAP32[$692 >> 2] = $693 + 72;
    HEAP32[$693 >> 2] = 0;
    HEAP32[$693 + 4 >> 2] = 211;
    $696 = $693 + 28 | 0;
    HEAP32[$696 + 0 >> 2] = HEAP32[$f$i$i$i$i + 0 >> 2];
    HEAP32[$696 + 4 >> 2] = HEAP32[$f$i$i$i$i + 4 >> 2];
    HEAP32[$696 + 8 >> 2] = HEAP32[$f$i$i$i$i + 8 >> 2];
    HEAP32[$696 + 12 >> 2] = HEAP32[$f$i$i$i$i + 12 >> 2];
    HEAP32[$696 + 16 >> 2] = HEAP32[$f$i$i$i$i + 16 >> 2];
    $697 = $693 + 8 | 0;
    $698 = $689 + 48 | 0;
    HEAP32[$697 + 0 >> 2] = HEAP32[$698 + 0 >> 2];
    HEAP32[$697 + 4 >> 2] = HEAP32[$698 + 4 >> 2];
    HEAP32[$697 + 8 >> 2] = HEAP32[$698 + 8 >> 2];
    HEAP32[$697 + 12 >> 2] = HEAP32[$698 + 12 >> 2];
    HEAP32[$697 + 16 >> 2] = HEAP32[$698 + 16 >> 2];
    HEAP32[$693 + 52 >> 2] = $690;
    HEAP32[$693 + 56 >> 2] = 0;
    HEAP32[$693 + 60 >> 2] = 0;
    HEAP32[$693 + 64 >> 2] = 60816;
    $705 = (HEAP32[$21 >> 2] | 0) + (HEAP32[$681 >> 2] | 0) | 0;
    HEAP32[$21 >> 2] = $705;
    HEAP8[$705 >> 0] = 0;
    HEAP32[$681 >> 2] = 0;
    $707 = (HEAP32[$21 >> 2] | 0) + 1 | 0;
    HEAP32[$21 >> 2] = $707;
    HEAP8[$707 >> 0] = 0;
    HEAP8[$this + 2 >> 0] = 1;
    HEAP8[$this + 10 >> 0] = 1;
    $ret$0$i31 = $693;
    break;
   }
   if ($10 << 24 >> 24 == 10) {
    $ret$0$i31 = 0;
    break;
   }
   $711 = $ctx + 40 | 0;
   $712 = HEAP32[$711 >> 2] | 0;
   HEAP32[$711 >> 2] = $712 + 1;
   HEAP8[(HEAP32[$21 >> 2] | 0) + $712 >> 0] = $10;
   HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$711 >> 2] | 0) >> 0] = 0;
   $719 = HEAP32[$329 >> 2] | 0;
   $720 = HEAP32[$21 >> 2] | 0;
   $721 = $ctx + 8 | 0;
   HEAP32[$f$i$i$i$i + 0 >> 2] = HEAP32[$721 + 0 >> 2];
   HEAP32[$f$i$i$i$i + 4 >> 2] = HEAP32[$721 + 4 >> 2];
   HEAP32[$f$i$i$i$i + 8 >> 2] = HEAP32[$721 + 8 >> 2];
   HEAP32[$f$i$i$i$i + 12 >> 2] = HEAP32[$721 + 12 >> 2];
   HEAP32[$f$i$i$i$i + 16 >> 2] = HEAP32[$721 + 16 >> 2];
   $722 = $719 + 72 | 0;
   $723 = HEAP32[$722 >> 2] | 0;
   HEAP32[$722 >> 2] = $723 + 72;
   HEAP32[$723 >> 2] = 0;
   HEAP32[$723 + 4 >> 2] = 211;
   $726 = $723 + 28 | 0;
   HEAP32[$726 + 0 >> 2] = HEAP32[$f$i$i$i$i + 0 >> 2];
   HEAP32[$726 + 4 >> 2] = HEAP32[$f$i$i$i$i + 4 >> 2];
   HEAP32[$726 + 8 >> 2] = HEAP32[$f$i$i$i$i + 8 >> 2];
   HEAP32[$726 + 12 >> 2] = HEAP32[$f$i$i$i$i + 12 >> 2];
   HEAP32[$726 + 16 >> 2] = HEAP32[$f$i$i$i$i + 16 >> 2];
   $727 = $723 + 8 | 0;
   $728 = $719 + 48 | 0;
   HEAP32[$727 + 0 >> 2] = HEAP32[$728 + 0 >> 2];
   HEAP32[$727 + 4 >> 2] = HEAP32[$728 + 4 >> 2];
   HEAP32[$727 + 8 >> 2] = HEAP32[$728 + 8 >> 2];
   HEAP32[$727 + 12 >> 2] = HEAP32[$728 + 12 >> 2];
   HEAP32[$727 + 16 >> 2] = HEAP32[$728 + 16 >> 2];
   HEAP32[$723 + 52 >> 2] = $720;
   HEAP32[$723 + 56 >> 2] = 0;
   HEAP32[$723 + 60 >> 2] = 0;
   HEAP32[$723 + 64 >> 2] = 60816;
   $735 = (HEAP32[$21 >> 2] | 0) + (HEAP32[$711 >> 2] | 0) | 0;
   HEAP32[$21 >> 2] = $735;
   HEAP8[$735 >> 0] = 0;
   HEAP32[$711 >> 2] = 0;
   $737 = (HEAP32[$21 >> 2] | 0) + 1 | 0;
   HEAP32[$21 >> 2] = $737;
   HEAP8[$737 >> 0] = 0;
   $ret$0$i31 = $723;
   break;
  }
  $618 = $ctx + 40 | 0;
  $619 = HEAP32[$618 >> 2] | 0;
  HEAP32[$618 >> 2] = $619 + 1;
  HEAP8[(HEAP32[$21 >> 2] | 0) + $619 >> 0] = $10;
  HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$618 >> 2] | 0) >> 0] = 0;
  $626 = HEAP32[$329 >> 2] | 0;
  $627 = HEAP32[$21 >> 2] | 0;
  $628 = $ctx + 8 | 0;
  HEAP32[$f$i$i$i$i + 0 >> 2] = HEAP32[$628 + 0 >> 2];
  HEAP32[$f$i$i$i$i + 4 >> 2] = HEAP32[$628 + 4 >> 2];
  HEAP32[$f$i$i$i$i + 8 >> 2] = HEAP32[$628 + 8 >> 2];
  HEAP32[$f$i$i$i$i + 12 >> 2] = HEAP32[$628 + 12 >> 2];
  HEAP32[$f$i$i$i$i + 16 >> 2] = HEAP32[$628 + 16 >> 2];
  $629 = $626 + 72 | 0;
  $630 = HEAP32[$629 >> 2] | 0;
  HEAP32[$629 >> 2] = $630 + 72;
  HEAP32[$630 >> 2] = 0;
  HEAP32[$630 + 4 >> 2] = 211;
  $633 = $630 + 28 | 0;
  HEAP32[$633 + 0 >> 2] = HEAP32[$f$i$i$i$i + 0 >> 2];
  HEAP32[$633 + 4 >> 2] = HEAP32[$f$i$i$i$i + 4 >> 2];
  HEAP32[$633 + 8 >> 2] = HEAP32[$f$i$i$i$i + 8 >> 2];
  HEAP32[$633 + 12 >> 2] = HEAP32[$f$i$i$i$i + 12 >> 2];
  HEAP32[$633 + 16 >> 2] = HEAP32[$f$i$i$i$i + 16 >> 2];
  $634 = $630 + 8 | 0;
  $635 = $626 + 48 | 0;
  HEAP32[$634 + 0 >> 2] = HEAP32[$635 + 0 >> 2];
  HEAP32[$634 + 4 >> 2] = HEAP32[$635 + 4 >> 2];
  HEAP32[$634 + 8 >> 2] = HEAP32[$635 + 8 >> 2];
  HEAP32[$634 + 12 >> 2] = HEAP32[$635 + 12 >> 2];
  HEAP32[$634 + 16 >> 2] = HEAP32[$635 + 16 >> 2];
  HEAP32[$630 + 52 >> 2] = $627;
  HEAP32[$630 + 56 >> 2] = 0;
  HEAP32[$630 + 60 >> 2] = 0;
  HEAP32[$630 + 64 >> 2] = 60816;
  _memmove($634 | 0, 43500, 20) | 0;
  $642 = (HEAP32[$21 >> 2] | 0) + (HEAP32[$618 >> 2] | 0) | 0;
  HEAP32[$21 >> 2] = $642;
  HEAP8[$642 >> 0] = 0;
  HEAP32[$618 >> 2] = 0;
  $644 = (HEAP32[$21 >> 2] | 0) + 1 | 0;
  HEAP32[$21 >> 2] = $644;
  HEAP8[$644 >> 0] = 0;
  $ret$0$i31 = $630;
 } while (0);
 if ((label | 0) == 146) {
  $551 = HEAP32[$329 >> 2] | 0;
  $555 = HEAP32[$551 + 72 >> 2] | 0;
  if ((HEAP32[$551 + 68 >> 2] | 0) == ($555 | 0)) $748 = 211; else $748 = HEAP32[$555 + -64 >> 2] | 0;
  if (!(HEAP8[$38 >> 0] | 0)) if (($748 | 0) == 157 | ($748 | 0) == 187) label = 156; else {
   $561 = HEAP32[$ctx >> 2] | 0;
   $567 = HEAP8[(HEAP32[$561 + 4 >> 2] | 0) + (HEAP32[$561 + 12 >> 2] | 0) >> 0] | 0;
   $568 = $567 << 24 >> 24;
   if (($568 | 0) == 123) {
    $569 = $this + 16 | 0;
    HEAP32[$569 >> 2] = (HEAP32[$569 >> 2] | 0) + 1;
    $ret$0$i$i = 125;
   } else if (($568 | 0) == 40) {
    $572 = $this + 24 | 0;
    HEAP32[$572 >> 2] = (HEAP32[$572 >> 2] | 0) + 1;
    $ret$0$i$i = 41;
   } else if (($568 | 0) == 91) {
    $575 = $this + 20 | 0;
    HEAP32[$575 >> 2] = (HEAP32[$575 >> 2] | 0) + 1;
    $ret$0$i$i = 93;
   } else if (($568 | 0) == 60) $ret$0$i$i = 62; else $ret$0$i$i = $567;
   HEAP8[$this + 12 >> 0] = $ret$0$i$i;
   HEAP8[$38 >> 0] = 1;
   HEAP8[$this + 10 >> 0] = 1;
  } else label = 156;
  if ((label | 0) == 156) HEAP8[$this + 12 >> 0] = 0;
  $581 = $ctx + 40 | 0;
  $582 = HEAP32[$581 >> 2] | 0;
  HEAP32[$581 >> 2] = $582 + 1;
  HEAP8[(HEAP32[$21 >> 2] | 0) + $582 >> 0] = $10;
  HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$581 >> 2] | 0) >> 0] = 0;
  $589 = HEAP32[$329 >> 2] | 0;
  $590 = HEAP32[$21 >> 2] | 0;
  $591 = $ctx + 8 | 0;
  HEAP32[$f$i$i$i$i + 0 >> 2] = HEAP32[$591 + 0 >> 2];
  HEAP32[$f$i$i$i$i + 4 >> 2] = HEAP32[$591 + 4 >> 2];
  HEAP32[$f$i$i$i$i + 8 >> 2] = HEAP32[$591 + 8 >> 2];
  HEAP32[$f$i$i$i$i + 12 >> 2] = HEAP32[$591 + 12 >> 2];
  HEAP32[$f$i$i$i$i + 16 >> 2] = HEAP32[$591 + 16 >> 2];
  $592 = $589 + 72 | 0;
  $593 = HEAP32[$592 >> 2] | 0;
  HEAP32[$592 >> 2] = $593 + 72;
  HEAP32[$593 >> 2] = 0;
  HEAP32[$593 + 4 >> 2] = 211;
  $596 = $593 + 28 | 0;
  HEAP32[$596 + 0 >> 2] = HEAP32[$f$i$i$i$i + 0 >> 2];
  HEAP32[$596 + 4 >> 2] = HEAP32[$f$i$i$i$i + 4 >> 2];
  HEAP32[$596 + 8 >> 2] = HEAP32[$f$i$i$i$i + 8 >> 2];
  HEAP32[$596 + 12 >> 2] = HEAP32[$f$i$i$i$i + 12 >> 2];
  HEAP32[$596 + 16 >> 2] = HEAP32[$f$i$i$i$i + 16 >> 2];
  $597 = $593 + 8 | 0;
  $598 = $589 + 48 | 0;
  HEAP32[$597 + 0 >> 2] = HEAP32[$598 + 0 >> 2];
  HEAP32[$597 + 4 >> 2] = HEAP32[$598 + 4 >> 2];
  HEAP32[$597 + 8 >> 2] = HEAP32[$598 + 8 >> 2];
  HEAP32[$597 + 12 >> 2] = HEAP32[$598 + 12 >> 2];
  HEAP32[$597 + 16 >> 2] = HEAP32[$598 + 16 >> 2];
  HEAP32[$593 + 52 >> 2] = $590;
  HEAP32[$593 + 56 >> 2] = 0;
  HEAP32[$593 + 60 >> 2] = 0;
  HEAP32[$593 + 64 >> 2] = 60816;
  _memmove($597 | 0, 43500, 20) | 0;
  $605 = (HEAP32[$21 >> 2] | 0) + (HEAP32[$581 >> 2] | 0) | 0;
  HEAP32[$21 >> 2] = $605;
  HEAP8[$605 >> 0] = 0;
  HEAP32[$581 >> 2] = 0;
  $607 = (HEAP32[$21 >> 2] | 0) + 1 | 0;
  HEAP32[$21 >> 2] = $607;
  HEAP8[$607 >> 0] = 0;
  $ret$0$i31 = $593;
 }
 if (HEAP8[$prev_before$i >> 0] & 1) _free(HEAP32[$prev_before$i + 8 >> 2] | 0);
 if (!(HEAP8[$prev_data$i >> 0] & 1)) {
  $ret$2 = $ret$0$i31;
  STACKTOP = sp;
  return $ret$2 | 0;
 }
 _free(HEAP32[$prev_data$i + 8 >> 2] | 0);
 $ret$2 = $ret$0$i31;
 STACKTOP = sp;
 return $ret$2 | 0;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e$0, $__intl, $__loc$0$0$val, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__intl = $__intl | 0;
 $__loc$0$0$val = $__loc$0$0$val | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i105 = 0, $$0$i$i112 = 0, $$0$i$i121 = 0, $$0$i$i131 = 0, $$0$i$i148 = 0, $$0$i$i34 = 0, $$0$i$i37 = 0, $$0$i$i50 = 0, $$0$i$i56 = 0, $$0$i$i59 = 0, $$0$i$i66 = 0, $$0$i$i85 = 0, $$0$i$i88 = 0, $$lcssa4 = 0, $$pre = 0, $$pre244 = 0, $$pre247 = 0, $0 = 0, $1 = 0, $10 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $13 = 0, $133 = 0, $134 = 0, $14 = 0, $149 = 0, $151 = 0, $168 = 0, $169 = 0, $170 = 0, $185 = 0, $197 = 0, $198 = 0, $2 = 0, $210 = 0, $212 = 0, $229 = 0, $230 = 0, $231 = 0, $243 = 0, $244 = 0, $246 = 0, $248 = 0, $252 = 0, $253 = 0, $255 = 0, $257 = 0, $262 = 0, $264 = 0, $269 = 0, $274 = 0, $279 = 0, $280 = 0, $282 = 0, $285 = 0, $289 = 0, $297 = 0, $3 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $312 = 0, $319 = 0, $323 = 0, $331 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $346 = 0, $353 = 0, $354 = 0, $356 = 0, $36 = 0, $363 = 0, $371 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $381 = 0, $386 = 0, $393 = 0, $4 = 0, $40 = 0, $401 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $419 = 0, $426 = 0, $434 = 0, $435 = 0, $437 = 0, $445 = 0, $447 = 0, $449 = 0, $450 = 0, $459 = 0, $460 = 0, $462 = 0, $467 = 0, $468 = 0, $469 = 0, $472 = 0, $474 = 0, $475 = 0, $476 = 0, $478 = 0, $480 = 0, $482 = 0, $488 = 0, $495 = 0, $496 = 0, $498 = 0, $499 = 0, $5 = 0, $511 = 0, $512 = 0, $524 = 0, $526 = 0, $539 = 0, $540 = 0, $541 = 0, $550 = 0, $558 = 0, $559 = 0, $563 = 0, $575 = 0, $576 = 0, $588 = 0, $59 = 0, $590 = 0, $6 = 0, $60 = 0, $600 = 0, $607 = 0, $611 = 0, $613 = 0, $620 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $643 = 0, $644 = 0, $646 = 0, $658 = 0, $659 = 0, $671 = 0, $673 = 0, $687 = 0, $688 = 0, $689 = 0, $697 = 0, $7 = 0, $709 = 0, $710 = 0, $722 = 0, $724 = 0, $746 = 0, $748 = 0, $759 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $792 = 0, $793 = 0, $8 = 0, $805 = 0, $806 = 0, $818 = 0, $82 = 0, $820 = 0, $836 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $852 = 0, $854 = 0, $86 = 0, $880 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $9 = 0, $__dp$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$12 = 0, $__e$sroa$0$13 = 0, $__e$sroa$0$15 = 0, $__e$sroa$0$16 = 0, $__e$sroa$0$18 = 0, $__e$sroa$0$19 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$20 = 0, $__e$sroa$0$21 = 0, $__e$sroa$0$22 = 0, $__e$sroa$0$24 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$8 = 0, $__e$sroa$0$9 = 0, $__et = 0, $__fd$0 = 0, $__fd$1 = 0, $__fd$2 = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__p$0233 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0235 = 0, $__trailing_sign$1 = 0, $__ts$0 = 0, $storemerge$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 $0 = sp + 76 | 0;
 $1 = sp + 112 | 0;
 $2 = sp;
 $3 = sp + 176 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 28 | 0;
 $7 = sp + 124 | 0;
 $8 = sp + 148 | 0;
 $9 = sp + 164 | 0;
 $10 = sp + 188 | 0;
 $__gbuf = sp + 192 | 0;
 $__gb = sp + 80 | 0;
 $__gn = sp + 88 | 0;
 $__ge = sp + 104 | 0;
 $__pat = sp + 108 | 0;
 $__grp = sp + 92 | 0;
 $__sym = sp + 40 | 0;
 $__psn = sp + 136 | 0;
 $__nsn = sp + 12 | 0;
 $__spaces = sp + 52 | 0;
 $__et = sp + 160 | 0;
 HEAP32[$10 >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 $11 = $__gb + 4 | 0;
 HEAP32[$11 >> 2] = 114;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__psn + 0 >> 2] = 0;
 HEAP32[$__psn + 4 >> 2] = 0;
 HEAP32[$__psn + 8 >> 2] = 0;
 HEAP32[$__nsn + 0 >> 2] = 0;
 HEAP32[$__nsn + 4 >> 2] = 0;
 HEAP32[$__nsn + 8 >> 2] = 0;
 HEAP32[$__spaces + 0 >> 2] = 0;
 HEAP32[$__spaces + 4 >> 2] = 0;
 HEAP32[$__spaces + 8 >> 2] = 0;
 if ($__intl) {
  $13 = __ZNSt3__16locale2id5__getEv(50288) | 0;
  $14 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$__loc$0$0$val + 8 >> 2] | 0, HEAP32[$__loc$0$0$val + 12 >> 2] | 0, $13) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] & 63]($0, $14);
  HEAP32[$__pat >> 2] = HEAP32[$0 >> 2];
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$14 >> 2] | 0) + 32 >> 2] & 63]($1, $14);
  if (!(HEAP8[$__nsn >> 0] & 1)) {
   HEAP8[$__nsn + 1 >> 0] = 0;
   HEAP8[$__nsn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] >> 0] = 0;
   HEAP32[$__nsn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn);
  HEAP32[$__nsn + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 0 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$14 >> 2] | 0) + 28 >> 2] & 63]($2, $14);
  if (!(HEAP8[$__psn >> 0] & 1)) {
   HEAP8[$__psn + 1 >> 0] = 0;
   HEAP8[$__psn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] >> 0] = 0;
   HEAP32[$__psn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn);
  HEAP32[$__psn + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 0 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  $36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] & 127]($14) | 0;
  $40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] & 127]($14) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] & 63]($3, $14);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$3 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 0 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] & 63]($4, $14);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  $__dp$0 = $36;
  $__ts$0 = $40;
  $storemerge$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 127]($14) | 0;
 } else {
  $59 = __ZNSt3__16locale2id5__getEv(50224) | 0;
  $60 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$__loc$0$0$val + 8 >> 2] | 0, HEAP32[$__loc$0$0$val + 12 >> 2] | 0, $59) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$60 >> 2] | 0) + 44 >> 2] & 63]($5, $60);
  HEAP32[$__pat >> 2] = HEAP32[$5 >> 2];
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] & 63]($6, $60);
  if (!(HEAP8[$__nsn >> 0] & 1)) {
   HEAP8[$__nsn + 1 >> 0] = 0;
   HEAP8[$__nsn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] >> 0] = 0;
   HEAP32[$__nsn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn);
  HEAP32[$__nsn + 0 >> 2] = HEAP32[$6 + 0 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$6 + 0 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$6 + 8 >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$60 >> 2] | 0) + 28 >> 2] & 63]($7, $60);
  if (!(HEAP8[$__psn >> 0] & 1)) {
   HEAP8[$__psn + 1 >> 0] = 0;
   HEAP8[$__psn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] >> 0] = 0;
   HEAP32[$__psn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn);
  HEAP32[$__psn + 0 >> 2] = HEAP32[$7 + 0 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  HEAP32[$7 + 0 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$7 + 8 >> 2] = 0;
  $82 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 12 >> 2] & 127]($60) | 0;
  $86 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 16 >> 2] & 127]($60) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$60 >> 2] | 0) + 20 >> 2] & 63]($8, $60);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$8 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  HEAP32[$8 + 0 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$8 + 8 >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$60 >> 2] | 0) + 24 >> 2] & 63]($9, $60);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$9 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  HEAP32[$9 + 0 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  HEAP32[$9 + 8 >> 2] = 0;
  $__dp$0 = $82;
  $__ts$0 = $86;
  $storemerge$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] & 127]($60) | 0;
 }
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $106 = $__ct + 8 | 0;
 $107 = $__nsn + 4 | 0;
 $108 = $__nsn + 8 | 0;
 $109 = $__psn + 4 | 0;
 $110 = $__psn + 8 | 0;
 $112 = ($__flags & 512 | 0) != 0;
 $113 = $__sym + 1 | 0;
 $114 = $__sym + 8 | 0;
 $115 = $__sym + 4 | 0;
 $116 = $__spaces + 1 | 0;
 $117 = $__spaces + 8 | 0;
 $118 = $__spaces + 4 | 0;
 $119 = $__pat + 3 | 0;
 $120 = $__grp + 4 | 0;
 $883 = $__gbuf;
 $__e$sroa$0$0 = $__e$0;
 $__fd$0 = $storemerge$i;
 $__p$0233 = 0;
 $__trailing_sign$0235 = 0;
 L37 : while (1) {
  $121 = HEAP32[$__b >> 2] | 0;
  do if (!$121) $134 = 0; else if ((HEAP32[$121 + 12 >> 2] | 0) == (HEAP32[$121 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$121 >> 2] | 0) + 36 >> 2] & 127]($121) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 0;
   break;
  } else {
   $134 = HEAP32[$__b >> 2] | 0;
   break;
  } else $134 = $121; while (0);
  $133 = ($134 | 0) == 0;
  do if (!$__e$sroa$0$0) label = 38; else {
   if ((HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0) != (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) if ($133) {
    $__e$sroa$0$2 = $__e$sroa$0$0;
    break;
   } else {
    $854 = $883;
    $__e$sroa$0$21 = $__e$sroa$0$0;
    $__trailing_sign$0$lcssa = $__trailing_sign$0235;
    label = 278;
    break L37;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$0) | 0) == -1) label = 38; else if ($133) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $854 = $883;
    $__e$sroa$0$21 = $__e$sroa$0$0;
    $__trailing_sign$0$lcssa = $__trailing_sign$0235;
    label = 278;
    break L37;
   }
  } while (0);
  if ((label | 0) == 38) {
   label = 0;
   if ($133) {
    $854 = $883;
    $__e$sroa$0$21 = 0;
    $__trailing_sign$0$lcssa = $__trailing_sign$0235;
    label = 278;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  L55 : do switch (HEAP8[$__pat + $__p$0233 >> 0] | 0) {
  case 1:
   {
    if (($__p$0233 | 0) == 3) {
     $854 = $883;
     $__e$sroa$0$21 = $__e$sroa$0$2;
     $__trailing_sign$0$lcssa = $__trailing_sign$0235;
     label = 278;
     break L37;
    }
    $149 = HEAP32[$__b >> 2] | 0;
    $151 = HEAP32[$149 + 12 >> 2] | 0;
    if (($151 | 0) == (HEAP32[$149 + 16 >> 2] | 0)) $$0$i$i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$149 >> 2] | 0) + 36 >> 2] & 127]($149) | 0; else $$0$i$i34 = HEAPU8[$151 >> 0] | 0;
    if (($$0$i$i34 & 255) << 24 >> 24 <= -1) {
     label = 51;
     break L37;
    }
    if (!(HEAP16[(HEAP32[$106 >> 2] | 0) + ($$0$i$i34 << 24 >> 24 << 1) >> 1] & 8192)) {
     label = 51;
     break L37;
    }
    $168 = HEAP32[$__b >> 2] | 0;
    $169 = $168 + 12 | 0;
    $170 = HEAP32[$169 >> 2] | 0;
    if (($170 | 0) == (HEAP32[$168 + 16 >> 2] | 0)) $$0$i$i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$168 >> 2] | 0) + 40 >> 2] & 127]($168) | 0; else {
     HEAP32[$169 >> 2] = $170 + 1;
     $$0$i$i37 = HEAPU8[$170 >> 0] | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i37 & 255);
    label = 52;
    break;
   }
  case 0:
   {
    label = 52;
    break;
   }
  case 3:
   {
    $243 = HEAP16[$__psn >> 1] | 0;
    $244 = $243 & 255;
    $246 = ($244 & 1) == 0;
    $248 = ($243 & 65535) >>> 8 & 255;
    if ($246) $264 = ($243 & 254) >>> 1; else $264 = HEAP32[$109 >> 2] | 0;
    $252 = HEAP16[$__nsn >> 1] | 0;
    $253 = $252 & 255;
    $255 = ($253 & 1) == 0;
    $257 = ($252 & 65535) >>> 8 & 255;
    if ($255) $262 = ($252 & 254) >>> 1; else $262 = HEAP32[$107 >> 2] | 0;
    if (($264 | 0) == (0 - $262 | 0)) {
     $884 = $883;
     $__e$sroa$0$20 = $__e$sroa$0$2;
     $__fd$2 = $__fd$0;
     $__trailing_sign$1 = $__trailing_sign$0235;
    } else {
     if ($246) $269 = ($243 & 254) >>> 1; else $269 = HEAP32[$109 >> 2] | 0;
     if ($269) {
      if ($255) $274 = ($252 & 254) >>> 1; else $274 = HEAP32[$107 >> 2] | 0;
      if ($274) {
       $354 = HEAP32[$__b >> 2] | 0;
       $356 = HEAP32[$354 + 12 >> 2] | 0;
       if (($356 | 0) == (HEAP32[$354 + 16 >> 2] | 0)) {
        $363 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$354 >> 2] | 0) + 36 >> 2] & 127]($354) | 0;
        $$pre247 = HEAP16[$__psn >> 1] | 0;
        $$0$i$i112 = $363;
        $371 = $$pre247 & 255;
        $887 = ($$pre247 & 65535) >>> 8 & 255;
       } else {
        $$0$i$i112 = HEAPU8[$356 >> 0] | 0;
        $371 = $244;
        $887 = $248;
       }
       if (!($371 & 1)) $375 = $887; else $375 = HEAP8[HEAP32[$110 >> 2] >> 0] | 0;
       $376 = HEAP32[$__b >> 2] | 0;
       $377 = $376 + 12 | 0;
       $378 = HEAP32[$377 >> 2] | 0;
       $381 = ($378 | 0) == (HEAP32[$376 + 16 >> 2] | 0);
       if (($$0$i$i112 & 255) << 24 >> 24 == $375 << 24 >> 24) {
        if ($381) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$376 >> 2] | 0) + 40 >> 2] & 127]($376) | 0; else HEAP32[$377 >> 2] = $378 + 1;
        $386 = HEAP8[$__psn >> 0] | 0;
        if (!($386 & 1)) $393 = ($386 & 255) >>> 1; else $393 = HEAP32[$109 >> 2] | 0;
        $884 = $883;
        $__e$sroa$0$20 = $__e$sroa$0$2;
        $__fd$2 = $__fd$0;
        $__trailing_sign$1 = $393 >>> 0 > 1 ? $__psn : $__trailing_sign$0235;
        break L55;
       }
       if ($381) $$0$i$i121 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$376 >> 2] | 0) + 36 >> 2] & 127]($376) | 0; else $$0$i$i121 = HEAPU8[$378 >> 0] | 0;
       $401 = HEAP16[$__nsn >> 1] | 0;
       if (!($401 & 1)) $408 = ($401 & 65535) >>> 8 & 255; else $408 = HEAP8[HEAP32[$108 >> 2] >> 0] | 0;
       if (($$0$i$i121 & 255) << 24 >> 24 != $408 << 24 >> 24) {
        label = 146;
        break L37;
       }
       $409 = HEAP32[$__b >> 2] | 0;
       $410 = $409 + 12 | 0;
       $411 = HEAP32[$410 >> 2] | 0;
       if (($411 | 0) == (HEAP32[$409 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$409 >> 2] | 0) + 40 >> 2] & 127]($409) | 0; else HEAP32[$410 >> 2] = $411 + 1;
       HEAP8[$__neg >> 0] = 1;
       $419 = HEAP8[$__nsn >> 0] | 0;
       if (!($419 & 1)) $426 = ($419 & 255) >>> 1; else $426 = HEAP32[$107 >> 2] | 0;
       $884 = $883;
       $__e$sroa$0$20 = $__e$sroa$0$2;
       $__fd$2 = $__fd$0;
       $__trailing_sign$1 = $426 >>> 0 > 1 ? $__nsn : $__trailing_sign$0235;
       break L55;
      }
     }
     if ($246) $279 = ($243 & 254) >>> 1; else $279 = HEAP32[$109 >> 2] | 0;
     $280 = HEAP32[$__b >> 2] | 0;
     $282 = HEAP32[$280 + 12 >> 2] | 0;
     $285 = ($282 | 0) == (HEAP32[$280 + 16 >> 2] | 0);
     if (!$279) {
      if ($285) {
       $323 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$280 >> 2] | 0) + 36 >> 2] & 127]($280) | 0;
       $$pre = HEAP16[$__nsn >> 1] | 0;
       $$0$i$i105 = $323;
       $331 = $$pre & 255;
       $886 = ($$pre & 65535) >>> 8 & 255;
      } else {
       $$0$i$i105 = HEAPU8[$282 >> 0] | 0;
       $331 = $253;
       $886 = $257;
      }
      if (!($331 & 1)) $335 = $886; else $335 = HEAP8[HEAP32[$108 >> 2] >> 0] | 0;
      if (($$0$i$i105 & 255) << 24 >> 24 != $335 << 24 >> 24) {
       $884 = $883;
       $__e$sroa$0$20 = $__e$sroa$0$2;
       $__fd$2 = $__fd$0;
       $__trailing_sign$1 = $__trailing_sign$0235;
       break L55;
      }
      $336 = HEAP32[$__b >> 2] | 0;
      $337 = $336 + 12 | 0;
      $338 = HEAP32[$337 >> 2] | 0;
      if (($338 | 0) == (HEAP32[$336 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$336 >> 2] | 0) + 40 >> 2] & 127]($336) | 0; else HEAP32[$337 >> 2] = $338 + 1;
      HEAP8[$__neg >> 0] = 1;
      $346 = HEAP8[$__nsn >> 0] | 0;
      if (!($346 & 1)) $353 = ($346 & 255) >>> 1; else $353 = HEAP32[$107 >> 2] | 0;
      $884 = $883;
      $__e$sroa$0$20 = $__e$sroa$0$2;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = $353 >>> 0 > 1 ? $__nsn : $__trailing_sign$0235;
      break L55;
     }
     if ($285) {
      $289 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$280 >> 2] | 0) + 36 >> 2] & 127]($280) | 0;
      $$pre244 = HEAP16[$__psn >> 1] | 0;
      $$0$i$i85 = $289;
      $297 = $$pre244 & 255;
      $885 = ($$pre244 & 65535) >>> 8 & 255;
     } else {
      $$0$i$i85 = HEAPU8[$282 >> 0] | 0;
      $297 = $244;
      $885 = $248;
     }
     if (!($297 & 1)) $301 = $885; else $301 = HEAP8[HEAP32[$110 >> 2] >> 0] | 0;
     if (($$0$i$i85 & 255) << 24 >> 24 != $301 << 24 >> 24) {
      HEAP8[$__neg >> 0] = 1;
      $884 = $883;
      $__e$sroa$0$20 = $__e$sroa$0$2;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = $__trailing_sign$0235;
      break L55;
     }
     $302 = HEAP32[$__b >> 2] | 0;
     $303 = $302 + 12 | 0;
     $304 = HEAP32[$303 >> 2] | 0;
     if (($304 | 0) == (HEAP32[$302 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$302 >> 2] | 0) + 40 >> 2] & 127]($302) | 0; else HEAP32[$303 >> 2] = $304 + 1;
     $312 = HEAP8[$__psn >> 0] | 0;
     if (!($312 & 1)) $319 = ($312 & 255) >>> 1; else $319 = HEAP32[$109 >> 2] | 0;
     $884 = $883;
     $__e$sroa$0$20 = $__e$sroa$0$2;
     $__fd$2 = $__fd$0;
     $__trailing_sign$1 = $319 >>> 0 > 1 ? $__psn : $__trailing_sign$0235;
    }
    break;
   }
  case 4:
   {
    $625 = $883;
    $__e$sroa$0$10 = $__e$sroa$0$2;
    $__ng$0 = 0;
    L166 : while (1) {
     $563 = HEAP32[$__b >> 2] | 0;
     do if (!$563) $576 = 0; else if ((HEAP32[$563 + 12 >> 2] | 0) == (HEAP32[$563 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$563 >> 2] | 0) + 36 >> 2] & 127]($563) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $576 = 0;
      break;
     } else {
      $576 = HEAP32[$__b >> 2] | 0;
      break;
     } else $576 = $563; while (0);
     $575 = ($576 | 0) == 0;
     do if (!$__e$sroa$0$10) label = 205; else {
      if ((HEAP32[$__e$sroa$0$10 + 12 >> 2] | 0) != (HEAP32[$__e$sroa$0$10 + 16 >> 2] | 0)) if ($575) {
       $__e$sroa$0$12 = $__e$sroa$0$10;
       break;
      } else {
       $__e$sroa$0$13 = $__e$sroa$0$10;
       break L166;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$10 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$10) | 0) == -1) label = 205; else if ($575) $__e$sroa$0$12 = $__e$sroa$0$10; else {
       $__e$sroa$0$13 = $__e$sroa$0$10;
       break L166;
      }
     } while (0);
     if ((label | 0) == 205) {
      label = 0;
      if ($575) {
       $__e$sroa$0$13 = 0;
       break;
      } else $__e$sroa$0$12 = 0;
     }
     $588 = HEAP32[$__b >> 2] | 0;
     $590 = HEAP32[$588 + 12 >> 2] | 0;
     if (($590 | 0) == (HEAP32[$588 + 16 >> 2] | 0)) $$0$i$i131 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$588 >> 2] | 0) + 36 >> 2] & 127]($588) | 0; else $$0$i$i131 = HEAPU8[$590 >> 0] | 0;
     $600 = $$0$i$i131 & 255;
     if ($600 << 24 >> 24 > -1) if (!(HEAP16[(HEAP32[$106 >> 2] | 0) + ($$0$i$i131 << 24 >> 24 << 1) >> 1] & 2048)) label = 215; else {
      $607 = HEAP32[$__wn >> 2] | 0;
      if (($607 | 0) == (HEAP32[$10 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $10);
       $611 = HEAP32[$__wn >> 2] | 0;
      } else $611 = $607;
      HEAP32[$__wn >> 2] = $611 + 1;
      HEAP8[$611 >> 0] = $600;
      $888 = $625;
      $__ng$1 = $__ng$0 + 1 | 0;
     } else label = 215;
     if ((label | 0) == 215) {
      label = 0;
      $613 = HEAP8[$__grp >> 0] | 0;
      if (!($613 & 1)) $620 = ($613 & 255) >>> 1; else $620 = HEAP32[$120 >> 2] | 0;
      if (!(($620 | 0) != 0 & ($__ng$0 | 0) != 0 & $600 << 24 >> 24 == $__ts$0 << 24 >> 24)) {
       $__e$sroa$0$13 = $__e$sroa$0$12;
       break;
      }
      if (($625 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $627 = HEAP32[$__gn >> 2] | 0;
      } else $627 = $625;
      $626 = $627 + 4 | 0;
      HEAP32[$__gn >> 2] = $626;
      HEAP32[$627 >> 2] = $__ng$0;
      $888 = $626;
      $__ng$1 = 0;
     }
     $628 = HEAP32[$__b >> 2] | 0;
     $629 = $628 + 12 | 0;
     $630 = HEAP32[$629 >> 2] | 0;
     if (($630 | 0) == (HEAP32[$628 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$628 >> 2] | 0) + 40 >> 2] & 127]($628) | 0;
      $625 = $888;
      $__e$sroa$0$10 = $__e$sroa$0$12;
      $__ng$0 = $__ng$1;
      continue;
     } else {
      HEAP32[$629 >> 2] = $630 + 1;
      $625 = $888;
      $__e$sroa$0$10 = $__e$sroa$0$12;
      $__ng$0 = $__ng$1;
      continue;
     }
    }
    if (($__ng$0 | 0) != 0 ? (HEAP32[$__gb >> 2] | 0) != ($625 | 0) : 0) {
     if (($625 | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $644 = HEAP32[$__gn >> 2] | 0;
     } else $644 = $625;
     $643 = $644 + 4 | 0;
     HEAP32[$__gn >> 2] = $643;
     HEAP32[$644 >> 2] = $__ng$0;
     $889 = $643;
    } else $889 = $625;
    if (($__fd$0 | 0) > 0) {
     $646 = HEAP32[$__b >> 2] | 0;
     do if (!$646) $659 = 0; else if ((HEAP32[$646 + 12 >> 2] | 0) == (HEAP32[$646 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$646 >> 2] | 0) + 36 >> 2] & 127]($646) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $659 = 0;
      break;
     } else {
      $659 = HEAP32[$__b >> 2] | 0;
      break;
     } else $659 = $646; while (0);
     $658 = ($659 | 0) == 0;
     do if (!$__e$sroa$0$13) label = 239; else {
      if ((HEAP32[$__e$sroa$0$13 + 12 >> 2] | 0) != (HEAP32[$__e$sroa$0$13 + 16 >> 2] | 0)) if ($658) {
       $__e$sroa$0$15 = $__e$sroa$0$13;
       break;
      } else {
       label = 245;
       break L37;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$13 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$13) | 0) == -1) label = 239; else if ($658) $__e$sroa$0$15 = $__e$sroa$0$13; else {
       label = 245;
       break L37;
      }
     } while (0);
     if ((label | 0) == 239) {
      label = 0;
      if ($658) {
       label = 245;
       break L37;
      } else $__e$sroa$0$15 = 0;
     }
     $671 = HEAP32[$__b >> 2] | 0;
     $673 = HEAP32[$671 + 12 >> 2] | 0;
     if (($673 | 0) == (HEAP32[$671 + 16 >> 2] | 0)) $$0$i$i88 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$671 >> 2] | 0) + 36 >> 2] & 127]($671) | 0; else $$0$i$i88 = HEAPU8[$673 >> 0] | 0;
     if (($$0$i$i88 & 255) << 24 >> 24 != $__dp$0 << 24 >> 24) {
      label = 245;
      break L37;
     }
     $687 = HEAP32[$__b >> 2] | 0;
     $688 = $687 + 12 | 0;
     $689 = HEAP32[$688 >> 2] | 0;
     if (($689 | 0) == (HEAP32[$687 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$687 >> 2] | 0) + 40 >> 2] & 127]($687) | 0;
      $762 = $__fd$0;
      $__e$sroa$0$16 = $__e$sroa$0$15;
     } else {
      HEAP32[$688 >> 2] = $689 + 1;
      $762 = $__fd$0;
      $__e$sroa$0$16 = $__e$sroa$0$15;
     }
     while (1) {
      $697 = HEAP32[$__b >> 2] | 0;
      do if (!$697) $710 = 0; else if ((HEAP32[$697 + 12 >> 2] | 0) == (HEAP32[$697 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$697 >> 2] | 0) + 36 >> 2] & 127]($697) | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $710 = 0;
       break;
      } else {
       $710 = HEAP32[$__b >> 2] | 0;
       break;
      } else $710 = $697; while (0);
      $709 = ($710 | 0) == 0;
      do if (!$__e$sroa$0$16) label = 258; else {
       if ((HEAP32[$__e$sroa$0$16 + 12 >> 2] | 0) != (HEAP32[$__e$sroa$0$16 + 16 >> 2] | 0)) if ($709) {
        $__e$sroa$0$18 = $__e$sroa$0$16;
        break;
       } else {
        label = 265;
        break L37;
       }
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$16 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$16) | 0) == -1) label = 258; else if ($709) $__e$sroa$0$18 = $__e$sroa$0$16; else {
        label = 265;
        break L37;
       }
      } while (0);
      if ((label | 0) == 258) {
       label = 0;
       if ($709) {
        label = 265;
        break L37;
       } else $__e$sroa$0$18 = 0;
      }
      $722 = HEAP32[$__b >> 2] | 0;
      $724 = HEAP32[$722 + 12 >> 2] | 0;
      if (($724 | 0) == (HEAP32[$722 + 16 >> 2] | 0)) $$0$i$i66 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$722 >> 2] | 0) + 36 >> 2] & 127]($722) | 0; else $$0$i$i66 = HEAPU8[$724 >> 0] | 0;
      if (($$0$i$i66 & 255) << 24 >> 24 <= -1) {
       label = 265;
       break L37;
      }
      if (!(HEAP16[(HEAP32[$106 >> 2] | 0) + ($$0$i$i66 << 24 >> 24 << 1) >> 1] & 2048)) {
       label = 265;
       break L37;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $10);
      $746 = HEAP32[$__b >> 2] | 0;
      $748 = HEAP32[$746 + 12 >> 2] | 0;
      if (($748 | 0) == (HEAP32[$746 + 16 >> 2] | 0)) $$0$i$i59 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$746 >> 2] | 0) + 36 >> 2] & 127]($746) | 0; else $$0$i$i59 = HEAPU8[$748 >> 0] | 0;
      $759 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $759 + 1;
      HEAP8[$759 >> 0] = $$0$i$i59;
      $761 = $762 + -1 | 0;
      $763 = HEAP32[$__b >> 2] | 0;
      $764 = $763 + 12 | 0;
      $765 = HEAP32[$764 >> 2] | 0;
      if (($765 | 0) == (HEAP32[$763 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$763 >> 2] | 0) + 40 >> 2] & 127]($763) | 0; else HEAP32[$764 >> 2] = $765 + 1;
      if (($761 | 0) > 0) {
       $762 = $761;
       $__e$sroa$0$16 = $__e$sroa$0$18;
      } else {
       $__e$sroa$0$19 = $__e$sroa$0$18;
       $__fd$1 = $761;
       break;
      }
     }
    } else {
     $__e$sroa$0$19 = $__e$sroa$0$13;
     $__fd$1 = $__fd$0;
    }
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 276;
     break L37;
    } else {
     $884 = $889;
     $__e$sroa$0$20 = $__e$sroa$0$19;
     $__fd$2 = $__fd$1;
     $__trailing_sign$1 = $__trailing_sign$0235;
    }
    break;
   }
  case 2:
   {
    if (!(($__trailing_sign$0235 | 0) != 0 | $__p$0233 >>> 0 < 2)) {
     if (($__p$0233 | 0) == 2) $434 = (HEAP8[$119 >> 0] | 0) != 0; else $434 = 0;
     if (!($112 | $434)) {
      $884 = $883;
      $__e$sroa$0$20 = $__e$sroa$0$2;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = 0;
      break L55;
     }
    }
    $435 = HEAP8[$__sym >> 0] | 0;
    $437 = ($435 & 1) == 0;
    $$ = $437 ? $113 : HEAP32[$114 >> 2] | 0;
    L284 : do if (!$__p$0233) {
     $488 = $435;
     $498 = $$;
     $__e$sroa$0$6 = $__e$sroa$0$2;
    } else if ((HEAPU8[$__pat + ($__p$0233 + -1) >> 0] | 0) < 2) {
     $445 = HEAP32[$106 >> 2] | 0;
     $447 = $$ + ($437 ? ($435 & 255) >>> 1 : HEAP32[$115 >> 2] | 0) | 0;
     $449 = $$;
     while (1) {
      if (($449 | 0) == ($447 | 0)) {
       $$lcssa4 = $447;
       break;
      }
      $450 = HEAP8[$449 >> 0] | 0;
      if ($450 << 24 >> 24 <= -1) {
       $$lcssa4 = $449;
       break;
      }
      if (!(HEAP16[$445 + ($450 << 24 >> 24 << 1) >> 1] & 8192)) {
       $$lcssa4 = $449;
       break;
      } else $449 = $449 + 1 | 0;
     }
     $459 = $$lcssa4 - $$ | 0;
     $460 = HEAP8[$__spaces >> 0] | 0;
     $462 = ($460 & 1) == 0;
     if ($462) $467 = ($460 & 255) >>> 1; else $467 = HEAP32[$118 >> 2] | 0;
     if ($459 >>> 0 > $467 >>> 0) {
      $488 = $435;
      $498 = $$;
      $__e$sroa$0$6 = $__e$sroa$0$2;
     } else {
      if ($462) {
       $472 = ($460 & 255) >>> 1;
       $475 = $116;
       $476 = $472;
       $478 = $__spaces + ($472 - $459) + 1 | 0;
      } else {
       $468 = HEAP32[$117 >> 2] | 0;
       $469 = HEAP32[$118 >> 2] | 0;
       $475 = $468;
       $476 = $469;
       $478 = $468 + ($469 - $459) | 0;
      }
      $474 = $475 + $476 | 0;
      if (($478 | 0) == ($474 | 0)) {
       $488 = $435;
       $498 = $$lcssa4;
       $__e$sroa$0$6 = $__e$sroa$0$2;
      } else {
       $480 = $478;
       $482 = $$;
       while (1) {
        if ((HEAP8[$480 >> 0] | 0) != (HEAP8[$482 >> 0] | 0)) {
         $488 = $435;
         $498 = $$;
         $__e$sroa$0$6 = $__e$sroa$0$2;
         break L284;
        }
        $480 = $480 + 1 | 0;
        if (($480 | 0) == ($474 | 0)) {
         $488 = $435;
         $498 = $$lcssa4;
         $__e$sroa$0$6 = $__e$sroa$0$2;
         break;
        } else $482 = $482 + 1 | 0;
       }
      }
     }
    } else {
     $488 = $435;
     $498 = $$;
     $__e$sroa$0$6 = $__e$sroa$0$2;
    } while (0);
    L304 : while (1) {
     if (!($488 & 1)) {
      $495 = $113;
      $496 = ($488 & 255) >>> 1;
     } else {
      $495 = HEAP32[$114 >> 2] | 0;
      $496 = HEAP32[$115 >> 2] | 0;
     }
     if (($498 | 0) == ($495 + $496 | 0)) {
      $__e$sroa$0$9 = $__e$sroa$0$6;
      break;
     }
     $499 = HEAP32[$__b >> 2] | 0;
     do if (!$499) $512 = 0; else if ((HEAP32[$499 + 12 >> 2] | 0) == (HEAP32[$499 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$499 >> 2] | 0) + 36 >> 2] & 127]($499) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $512 = 0;
      break;
     } else {
      $512 = HEAP32[$__b >> 2] | 0;
      break;
     } else $512 = $499; while (0);
     $511 = ($512 | 0) == 0;
     do if (!$__e$sroa$0$6) label = 180; else {
      if ((HEAP32[$__e$sroa$0$6 + 12 >> 2] | 0) != (HEAP32[$__e$sroa$0$6 + 16 >> 2] | 0)) if ($511) {
       $__e$sroa$0$8 = $__e$sroa$0$6;
       break;
      } else {
       $__e$sroa$0$9 = $__e$sroa$0$6;
       break L304;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$6 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$6) | 0) == -1) label = 180; else if ($511) $__e$sroa$0$8 = $__e$sroa$0$6; else {
       $__e$sroa$0$9 = $__e$sroa$0$6;
       break L304;
      }
     } while (0);
     if ((label | 0) == 180) {
      label = 0;
      if ($511) {
       $__e$sroa$0$9 = 0;
       break;
      } else $__e$sroa$0$8 = 0;
     }
     $524 = HEAP32[$__b >> 2] | 0;
     $526 = HEAP32[$524 + 12 >> 2] | 0;
     if (($526 | 0) == (HEAP32[$524 + 16 >> 2] | 0)) $$0$i$i148 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$524 >> 2] | 0) + 36 >> 2] & 127]($524) | 0; else $$0$i$i148 = HEAPU8[$526 >> 0] | 0;
     if (($$0$i$i148 & 255) << 24 >> 24 != (HEAP8[$498 >> 0] | 0)) {
      $__e$sroa$0$9 = $__e$sroa$0$8;
      break;
     }
     $539 = HEAP32[$__b >> 2] | 0;
     $540 = $539 + 12 | 0;
     $541 = HEAP32[$540 >> 2] | 0;
     if (($541 | 0) == (HEAP32[$539 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$539 >> 2] | 0) + 40 >> 2] & 127]($539) | 0; else HEAP32[$540 >> 2] = $541 + 1;
     $488 = HEAP8[$__sym >> 0] | 0;
     $498 = $498 + 1 | 0;
     $__e$sroa$0$6 = $__e$sroa$0$8;
    }
    if ($112) {
     $550 = HEAP8[$__sym >> 0] | 0;
     if (!($550 & 1)) {
      $558 = $113;
      $559 = ($550 & 255) >>> 1;
     } else {
      $558 = HEAP32[$114 >> 2] | 0;
      $559 = HEAP32[$115 >> 2] | 0;
     }
     if (($498 | 0) == ($558 + $559 | 0)) {
      $884 = $883;
      $__e$sroa$0$20 = $__e$sroa$0$9;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = $__trailing_sign$0235;
     } else {
      label = 195;
      break L37;
     }
    } else {
     $884 = $883;
     $__e$sroa$0$20 = $__e$sroa$0$9;
     $__fd$2 = $__fd$0;
     $__trailing_sign$1 = $__trailing_sign$0235;
    }
    break;
   }
  default:
   {
    $884 = $883;
    $__e$sroa$0$20 = $__e$sroa$0$2;
    $__fd$2 = $__fd$0;
    $__trailing_sign$1 = $__trailing_sign$0235;
   }
  } while (0);
  L342 : do if ((label | 0) == 52) {
   label = 0;
   if (($__p$0233 | 0) == 3) {
    $854 = $883;
    $__e$sroa$0$21 = $__e$sroa$0$2;
    $__trailing_sign$0$lcssa = $__trailing_sign$0235;
    label = 278;
    break L37;
   } else $__e$sroa$0$3 = $__e$sroa$0$2;
   while (1) {
    $185 = HEAP32[$__b >> 2] | 0;
    do if (!$185) $198 = 0; else if ((HEAP32[$185 + 12 >> 2] | 0) == (HEAP32[$185 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$185 >> 2] | 0) + 36 >> 2] & 127]($185) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $198 = 0;
     break;
    } else {
     $198 = HEAP32[$__b >> 2] | 0;
     break;
    } else $198 = $185; while (0);
    $197 = ($198 | 0) == 0;
    do if (!$__e$sroa$0$3) label = 62; else {
     if ((HEAP32[$__e$sroa$0$3 + 12 >> 2] | 0) != (HEAP32[$__e$sroa$0$3 + 16 >> 2] | 0)) if ($197) {
      $__e$sroa$0$5 = $__e$sroa$0$3;
      break;
     } else {
      $884 = $883;
      $__e$sroa$0$20 = $__e$sroa$0$3;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = $__trailing_sign$0235;
      break L342;
     }
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$3 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$3) | 0) == -1) label = 62; else if ($197) $__e$sroa$0$5 = $__e$sroa$0$3; else {
      $884 = $883;
      $__e$sroa$0$20 = $__e$sroa$0$3;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = $__trailing_sign$0235;
      break L342;
     }
    } while (0);
    if ((label | 0) == 62) {
     label = 0;
     if ($197) {
      $884 = $883;
      $__e$sroa$0$20 = 0;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = $__trailing_sign$0235;
      break L342;
     } else $__e$sroa$0$5 = 0;
    }
    $210 = HEAP32[$__b >> 2] | 0;
    $212 = HEAP32[$210 + 12 >> 2] | 0;
    if (($212 | 0) == (HEAP32[$210 + 16 >> 2] | 0)) $$0$i$i50 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$210 >> 2] | 0) + 36 >> 2] & 127]($210) | 0; else $$0$i$i50 = HEAPU8[$212 >> 0] | 0;
    if (($$0$i$i50 & 255) << 24 >> 24 <= -1) {
     $884 = $883;
     $__e$sroa$0$20 = $__e$sroa$0$5;
     $__fd$2 = $__fd$0;
     $__trailing_sign$1 = $__trailing_sign$0235;
     break L342;
    }
    if (!(HEAP16[(HEAP32[$106 >> 2] | 0) + ($$0$i$i50 << 24 >> 24 << 1) >> 1] & 8192)) {
     $884 = $883;
     $__e$sroa$0$20 = $__e$sroa$0$5;
     $__fd$2 = $__fd$0;
     $__trailing_sign$1 = $__trailing_sign$0235;
     break L342;
    }
    $229 = HEAP32[$__b >> 2] | 0;
    $230 = $229 + 12 | 0;
    $231 = HEAP32[$230 >> 2] | 0;
    if (($231 | 0) == (HEAP32[$229 + 16 >> 2] | 0)) $$0$i$i56 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$229 >> 2] | 0) + 40 >> 2] & 127]($229) | 0; else {
     HEAP32[$230 >> 2] = $231 + 1;
     $$0$i$i56 = HEAPU8[$231 >> 0] | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i56 & 255);
    $__e$sroa$0$3 = $__e$sroa$0$5;
   }
  } while (0);
  $__p$0233 = $__p$0233 + 1 | 0;
  if ($__p$0233 >>> 0 >= 4) {
   $854 = $884;
   $__e$sroa$0$21 = $__e$sroa$0$20;
   $__trailing_sign$0$lcssa = $__trailing_sign$1;
   label = 278;
   break;
  } else {
   $883 = $884;
   $__e$sroa$0$0 = $__e$sroa$0$20;
   $__fd$0 = $__fd$2;
   $__trailing_sign$0235 = $__trailing_sign$1;
  }
 }
 L373 : do if ((label | 0) == 51) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 146) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 195) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 245) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 265) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 276) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 278) {
  L381 : do if ($__trailing_sign$0$lcssa) {
   $782 = $__trailing_sign$0$lcssa + 1 | 0;
   $783 = $__trailing_sign$0$lcssa + 8 | 0;
   $784 = $__trailing_sign$0$lcssa + 4 | 0;
   $__e$sroa$0$22 = $__e$sroa$0$21;
   $__i$0 = 1;
   L383 : while (1) {
    $785 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
    if (!($785 & 1)) $792 = ($785 & 255) >>> 1; else $792 = HEAP32[$784 >> 2] | 0;
    if ($__i$0 >>> 0 >= $792 >>> 0) break L381;
    $793 = HEAP32[$__b >> 2] | 0;
    do if (!$793) $806 = 0; else if ((HEAP32[$793 + 12 >> 2] | 0) == (HEAP32[$793 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$793 >> 2] | 0) + 36 >> 2] & 127]($793) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $806 = 0;
     break;
    } else {
     $806 = HEAP32[$__b >> 2] | 0;
     break;
    } else $806 = $793; while (0);
    $805 = ($806 | 0) == 0;
    do if (!$__e$sroa$0$22) label = 293; else {
     if ((HEAP32[$__e$sroa$0$22 + 12 >> 2] | 0) != (HEAP32[$__e$sroa$0$22 + 16 >> 2] | 0)) if ($805) {
      $__e$sroa$0$24 = $__e$sroa$0$22;
      break;
     } else break L383;
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$22 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$22) | 0) == -1) label = 293; else if ($805) $__e$sroa$0$24 = $__e$sroa$0$22; else break L383;
    } while (0);
    if ((label | 0) == 293) {
     label = 0;
     if ($805) break; else $__e$sroa$0$24 = 0;
    }
    $818 = HEAP32[$__b >> 2] | 0;
    $820 = HEAP32[$818 + 12 >> 2] | 0;
    if (($820 | 0) == (HEAP32[$818 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$818 >> 2] | 0) + 36 >> 2] & 127]($818) | 0; else $$0$i$i = HEAPU8[$820 >> 0] | 0;
    if (!(HEAP8[$__trailing_sign$0$lcssa >> 0] & 1)) $836 = $782; else $836 = HEAP32[$783 >> 2] | 0;
    if (($$0$i$i & 255) << 24 >> 24 != (HEAP8[$836 + $__i$0 >> 0] | 0)) break;
    $841 = $__i$0 + 1 | 0;
    $842 = HEAP32[$__b >> 2] | 0;
    $843 = $842 + 12 | 0;
    $844 = HEAP32[$843 >> 2] | 0;
    if (($844 | 0) == (HEAP32[$842 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$842 >> 2] | 0) + 40 >> 2] & 127]($842) | 0;
     $__e$sroa$0$22 = $__e$sroa$0$24;
     $__i$0 = $841;
     continue;
    } else {
     HEAP32[$843 >> 2] = $844 + 1;
     $__e$sroa$0$22 = $__e$sroa$0$24;
     $__i$0 = $841;
     continue;
    }
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   break L373;
  } while (0);
  $852 = HEAP32[$__gb >> 2] | 0;
  if (($852 | 0) == ($854 | 0)) $$0 = 1; else {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $852, $854, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) $$0 = 1; else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $$0 = 0;
   }
  }
 } while (0);
 if (HEAP8[$__spaces >> 0] & 1) _free(HEAP32[$117 >> 2] | 0);
 if (HEAP8[$__nsn >> 0] & 1) _free(HEAP32[$108 >> 2] | 0);
 if (HEAP8[$__psn >> 0] & 1) _free(HEAP32[$110 >> 2] | 0);
 if (HEAP8[$__sym >> 0] & 1) _free(HEAP32[$114 >> 2] | 0);
 if (HEAP8[$__grp >> 0] & 1) _free(HEAP32[$__grp + 8 >> 2] | 0);
 $880 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if (!$880) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[$11 >> 2] & 127]($880);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e$0, $__intl, $__loc$0$0$val, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__intl = $__intl | 0;
 $__loc$0$0$val = $__loc$0$0$val | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i118 = 0, $$0$i$i$i$i150 = 0, $$0$i$i$i$i175 = 0, $$0$i$i$i$i23 = 0, $$0$i$i$i$i44 = 0, $$0$i$i$i$i84 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i124 = 0, $$0$i$i1$i$i156 = 0, $$0$i$i1$i$i181 = 0, $$0$i$i1$i$i29 = 0, $$0$i$i1$i$i50 = 0, $$0$i$i1$i$i90 = 0, $$0$i$i102 = 0, $$0$i$i111 = 0, $$0$i$i114 = 0, $$0$i$i136 = 0, $$0$i$i147 = 0, $$0$i$i171 = 0, $$0$i$i38 = 0, $$0$i$i42 = 0, $$0$i$i59 = 0, $$0$i$i65 = 0, $$0$i$i70 = 0, $$0$i$i78 = 0, $$0$i$i81 = 0, $$281 = 0, $$282 = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $115 = 0, $127 = 0, $13 = 0, $14 = 0, $140 = 0, $142 = 0, $155 = 0, $156 = 0, $157 = 0, $170 = 0, $173 = 0, $185 = 0, $195 = 0, $197 = 0, $2 = 0, $210 = 0, $211 = 0, $212 = 0, $222 = 0, $224 = 0, $228 = 0, $230 = 0, $235 = 0, $237 = 0, $242 = 0, $247 = 0, $252 = 0, $253 = 0, $255 = 0, $258 = 0, $262 = 0, $265 = 0, $270 = 0, $271 = 0, $272 = 0, $280 = 0, $287 = 0, $291 = 0, $294 = 0, $299 = 0, $3 = 0, $300 = 0, $301 = 0, $309 = 0, $316 = 0, $317 = 0, $319 = 0, $321 = 0, $326 = 0, $329 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $34 = 0, $343 = 0, $350 = 0, $362 = 0, $363 = 0, $364 = 0, $372 = 0, $379 = 0, $38 = 0, $387 = 0, $388 = 0, $397 = 0, $4 = 0, $404 = 0, $405 = 0, $407 = 0, $415 = 0, $421 = 0, $422 = 0, $424 = 0, $429 = 0, $430 = 0, $431 = 0, $434 = 0, $436 = 0, $437 = 0, $438 = 0, $440 = 0, $442 = 0, $444 = 0, $450 = 0, $457 = 0, $458 = 0, $460 = 0, $461 = 0, $464 = 0, $476 = 0, $486 = 0, $488 = 0, $499 = 0, $5 = 0, $500 = 0, $501 = 0, $510 = 0, $518 = 0, $519 = 0, $523 = 0, $526 = 0, $538 = 0, $548 = 0, $550 = 0, $56 = 0, $563 = 0, $567 = 0, $569 = 0, $57 = 0, $576 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $599 = 0, $6 = 0, $600 = 0, $602 = 0, $605 = 0, $617 = 0, $627 = 0, $629 = 0, $641 = 0, $642 = 0, $643 = 0, $651 = 0, $654 = 0, $666 = 0, $676 = 0, $678 = 0, $696 = 0, $698 = 0, $7 = 0, $707 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $730 = 0, $731 = 0, $732 = 0, $739 = 0, $740 = 0, $743 = 0, $755 = 0, $765 = 0, $767 = 0, $77 = 0, $781 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $797 = 0, $799 = 0, $8 = 0, $81 = 0, $825 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $9 = 0, $__dp$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$12 = 0, $__e$sroa$0$13 = 0, $__e$sroa$0$15 = 0, $__e$sroa$0$16 = 0, $__e$sroa$0$18 = 0, $__e$sroa$0$19 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$20 = 0, $__e$sroa$0$21 = 0, $__e$sroa$0$22 = 0, $__e$sroa$0$24 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$8 = 0, $__e$sroa$0$9 = 0, $__et = 0, $__fd$0 = 0, $__fd$1 = 0, $__fd$2 = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__p$0251 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0253 = 0, $__trailing_sign$1 = 0, $__ts$0 = 0, $storemerge$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 $0 = sp + 76 | 0;
 $1 = sp + 112 | 0;
 $2 = sp;
 $3 = sp + 176 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 28 | 0;
 $7 = sp + 124 | 0;
 $8 = sp + 148 | 0;
 $9 = sp + 164 | 0;
 $10 = sp + 188 | 0;
 $__gbuf = sp + 192 | 0;
 $__gb = sp + 80 | 0;
 $__gn = sp + 88 | 0;
 $__ge = sp + 104 | 0;
 $__pat = sp + 108 | 0;
 $__grp = sp + 92 | 0;
 $__sym = sp + 40 | 0;
 $__psn = sp + 136 | 0;
 $__nsn = sp + 12 | 0;
 $__spaces = sp + 52 | 0;
 $__et = sp + 160 | 0;
 HEAP32[$10 >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 $11 = $__gb + 4 | 0;
 HEAP32[$11 >> 2] = 114;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__psn + 0 >> 2] = 0;
 HEAP32[$__psn + 4 >> 2] = 0;
 HEAP32[$__psn + 8 >> 2] = 0;
 HEAP32[$__nsn + 0 >> 2] = 0;
 HEAP32[$__nsn + 4 >> 2] = 0;
 HEAP32[$__nsn + 8 >> 2] = 0;
 HEAP32[$__spaces + 0 >> 2] = 0;
 HEAP32[$__spaces + 4 >> 2] = 0;
 HEAP32[$__spaces + 8 >> 2] = 0;
 if ($__intl) {
  $13 = __ZNSt3__16locale2id5__getEv(50416) | 0;
  $14 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$__loc$0$0$val + 8 >> 2] | 0, HEAP32[$__loc$0$0$val + 12 >> 2] | 0, $13) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] & 63]($0, $14);
  HEAP32[$__pat >> 2] = HEAP32[$0 >> 2];
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$14 >> 2] | 0) + 32 >> 2] & 63]($1, $14);
  if (!(HEAP8[$__nsn >> 0] & 1)) HEAP8[$__nsn >> 0] = 0; else HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0;
  HEAP32[$__nsn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn);
  HEAP32[$__nsn + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 0 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$14 >> 2] | 0) + 28 >> 2] & 63]($2, $14);
  if (!(HEAP8[$__psn >> 0] & 1)) HEAP8[$__psn >> 0] = 0; else HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0;
  HEAP32[$__psn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn);
  HEAP32[$__psn + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 0 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  $34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] & 127]($14) | 0;
  $38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] & 127]($14) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] & 63]($3, $14);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$3 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 0 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] & 63]($4, $14);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  $__dp$0 = $34;
  $__ts$0 = $38;
  $storemerge$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 127]($14) | 0;
 } else {
  $56 = __ZNSt3__16locale2id5__getEv(50352) | 0;
  $57 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$__loc$0$0$val + 8 >> 2] | 0, HEAP32[$__loc$0$0$val + 12 >> 2] | 0, $56) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$57 >> 2] | 0) + 44 >> 2] & 63]($5, $57);
  HEAP32[$__pat >> 2] = HEAP32[$5 >> 2];
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$57 >> 2] | 0) + 32 >> 2] & 63]($6, $57);
  if (!(HEAP8[$__nsn >> 0] & 1)) HEAP8[$__nsn >> 0] = 0; else HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0;
  HEAP32[$__nsn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn);
  HEAP32[$__nsn + 0 >> 2] = HEAP32[$6 + 0 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$6 + 0 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$6 + 8 >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$57 >> 2] | 0) + 28 >> 2] & 63]($7, $57);
  if (!(HEAP8[$__psn >> 0] & 1)) HEAP8[$__psn >> 0] = 0; else HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0;
  HEAP32[$__psn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn);
  HEAP32[$__psn + 0 >> 2] = HEAP32[$7 + 0 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  HEAP32[$7 + 0 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$7 + 8 >> 2] = 0;
  $77 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 12 >> 2] & 127]($57) | 0;
  $81 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 16 >> 2] & 127]($57) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$57 >> 2] | 0) + 20 >> 2] & 63]($8, $57);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$8 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  HEAP32[$8 + 0 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$8 + 8 >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$57 >> 2] | 0) + 24 >> 2] & 63]($9, $57);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$9 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  HEAP32[$9 + 0 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  HEAP32[$9 + 8 >> 2] = 0;
  $__dp$0 = $77;
  $__ts$0 = $81;
  $storemerge$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] & 127]($57) | 0;
 }
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $100 = $__nsn + 4 | 0;
 $101 = $__nsn + 8 | 0;
 $102 = $__psn + 4 | 0;
 $103 = $__psn + 8 | 0;
 $105 = ($__flags & 512 | 0) != 0;
 $106 = $__sym + 4 | 0;
 $107 = $__sym + 8 | 0;
 $108 = $__spaces + 4 | 0;
 $109 = $__spaces + 8 | 0;
 $110 = $__pat + 3 | 0;
 $111 = $__grp + 4 | 0;
 $828 = $__gbuf;
 $__e$sroa$0$0 = $__e$0;
 $__fd$0 = $storemerge$i;
 $__p$0251 = 0;
 $__trailing_sign$0253 = 0;
 L37 : while (1) {
  $112 = HEAP32[$__b >> 2] | 0;
  do if (!$112) $829 = 1; else {
   $115 = HEAP32[$112 + 12 >> 2] | 0;
   if (($115 | 0) == (HEAP32[$112 + 16 >> 2] | 0)) $$0$i$i$i$i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$112 >> 2] | 0) + 36 >> 2] & 127]($112) | 0; else $$0$i$i$i$i23 = HEAP32[$115 >> 2] | 0;
   if (($$0$i$i$i$i23 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $829 = 1;
    break;
   } else {
    $829 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  if (!$__e$sroa$0$0) label = 41; else {
   $127 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($127 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $$0$i$i1$i$i29 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$0) | 0; else $$0$i$i1$i$i29 = HEAP32[$127 >> 2] | 0;
   if (($$0$i$i1$i$i29 | 0) == -1) label = 41; else if ($829) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $799 = $828;
    $__e$sroa$0$21 = $__e$sroa$0$0;
    $__trailing_sign$0$lcssa = $__trailing_sign$0253;
    label = 286;
    break;
   }
  }
  if ((label | 0) == 41) {
   label = 0;
   if ($829) {
    $799 = $828;
    $__e$sroa$0$21 = 0;
    $__trailing_sign$0$lcssa = $__trailing_sign$0253;
    label = 286;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  L59 : do switch (HEAP8[$__pat + $__p$0251 >> 0] | 0) {
  case 2:
   {
    if (!(($__trailing_sign$0253 | 0) != 0 | $__p$0251 >>> 0 < 2)) {
     if (($__p$0251 | 0) == 2) $387 = (HEAP8[$110 >> 0] | 0) != 0; else $387 = 0;
     if (!($105 | $387)) {
      $830 = $828;
      $__e$sroa$0$20 = $__e$sroa$0$2;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = 0;
      break L59;
     }
    }
    $388 = HEAP8[$__sym >> 0] | 0;
    $$281 = ($388 & 1) == 0 ? $106 : HEAP32[$107 >> 2] | 0;
    L67 : do if (!$__p$0251) {
     $450 = $388;
     $460 = $$281;
     $__e$sroa$0$6 = $__e$sroa$0$2;
    } else if ((HEAPU8[$__pat + ($__p$0251 + -1) >> 0] | 0) < 2) {
     $397 = $388;
     $407 = $$281;
     while (1) {
      if (!($397 & 1)) {
       $404 = $106;
       $405 = ($397 & 255) >>> 1;
      } else {
       $404 = HEAP32[$107 >> 2] | 0;
       $405 = HEAP32[$106 >> 2] | 0;
      }
      if (($407 | 0) == ($404 + ($405 << 2) | 0)) {
       $415 = $397;
       break;
      }
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, HEAP32[$407 >> 2] | 0) | 0)) {
       label = 153;
       break;
      }
      $397 = HEAP8[$__sym >> 0] | 0;
      $407 = $407 + 4 | 0;
     }
     if ((label | 0) == 153) {
      label = 0;
      $415 = HEAP8[$__sym >> 0] | 0;
     }
     $$282 = ($415 & 1) == 0 ? $106 : HEAP32[$107 >> 2] | 0;
     $421 = $407 - $$282 >> 2;
     $422 = HEAP8[$__spaces >> 0] | 0;
     $424 = ($422 & 1) == 0;
     if ($424) $429 = ($422 & 255) >>> 1; else $429 = HEAP32[$108 >> 2] | 0;
     if ($421 >>> 0 > $429 >>> 0) {
      $450 = $415;
      $460 = $$282;
      $__e$sroa$0$6 = $__e$sroa$0$2;
     } else {
      if ($424) {
       $434 = ($422 & 255) >>> 1;
       $437 = $108;
       $438 = $434;
       $440 = $108 + ($434 - $421 << 2) | 0;
      } else {
       $430 = HEAP32[$109 >> 2] | 0;
       $431 = HEAP32[$108 >> 2] | 0;
       $437 = $430;
       $438 = $431;
       $440 = $430 + ($431 - $421 << 2) | 0;
      }
      $436 = $437 + ($438 << 2) | 0;
      if (($440 | 0) == ($436 | 0)) {
       $450 = $415;
       $460 = $407;
       $__e$sroa$0$6 = $__e$sroa$0$2;
      } else {
       $442 = $440;
       $444 = $$282;
       while (1) {
        if ((HEAP32[$442 >> 2] | 0) != (HEAP32[$444 >> 2] | 0)) {
         $450 = $415;
         $460 = $$282;
         $__e$sroa$0$6 = $__e$sroa$0$2;
         break L67;
        }
        $442 = $442 + 4 | 0;
        if (($442 | 0) == ($436 | 0)) {
         $450 = $415;
         $460 = $407;
         $__e$sroa$0$6 = $__e$sroa$0$2;
         break;
        } else $444 = $444 + 4 | 0;
       }
      }
     }
    } else {
     $450 = $388;
     $460 = $$281;
     $__e$sroa$0$6 = $__e$sroa$0$2;
    } while (0);
    while (1) {
     if (!($450 & 1)) {
      $457 = $106;
      $458 = ($450 & 255) >>> 1;
     } else {
      $457 = HEAP32[$107 >> 2] | 0;
      $458 = HEAP32[$106 >> 2] | 0;
     }
     if (($460 | 0) == ($457 + ($458 << 2) | 0)) {
      $__e$sroa$0$9 = $__e$sroa$0$6;
      break;
     }
     $461 = HEAP32[$__b >> 2] | 0;
     do if (!$461) $832 = 1; else {
      $464 = HEAP32[$461 + 12 >> 2] | 0;
      if (($464 | 0) == (HEAP32[$461 + 16 >> 2] | 0)) $$0$i$i$i$i175 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$461 >> 2] | 0) + 36 >> 2] & 127]($461) | 0; else $$0$i$i$i$i175 = HEAP32[$464 >> 2] | 0;
      if (($$0$i$i$i$i175 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $832 = 1;
       break;
      } else {
       $832 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$__e$sroa$0$6) label = 181; else {
      $476 = HEAP32[$__e$sroa$0$6 + 12 >> 2] | 0;
      if (($476 | 0) == (HEAP32[$__e$sroa$0$6 + 16 >> 2] | 0)) $$0$i$i1$i$i181 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$6 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$6) | 0; else $$0$i$i1$i$i181 = HEAP32[$476 >> 2] | 0;
      if (($$0$i$i1$i$i181 | 0) == -1) label = 181; else if ($832) $__e$sroa$0$8 = $__e$sroa$0$6; else {
       $__e$sroa$0$9 = $__e$sroa$0$6;
       break;
      }
     }
     if ((label | 0) == 181) {
      label = 0;
      if ($832) {
       $__e$sroa$0$9 = 0;
       break;
      } else $__e$sroa$0$8 = 0;
     }
     $486 = HEAP32[$__b >> 2] | 0;
     $488 = HEAP32[$486 + 12 >> 2] | 0;
     if (($488 | 0) == (HEAP32[$486 + 16 >> 2] | 0)) $$0$i$i171 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$486 >> 2] | 0) + 36 >> 2] & 127]($486) | 0; else $$0$i$i171 = HEAP32[$488 >> 2] | 0;
     if (($$0$i$i171 | 0) != (HEAP32[$460 >> 2] | 0)) {
      $__e$sroa$0$9 = $__e$sroa$0$8;
      break;
     }
     $499 = HEAP32[$__b >> 2] | 0;
     $500 = $499 + 12 | 0;
     $501 = HEAP32[$500 >> 2] | 0;
     if (($501 | 0) == (HEAP32[$499 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$499 >> 2] | 0) + 40 >> 2] & 127]($499) | 0; else HEAP32[$500 >> 2] = $501 + 4;
     $450 = HEAP8[$__sym >> 0] | 0;
     $460 = $460 + 4 | 0;
     $__e$sroa$0$6 = $__e$sroa$0$8;
    }
    if ($105) {
     $510 = HEAP8[$__sym >> 0] | 0;
     if (!($510 & 1)) {
      $518 = $106;
      $519 = ($510 & 255) >>> 1;
     } else {
      $518 = HEAP32[$107 >> 2] | 0;
      $519 = HEAP32[$106 >> 2] | 0;
     }
     if (($460 | 0) == ($518 + ($519 << 2) | 0)) {
      $830 = $828;
      $__e$sroa$0$20 = $__e$sroa$0$9;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = $__trailing_sign$0253;
     } else {
      label = 196;
      break L37;
     }
    } else {
     $830 = $828;
     $__e$sroa$0$20 = $__e$sroa$0$9;
     $__fd$2 = $__fd$0;
     $__trailing_sign$1 = $__trailing_sign$0253;
    }
    break;
   }
  case 3:
   {
    $222 = HEAP8[$__psn >> 0] | 0;
    $224 = ($222 & 1) == 0;
    if ($224) $237 = ($222 & 255) >>> 1; else $237 = HEAP32[$102 >> 2] | 0;
    $228 = HEAP8[$__nsn >> 0] | 0;
    $230 = ($228 & 1) == 0;
    if ($230) $235 = ($228 & 255) >>> 1; else $235 = HEAP32[$100 >> 2] | 0;
    if (($237 | 0) == (0 - $235 | 0)) {
     $830 = $828;
     $__e$sroa$0$20 = $__e$sroa$0$2;
     $__fd$2 = $__fd$0;
     $__trailing_sign$1 = $__trailing_sign$0253;
    } else {
     if ($224) $242 = ($222 & 255) >>> 1; else $242 = HEAP32[$102 >> 2] | 0;
     if ($242) {
      if ($230) $247 = ($228 & 255) >>> 1; else $247 = HEAP32[$100 >> 2] | 0;
      if ($247) {
       $317 = HEAP32[$__b >> 2] | 0;
       $319 = HEAP32[$317 + 12 >> 2] | 0;
       $321 = HEAP32[$317 + 16 >> 2] | 0;
       if (($319 | 0) == ($321 | 0)) {
        $326 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$317 >> 2] | 0) + 36 >> 2] & 127]($317) | 0;
        $$pre25 = HEAP32[$__b >> 2] | 0;
        $$0$i$i114 = $326;
        $329 = HEAP8[$__psn >> 0] | 0;
        $335 = $$pre25;
        $337 = HEAP32[$$pre25 + 12 >> 2] | 0;
        $338 = HEAP32[$$pre25 + 16 >> 2] | 0;
       } else {
        $$0$i$i114 = HEAP32[$319 >> 2] | 0;
        $329 = $222;
        $335 = $317;
        $337 = $319;
        $338 = $321;
       }
       $334 = $335 + 12 | 0;
       $336 = ($337 | 0) == ($338 | 0);
       if (($$0$i$i114 | 0) == (HEAP32[(($329 & 1) == 0 ? $102 : HEAP32[$103 >> 2] | 0) >> 2] | 0)) {
        if ($336) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$335 >> 2] | 0) + 40 >> 2] & 127]($335) | 0; else HEAP32[$334 >> 2] = $337 + 4;
        $343 = HEAP8[$__psn >> 0] | 0;
        if (!($343 & 1)) $350 = ($343 & 255) >>> 1; else $350 = HEAP32[$102 >> 2] | 0;
        $830 = $828;
        $__e$sroa$0$20 = $__e$sroa$0$2;
        $__fd$2 = $__fd$0;
        $__trailing_sign$1 = $350 >>> 0 > 1 ? $__psn : $__trailing_sign$0253;
        break L59;
       }
       if ($336) $$0$i$i136 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$335 >> 2] | 0) + 36 >> 2] & 127]($335) | 0; else $$0$i$i136 = HEAP32[$337 >> 2] | 0;
       if (($$0$i$i136 | 0) != (HEAP32[((HEAP8[$__nsn >> 0] & 1) == 0 ? $100 : HEAP32[$101 >> 2] | 0) >> 2] | 0)) {
        label = 141;
        break L37;
       }
       $362 = HEAP32[$__b >> 2] | 0;
       $363 = $362 + 12 | 0;
       $364 = HEAP32[$363 >> 2] | 0;
       if (($364 | 0) == (HEAP32[$362 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$362 >> 2] | 0) + 40 >> 2] & 127]($362) | 0; else HEAP32[$363 >> 2] = $364 + 4;
       HEAP8[$__neg >> 0] = 1;
       $372 = HEAP8[$__nsn >> 0] | 0;
       if (!($372 & 1)) $379 = ($372 & 255) >>> 1; else $379 = HEAP32[$100 >> 2] | 0;
       $830 = $828;
       $__e$sroa$0$20 = $__e$sroa$0$2;
       $__fd$2 = $__fd$0;
       $__trailing_sign$1 = $379 >>> 0 > 1 ? $__nsn : $__trailing_sign$0253;
       break L59;
      }
     }
     if ($224) $252 = ($222 & 255) >>> 1; else $252 = HEAP32[$102 >> 2] | 0;
     $253 = HEAP32[$__b >> 2] | 0;
     $255 = HEAP32[$253 + 12 >> 2] | 0;
     $258 = ($255 | 0) == (HEAP32[$253 + 16 >> 2] | 0);
     if (!$252) {
      if ($258) {
       $291 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$253 >> 2] | 0) + 36 >> 2] & 127]($253) | 0;
       $$0$i$i102 = $291;
       $294 = HEAP8[$__nsn >> 0] | 0;
      } else {
       $$0$i$i102 = HEAP32[$255 >> 2] | 0;
       $294 = $228;
      }
      if (($$0$i$i102 | 0) != (HEAP32[(($294 & 1) == 0 ? $100 : HEAP32[$101 >> 2] | 0) >> 2] | 0)) {
       $830 = $828;
       $__e$sroa$0$20 = $__e$sroa$0$2;
       $__fd$2 = $__fd$0;
       $__trailing_sign$1 = $__trailing_sign$0253;
       break L59;
      }
      $299 = HEAP32[$__b >> 2] | 0;
      $300 = $299 + 12 | 0;
      $301 = HEAP32[$300 >> 2] | 0;
      if (($301 | 0) == (HEAP32[$299 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$299 >> 2] | 0) + 40 >> 2] & 127]($299) | 0; else HEAP32[$300 >> 2] = $301 + 4;
      HEAP8[$__neg >> 0] = 1;
      $309 = HEAP8[$__nsn >> 0] | 0;
      if (!($309 & 1)) $316 = ($309 & 255) >>> 1; else $316 = HEAP32[$100 >> 2] | 0;
      $830 = $828;
      $__e$sroa$0$20 = $__e$sroa$0$2;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = $316 >>> 0 > 1 ? $__nsn : $__trailing_sign$0253;
      break L59;
     }
     if ($258) {
      $262 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$253 >> 2] | 0) + 36 >> 2] & 127]($253) | 0;
      $$0$i$i81 = $262;
      $265 = HEAP8[$__psn >> 0] | 0;
     } else {
      $$0$i$i81 = HEAP32[$255 >> 2] | 0;
      $265 = $222;
     }
     if (($$0$i$i81 | 0) != (HEAP32[(($265 & 1) == 0 ? $102 : HEAP32[$103 >> 2] | 0) >> 2] | 0)) {
      HEAP8[$__neg >> 0] = 1;
      $830 = $828;
      $__e$sroa$0$20 = $__e$sroa$0$2;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = $__trailing_sign$0253;
      break L59;
     }
     $270 = HEAP32[$__b >> 2] | 0;
     $271 = $270 + 12 | 0;
     $272 = HEAP32[$271 >> 2] | 0;
     if (($272 | 0) == (HEAP32[$270 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$270 >> 2] | 0) + 40 >> 2] & 127]($270) | 0; else HEAP32[$271 >> 2] = $272 + 4;
     $280 = HEAP8[$__psn >> 0] | 0;
     if (!($280 & 1)) $287 = ($280 & 255) >>> 1; else $287 = HEAP32[$102 >> 2] | 0;
     $830 = $828;
     $__e$sroa$0$20 = $__e$sroa$0$2;
     $__fd$2 = $__fd$0;
     $__trailing_sign$1 = $287 >>> 0 > 1 ? $__psn : $__trailing_sign$0253;
    }
    break;
   }
  case 1:
   {
    if (($__p$0251 | 0) == 3) {
     $799 = $828;
     $__e$sroa$0$21 = $__e$sroa$0$2;
     $__trailing_sign$0$lcssa = $__trailing_sign$0253;
     label = 286;
     break L37;
    }
    $140 = HEAP32[$__b >> 2] | 0;
    $142 = HEAP32[$140 + 12 >> 2] | 0;
    if (($142 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) $$0$i$i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$140 >> 2] | 0) + 36 >> 2] & 127]($140) | 0; else $$0$i$i38 = HEAP32[$142 >> 2] | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i38) | 0)) {
     label = 53;
     break L37;
    }
    $155 = HEAP32[$__b >> 2] | 0;
    $156 = $155 + 12 | 0;
    $157 = HEAP32[$156 >> 2] | 0;
    if (($157 | 0) == (HEAP32[$155 + 16 >> 2] | 0)) $$0$i$i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$155 >> 2] | 0) + 40 >> 2] & 127]($155) | 0; else {
     HEAP32[$156 >> 2] = $157 + 4;
     $$0$i$i42 = HEAP32[$157 >> 2] | 0;
    }
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i42);
    label = 54;
    break;
   }
  case 0:
   {
    label = 54;
    break;
   }
  case 4:
   {
    $581 = $828;
    $__e$sroa$0$10 = $__e$sroa$0$2;
    $__ng$0 = 0;
    while (1) {
     $523 = HEAP32[$__b >> 2] | 0;
     do if (!$523) $833 = 1; else {
      $526 = HEAP32[$523 + 12 >> 2] | 0;
      if (($526 | 0) == (HEAP32[$523 + 16 >> 2] | 0)) $$0$i$i$i$i150 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$523 >> 2] | 0) + 36 >> 2] & 127]($523) | 0; else $$0$i$i$i$i150 = HEAP32[$526 >> 2] | 0;
      if (($$0$i$i$i$i150 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $833 = 1;
       break;
      } else {
       $833 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$__e$sroa$0$10) label = 209; else {
      $538 = HEAP32[$__e$sroa$0$10 + 12 >> 2] | 0;
      if (($538 | 0) == (HEAP32[$__e$sroa$0$10 + 16 >> 2] | 0)) $$0$i$i1$i$i156 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$10 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$10) | 0; else $$0$i$i1$i$i156 = HEAP32[$538 >> 2] | 0;
      if (($$0$i$i1$i$i156 | 0) == -1) label = 209; else if ($833) $__e$sroa$0$12 = $__e$sroa$0$10; else {
       $__e$sroa$0$13 = $__e$sroa$0$10;
       break;
      }
     }
     if ((label | 0) == 209) {
      label = 0;
      if ($833) {
       $__e$sroa$0$13 = 0;
       break;
      } else $__e$sroa$0$12 = 0;
     }
     $548 = HEAP32[$__b >> 2] | 0;
     $550 = HEAP32[$548 + 12 >> 2] | 0;
     if (($550 | 0) == (HEAP32[$548 + 16 >> 2] | 0)) $$0$i$i147 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$548 >> 2] | 0) + 36 >> 2] & 127]($548) | 0; else $$0$i$i147 = HEAP32[$550 >> 2] | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i147) | 0) {
      $563 = HEAP32[$__wn >> 2] | 0;
      if (($563 | 0) == (HEAP32[$10 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $10);
       $567 = HEAP32[$__wn >> 2] | 0;
      } else $567 = $563;
      HEAP32[$__wn >> 2] = $567 + 4;
      HEAP32[$567 >> 2] = $$0$i$i147;
      $834 = $581;
      $__ng$1 = $__ng$0 + 1 | 0;
     } else {
      $569 = HEAP8[$__grp >> 0] | 0;
      if (!($569 & 1)) $576 = ($569 & 255) >>> 1; else $576 = HEAP32[$111 >> 2] | 0;
      if (!(($576 | 0) != 0 & ($__ng$0 | 0) != 0 & ($$0$i$i147 | 0) == ($__ts$0 | 0))) {
       $__e$sroa$0$13 = $__e$sroa$0$12;
       break;
      }
      if (($581 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $583 = HEAP32[$__gn >> 2] | 0;
      } else $583 = $581;
      $582 = $583 + 4 | 0;
      HEAP32[$__gn >> 2] = $582;
      HEAP32[$583 >> 2] = $__ng$0;
      $834 = $582;
      $__ng$1 = 0;
     }
     $584 = HEAP32[$__b >> 2] | 0;
     $585 = $584 + 12 | 0;
     $586 = HEAP32[$585 >> 2] | 0;
     if (($586 | 0) == (HEAP32[$584 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$584 >> 2] | 0) + 40 >> 2] & 127]($584) | 0;
      $581 = $834;
      $__e$sroa$0$10 = $__e$sroa$0$12;
      $__ng$0 = $__ng$1;
      continue;
     } else {
      HEAP32[$585 >> 2] = $586 + 4;
      $581 = $834;
      $__e$sroa$0$10 = $__e$sroa$0$12;
      $__ng$0 = $__ng$1;
      continue;
     }
    }
    if (($__ng$0 | 0) != 0 ? (HEAP32[$__gb >> 2] | 0) != ($581 | 0) : 0) {
     if (($581 | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $600 = HEAP32[$__gn >> 2] | 0;
     } else $600 = $581;
     $599 = $600 + 4 | 0;
     HEAP32[$__gn >> 2] = $599;
     HEAP32[$600 >> 2] = $__ng$0;
     $835 = $599;
    } else $835 = $581;
    if (($__fd$0 | 0) > 0) {
     $602 = HEAP32[$__b >> 2] | 0;
     do if (!$602) $836 = 1; else {
      $605 = HEAP32[$602 + 12 >> 2] | 0;
      if (($605 | 0) == (HEAP32[$602 + 16 >> 2] | 0)) $$0$i$i$i$i118 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$602 >> 2] | 0) + 36 >> 2] & 127]($602) | 0; else $$0$i$i$i$i118 = HEAP32[$605 >> 2] | 0;
      if (($$0$i$i$i$i118 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $836 = 1;
       break;
      } else {
       $836 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$__e$sroa$0$13) label = 245; else {
      $617 = HEAP32[$__e$sroa$0$13 + 12 >> 2] | 0;
      if (($617 | 0) == (HEAP32[$__e$sroa$0$13 + 16 >> 2] | 0)) $$0$i$i1$i$i124 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$13 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$13) | 0; else $$0$i$i1$i$i124 = HEAP32[$617 >> 2] | 0;
      if (($$0$i$i1$i$i124 | 0) == -1) label = 245; else if ($836) $__e$sroa$0$15 = $__e$sroa$0$13; else {
       label = 251;
       break L37;
      }
     }
     if ((label | 0) == 245) {
      label = 0;
      if ($836) {
       label = 251;
       break L37;
      } else $__e$sroa$0$15 = 0;
     }
     $627 = HEAP32[$__b >> 2] | 0;
     $629 = HEAP32[$627 + 12 >> 2] | 0;
     if (($629 | 0) == (HEAP32[$627 + 16 >> 2] | 0)) $$0$i$i111 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$627 >> 2] | 0) + 36 >> 2] & 127]($627) | 0; else $$0$i$i111 = HEAP32[$629 >> 2] | 0;
     if (($$0$i$i111 | 0) != ($__dp$0 | 0)) {
      label = 251;
      break L37;
     }
     $641 = HEAP32[$__b >> 2] | 0;
     $642 = $641 + 12 | 0;
     $643 = HEAP32[$642 >> 2] | 0;
     if (($643 | 0) == (HEAP32[$641 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$641 >> 2] | 0) + 40 >> 2] & 127]($641) | 0;
      $710 = $__fd$0;
      $__e$sroa$0$16 = $__e$sroa$0$15;
     } else {
      HEAP32[$642 >> 2] = $643 + 4;
      $710 = $__fd$0;
      $__e$sroa$0$16 = $__e$sroa$0$15;
     }
     while (1) {
      $651 = HEAP32[$__b >> 2] | 0;
      do if (!$651) $837 = 1; else {
       $654 = HEAP32[$651 + 12 >> 2] | 0;
       if (($654 | 0) == (HEAP32[$651 + 16 >> 2] | 0)) $$0$i$i$i$i84 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$651 >> 2] | 0) + 36 >> 2] & 127]($651) | 0; else $$0$i$i$i$i84 = HEAP32[$654 >> 2] | 0;
       if (($$0$i$i$i$i84 | 0) == -1) {
        HEAP32[$__b >> 2] = 0;
        $837 = 1;
        break;
       } else {
        $837 = (HEAP32[$__b >> 2] | 0) == 0;
        break;
       }
      } while (0);
      if (!$__e$sroa$0$16) label = 267; else {
       $666 = HEAP32[$__e$sroa$0$16 + 12 >> 2] | 0;
       if (($666 | 0) == (HEAP32[$__e$sroa$0$16 + 16 >> 2] | 0)) $$0$i$i1$i$i90 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$16 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$16) | 0; else $$0$i$i1$i$i90 = HEAP32[$666 >> 2] | 0;
       if (($$0$i$i1$i$i90 | 0) == -1) label = 267; else if ($837) $__e$sroa$0$18 = $__e$sroa$0$16; else {
        label = 273;
        break L37;
       }
      }
      if ((label | 0) == 267) {
       label = 0;
       if ($837) {
        label = 273;
        break L37;
       } else $__e$sroa$0$18 = 0;
      }
      $676 = HEAP32[$__b >> 2] | 0;
      $678 = HEAP32[$676 + 12 >> 2] | 0;
      if (($678 | 0) == (HEAP32[$676 + 16 >> 2] | 0)) $$0$i$i78 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$676 >> 2] | 0) + 36 >> 2] & 127]($676) | 0; else $$0$i$i78 = HEAP32[$678 >> 2] | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i78) | 0)) {
       label = 273;
       break L37;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $10);
      $696 = HEAP32[$__b >> 2] | 0;
      $698 = HEAP32[$696 + 12 >> 2] | 0;
      if (($698 | 0) == (HEAP32[$696 + 16 >> 2] | 0)) $$0$i$i70 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$696 >> 2] | 0) + 36 >> 2] & 127]($696) | 0; else $$0$i$i70 = HEAP32[$698 >> 2] | 0;
      $707 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $707 + 4;
      HEAP32[$707 >> 2] = $$0$i$i70;
      $709 = $710 + -1 | 0;
      $711 = HEAP32[$__b >> 2] | 0;
      $712 = $711 + 12 | 0;
      $713 = HEAP32[$712 >> 2] | 0;
      if (($713 | 0) == (HEAP32[$711 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$711 >> 2] | 0) + 40 >> 2] & 127]($711) | 0; else HEAP32[$712 >> 2] = $713 + 4;
      if (($709 | 0) > 0) {
       $710 = $709;
       $__e$sroa$0$16 = $__e$sroa$0$18;
      } else {
       $__e$sroa$0$19 = $__e$sroa$0$18;
       $__fd$1 = $709;
       break;
      }
     }
    } else {
     $__e$sroa$0$19 = $__e$sroa$0$13;
     $__fd$1 = $__fd$0;
    }
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 284;
     break L37;
    } else {
     $830 = $835;
     $__e$sroa$0$20 = $__e$sroa$0$19;
     $__fd$2 = $__fd$1;
     $__trailing_sign$1 = $__trailing_sign$0253;
    }
    break;
   }
  default:
   {
    $830 = $828;
    $__e$sroa$0$20 = $__e$sroa$0$2;
    $__fd$2 = $__fd$0;
    $__trailing_sign$1 = $__trailing_sign$0253;
   }
  } while (0);
  L350 : do if ((label | 0) == 54) {
   label = 0;
   if (($__p$0251 | 0) == 3) {
    $799 = $828;
    $__e$sroa$0$21 = $__e$sroa$0$2;
    $__trailing_sign$0$lcssa = $__trailing_sign$0253;
    label = 286;
    break L37;
   } else $__e$sroa$0$3 = $__e$sroa$0$2;
   while (1) {
    $170 = HEAP32[$__b >> 2] | 0;
    do if (!$170) $831 = 1; else {
     $173 = HEAP32[$170 + 12 >> 2] | 0;
     if (($173 | 0) == (HEAP32[$170 + 16 >> 2] | 0)) $$0$i$i$i$i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$170 >> 2] | 0) + 36 >> 2] & 127]($170) | 0; else $$0$i$i$i$i44 = HEAP32[$173 >> 2] | 0;
     if (($$0$i$i$i$i44 | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $831 = 1;
      break;
     } else {
      $831 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    if (!$__e$sroa$0$3) label = 67; else {
     $185 = HEAP32[$__e$sroa$0$3 + 12 >> 2] | 0;
     if (($185 | 0) == (HEAP32[$__e$sroa$0$3 + 16 >> 2] | 0)) $$0$i$i1$i$i50 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$3 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$3) | 0; else $$0$i$i1$i$i50 = HEAP32[$185 >> 2] | 0;
     if (($$0$i$i1$i$i50 | 0) == -1) label = 67; else if ($831) $__e$sroa$0$5 = $__e$sroa$0$3; else {
      $830 = $828;
      $__e$sroa$0$20 = $__e$sroa$0$3;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = $__trailing_sign$0253;
      break L350;
     }
    }
    if ((label | 0) == 67) {
     label = 0;
     if ($831) {
      $830 = $828;
      $__e$sroa$0$20 = 0;
      $__fd$2 = $__fd$0;
      $__trailing_sign$1 = $__trailing_sign$0253;
      break L350;
     } else $__e$sroa$0$5 = 0;
    }
    $195 = HEAP32[$__b >> 2] | 0;
    $197 = HEAP32[$195 + 12 >> 2] | 0;
    if (($197 | 0) == (HEAP32[$195 + 16 >> 2] | 0)) $$0$i$i59 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$195 >> 2] | 0) + 36 >> 2] & 127]($195) | 0; else $$0$i$i59 = HEAP32[$197 >> 2] | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i59) | 0)) {
     $830 = $828;
     $__e$sroa$0$20 = $__e$sroa$0$5;
     $__fd$2 = $__fd$0;
     $__trailing_sign$1 = $__trailing_sign$0253;
     break L350;
    }
    $210 = HEAP32[$__b >> 2] | 0;
    $211 = $210 + 12 | 0;
    $212 = HEAP32[$211 >> 2] | 0;
    if (($212 | 0) == (HEAP32[$210 + 16 >> 2] | 0)) $$0$i$i65 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$210 >> 2] | 0) + 40 >> 2] & 127]($210) | 0; else {
     HEAP32[$211 >> 2] = $212 + 4;
     $$0$i$i65 = HEAP32[$212 >> 2] | 0;
    }
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i65);
    $__e$sroa$0$3 = $__e$sroa$0$5;
   }
  } while (0);
  $__p$0251 = $__p$0251 + 1 | 0;
  if ($__p$0251 >>> 0 >= 4) {
   $799 = $830;
   $__e$sroa$0$21 = $__e$sroa$0$20;
   $__trailing_sign$0$lcssa = $__trailing_sign$1;
   label = 286;
   break;
  } else {
   $828 = $830;
   $__e$sroa$0$0 = $__e$sroa$0$20;
   $__fd$0 = $__fd$2;
   $__trailing_sign$0253 = $__trailing_sign$1;
  }
 }
 L384 : do if ((label | 0) == 53) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 141) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 196) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 251) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 273) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 284) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 286) {
  L388 : do if ($__trailing_sign$0$lcssa) {
   $730 = $__trailing_sign$0$lcssa + 4 | 0;
   $731 = $__trailing_sign$0$lcssa + 8 | 0;
   $__e$sroa$0$22 = $__e$sroa$0$21;
   $__i$0 = 1;
   while (1) {
    $732 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
    if (!($732 & 1)) $739 = ($732 & 255) >>> 1; else $739 = HEAP32[$730 >> 2] | 0;
    if ($__i$0 >>> 0 >= $739 >>> 0) break L388;
    $740 = HEAP32[$__b >> 2] | 0;
    do if (!$740) $838 = 1; else {
     $743 = HEAP32[$740 + 12 >> 2] | 0;
     if (($743 | 0) == (HEAP32[$740 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$740 >> 2] | 0) + 36 >> 2] & 127]($740) | 0; else $$0$i$i$i$i = HEAP32[$743 >> 2] | 0;
     if (($$0$i$i$i$i | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $838 = 1;
      break;
     } else {
      $838 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    if (!$__e$sroa$0$22) label = 304; else {
     $755 = HEAP32[$__e$sroa$0$22 + 12 >> 2] | 0;
     if (($755 | 0) == (HEAP32[$__e$sroa$0$22 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$22 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$22) | 0; else $$0$i$i1$i$i = HEAP32[$755 >> 2] | 0;
     if (($$0$i$i1$i$i | 0) == -1) label = 304; else if ($838) $__e$sroa$0$24 = $__e$sroa$0$22; else break;
    }
    if ((label | 0) == 304) {
     label = 0;
     if ($838) break; else $__e$sroa$0$24 = 0;
    }
    $765 = HEAP32[$__b >> 2] | 0;
    $767 = HEAP32[$765 + 12 >> 2] | 0;
    if (($767 | 0) == (HEAP32[$765 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$765 >> 2] | 0) + 36 >> 2] & 127]($765) | 0; else $$0$i$i = HEAP32[$767 >> 2] | 0;
    if (!(HEAP8[$__trailing_sign$0$lcssa >> 0] & 1)) $781 = $730; else $781 = HEAP32[$731 >> 2] | 0;
    if (($$0$i$i | 0) != (HEAP32[$781 + ($__i$0 << 2) >> 2] | 0)) break;
    $786 = $__i$0 + 1 | 0;
    $787 = HEAP32[$__b >> 2] | 0;
    $788 = $787 + 12 | 0;
    $789 = HEAP32[$788 >> 2] | 0;
    if (($789 | 0) == (HEAP32[$787 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$787 >> 2] | 0) + 40 >> 2] & 127]($787) | 0;
     $__e$sroa$0$22 = $__e$sroa$0$24;
     $__i$0 = $786;
     continue;
    } else {
     HEAP32[$788 >> 2] = $789 + 4;
     $__e$sroa$0$22 = $__e$sroa$0$24;
     $__i$0 = $786;
     continue;
    }
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   break L384;
  } while (0);
  $797 = HEAP32[$__gb >> 2] | 0;
  if (($797 | 0) == ($799 | 0)) $$0 = 1; else {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $797, $799, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) $$0 = 1; else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $$0 = 0;
   }
  }
 } while (0);
 if (HEAP8[$__spaces >> 0] & 1) _free(HEAP32[$109 >> 2] | 0);
 if (HEAP8[$__nsn >> 0] & 1) _free(HEAP32[$101 >> 2] | 0);
 if (HEAP8[$__psn >> 0] & 1) _free(HEAP32[$103 >> 2] | 0);
 if (HEAP8[$__sym >> 0] & 1) _free(HEAP32[$107 >> 2] | 0);
 if (HEAP8[$__grp >> 0] & 1) _free(HEAP32[$__grp + 8 >> 2] | 0);
 $825 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if (!$825) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[$11 >> 2] & 127]($825);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i52 = 0, $$0$i$i$i$i71 = 0, $$0$i$i$i29 = 0, $$0$i56 = 0, $$012$i$i$i = 0, $$012$i$i$i45 = 0, $$012$i$i$i64 = 0, $$02$i$i = 0, $$1$i = 0, $$pre107 = 0, $$sroa$4 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $104 = 0, $105 = 0, $107 = 0, $11 = 0, $110 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $139 = 0, $14 = 0, $141 = 0, $143 = 0, $145 = 0, $148 = 0, $15 = 0, $150 = 0, $153 = 0, $155 = 0, $156 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $17 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $184 = 0, $186 = 0, $19 = 0, $190 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $200 = 0, $200$phi = 0, $202 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $219$phi = 0, $22 = 0, $223 = 0, $225 = 0, $226 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $238 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = 0, $247 = 0, $250 = 0, $251 = 0, $253 = 0, $257 = 0, $261 = 0, $263 = 0, $264 = 0, $271 = 0, $271$phi = 0, $273 = 0, $278 = 0, $279 = 0, $280 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $290$phi = 0, $293 = 0, $295 = 0, $296 = 0, $297 = 0, $299 = 0, $3 = 0, $30 = 0, $302 = 0, $304 = 0, $308 = 0, $310 = 0, $311 = 0, $315 = 0, $317 = 0, $320 = 0, $321 = 0, $323 = 0, $327 = 0, $33 = 0, $331 = 0, $333 = 0, $334 = 0, $34 = 0, $341 = 0, $341$phi = 0, $343 = 0, $348 = 0, $349 = 0, $350 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $360$phi = 0, $363 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $372 = 0, $374 = 0, $378 = 0, $380 = 0, $381 = 0, $385 = 0, $387 = 0, $390 = 0, $391 = 0, $393 = 0, $4 = 0, $400 = 0, $401 = 0, $407 = 0, $410 = 0, $413 = 0, $415 = 0, $420 = 0, $422 = 0, $423 = 0, $424 = 0, $427 = 0, $43 = 0, $434 = 0, $435 = 0, $44 = 0, $444 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $458 = 0, $459 = 0, $46 = 0, $461 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $66 = 0, $68 = 0, $7 = 0, $71 = 0, $72 = 0, $74 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $88 = 0, $9 = 0, $92 = 0, $94 = 0, $95 = 0, $99 = 0, $__p$0$ph$i$i = 0, $__p$01$i$i = 0, $e$07$i = 0, $e$07$i38 = 0, $e$09$i = 0, $isdigit$i29 = 0, $isdigit$i33 = 0, $isdigit$i38 = 0, $isdigittmp$i28 = 0, $isdigittmp$i32 = 0, $isdigittmp$i37 = 0, $isdigittmp2$i = 0, $isdigittmp2$i41 = 0, $isdigittmp4$i = 0, $n$095 = 0, $num$i58 = 0, $t$010$i = 0, $t$08$i = 0, $t$08$i37 = 0, $vararg_buffer4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $vararg_buffer4 = sp;
 $0 = sp + 24 | 0;
 $num$i58 = sp + 368 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 240 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 80 | 0;
 $5 = sp + 216 | 0;
 $6 = sp + 104 | 0;
 $7 = sp + 128 | 0;
 $8 = sp + 140 | 0;
 $9 = sp + 152 | 0;
 $10 = sp + 340 | 0;
 $11 = sp + 176 | 0;
 $12 = sp + 188 | 0;
 $13 = sp + 200 | 0;
 $14 = sp + 116 | 0;
 $15 = sp + 252 | 0;
 $16 = sp + 264 | 0;
 $17 = sp + 276 | 0;
 $18 = sp + 288 | 0;
 $19 = sp + 304 | 0;
 $$sroa$4 = sp + 408 | 0;
 $20 = sp + 44 | 0;
 $21 = sp + 164 | 0;
 $22 = sp + 328 | 0;
 $23 = sp + 352 | 0;
 $24 = $last;
 if (($24 - $first | 0) <= 3) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP8[$first >> 0] | 0) != 76) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $30 = $first + 1 | 0;
 do switch (HEAP8[$30 >> 0] | 0) {
 case 105:
  {
   $141 = $first + 2 | 0;
   HEAP8[$11 >> 0] = 0;
   HEAP8[$11 + 1 >> 0] = 0;
   $143 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($141, $last, $11, $db) | 0;
   $$0 = ($143 | 0) == ($141 | 0) ? $first : $143;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 95:
  {
   if ((HEAP8[$first + 2 >> 0] | 0) != 90) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $400 = $first + 3 | 0;
   $401 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($400, $last, $db) | 0;
   if (($401 | 0) == ($400 | 0) | ($401 | 0) == ($last | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    STACKTOP = sp;
    return ((HEAP8[$401 >> 0] | 0) == 69 ? $401 + 1 | 0 : $first) | 0;
   }
   break;
  }
 case 115:
  {
   $129 = $first + 2 | 0;
   HEAP8[$9 >> 0] = 10;
   $130 = $9 + 1 | 0;
   HEAP8[$130 + 0 >> 0] = HEAP8[60792] | 0;
   HEAP8[$130 + 1 >> 0] = HEAP8[60793] | 0;
   HEAP8[$130 + 2 >> 0] = HEAP8[60794] | 0;
   HEAP8[$130 + 3 >> 0] = HEAP8[60795] | 0;
   HEAP8[$130 + 4 >> 0] = HEAP8[60796] | 0;
   HEAP8[$9 + 6 >> 0] = 0;
   $132 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($129, $last, $9, $db) | 0;
   $$0 = ($132 | 0) == ($129 | 0) ? $first : $132;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 110:
  {
   $170 = $first + 2 | 0;
   HEAP8[$17 >> 0] = 16;
   $172 = $17 + 1 | 0;
   $173 = $172;
   HEAP8[$173 >> 0] = 95;
   HEAP8[$173 + 1 >> 0] = 95;
   HEAP8[$173 + 2 >> 0] = 105;
   HEAP8[$173 + 3 >> 0] = 110;
   $175 = $172 + 4 | 0;
   HEAP8[$175 >> 0] = 116;
   HEAP8[$175 + 1 >> 0] = 49;
   HEAP8[$175 + 2 >> 0] = 50;
   HEAP8[$175 + 3 >> 0] = 56;
   HEAP8[$17 + 9 >> 0] = 0;
   $177 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($170, $last, $17, $db) | 0;
   $$0 = ($177 | 0) == ($170 | 0) ? $first : $177;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 111:
  {
   $179 = $first + 2 | 0;
   $180 = _malloc(32) | 0;
   HEAP32[$18 + 8 >> 2] = $180;
   HEAP32[$18 >> 2] = 33;
   HEAP32[$18 + 4 >> 2] = 17;
   dest = $180 + 0 | 0;
   src = 60848;
   stop = dest + 17 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$180 + 17 >> 0] = 0;
   $184 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($179, $last, $18, $db) | 0;
   _free($180);
   $$0 = ($184 | 0) == ($179 | 0) ? $first : $184;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 109:
  {
   $155 = $first + 2 | 0;
   HEAP8[$14 >> 0] = 4;
   $156 = $14 + 1 | 0;
   HEAP8[$156 >> 0] = 117;
   HEAP8[$156 + 1 >> 0] = 108;
   HEAP8[$14 + 3 >> 0] = 0;
   $158 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($155, $last, $14, $db) | 0;
   $$0 = ($158 | 0) == ($155 | 0) ? $first : $158;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 101:
  {
   $327 = $first + 2 | 0;
   L73 : do if (($24 - $327 | 0) >>> 0 > 20) {
    $331 = $first + 22 | 0;
    $334 = HEAP8[$327 >> 0] | 0;
    $341 = $first;
    $e$09$i = $0;
    $t$010$i = $327;
    while (1) {
     $333 = $334 << 24 >> 24;
     $isdigittmp$i37 = $333 + -48 | 0;
     $isdigit$i38 = $isdigittmp$i37 >>> 0 < 10;
     if (!$isdigit$i38) if ((($333 | 32) + -97 | 0) >>> 0 >= 6) {
      $$1$i = $327;
      break L73;
     }
     $343 = HEAP8[$341 + 3 >> 0] | 0;
     $isdigittmp4$i = $343 + -48 | 0;
     $348 = (($isdigit$i38 ? $isdigittmp$i37 : $333 + 9 | 0) << 4) + ($isdigittmp4$i >>> 0 < 10 ? $isdigittmp4$i : $343 + 169 | 0) & 255;
     HEAP8[$e$09$i >> 0] = $348;
     $349 = $341 + 4 | 0;
     $350 = $e$09$i + 1 | 0;
     $334 = HEAP8[$349 >> 0] | 0;
     if (($349 | 0) == ($331 | 0)) break; else {
      $341$phi = $t$010$i;
      $e$09$i = $350;
      $t$010$i = $349;
      $341 = $341$phi;
     }
    }
    if ($334 << 24 >> 24 == 69) {
     L82 : do if (($0 | 0) != ($350 | 0) & $e$09$i >>> 0 > $0 >>> 0) {
      $$012$i$i$i64 = $0;
      $356 = $348;
      $357 = $e$09$i;
      $360 = $350;
      while (1) {
       $355 = HEAP8[$$012$i$i$i64 >> 0] | 0;
       HEAP8[$$012$i$i$i64 >> 0] = $356;
       HEAP8[$357 >> 0] = $355;
       $358 = $$012$i$i$i64 + 1 | 0;
       $359 = $360 + -2 | 0;
       if ($358 >>> 0 >= $359 >>> 0) break L82;
       $360$phi = $357;
       $$012$i$i$i64 = $358;
       $356 = HEAP8[$359 >> 0] | 0;
       $357 = $359;
       $360 = $360$phi;
      }
     } while (0);
     dest = $num$i58 + 0 | 0;
     stop = dest + 40 | 0;
     do {
      HEAP8[dest >> 0] = 0;
      dest = dest + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAPF64[tempDoublePtr >> 3] = +HEAPF64[$0 >> 3];
     HEAP32[$vararg_buffer4 >> 2] = HEAP32[tempDoublePtr >> 2];
     HEAP32[$vararg_buffer4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
     $363 = _snprintf($num$i58, 40, 60872, $vararg_buffer4) | 0;
     if ($363 >>> 0 > 39) $$1$i = $327; else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2, $num$i58, $363);
      HEAP32[$1 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
      HEAP32[$2 + 0 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      HEAP32[$2 + 8 >> 2] = 0;
      $365 = $1 + 12 | 0;
      HEAP32[$365 + 0 >> 2] = 0;
      HEAP32[$365 + 4 >> 2] = 0;
      HEAP32[$365 + 8 >> 2] = 0;
      $366 = $db + 4 | 0;
      $367 = HEAP32[$366 >> 2] | 0;
      $369 = HEAP32[$db + 8 >> 2] | 0;
      if ($367 >>> 0 < $369 >>> 0) {
       if (!$367) $374 = 0; else {
        HEAP32[$367 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
        HEAP32[$367 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
        HEAP32[$367 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
        HEAP32[$1 + 0 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAP32[$1 + 8 >> 2] = 0;
        $372 = $367 + 12 | 0;
        HEAP32[$372 + 0 >> 2] = HEAP32[$365 + 0 >> 2];
        HEAP32[$372 + 4 >> 2] = HEAP32[$365 + 4 >> 2];
        HEAP32[$372 + 8 >> 2] = HEAP32[$365 + 8 >> 2];
        HEAP32[$365 + 0 >> 2] = 0;
        HEAP32[$365 + 4 >> 2] = 0;
        HEAP32[$365 + 8 >> 2] = 0;
        $374 = HEAP32[$366 >> 2] | 0;
       }
       HEAP32[$366 >> 2] = $374 + 24;
      } else {
       $378 = HEAP32[$db >> 2] | 0;
       $380 = ($367 - $378 | 0) / 24 | 0;
       $381 = $380 + 1 | 0;
       if (($381 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
       $385 = ($369 - $378 | 0) / 24 | 0;
       if ($385 >>> 0 < 1073741823) {
        $387 = $385 << 1;
        $$0$i$i$i$i71 = $387 >>> 0 < $381 >>> 0 ? $381 : $387;
       } else $$0$i$i$i$i71 = 2147483647;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($vararg_buffer4, $$0$i$i$i$i71, $380, $db + 12 | 0);
       $390 = $vararg_buffer4 + 8 | 0;
       $391 = HEAP32[$390 >> 2] | 0;
       if ($391) {
        HEAP32[$391 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
        HEAP32[$391 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
        HEAP32[$391 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
        HEAP32[$1 + 0 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAP32[$1 + 8 >> 2] = 0;
        $393 = $391 + 12 | 0;
        HEAP32[$393 + 0 >> 2] = HEAP32[$365 + 0 >> 2];
        HEAP32[$393 + 4 >> 2] = HEAP32[$365 + 4 >> 2];
        HEAP32[$393 + 8 >> 2] = HEAP32[$365 + 8 >> 2];
        HEAP32[$365 + 0 >> 2] = 0;
        HEAP32[$365 + 4 >> 2] = 0;
        HEAP32[$365 + 8 >> 2] = 0;
       }
       HEAP32[$390 >> 2] = $391 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $vararg_buffer4);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($vararg_buffer4);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      $$1$i = $first + 23 | 0;
     }
    } else $$1$i = $327;
   } else $$1$i = $327; while (0);
   $$0 = ($$1$i | 0) == ($327 | 0) ? $first : $$1$i;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 106:
  {
   $145 = $first + 2 | 0;
   HEAP8[$12 >> 0] = 2;
   HEAP8[$12 + 1 >> 0] = 117;
   HEAP8[$12 + 2 >> 0] = 0;
   $148 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($145, $last, $12, $db) | 0;
   $$0 = ($148 | 0) == ($145 | 0) ? $first : $148;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 100:
  {
   $257 = $first + 2 | 0;
   L109 : do if (($24 - $257 | 0) >>> 0 > 16) {
    $261 = $first + 18 | 0;
    $264 = HEAP8[$257 >> 0] | 0;
    $271 = $first;
    $e$07$i38 = $0;
    $t$08$i37 = $257;
    while (1) {
     $263 = $264 << 24 >> 24;
     $isdigittmp$i32 = $263 + -48 | 0;
     $isdigit$i33 = $isdigittmp$i32 >>> 0 < 10;
     if (!$isdigit$i33) if ((($263 | 32) + -97 | 0) >>> 0 >= 6) {
      $$0$i56 = $257;
      break L109;
     }
     $273 = HEAP8[$271 + 3 >> 0] | 0;
     $isdigittmp2$i41 = $273 + -48 | 0;
     $278 = (($isdigit$i33 ? $isdigittmp$i32 : $263 + 9 | 0) << 4) + ($isdigittmp2$i41 >>> 0 < 10 ? $isdigittmp2$i41 : $273 + 169 | 0) & 255;
     HEAP8[$e$07$i38 >> 0] = $278;
     $279 = $271 + 4 | 0;
     $280 = $e$07$i38 + 1 | 0;
     $264 = HEAP8[$279 >> 0] | 0;
     if (($279 | 0) == ($261 | 0)) break; else {
      $271$phi = $t$08$i37;
      $e$07$i38 = $280;
      $t$08$i37 = $279;
      $271 = $271$phi;
     }
    }
    if ($264 << 24 >> 24 == 69) {
     L118 : do if (($0 | 0) != ($280 | 0) & $e$07$i38 >>> 0 > $0 >>> 0) {
      $$012$i$i$i45 = $0;
      $286 = $278;
      $287 = $e$07$i38;
      $290 = $280;
      while (1) {
       $285 = HEAP8[$$012$i$i$i45 >> 0] | 0;
       HEAP8[$$012$i$i$i45 >> 0] = $286;
       HEAP8[$287 >> 0] = $285;
       $288 = $$012$i$i$i45 + 1 | 0;
       $289 = $290 + -2 | 0;
       if ($288 >>> 0 >= $289 >>> 0) break L118;
       $290$phi = $287;
       $$012$i$i$i45 = $288;
       $286 = HEAP8[$289 >> 0] | 0;
       $287 = $289;
       $290 = $290$phi;
      }
     } while (0);
     dest = $num$i58 + 0 | 0;
     stop = dest + 32 | 0;
     do {
      HEAP8[dest >> 0] = 0;
      dest = dest + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAPF64[tempDoublePtr >> 3] = +HEAPF64[$0 >> 3];
     HEAP32[$vararg_buffer4 >> 2] = HEAP32[tempDoublePtr >> 2];
     HEAP32[$vararg_buffer4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
     $293 = _snprintf($num$i58, 32, 60880, $vararg_buffer4) | 0;
     if ($293 >>> 0 > 31) $$0$i56 = $257; else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2, $num$i58, $293);
      HEAP32[$1 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
      HEAP32[$2 + 0 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      HEAP32[$2 + 8 >> 2] = 0;
      $295 = $1 + 12 | 0;
      HEAP32[$295 + 0 >> 2] = 0;
      HEAP32[$295 + 4 >> 2] = 0;
      HEAP32[$295 + 8 >> 2] = 0;
      $296 = $db + 4 | 0;
      $297 = HEAP32[$296 >> 2] | 0;
      $299 = HEAP32[$db + 8 >> 2] | 0;
      if ($297 >>> 0 < $299 >>> 0) {
       if (!$297) $304 = 0; else {
        HEAP32[$297 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
        HEAP32[$297 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
        HEAP32[$297 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
        HEAP32[$1 + 0 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAP32[$1 + 8 >> 2] = 0;
        $302 = $297 + 12 | 0;
        HEAP32[$302 + 0 >> 2] = HEAP32[$295 + 0 >> 2];
        HEAP32[$302 + 4 >> 2] = HEAP32[$295 + 4 >> 2];
        HEAP32[$302 + 8 >> 2] = HEAP32[$295 + 8 >> 2];
        HEAP32[$295 + 0 >> 2] = 0;
        HEAP32[$295 + 4 >> 2] = 0;
        HEAP32[$295 + 8 >> 2] = 0;
        $304 = HEAP32[$296 >> 2] | 0;
       }
       HEAP32[$296 >> 2] = $304 + 24;
      } else {
       $308 = HEAP32[$db >> 2] | 0;
       $310 = ($297 - $308 | 0) / 24 | 0;
       $311 = $310 + 1 | 0;
       if (($311 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
       $315 = ($299 - $308 | 0) / 24 | 0;
       if ($315 >>> 0 < 1073741823) {
        $317 = $315 << 1;
        $$0$i$i$i$i52 = $317 >>> 0 < $311 >>> 0 ? $311 : $317;
       } else $$0$i$i$i$i52 = 2147483647;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($vararg_buffer4, $$0$i$i$i$i52, $310, $db + 12 | 0);
       $320 = $vararg_buffer4 + 8 | 0;
       $321 = HEAP32[$320 >> 2] | 0;
       if ($321) {
        HEAP32[$321 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
        HEAP32[$321 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
        HEAP32[$321 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
        HEAP32[$1 + 0 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAP32[$1 + 8 >> 2] = 0;
        $323 = $321 + 12 | 0;
        HEAP32[$323 + 0 >> 2] = HEAP32[$295 + 0 >> 2];
        HEAP32[$323 + 4 >> 2] = HEAP32[$295 + 4 >> 2];
        HEAP32[$323 + 8 >> 2] = HEAP32[$295 + 8 >> 2];
        HEAP32[$295 + 0 >> 2] = 0;
        HEAP32[$295 + 4 >> 2] = 0;
        HEAP32[$295 + 8 >> 2] = 0;
       }
       HEAP32[$320 >> 2] = $321 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $vararg_buffer4);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($vararg_buffer4);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      $$0$i56 = $first + 19 | 0;
     }
    } else $$0$i56 = $257;
   } else $$0$i56 = $257; while (0);
   $$0 = ($$0$i56 | 0) == ($257 | 0) ? $first : $$0$i56;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 120:
  {
   $160 = $first + 2 | 0;
   HEAP8[$15 >> 0] = 4;
   $161 = $15 + 1 | 0;
   HEAP8[$161 >> 0] = 108;
   HEAP8[$161 + 1 >> 0] = 108;
   HEAP8[$15 + 3 >> 0] = 0;
   $163 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($160, $last, $15, $db) | 0;
   $$0 = ($163 | 0) == ($160 | 0) ? $first : $163;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 108:
  {
   $150 = $first + 2 | 0;
   HEAP8[$13 >> 0] = 2;
   HEAP8[$13 + 1 >> 0] = 108;
   HEAP8[$13 + 2 >> 0] = 0;
   $153 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($150, $last, $13, $db) | 0;
   $$0 = ($153 | 0) == ($150 | 0) ? $first : $153;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 99:
  {
   $110 = $first + 2 | 0;
   HEAP8[$6 >> 0] = 8;
   $111 = $6 + 1 | 0;
   HEAP8[$111 >> 0] = 99;
   HEAP8[$111 + 1 >> 0] = 104;
   HEAP8[$111 + 2 >> 0] = 97;
   HEAP8[$111 + 3 >> 0] = 114;
   HEAP8[$6 + 5 >> 0] = 0;
   $113 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($110, $last, $6, $db) | 0;
   $$0 = ($113 | 0) == ($110 | 0) ? $first : $113;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 97:
  {
   $115 = $first + 2 | 0;
   $116 = _malloc(16) | 0;
   HEAP32[$7 + 8 >> 2] = $116;
   HEAP32[$7 >> 2] = 17;
   HEAP32[$7 + 4 >> 2] = 11;
   dest = $116 + 0 | 0;
   src = 60760;
   stop = dest + 11 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$116 + 11 >> 0] = 0;
   $120 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($115, $last, $7, $db) | 0;
   _free($116);
   $$0 = ($120 | 0) == ($115 | 0) ? $first : $120;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 116:
  {
   $134 = $first + 2 | 0;
   $135 = _malloc(16) | 0;
   HEAP32[$10 + 8 >> 2] = $135;
   HEAP32[$10 >> 2] = 17;
   HEAP32[$10 + 4 >> 2] = 14;
   dest = $135 + 0 | 0;
   src = 60800;
   stop = dest + 14 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$135 + 14 >> 0] = 0;
   $139 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($134, $last, $10, $db) | 0;
   _free($135);
   $$0 = ($139 | 0) == ($134 | 0) ? $first : $139;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 121:
  {
   $165 = $first + 2 | 0;
   HEAP8[$16 >> 0] = 6;
   $166 = $16 + 1 | 0;
   HEAP8[$166 + 0 >> 0] = HEAP8[60840] | 0;
   HEAP8[$166 + 1 >> 0] = HEAP8[60841] | 0;
   HEAP8[$166 + 2 >> 0] = HEAP8[60842] | 0;
   HEAP8[$16 + 4 >> 0] = 0;
   $168 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($165, $last, $16, $db) | 0;
   $$0 = ($168 | 0) == ($165 | 0) ? $first : $168;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 104:
  {
   $122 = $first + 2 | 0;
   $123 = _malloc(16) | 0;
   HEAP32[$8 + 8 >> 2] = $123;
   HEAP32[$8 >> 2] = 17;
   HEAP32[$8 + 4 >> 2] = 13;
   dest = $123 + 0 | 0;
   src = 60776;
   stop = dest + 13 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$123 + 13 >> 0] = 0;
   $127 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($122, $last, $8, $db) | 0;
   _free($123);
   $$0 = ($127 | 0) == ($122 | 0) ? $first : $127;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 98:
  {
   if ((HEAP8[$first + 3 >> 0] | 0) != 69) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $43 = HEAP8[$first + 2 >> 0] | 0;
   if (($43 | 0) == 48) {
    HEAP8[$4 >> 0] = 10;
    $44 = $4 + 1 | 0;
    HEAP8[$44 + 0 >> 0] = HEAP8[60744] | 0;
    HEAP8[$44 + 1 >> 0] = HEAP8[60745] | 0;
    HEAP8[$44 + 2 >> 0] = HEAP8[60746] | 0;
    HEAP8[$44 + 3 >> 0] = HEAP8[60747] | 0;
    HEAP8[$44 + 4 >> 0] = HEAP8[60748] | 0;
    HEAP8[$4 + 6 >> 0] = 0;
    $46 = $4 + 12 | 0;
    HEAP32[$46 + 0 >> 2] = 0;
    HEAP32[$46 + 4 >> 2] = 0;
    HEAP32[$46 + 8 >> 2] = 0;
    $47 = $db + 4 | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    $50 = HEAP32[$db + 8 >> 2] | 0;
    if ($48 >>> 0 < $50 >>> 0) {
     if (!$48) $55 = 0; else {
      HEAP32[$48 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
      HEAP32[$48 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$48 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      HEAP32[$4 + 0 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$4 + 8 >> 2] = 0;
      $53 = $48 + 12 | 0;
      HEAP32[$53 + 0 >> 2] = HEAP32[$46 + 0 >> 2];
      HEAP32[$53 + 4 >> 2] = HEAP32[$46 + 4 >> 2];
      HEAP32[$53 + 8 >> 2] = HEAP32[$46 + 8 >> 2];
      HEAP32[$46 + 0 >> 2] = 0;
      HEAP32[$46 + 4 >> 2] = 0;
      HEAP32[$46 + 8 >> 2] = 0;
      $55 = HEAP32[$47 >> 2] | 0;
     }
     HEAP32[$47 >> 2] = $55 + 24;
    } else {
     $59 = HEAP32[$db >> 2] | 0;
     $61 = ($48 - $59 | 0) / 24 | 0;
     $62 = $61 + 1 | 0;
     if (($62 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $66 = ($50 - $59 | 0) / 24 | 0;
     if ($66 >>> 0 < 1073741823) {
      $68 = $66 << 1;
      $$0$i$i$i = $68 >>> 0 < $62 >>> 0 ? $62 : $68;
     } else $$0$i$i$i = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($vararg_buffer4, $$0$i$i$i, $61, $db + 12 | 0);
     $71 = $vararg_buffer4 + 8 | 0;
     $72 = HEAP32[$71 >> 2] | 0;
     if ($72) {
      HEAP32[$72 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
      HEAP32[$72 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$72 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      HEAP32[$4 + 0 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$4 + 8 >> 2] = 0;
      $74 = $72 + 12 | 0;
      HEAP32[$74 + 0 >> 2] = HEAP32[$46 + 0 >> 2];
      HEAP32[$74 + 4 >> 2] = HEAP32[$46 + 4 >> 2];
      HEAP32[$74 + 8 >> 2] = HEAP32[$46 + 8 >> 2];
      HEAP32[$46 + 0 >> 2] = 0;
      HEAP32[$46 + 4 >> 2] = 0;
      HEAP32[$46 + 8 >> 2] = 0;
     }
     HEAP32[$71 >> 2] = $72 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $vararg_buffer4);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($vararg_buffer4);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    $$0 = $first + 4 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($43 | 0) == 49) {
    HEAP8[$5 >> 0] = 8;
    $77 = $5 + 1 | 0;
    HEAP8[$77 >> 0] = 116;
    HEAP8[$77 + 1 >> 0] = 114;
    HEAP8[$77 + 2 >> 0] = 117;
    HEAP8[$77 + 3 >> 0] = 101;
    HEAP8[$5 + 5 >> 0] = 0;
    $79 = $5 + 12 | 0;
    HEAP32[$79 + 0 >> 2] = 0;
    HEAP32[$79 + 4 >> 2] = 0;
    HEAP32[$79 + 8 >> 2] = 0;
    $80 = $db + 4 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $83 = HEAP32[$db + 8 >> 2] | 0;
    if ($81 >>> 0 < $83 >>> 0) {
     if (!$81) $88 = 0; else {
      HEAP32[$81 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
      HEAP32[$81 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$81 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      HEAP32[$5 + 0 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$5 + 8 >> 2] = 0;
      $86 = $81 + 12 | 0;
      HEAP32[$86 + 0 >> 2] = HEAP32[$79 + 0 >> 2];
      HEAP32[$86 + 4 >> 2] = HEAP32[$79 + 4 >> 2];
      HEAP32[$86 + 8 >> 2] = HEAP32[$79 + 8 >> 2];
      HEAP32[$79 + 0 >> 2] = 0;
      HEAP32[$79 + 4 >> 2] = 0;
      HEAP32[$79 + 8 >> 2] = 0;
      $88 = HEAP32[$80 >> 2] | 0;
     }
     HEAP32[$80 >> 2] = $88 + 24;
    } else {
     $92 = HEAP32[$db >> 2] | 0;
     $94 = ($81 - $92 | 0) / 24 | 0;
     $95 = $94 + 1 | 0;
     if (($95 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $99 = ($83 - $92 | 0) / 24 | 0;
     if ($99 >>> 0 < 1073741823) {
      $101 = $99 << 1;
      $$0$i$i$i29 = $101 >>> 0 < $95 >>> 0 ? $95 : $101;
     } else $$0$i$i$i29 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($vararg_buffer4, $$0$i$i$i29, $94, $db + 12 | 0);
     $104 = $vararg_buffer4 + 8 | 0;
     $105 = HEAP32[$104 >> 2] | 0;
     if ($105) {
      HEAP32[$105 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
      HEAP32[$105 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$105 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      HEAP32[$5 + 0 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$5 + 8 >> 2] = 0;
      $107 = $105 + 12 | 0;
      HEAP32[$107 + 0 >> 2] = HEAP32[$79 + 0 >> 2];
      HEAP32[$107 + 4 >> 2] = HEAP32[$79 + 4 >> 2];
      HEAP32[$107 + 8 >> 2] = HEAP32[$79 + 8 >> 2];
      HEAP32[$79 + 0 >> 2] = 0;
      HEAP32[$79 + 4 >> 2] = 0;
      HEAP32[$79 + 8 >> 2] = 0;
     }
     HEAP32[$104 >> 2] = $105 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $vararg_buffer4);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($vararg_buffer4);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
    $$0 = $first + 4 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 119:
  {
   $33 = $first + 2 | 0;
   HEAP8[$3 >> 0] = 14;
   $34 = $3 + 1 | 0;
   HEAP8[$34 + 0 >> 0] = HEAP8[60736] | 0;
   HEAP8[$34 + 1 >> 0] = HEAP8[60737] | 0;
   HEAP8[$34 + 2 >> 0] = HEAP8[60738] | 0;
   HEAP8[$34 + 3 >> 0] = HEAP8[60739] | 0;
   HEAP8[$34 + 4 >> 0] = HEAP8[60740] | 0;
   HEAP8[$34 + 5 >> 0] = HEAP8[60741] | 0;
   HEAP8[$34 + 6 >> 0] = HEAP8[60742] | 0;
   HEAP8[$3 + 8 >> 0] = 0;
   $36 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($33, $last, $3, $db) | 0;
   $$0 = ($36 | 0) == ($33 | 0) ? $first : $36;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 84:
  {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 102:
  {
   $186 = $first + 2 | 0;
   L202 : do if (($24 - $186 | 0) >>> 0 > 8) {
    $190 = $first + 10 | 0;
    $193 = HEAP8[$186 >> 0] | 0;
    $200 = $first;
    $e$07$i = $0;
    $t$08$i = $186;
    while (1) {
     $192 = $193 << 24 >> 24;
     $isdigittmp$i28 = $192 + -48 | 0;
     $isdigit$i29 = $isdigittmp$i28 >>> 0 < 10;
     if (!$isdigit$i29) if ((($192 | 32) + -97 | 0) >>> 0 >= 6) {
      $$0$i = $186;
      break L202;
     }
     $202 = HEAP8[$200 + 3 >> 0] | 0;
     $isdigittmp2$i = $202 + -48 | 0;
     $207 = (($isdigit$i29 ? $isdigittmp$i28 : $192 + 9 | 0) << 4) + ($isdigittmp2$i >>> 0 < 10 ? $isdigittmp2$i : $202 + 169 | 0) & 255;
     HEAP8[$e$07$i >> 0] = $207;
     $208 = $200 + 4 | 0;
     $209 = $e$07$i + 1 | 0;
     $193 = HEAP8[$208 >> 0] | 0;
     if (($208 | 0) == ($190 | 0)) break; else {
      $200$phi = $t$08$i;
      $e$07$i = $209;
      $t$08$i = $208;
      $200 = $200$phi;
     }
    }
    if ($193 << 24 >> 24 == 69) {
     L211 : do if (($0 | 0) != ($209 | 0) & $e$07$i >>> 0 > $0 >>> 0) {
      $$012$i$i$i = $0;
      $215 = $207;
      $216 = $e$07$i;
      $219 = $209;
      while (1) {
       $214 = HEAP8[$$012$i$i$i >> 0] | 0;
       HEAP8[$$012$i$i$i >> 0] = $215;
       HEAP8[$216 >> 0] = $214;
       $217 = $$012$i$i$i + 1 | 0;
       $218 = $219 + -2 | 0;
       if ($217 >>> 0 >= $218 >>> 0) break L211;
       $219$phi = $216;
       $$012$i$i$i = $217;
       $215 = HEAP8[$218 >> 0] | 0;
       $216 = $218;
       $219 = $219$phi;
      }
     } while (0);
     dest = $num$i58 + 0 | 0;
     stop = dest + 24 | 0;
     do {
      HEAP8[dest >> 0] = 0;
      dest = dest + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$0 >> 2];
     HEAP32[$vararg_buffer4 >> 2] = HEAP32[tempDoublePtr >> 2];
     HEAP32[$vararg_buffer4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
     $223 = _snprintf($num$i58, 24, 60888, $vararg_buffer4) | 0;
     if ($223 >>> 0 > 23) $$0$i = $186; else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2, $num$i58, $223);
      HEAP32[$1 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
      HEAP32[$2 + 0 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      HEAP32[$2 + 8 >> 2] = 0;
      $225 = $1 + 12 | 0;
      HEAP32[$225 + 0 >> 2] = 0;
      HEAP32[$225 + 4 >> 2] = 0;
      HEAP32[$225 + 8 >> 2] = 0;
      $226 = $db + 4 | 0;
      $227 = HEAP32[$226 >> 2] | 0;
      $229 = HEAP32[$db + 8 >> 2] | 0;
      if ($227 >>> 0 < $229 >>> 0) {
       if (!$227) $234 = 0; else {
        HEAP32[$227 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
        HEAP32[$227 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
        HEAP32[$227 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
        HEAP32[$1 + 0 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAP32[$1 + 8 >> 2] = 0;
        $232 = $227 + 12 | 0;
        HEAP32[$232 + 0 >> 2] = HEAP32[$225 + 0 >> 2];
        HEAP32[$232 + 4 >> 2] = HEAP32[$225 + 4 >> 2];
        HEAP32[$232 + 8 >> 2] = HEAP32[$225 + 8 >> 2];
        HEAP32[$225 + 0 >> 2] = 0;
        HEAP32[$225 + 4 >> 2] = 0;
        HEAP32[$225 + 8 >> 2] = 0;
        $234 = HEAP32[$226 >> 2] | 0;
       }
       HEAP32[$226 >> 2] = $234 + 24;
      } else {
       $238 = HEAP32[$db >> 2] | 0;
       $240 = ($227 - $238 | 0) / 24 | 0;
       $241 = $240 + 1 | 0;
       if (($241 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
       $245 = ($229 - $238 | 0) / 24 | 0;
       if ($245 >>> 0 < 1073741823) {
        $247 = $245 << 1;
        $$0$i$i$i$i = $247 >>> 0 < $241 >>> 0 ? $241 : $247;
       } else $$0$i$i$i$i = 2147483647;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($vararg_buffer4, $$0$i$i$i$i, $240, $db + 12 | 0);
       $250 = $vararg_buffer4 + 8 | 0;
       $251 = HEAP32[$250 >> 2] | 0;
       if ($251) {
        HEAP32[$251 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
        HEAP32[$251 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
        HEAP32[$251 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
        HEAP32[$1 + 0 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAP32[$1 + 8 >> 2] = 0;
        $253 = $251 + 12 | 0;
        HEAP32[$253 + 0 >> 2] = HEAP32[$225 + 0 >> 2];
        HEAP32[$253 + 4 >> 2] = HEAP32[$225 + 4 >> 2];
        HEAP32[$253 + 8 >> 2] = HEAP32[$225 + 8 >> 2];
        HEAP32[$225 + 0 >> 2] = 0;
        HEAP32[$225 + 4 >> 2] = 0;
        HEAP32[$225 + 8 >> 2] = 0;
       }
       HEAP32[$250 >> 2] = $251 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $vararg_buffer4);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($vararg_buffer4);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      $$0$i = $first + 11 | 0;
     }
    } else $$0$i = $186;
   } else $$0$i = $186; while (0);
   $$0 = ($$0$i | 0) == ($186 | 0) ? $first : $$0$i;
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   $407 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($30, $last, $db) | 0;
   if (($407 | 0) == ($30 | 0) | ($407 | 0) == ($last | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $410 = HEAP8[$407 >> 0] | 0;
   if ($410 << 24 >> 24 == 69) {
    $$0 = $407 + 1 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $415 = $410;
    $n$095 = $407;
   }
   while (1) {
    $413 = $n$095 + 1 | 0;
    if ((($415 << 24 >> 24) + -48 | 0) >>> 0 >= 10) break;
    if (($413 | 0) == ($last | 0)) {
     $$0 = $first;
     label = 142;
     break;
    }
    $415 = HEAP8[$413 >> 0] | 0;
    $n$095 = $413;
   }
   if ((label | 0) == 142) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   if (!(($n$095 | 0) != ($407 | 0) & $415 << 24 >> 24 == 69)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $420 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($420 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $422 = $420 + -24 | 0;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($22, $422);
   $423 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($22, 0, 58944, 1) | 0;
   HEAP32[$21 + 0 >> 2] = HEAP32[$423 + 0 >> 2];
   HEAP32[$21 + 4 >> 2] = HEAP32[$423 + 4 >> 2];
   HEAP32[$21 + 8 >> 2] = HEAP32[$423 + 8 >> 2];
   HEAP32[$423 + 0 >> 2] = 0;
   HEAP32[$423 + 4 >> 2] = 0;
   HEAP32[$423 + 8 >> 2] = 0;
   $424 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($21, 58936, 1) | 0;
   HEAP32[$20 + 0 >> 2] = HEAP32[$424 + 0 >> 2];
   HEAP32[$20 + 4 >> 2] = HEAP32[$424 + 4 >> 2];
   HEAP32[$20 + 8 >> 2] = HEAP32[$424 + 8 >> 2];
   HEAP32[$424 + 0 >> 2] = 0;
   HEAP32[$424 + 4 >> 2] = 0;
   HEAP32[$424 + 8 >> 2] = 0;
   $427 = $n$095 - $407 | 0;
   if ($427 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
   if ($427 >>> 0 < 11) {
    HEAP8[$23 >> 0] = $427 << 1;
    $__p$0$ph$i$i = $23 + 1 | 0;
   } else {
    $434 = $427 + 16 & -16;
    $435 = _malloc($434) | 0;
    HEAP32[$23 + 8 >> 2] = $435;
    HEAP32[$23 >> 2] = $434 | 1;
    HEAP32[$23 + 4 >> 2] = $427;
    $__p$0$ph$i$i = $435;
   }
   $$02$i$i = $407;
   $__p$01$i$i = $__p$0$ph$i$i;
   while (1) {
    HEAP8[$__p$01$i$i >> 0] = HEAP8[$$02$i$i >> 0] | 0;
    $$02$i$i = $$02$i$i + 1 | 0;
    if (($$02$i$i | 0) == ($n$095 | 0)) break; else $__p$01$i$i = $__p$01$i$i + 1 | 0;
   }
   $$pre107 = HEAP8[$23 >> 0] | 0;
   HEAP8[$__p$0$ph$i$i + $427 >> 0] = 0;
   $444 = ($$pre107 & 1) == 0;
   if ($444) {
    $452 = $23 + 1 | 0;
    $453 = ($$pre107 & 255) >>> 1;
   } else {
    $452 = HEAP32[$23 + 8 >> 2] | 0;
    $453 = HEAP32[$23 + 4 >> 2] | 0;
   }
   $454 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($20, $452, $453) | 0;
   $455 = HEAP8[$454 >> 0] | 0;
   $456 = $454 + 1 | 0;
   HEAP8[$$sroa$4 + 0 >> 0] = HEAP8[$456 + 0 >> 0] | 0;
   HEAP8[$$sroa$4 + 1 >> 0] = HEAP8[$456 + 1 >> 0] | 0;
   HEAP8[$$sroa$4 + 2 >> 0] = HEAP8[$456 + 2 >> 0] | 0;
   HEAP8[$$sroa$4 + 3 >> 0] = HEAP8[$456 + 3 >> 0] | 0;
   HEAP8[$$sroa$4 + 4 >> 0] = HEAP8[$456 + 4 >> 0] | 0;
   HEAP8[$$sroa$4 + 5 >> 0] = HEAP8[$456 + 5 >> 0] | 0;
   HEAP8[$$sroa$4 + 6 >> 0] = HEAP8[$456 + 6 >> 0] | 0;
   $458 = HEAP32[$454 + 8 >> 2] | 0;
   HEAP32[$454 + 0 >> 2] = 0;
   HEAP32[$454 + 4 >> 2] = 0;
   HEAP32[$454 + 8 >> 2] = 0;
   HEAP8[$19 >> 0] = $455;
   $459 = $19 + 1 | 0;
   HEAP8[$459 + 0 >> 0] = HEAP8[$$sroa$4 + 0 >> 0] | 0;
   HEAP8[$459 + 1 >> 0] = HEAP8[$$sroa$4 + 1 >> 0] | 0;
   HEAP8[$459 + 2 >> 0] = HEAP8[$$sroa$4 + 2 >> 0] | 0;
   HEAP8[$459 + 3 >> 0] = HEAP8[$$sroa$4 + 3 >> 0] | 0;
   HEAP8[$459 + 4 >> 0] = HEAP8[$$sroa$4 + 4 >> 0] | 0;
   HEAP8[$459 + 5 >> 0] = HEAP8[$$sroa$4 + 5 >> 0] | 0;
   HEAP8[$459 + 6 >> 0] = HEAP8[$$sroa$4 + 6 >> 0] | 0;
   HEAP32[$19 + 8 >> 2] = $458;
   HEAP8[$$sroa$4 + 0 >> 0] = 0;
   HEAP8[$$sroa$4 + 1 >> 0] = 0;
   HEAP8[$$sroa$4 + 2 >> 0] = 0;
   HEAP8[$$sroa$4 + 3 >> 0] = 0;
   HEAP8[$$sroa$4 + 4 >> 0] = 0;
   HEAP8[$$sroa$4 + 5 >> 0] = 0;
   HEAP8[$$sroa$4 + 6 >> 0] = 0;
   $461 = $19 + 12 | 0;
   HEAP32[$461 + 0 >> 2] = 0;
   HEAP32[$461 + 4 >> 2] = 0;
   HEAP32[$461 + 8 >> 2] = 0;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($422, $19);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
   if (!$444) _free(HEAP32[$23 + 8 >> 2] | 0);
   if (HEAP8[$20 >> 0] & 1) _free(HEAP32[$20 + 8 >> 2] | 0);
   if (HEAP8[$21 >> 0] & 1) _free(HEAP32[$21 + 8 >> 2] | 0);
   if (!(HEAP8[$22 >> 0] & 1)) {
    $$0 = $413;
    STACKTOP = sp;
    return $$0 | 0;
   }
   _free(HEAP32[$22 + 8 >> 2] | 0);
   $$0 = $413;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 return 0;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$124 = 0, $$125 = 0, $$base21 = 0, $$lcssa = 0, $$pre = 0, $$pre$i = 0, $$pre$i107 = 0, $$pre$i120 = 0, $$pre$i16 = 0, $$pre$i29 = 0, $$pre$i3 = 0, $$pre$i42 = 0, $$pre$i55 = 0, $$pre$i68 = 0, $$pre$i81 = 0, $$pre$i94 = 0, $$pre3$i = 0, $$pre3$i$pre$pre = 0, $$pre3$i110 = 0, $$pre3$i110$pre$pre = 0, $$pre3$i123 = 0, $$pre3$i123$pre$pre = 0, $$pre3$i19 = 0, $$pre3$i19$pre$pre = 0, $$pre3$i32 = 0, $$pre3$i32$pre$pre = 0, $$pre3$i45 = 0, $$pre3$i45$pre$pre = 0, $$pre3$i58 = 0, $$pre3$i58$pre$pre = 0, $$pre3$i6 = 0, $$pre3$i6$pre$pre = 0, $$pre3$i71 = 0, $$pre3$i71$pre$pre = 0, $$pre3$i84 = 0, $$pre3$i84$pre$pre = 0, $$pre3$i97 = 0, $$pre3$i97$pre$pre = 0, $10 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $112 = 0, $12 = 0, $122 = 0, $126 = 0, $13 = 0, $130 = 0, $136 = 0, $14 = 0, $143 = 0, $151 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $170 = 0, $180 = 0, $184 = 0, $186 = 0, $192 = 0, $199 = 0, $207 = 0, $213 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $226 = 0, $236 = 0, $239 = 0, $244 = 0, $250 = 0, $255 = 0, $262 = 0, $263 = 0, $266 = 0, $270 = 0, $273 = 0, $274 = 0, $275 = 0, $281 = 0, $288 = 0, $29 = 0, $296 = 0, $3 = 0, $302 = 0, $306 = 0, $307 = 0, $308 = 0, $315 = 0, $325 = 0, $331 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $338 = 0, $339 = 0, $341 = 0, $347 = 0, $348 = 0, $349 = 0, $355 = 0, $362 = 0, $37 = 0, $370 = 0, $376 = 0, $380 = 0, $381 = 0, $382 = 0, $389 = 0, $399 = 0, $4 = 0, $402 = 0, $414 = 0, $415 = 0, $422 = 0, $424 = 0, $425 = 0, $429 = 0, $43 = 0, $430 = 0, $436 = 0, $443 = 0, $451 = 0, $457 = 0, $461 = 0, $462 = 0, $463 = 0, $47 = 0, $470 = 0, $48 = 0, $480 = 0, $484 = 0, $488 = 0, $489 = 0, $49 = 0, $491 = 0, $494 = 0, $496 = 0, $5 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $505 = 0, $506 = 0, $507 = 0, $513 = 0, $520 = 0, $528 = 0, $534 = 0, $538 = 0, $539 = 0, $540 = 0, $547 = 0, $557 = 0, $56 = 0, $571 = 0, $572 = 0, $578 = 0, $585 = 0, $593 = 0, $599 = 0, $6 = 0, $603 = 0, $604 = 0, $605 = 0, $612 = 0, $622 = 0, $626 = 0, $631 = 0, $633 = 0, $634 = 0, $636 = 0, $638 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $652 = 0, $653 = 0, $654 = 0, $66 = 0, $660 = 0, $667 = 0, $675 = 0, $681 = 0, $685 = 0, $686 = 0, $687 = 0, $69 = 0, $694 = 0, $7 = 0, $704 = 0, $71 = 0, $715 = 0, $72 = 0, $721 = 0, $728 = 0, $736 = 0, $742 = 0, $746 = 0, $747 = 0, $748 = 0, $755 = 0, $765 = 0, $777 = 0, $779 = 0, $78 = 0, $789 = 0, $798 = 0, $8 = 0, $801 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $85 = 0, $9 = 0, $93 = 0, $99 = 0, $c$0 = 0, $c$0135 = 0, $c$1 = 0, $c$126 = 0, $c$2$be = 0, $c$2$be142 = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$373 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$755 = 0, $c$8 = 0, $c$9$be = 0, $c$i = 0, $c$i10 = 0, $c$i101 = 0, $c$i114 = 0, $c$i127 = 0, $c$i23 = 0, $c$i36 = 0, $c$i49 = 0, $c$i62 = 0, $c$i75 = 0, $c$i88 = 0, $neg$0 = 0, $neg$0$ph = 0, $neg$0136$ph = 0, $neg$0136145 = 0, $neg$0137 = 0, $neg$0138 = 0, $neg$0139 = 0, $neg$0140 = 0, $storemerge = 0, $storemerge207 = 0, $storemerge208 = 0, $storemerge209 = 0, $storemerge210 = 0, $storemerge211 = 0, $storemerge212 = 0, $storemerge213 = 0, $storemerge214 = 0, $storemerge215 = 0, $storemerge216 = 0, $x$084 = 0, $x$148 = 0, $x$268 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c$i127 = sp + 9 | 0;
 $c$i114 = sp + 4 | 0;
 $c$i101 = sp;
 $c$i88 = sp + 7 | 0;
 $c$i75 = sp + 8 | 0;
 $c$i62 = sp + 10 | 0;
 $c$i49 = sp + 3 | 0;
 $c$i36 = sp + 6 | 0;
 $c$i23 = sp + 5 | 0;
 $c$i10 = sp + 2 | 0;
 $c$i = sp + 1 | 0;
 if ($base >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $803 = 0;
  $804 = 0;
  tempRet0 = $803;
  STACKTOP = sp;
  return $804 | 0;
 }
 $3 = $f + 4 | 0;
 $4 = $f + 100 | 0;
 $5 = $f + 104 | 0;
 $6 = $f + 8 | 0;
 $7 = $f + 74 | 0;
 $8 = $f + 20 | 0;
 $9 = $f + 44 | 0;
 $10 = $f + 36 | 0;
 $11 = $f + 16 | 0;
 $12 = $f + 28 | 0;
 $13 = $f + 32 | 0;
 $14 = $f + 108 | 0;
 L5 : while (1) {
  $16 = HEAP32[$3 >> 2] | 0;
  if ($16 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $16 + 1;
   $69 = HEAPU8[$16 >> 0] | 0;
  } else {
   $22 = HEAP32[$5 >> 2] | 0;
   if ($22) if ((HEAP32[$14 >> 2] | 0) >= ($22 | 0)) {
    $neg$0$ph = 0;
    label = 44;
    break;
   }
   if (!(HEAP32[$6 >> 2] | 0)) {
    $29 = HEAP8[$7 >> 0] | 0;
    HEAP8[$7 >> 0] = $29 + 255 | $29;
    if ((HEAP32[$8 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, 0, 0) | 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$8 >> 2] = 0;
    $37 = HEAP32[$f >> 2] | 0;
    if ($37 & 20) {
     label = 12;
     break;
    }
    $43 = HEAP32[$9 >> 2] | 0;
    HEAP32[$6 >> 2] = $43;
    HEAP32[$3 >> 2] = $43;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$13 >> 2] & 31]($f, $c$i, 1) | 0) != 1) {
    $neg$0$ph = 0;
    label = 44;
    break;
   }
   $47 = HEAP8[$c$i >> 0] | 0;
   $48 = $47 & 255;
   $49 = HEAP32[$5 >> 2] | 0;
   $$pre$i = HEAP32[$6 >> 2] | 0;
   $$pre3$i$pre$pre = HEAP32[$3 >> 2] | 0;
   if (!$49) {
    $$pre3$i = $$pre3$i$pre$pre;
    $storemerge213 = $$pre$i;
   } else {
    $56 = $49 - (HEAP32[$14 >> 2] | 0) + -1 | 0;
    if (($$pre$i - $$pre3$i$pre$pre | 0) > ($56 | 0)) {
     $$pre3$i = $$pre3$i$pre$pre;
     $storemerge213 = $$pre3$i$pre$pre + $56 | 0;
    } else {
     $$pre3$i = $$pre3$i$pre$pre;
     $storemerge213 = $$pre$i;
    }
   }
   HEAP32[$4 >> 2] = $storemerge213;
   if ($$pre$i) HEAP32[$14 >> 2] = $$pre$i + 1 - $$pre3$i + (HEAP32[$14 >> 2] | 0);
   $66 = $$pre3$i + -1 | 0;
   if ((HEAP8[$66 >> 0] | 0) == $47 << 24 >> 24) $69 = $48; else {
    HEAP8[$66 >> 0] = $47;
    $69 = $48;
   }
  }
  switch ($69 | 0) {
  case 9:
  case 10:
  case 11:
  case 12:
  case 13:
  case 32:
   break;
  default:
   {
    label = 24;
    break L5;
   }
  }
 }
 L30 : do if ((label | 0) == 12) if (!($37 & 4)) {
  $neg$0$ph = 0;
  label = 44;
 } else {
  HEAP32[$f >> 2] = $37 | 32;
  $neg$0$ph = 0;
  label = 44;
 } else if ((label | 0) == 24) {
  do if (($69 | 0) == 43 | ($69 | 0) == 45) {
   $71 = (($69 | 0) == 45) << 31 >> 31;
   $72 = HEAP32[$3 >> 2] | 0;
   if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $72 + 1;
    $c$0 = HEAPU8[$72 >> 0] | 0;
    $neg$0 = $71;
    break;
   }
   $78 = HEAP32[$5 >> 2] | 0;
   if ($78) if ((HEAP32[$14 >> 2] | 0) >= ($78 | 0)) {
    $neg$0$ph = $71;
    label = 44;
    break L30;
   }
   do if (!(HEAP32[$6 >> 2] | 0)) {
    $85 = HEAP8[$7 >> 0] | 0;
    HEAP8[$7 >> 0] = $85 + 255 | $85;
    if ((HEAP32[$8 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, 0, 0) | 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$8 >> 2] = 0;
    $93 = HEAP32[$f >> 2] | 0;
    if (!($93 & 20)) {
     $99 = HEAP32[$9 >> 2] | 0;
     HEAP32[$6 >> 2] = $99;
     HEAP32[$3 >> 2] = $99;
     break;
    }
    if (!($93 & 4)) {
     $neg$0$ph = $71;
     label = 44;
     break L30;
    }
    HEAP32[$f >> 2] = $93 | 32;
    $neg$0$ph = $71;
    label = 44;
    break L30;
   } while (0);
   if ((FUNCTION_TABLE_iiii[HEAP32[$13 >> 2] & 31]($f, $c$i10, 1) | 0) != 1) {
    $neg$0$ph = $71;
    label = 44;
    break L30;
   }
   $103 = HEAP8[$c$i10 >> 0] | 0;
   $104 = $103 & 255;
   $105 = HEAP32[$5 >> 2] | 0;
   $$pre$i3 = HEAP32[$6 >> 2] | 0;
   $$pre3$i6$pre$pre = HEAP32[$3 >> 2] | 0;
   if (!$105) {
    $$pre3$i6 = $$pre3$i6$pre$pre;
    $storemerge214 = $$pre$i3;
   } else {
    $112 = $105 - (HEAP32[$14 >> 2] | 0) + -1 | 0;
    if (($$pre$i3 - $$pre3$i6$pre$pre | 0) > ($112 | 0)) {
     $$pre3$i6 = $$pre3$i6$pre$pre;
     $storemerge214 = $$pre3$i6$pre$pre + $112 | 0;
    } else {
     $$pre3$i6 = $$pre3$i6$pre$pre;
     $storemerge214 = $$pre$i3;
    }
   }
   HEAP32[$4 >> 2] = $storemerge214;
   if ($$pre$i3) HEAP32[$14 >> 2] = $$pre$i3 + 1 - $$pre3$i6 + (HEAP32[$14 >> 2] | 0);
   $122 = $$pre3$i6 + -1 | 0;
   if ((HEAP8[$122 >> 0] | 0) == $103 << 24 >> 24) {
    $c$0 = $104;
    $neg$0 = $71;
   } else {
    HEAP8[$122 >> 0] = $103;
    $c$0 = $104;
    $neg$0 = $71;
   }
  } else {
   $c$0 = $69;
   $neg$0 = 0;
  } while (0);
  $126 = ($base | 0) == 0;
  if (($base & -17 | 0) == 0 & ($c$0 | 0) == 48) {
   $130 = HEAP32[$3 >> 2] | 0;
   L63 : do if ($130 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $130 + 1;
    $184 = HEAPU8[$130 >> 0] | 0;
    label = 66;
   } else {
    $136 = HEAP32[$5 >> 2] | 0;
    if (!$136) label = 50; else if ((HEAP32[$14 >> 2] | 0) < ($136 | 0)) label = 50;
    L67 : do if ((label | 0) == 50) {
     do if (!(HEAP32[$6 >> 2] | 0)) {
      $143 = HEAP8[$7 >> 0] | 0;
      HEAP8[$7 >> 0] = $143 + 255 | $143;
      if ((HEAP32[$8 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, 0, 0) | 0;
      HEAP32[$11 >> 2] = 0;
      HEAP32[$12 >> 2] = 0;
      HEAP32[$8 >> 2] = 0;
      $151 = HEAP32[$f >> 2] | 0;
      if (!($151 & 20)) {
       $157 = HEAP32[$9 >> 2] | 0;
       HEAP32[$6 >> 2] = $157;
       HEAP32[$3 >> 2] = $157;
       break;
      }
      if (!($151 & 4)) break L67;
      HEAP32[$f >> 2] = $151 | 32;
      break L67;
     } while (0);
     if ((FUNCTION_TABLE_iiii[HEAP32[$13 >> 2] & 31]($f, $c$i23, 1) | 0) == 1) {
      $161 = HEAP8[$c$i23 >> 0] | 0;
      $162 = $161 & 255;
      $163 = HEAP32[$5 >> 2] | 0;
      $$pre$i16 = HEAP32[$6 >> 2] | 0;
      $$pre3$i19$pre$pre = HEAP32[$3 >> 2] | 0;
      if (!$163) {
       $$pre3$i19 = $$pre3$i19$pre$pre;
       $storemerge215 = $$pre$i16;
      } else {
       $170 = $163 - (HEAP32[$14 >> 2] | 0) + -1 | 0;
       if (($$pre$i16 - $$pre3$i19$pre$pre | 0) > ($170 | 0)) {
        $$pre3$i19 = $$pre3$i19$pre$pre;
        $storemerge215 = $$pre3$i19$pre$pre + $170 | 0;
       } else {
        $$pre3$i19 = $$pre3$i19$pre$pre;
        $storemerge215 = $$pre$i16;
       }
      }
      HEAP32[$4 >> 2] = $storemerge215;
      if ($$pre$i16) HEAP32[$14 >> 2] = $$pre$i16 + 1 - $$pre3$i19 + (HEAP32[$14 >> 2] | 0);
      $180 = $$pre3$i19 + -1 | 0;
      if ((HEAP8[$180 >> 0] | 0) == $161 << 24 >> 24) {
       $184 = $162;
       label = 66;
       break L63;
      }
      HEAP8[$180 >> 0] = $161;
      $184 = $162;
      label = 66;
      break L63;
     }
    } while (0);
    HEAP32[$4 >> 2] = 0;
    $805 = -1;
   } while (0);
   if ((label | 0) == 66) if (($184 | 32 | 0) == 120) {
    $186 = HEAP32[$3 >> 2] | 0;
    L93 : do if ($186 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $186 + 1;
     $239 = HEAPU8[$186 >> 0] | 0;
    } else {
     $192 = HEAP32[$5 >> 2] | 0;
     if (!$192) label = 71; else if ((HEAP32[$14 >> 2] | 0) < ($192 | 0)) label = 71;
     L97 : do if ((label | 0) == 71) {
      do if (!(HEAP32[$6 >> 2] | 0)) {
       $199 = HEAP8[$7 >> 0] | 0;
       HEAP8[$7 >> 0] = $199 + 255 | $199;
       if ((HEAP32[$8 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, 0, 0) | 0;
       HEAP32[$11 >> 2] = 0;
       HEAP32[$12 >> 2] = 0;
       HEAP32[$8 >> 2] = 0;
       $207 = HEAP32[$f >> 2] | 0;
       if (!($207 & 20)) {
        $213 = HEAP32[$9 >> 2] | 0;
        HEAP32[$6 >> 2] = $213;
        HEAP32[$3 >> 2] = $213;
        break;
       }
       if (!($207 & 4)) break L97;
       HEAP32[$f >> 2] = $207 | 32;
       break L97;
      } while (0);
      if ((FUNCTION_TABLE_iiii[HEAP32[$13 >> 2] & 31]($f, $c$i36, 1) | 0) == 1) {
       $217 = HEAP8[$c$i36 >> 0] | 0;
       $218 = $217 & 255;
       $219 = HEAP32[$5 >> 2] | 0;
       $$pre$i29 = HEAP32[$6 >> 2] | 0;
       $$pre3$i32$pre$pre = HEAP32[$3 >> 2] | 0;
       if (!$219) {
        $$pre3$i32 = $$pre3$i32$pre$pre;
        $storemerge216 = $$pre$i29;
       } else {
        $226 = $219 - (HEAP32[$14 >> 2] | 0) + -1 | 0;
        if (($$pre$i29 - $$pre3$i32$pre$pre | 0) > ($226 | 0)) {
         $$pre3$i32 = $$pre3$i32$pre$pre;
         $storemerge216 = $$pre3$i32$pre$pre + $226 | 0;
        } else {
         $$pre3$i32 = $$pre3$i32$pre$pre;
         $storemerge216 = $$pre$i29;
        }
       }
       HEAP32[$4 >> 2] = $storemerge216;
       if ($$pre$i29) HEAP32[$14 >> 2] = $$pre$i29 + 1 - $$pre3$i32 + (HEAP32[$14 >> 2] | 0);
       $236 = $$pre3$i32 + -1 | 0;
       if ((HEAP8[$236 >> 0] | 0) == $217 << 24 >> 24) {
        $239 = $218;
        break L93;
       }
       HEAP8[$236 >> 0] = $217;
       $239 = $218;
       break L93;
      }
     } while (0);
     HEAP32[$4 >> 2] = 0;
     $239 = -1;
    } while (0);
    if ((HEAPU8[$239 + 63529 >> 0] | 0) <= 15) {
     $$125 = 16;
     $c$126 = $239;
     $neg$0138 = $neg$0;
     label = 147;
     break;
    }
    $244 = (HEAP32[$4 >> 2] | 0) == 0;
    if (!$244) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    if (!$pok) {
     HEAP32[$5 >> 2] = 0;
     $250 = HEAP32[$6 >> 2] | 0;
     HEAP32[$14 >> 2] = $250 - (HEAP32[$3 >> 2] | 0);
     HEAP32[$4 >> 2] = $250;
     $803 = 0;
     $804 = 0;
     tempRet0 = $803;
     STACKTOP = sp;
     return $804 | 0;
    }
    if ($244) {
     $803 = 0;
     $804 = 0;
     tempRet0 = $803;
     STACKTOP = sp;
     return $804 | 0;
    }
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    $803 = 0;
    $804 = 0;
    tempRet0 = $803;
    STACKTOP = sp;
    return $804 | 0;
   } else $805 = $184;
   if ($126) {
    $$125 = 8;
    $c$126 = $805;
    $neg$0138 = $neg$0;
    label = 147;
   } else {
    $$1 = $base;
    $c$1 = $805;
    $neg$0139 = $neg$0;
    label = 99;
   }
  } else {
   $255 = $126;
   $c$0135 = $c$0;
   $neg$0140 = $neg$0;
   label = 95;
  }
 } while (0);
 if ((label | 0) == 44) {
  HEAP32[$4 >> 2] = 0;
  $255 = ($base | 0) == 0;
  $c$0135 = -1;
  $neg$0140 = $neg$0$ph;
  label = 95;
 }
 if ((label | 0) == 95) {
  $$base21 = $255 ? 10 : $base;
  if ((HEAPU8[$c$0135 + 63529 >> 0] | 0) >>> 0 < $$base21 >>> 0) {
   $$1 = $$base21;
   $c$1 = $c$0135;
   $neg$0139 = $neg$0140;
   label = 99;
  } else {
   $$pre = HEAP32[$3 >> 2] | 0;
   if (!(HEAP32[$4 >> 2] | 0)) $266 = $$pre; else {
    $262 = $$pre + -1 | 0;
    HEAP32[$3 >> 2] = $262;
    $266 = $262;
   }
   HEAP32[$5 >> 2] = 0;
   $263 = HEAP32[$6 >> 2] | 0;
   HEAP32[$14 >> 2] = $263 - $266;
   HEAP32[$4 >> 2] = $263;
   HEAP32[(___errno_location() | 0) >> 2] = 22;
   $803 = 0;
   $804 = 0;
   tempRet0 = $803;
   STACKTOP = sp;
   return $804 | 0;
  }
 }
 do if ((label | 0) == 99) if (($$1 | 0) == 10) {
  $270 = $c$1 + -48 | 0;
  if ($270 >>> 0 < 10) {
   $274 = $270;
   $x$084 = 0;
   while (1) {
    $273 = ($x$084 * 10 | 0) + $274 | 0;
    $275 = HEAP32[$3 >> 2] | 0;
    if ($275 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $275 + 1;
     $c$2$be = HEAPU8[$275 >> 0] | 0;
    } else {
     $281 = HEAP32[$5 >> 2] | 0;
     if ($281) if ((HEAP32[$14 >> 2] | 0) >= ($281 | 0)) {
      $808 = $273;
      label = 113;
      break;
     }
     if (!(HEAP32[$6 >> 2] | 0)) {
      $288 = HEAP8[$7 >> 0] | 0;
      HEAP8[$7 >> 0] = $288 + 255 | $288;
      if ((HEAP32[$8 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, 0, 0) | 0;
      HEAP32[$11 >> 2] = 0;
      HEAP32[$12 >> 2] = 0;
      HEAP32[$8 >> 2] = 0;
      $296 = HEAP32[$f >> 2] | 0;
      if ($296 & 20) {
       label = 109;
       break;
      }
      $302 = HEAP32[$9 >> 2] | 0;
      HEAP32[$6 >> 2] = $302;
      HEAP32[$3 >> 2] = $302;
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[$13 >> 2] & 31]($f, $c$i49, 1) | 0) != 1) {
      $808 = $273;
      label = 113;
      break;
     }
     $306 = HEAP8[$c$i49 >> 0] | 0;
     $307 = $306 & 255;
     $308 = HEAP32[$5 >> 2] | 0;
     $$pre$i42 = HEAP32[$6 >> 2] | 0;
     $$pre3$i45$pre$pre = HEAP32[$3 >> 2] | 0;
     if (!$308) {
      $$pre3$i45 = $$pre3$i45$pre$pre;
      $storemerge212 = $$pre$i42;
     } else {
      $315 = $308 - (HEAP32[$14 >> 2] | 0) + -1 | 0;
      if (($$pre$i42 - $$pre3$i45$pre$pre | 0) > ($315 | 0)) {
       $$pre3$i45 = $$pre3$i45$pre$pre;
       $storemerge212 = $$pre3$i45$pre$pre + $315 | 0;
      } else {
       $$pre3$i45 = $$pre3$i45$pre$pre;
       $storemerge212 = $$pre$i42;
      }
     }
     HEAP32[$4 >> 2] = $storemerge212;
     if ($$pre$i42) HEAP32[$14 >> 2] = $$pre$i42 + 1 - $$pre3$i45 + (HEAP32[$14 >> 2] | 0);
     $325 = $$pre3$i45 + -1 | 0;
     if ((HEAP8[$325 >> 0] | 0) == $306 << 24 >> 24) $c$2$be = $307; else {
      HEAP8[$325 >> 0] = $306;
      $c$2$be = $307;
     }
    }
    $274 = $c$2$be + -48 | 0;
    if (!($274 >>> 0 < 10 & $273 >>> 0 < 429496729)) {
     $809 = $273;
     $c$2$be142 = $c$2$be;
     break;
    } else $x$084 = $273;
   }
   if ((label | 0) == 109) if (!($296 & 4)) {
    $808 = $273;
    label = 113;
   } else {
    HEAP32[$f >> 2] = $296 | 32;
    $808 = $273;
    label = 113;
   }
   if ((label | 0) == 113) {
    HEAP32[$4 >> 2] = 0;
    $809 = $808;
    $c$2$be142 = -1;
   }
   $806 = $809;
   $807 = 0;
   $c$2$lcssa = $c$2$be142;
  } else {
   $806 = 0;
   $807 = 0;
   $c$2$lcssa = $c$1;
  }
  $331 = $c$2$lcssa + -48 | 0;
  if ($331 >>> 0 < 10) {
   $333 = $806;
   $334 = $807;
   $338 = $331;
   $c$373 = $c$2$lcssa;
   while (1) {
    $335 = ___muldi3($333 | 0, $334 | 0, 10, 0) | 0;
    $336 = tempRet0;
    $339 = (($338 | 0) < 0) << 31 >> 31;
    $341 = ~$339;
    if ($336 >>> 0 > $341 >>> 0 | ($336 | 0) == ($341 | 0) & $335 >>> 0 > ~$338 >>> 0) {
     $$lcssa = $338;
     $812 = $333;
     $813 = $334;
     $c$3$lcssa = $c$373;
     label = 146;
     break;
    }
    $347 = _i64Add($335 | 0, $336 | 0, $338 | 0, $339 | 0) | 0;
    $348 = tempRet0;
    $349 = HEAP32[$3 >> 2] | 0;
    if ($349 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $349 + 1;
     $c$3$be = HEAPU8[$349 >> 0] | 0;
    } else {
     $355 = HEAP32[$5 >> 2] | 0;
     if ($355) if ((HEAP32[$14 >> 2] | 0) >= ($355 | 0)) {
      $814 = $347;
      $815 = $348;
      break;
     }
     if (!(HEAP32[$6 >> 2] | 0)) {
      $362 = HEAP8[$7 >> 0] | 0;
      HEAP8[$7 >> 0] = $362 + 255 | $362;
      if ((HEAP32[$8 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, 0, 0) | 0;
      HEAP32[$11 >> 2] = 0;
      HEAP32[$12 >> 2] = 0;
      HEAP32[$8 >> 2] = 0;
      $370 = HEAP32[$f >> 2] | 0;
      if ($370 & 20) {
       label = 133;
       break;
      }
      $376 = HEAP32[$9 >> 2] | 0;
      HEAP32[$6 >> 2] = $376;
      HEAP32[$3 >> 2] = $376;
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[$13 >> 2] & 31]($f, $c$i62, 1) | 0) != 1) {
      $814 = $347;
      $815 = $348;
      break;
     }
     $380 = HEAP8[$c$i62 >> 0] | 0;
     $381 = $380 & 255;
     $382 = HEAP32[$5 >> 2] | 0;
     $$pre$i55 = HEAP32[$6 >> 2] | 0;
     $$pre3$i58$pre$pre = HEAP32[$3 >> 2] | 0;
     if (!$382) {
      $$pre3$i58 = $$pre3$i58$pre$pre;
      $storemerge211 = $$pre$i55;
     } else {
      $389 = $382 - (HEAP32[$14 >> 2] | 0) + -1 | 0;
      if (($$pre$i55 - $$pre3$i58$pre$pre | 0) > ($389 | 0)) {
       $$pre3$i58 = $$pre3$i58$pre$pre;
       $storemerge211 = $$pre3$i58$pre$pre + $389 | 0;
      } else {
       $$pre3$i58 = $$pre3$i58$pre$pre;
       $storemerge211 = $$pre$i55;
      }
     }
     HEAP32[$4 >> 2] = $storemerge211;
     if ($$pre$i55) HEAP32[$14 >> 2] = $$pre$i55 + 1 - $$pre3$i58 + (HEAP32[$14 >> 2] | 0);
     $399 = $$pre3$i58 + -1 | 0;
     if ((HEAP8[$399 >> 0] | 0) == $380 << 24 >> 24) $c$3$be = $381; else {
      HEAP8[$399 >> 0] = $380;
      $c$3$be = $381;
     }
    }
    $402 = $c$3$be + -48 | 0;
    if ($402 >>> 0 < 10 & ($348 >>> 0 < 429496729 | ($348 | 0) == 429496729 & $347 >>> 0 < 2576980378)) {
     $333 = $347;
     $334 = $348;
     $338 = $402;
     $c$373 = $c$3$be;
    } else {
     $$lcssa = $402;
     $812 = $347;
     $813 = $348;
     $c$3$lcssa = $c$3$be;
     label = 146;
     break;
    }
   }
   if ((label | 0) == 146) if ($$lcssa >>> 0 > 9) {
    $810 = $812;
    $811 = $813;
    $neg$0136$ph = $neg$0139;
    label = 264;
    break;
   } else {
    $$124 = 10;
    $816 = $812;
    $817 = $813;
    $c$8 = $c$3$lcssa;
    $neg$0137 = $neg$0139;
    label = 241;
    break;
   }
   if ((label | 0) == 133) if (!($370 & 4)) {
    $814 = $347;
    $815 = $348;
   } else {
    HEAP32[$f >> 2] = $370 | 32;
    $814 = $347;
    $815 = $348;
   }
   HEAP32[$4 >> 2] = 0;
   $777 = $815;
   $779 = $814;
   $neg$0136145 = $neg$0139;
  } else {
   $810 = $806;
   $811 = $807;
   $neg$0136$ph = $neg$0139;
   label = 264;
  }
 } else {
  $$125 = $$1;
  $c$126 = $c$1;
  $neg$0138 = $neg$0139;
  label = 147;
 } while (0);
 L211 : do if ((label | 0) == 147) {
  if (!($$125 + -1 & $$125)) {
   $422 = HEAP8[63792 + (($$125 * 23 | 0) >>> 5 & 7) >> 0] | 0;
   $424 = HEAP8[$c$126 + 63529 >> 0] | 0;
   $425 = $424 & 255;
   if ($425 >>> 0 < $$125 >>> 0) {
    $429 = $425;
    $x$148 = 0;
    do {
     $x$148 = $429 | $x$148 << $422;
     $430 = HEAP32[$3 >> 2] | 0;
     L218 : do if ($430 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $430 + 1;
      $c$4$be = HEAPU8[$430 >> 0] | 0;
     } else {
      $436 = HEAP32[$5 >> 2] | 0;
      if (!$436) label = 154; else if ((HEAP32[$14 >> 2] | 0) < ($436 | 0)) label = 154;
      L222 : do if ((label | 0) == 154) {
       label = 0;
       do if (!(HEAP32[$6 >> 2] | 0)) {
        $443 = HEAP8[$7 >> 0] | 0;
        HEAP8[$7 >> 0] = $443 + 255 | $443;
        if ((HEAP32[$8 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, 0, 0) | 0;
        HEAP32[$11 >> 2] = 0;
        HEAP32[$12 >> 2] = 0;
        HEAP32[$8 >> 2] = 0;
        $451 = HEAP32[$f >> 2] | 0;
        if (!($451 & 20)) {
         $457 = HEAP32[$9 >> 2] | 0;
         HEAP32[$6 >> 2] = $457;
         HEAP32[$3 >> 2] = $457;
         break;
        }
        if (!($451 & 4)) break L222;
        HEAP32[$f >> 2] = $451 | 32;
        break L222;
       } while (0);
       if ((FUNCTION_TABLE_iiii[HEAP32[$13 >> 2] & 31]($f, $c$i75, 1) | 0) == 1) {
        $461 = HEAP8[$c$i75 >> 0] | 0;
        $462 = $461 & 255;
        $463 = HEAP32[$5 >> 2] | 0;
        $$pre$i68 = HEAP32[$6 >> 2] | 0;
        $$pre3$i71$pre$pre = HEAP32[$3 >> 2] | 0;
        if (!$463) {
         $$pre3$i71 = $$pre3$i71$pre$pre;
         $storemerge210 = $$pre$i68;
        } else {
         $470 = $463 - (HEAP32[$14 >> 2] | 0) + -1 | 0;
         if (($$pre$i68 - $$pre3$i71$pre$pre | 0) > ($470 | 0)) {
          $$pre3$i71 = $$pre3$i71$pre$pre;
          $storemerge210 = $$pre3$i71$pre$pre + $470 | 0;
         } else {
          $$pre3$i71 = $$pre3$i71$pre$pre;
          $storemerge210 = $$pre$i68;
         }
        }
        HEAP32[$4 >> 2] = $storemerge210;
        if ($$pre$i68) HEAP32[$14 >> 2] = $$pre$i68 + 1 - $$pre3$i71 + (HEAP32[$14 >> 2] | 0);
        $480 = $$pre3$i71 + -1 | 0;
        if ((HEAP8[$480 >> 0] | 0) == $461 << 24 >> 24) {
         $c$4$be = $462;
         break L218;
        }
        HEAP8[$480 >> 0] = $461;
        $c$4$be = $462;
        break L218;
       }
      } while (0);
      HEAP32[$4 >> 2] = 0;
      $c$4$be = -1;
     } while (0);
     $484 = HEAP8[$c$4$be + 63529 >> 0] | 0;
     $429 = $484 & 255;
    } while ($429 >>> 0 < $$125 >>> 0 & $x$148 >>> 0 < 134217728);
    $491 = $484;
    $494 = 0;
    $496 = $x$148;
    $c$4$lcssa = $c$4$be;
   } else {
    $491 = $424;
    $494 = 0;
    $496 = 0;
    $c$4$lcssa = $c$126;
   }
   $488 = _bitshift64Lshr(-1, -1, $422 | 0) | 0;
   $489 = tempRet0;
   if (($491 & 255) >>> 0 >= $$125 >>> 0 | ($494 >>> 0 > $489 >>> 0 | ($494 | 0) == ($489 | 0) & $496 >>> 0 > $488 >>> 0)) {
    $$124 = $$125;
    $816 = $496;
    $817 = $494;
    $c$8 = $c$4$lcssa;
    $neg$0137 = $neg$0138;
    label = 241;
    break;
   } else {
    $500 = $496;
    $501 = $494;
    $505 = $491;
   }
   while (1) {
    $502 = _bitshift64Shl($500 | 0, $501 | 0, $422 | 0) | 0;
    $503 = tempRet0;
    $506 = $505 & 255 | $502;
    $507 = HEAP32[$3 >> 2] | 0;
    L250 : do if ($507 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $507 + 1;
     $c$5$be = HEAPU8[$507 >> 0] | 0;
    } else {
     $513 = HEAP32[$5 >> 2] | 0;
     if (!$513) label = 177; else if ((HEAP32[$14 >> 2] | 0) < ($513 | 0)) label = 177;
     L255 : do if ((label | 0) == 177) {
      label = 0;
      do if (!(HEAP32[$6 >> 2] | 0)) {
       $520 = HEAP8[$7 >> 0] | 0;
       HEAP8[$7 >> 0] = $520 + 255 | $520;
       if ((HEAP32[$8 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, 0, 0) | 0;
       HEAP32[$11 >> 2] = 0;
       HEAP32[$12 >> 2] = 0;
       HEAP32[$8 >> 2] = 0;
       $528 = HEAP32[$f >> 2] | 0;
       if (!($528 & 20)) {
        $534 = HEAP32[$9 >> 2] | 0;
        HEAP32[$6 >> 2] = $534;
        HEAP32[$3 >> 2] = $534;
        break;
       }
       if (!($528 & 4)) break L255;
       HEAP32[$f >> 2] = $528 | 32;
       break L255;
      } while (0);
      if ((FUNCTION_TABLE_iiii[HEAP32[$13 >> 2] & 31]($f, $c$i88, 1) | 0) == 1) {
       $538 = HEAP8[$c$i88 >> 0] | 0;
       $539 = $538 & 255;
       $540 = HEAP32[$5 >> 2] | 0;
       $$pre$i81 = HEAP32[$6 >> 2] | 0;
       $$pre3$i84$pre$pre = HEAP32[$3 >> 2] | 0;
       if (!$540) {
        $$pre3$i84 = $$pre3$i84$pre$pre;
        $storemerge209 = $$pre$i81;
       } else {
        $547 = $540 - (HEAP32[$14 >> 2] | 0) + -1 | 0;
        if (($$pre$i81 - $$pre3$i84$pre$pre | 0) > ($547 | 0)) {
         $$pre3$i84 = $$pre3$i84$pre$pre;
         $storemerge209 = $$pre3$i84$pre$pre + $547 | 0;
        } else {
         $$pre3$i84 = $$pre3$i84$pre$pre;
         $storemerge209 = $$pre$i81;
        }
       }
       HEAP32[$4 >> 2] = $storemerge209;
       if ($$pre$i81) HEAP32[$14 >> 2] = $$pre$i81 + 1 - $$pre3$i84 + (HEAP32[$14 >> 2] | 0);
       $557 = $$pre3$i84 + -1 | 0;
       if ((HEAP8[$557 >> 0] | 0) == $538 << 24 >> 24) {
        $c$5$be = $539;
        break L250;
       }
       HEAP8[$557 >> 0] = $538;
       $c$5$be = $539;
       break L250;
      }
     } while (0);
     HEAP32[$4 >> 2] = 0;
     $c$5$be = -1;
    } while (0);
    $505 = HEAP8[$c$5$be + 63529 >> 0] | 0;
    if (($505 & 255) >>> 0 >= $$125 >>> 0 | ($503 >>> 0 > $489 >>> 0 | ($503 | 0) == ($489 | 0) & $506 >>> 0 > $488 >>> 0)) {
     $$124 = $$125;
     $816 = $506;
     $817 = $503;
     $c$8 = $c$5$be;
     $neg$0137 = $neg$0138;
     label = 241;
     break L211;
    } else {
     $500 = $506;
     $501 = $503;
    }
   }
  }
  $414 = HEAP8[$c$126 + 63529 >> 0] | 0;
  $415 = $414 & 255;
  if ($415 >>> 0 < $$125 >>> 0) {
   $571 = $415;
   $x$268 = 0;
   do {
    $x$268 = $571 + (Math_imul($x$268, $$125) | 0) | 0;
    $572 = HEAP32[$3 >> 2] | 0;
    L282 : do if ($572 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $572 + 1;
     $c$6$be = HEAPU8[$572 >> 0] | 0;
    } else {
     $578 = HEAP32[$5 >> 2] | 0;
     if (!$578) label = 198; else if ((HEAP32[$14 >> 2] | 0) < ($578 | 0)) label = 198;
     L287 : do if ((label | 0) == 198) {
      label = 0;
      do if (!(HEAP32[$6 >> 2] | 0)) {
       $585 = HEAP8[$7 >> 0] | 0;
       HEAP8[$7 >> 0] = $585 + 255 | $585;
       if ((HEAP32[$8 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, 0, 0) | 0;
       HEAP32[$11 >> 2] = 0;
       HEAP32[$12 >> 2] = 0;
       HEAP32[$8 >> 2] = 0;
       $593 = HEAP32[$f >> 2] | 0;
       if (!($593 & 20)) {
        $599 = HEAP32[$9 >> 2] | 0;
        HEAP32[$6 >> 2] = $599;
        HEAP32[$3 >> 2] = $599;
        break;
       }
       if (!($593 & 4)) break L287;
       HEAP32[$f >> 2] = $593 | 32;
       break L287;
      } while (0);
      if ((FUNCTION_TABLE_iiii[HEAP32[$13 >> 2] & 31]($f, $c$i101, 1) | 0) == 1) {
       $603 = HEAP8[$c$i101 >> 0] | 0;
       $604 = $603 & 255;
       $605 = HEAP32[$5 >> 2] | 0;
       $$pre$i94 = HEAP32[$6 >> 2] | 0;
       $$pre3$i97$pre$pre = HEAP32[$3 >> 2] | 0;
       if (!$605) {
        $$pre3$i97 = $$pre3$i97$pre$pre;
        $storemerge208 = $$pre$i94;
       } else {
        $612 = $605 - (HEAP32[$14 >> 2] | 0) + -1 | 0;
        if (($$pre$i94 - $$pre3$i97$pre$pre | 0) > ($612 | 0)) {
         $$pre3$i97 = $$pre3$i97$pre$pre;
         $storemerge208 = $$pre3$i97$pre$pre + $612 | 0;
        } else {
         $$pre3$i97 = $$pre3$i97$pre$pre;
         $storemerge208 = $$pre$i94;
        }
       }
       HEAP32[$4 >> 2] = $storemerge208;
       if ($$pre$i94) HEAP32[$14 >> 2] = $$pre$i94 + 1 - $$pre3$i97 + (HEAP32[$14 >> 2] | 0);
       $622 = $$pre3$i97 + -1 | 0;
       if ((HEAP8[$622 >> 0] | 0) == $603 << 24 >> 24) {
        $c$6$be = $604;
        break L282;
       }
       HEAP8[$622 >> 0] = $603;
       $c$6$be = $604;
       break L282;
      }
     } while (0);
     HEAP32[$4 >> 2] = 0;
     $c$6$be = -1;
    } while (0);
    $626 = HEAP8[$c$6$be + 63529 >> 0] | 0;
    $571 = $626 & 255;
   } while ($571 >>> 0 < $$125 >>> 0 & $x$268 >>> 0 < 119304647);
   $631 = $626;
   $818 = $x$268;
   $819 = 0;
   $c$6$lcssa = $c$6$be;
  } else {
   $631 = $414;
   $818 = 0;
   $819 = 0;
   $c$6$lcssa = $c$126;
  }
  if (($631 & 255) >>> 0 < $$125 >>> 0) {
   $633 = ___udivdi3(-1, -1, $$125 | 0, 0) | 0;
   $634 = tempRet0;
   $636 = $819;
   $638 = $818;
   $645 = $631;
   $c$755 = $c$6$lcssa;
   while (1) {
    if ($636 >>> 0 > $634 >>> 0 | ($636 | 0) == ($634 | 0) & $638 >>> 0 > $633 >>> 0) {
     $$124 = $$125;
     $816 = $638;
     $817 = $636;
     $c$8 = $c$755;
     $neg$0137 = $neg$0138;
     label = 241;
     break L211;
    }
    $642 = ___muldi3($638 | 0, $636 | 0, $$125 | 0, 0) | 0;
    $643 = tempRet0;
    $644 = $645 & 255;
    if ($643 >>> 0 > 4294967295 | ($643 | 0) == -1 & $642 >>> 0 > ~$644 >>> 0) {
     $$124 = $$125;
     $816 = $638;
     $817 = $636;
     $c$8 = $c$755;
     $neg$0137 = $neg$0138;
     label = 241;
     break L211;
    }
    $652 = _i64Add($644 | 0, 0, $642 | 0, $643 | 0) | 0;
    $653 = tempRet0;
    $654 = HEAP32[$3 >> 2] | 0;
    L317 : do if ($654 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $654 + 1;
     $c$7$be = HEAPU8[$654 >> 0] | 0;
    } else {
     $660 = HEAP32[$5 >> 2] | 0;
     if (!$660) label = 224; else if ((HEAP32[$14 >> 2] | 0) < ($660 | 0)) label = 224;
     L322 : do if ((label | 0) == 224) {
      label = 0;
      do if (!(HEAP32[$6 >> 2] | 0)) {
       $667 = HEAP8[$7 >> 0] | 0;
       HEAP8[$7 >> 0] = $667 + 255 | $667;
       if ((HEAP32[$8 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, 0, 0) | 0;
       HEAP32[$11 >> 2] = 0;
       HEAP32[$12 >> 2] = 0;
       HEAP32[$8 >> 2] = 0;
       $675 = HEAP32[$f >> 2] | 0;
       if (!($675 & 20)) {
        $681 = HEAP32[$9 >> 2] | 0;
        HEAP32[$6 >> 2] = $681;
        HEAP32[$3 >> 2] = $681;
        break;
       }
       if (!($675 & 4)) break L322;
       HEAP32[$f >> 2] = $675 | 32;
       break L322;
      } while (0);
      if ((FUNCTION_TABLE_iiii[HEAP32[$13 >> 2] & 31]($f, $c$i114, 1) | 0) == 1) {
       $685 = HEAP8[$c$i114 >> 0] | 0;
       $686 = $685 & 255;
       $687 = HEAP32[$5 >> 2] | 0;
       $$pre$i107 = HEAP32[$6 >> 2] | 0;
       $$pre3$i110$pre$pre = HEAP32[$3 >> 2] | 0;
       if (!$687) {
        $$pre3$i110 = $$pre3$i110$pre$pre;
        $storemerge207 = $$pre$i107;
       } else {
        $694 = $687 - (HEAP32[$14 >> 2] | 0) + -1 | 0;
        if (($$pre$i107 - $$pre3$i110$pre$pre | 0) > ($694 | 0)) {
         $$pre3$i110 = $$pre3$i110$pre$pre;
         $storemerge207 = $$pre3$i110$pre$pre + $694 | 0;
        } else {
         $$pre3$i110 = $$pre3$i110$pre$pre;
         $storemerge207 = $$pre$i107;
        }
       }
       HEAP32[$4 >> 2] = $storemerge207;
       if ($$pre$i107) HEAP32[$14 >> 2] = $$pre$i107 + 1 - $$pre3$i110 + (HEAP32[$14 >> 2] | 0);
       $704 = $$pre3$i110 + -1 | 0;
       if ((HEAP8[$704 >> 0] | 0) == $685 << 24 >> 24) {
        $c$7$be = $686;
        break L317;
       }
       HEAP8[$704 >> 0] = $685;
       $c$7$be = $686;
       break L317;
      }
     } while (0);
     HEAP32[$4 >> 2] = 0;
     $c$7$be = -1;
    } while (0);
    $645 = HEAP8[$c$7$be + 63529 >> 0] | 0;
    if (($645 & 255) >>> 0 >= $$125 >>> 0) {
     $$124 = $$125;
     $816 = $652;
     $817 = $653;
     $c$8 = $c$7$be;
     $neg$0137 = $neg$0138;
     label = 241;
     break;
    } else {
     $636 = $653;
     $638 = $652;
     $c$755 = $c$7$be;
    }
   }
  } else {
   $$124 = $$125;
   $816 = $818;
   $817 = $819;
   $c$8 = $c$6$lcssa;
   $neg$0137 = $neg$0138;
   label = 241;
  }
 } while (0);
 if ((label | 0) == 241) if ((HEAPU8[$c$8 + 63529 >> 0] | 0) >>> 0 < $$124 >>> 0) {
  do {
   $715 = HEAP32[$3 >> 2] | 0;
   L349 : do if ($715 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $715 + 1;
    $c$9$be = HEAPU8[$715 >> 0] | 0;
   } else {
    $721 = HEAP32[$5 >> 2] | 0;
    if (!$721) label = 246; else if ((HEAP32[$14 >> 2] | 0) < ($721 | 0)) label = 246;
    L354 : do if ((label | 0) == 246) {
     label = 0;
     do if (!(HEAP32[$6 >> 2] | 0)) {
      $728 = HEAP8[$7 >> 0] | 0;
      HEAP8[$7 >> 0] = $728 + 255 | $728;
      if ((HEAP32[$8 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$10 >> 2] & 31]($f, 0, 0) | 0;
      HEAP32[$11 >> 2] = 0;
      HEAP32[$12 >> 2] = 0;
      HEAP32[$8 >> 2] = 0;
      $736 = HEAP32[$f >> 2] | 0;
      if (!($736 & 20)) {
       $742 = HEAP32[$9 >> 2] | 0;
       HEAP32[$6 >> 2] = $742;
       HEAP32[$3 >> 2] = $742;
       break;
      }
      if (!($736 & 4)) break L354;
      HEAP32[$f >> 2] = $736 | 32;
      break L354;
     } while (0);
     if ((FUNCTION_TABLE_iiii[HEAP32[$13 >> 2] & 31]($f, $c$i127, 1) | 0) == 1) {
      $746 = HEAP8[$c$i127 >> 0] | 0;
      $747 = $746 & 255;
      $748 = HEAP32[$5 >> 2] | 0;
      $$pre$i120 = HEAP32[$6 >> 2] | 0;
      $$pre3$i123$pre$pre = HEAP32[$3 >> 2] | 0;
      if (!$748) {
       $$pre3$i123 = $$pre3$i123$pre$pre;
       $storemerge = $$pre$i120;
      } else {
       $755 = $748 - (HEAP32[$14 >> 2] | 0) + -1 | 0;
       if (($$pre$i120 - $$pre3$i123$pre$pre | 0) > ($755 | 0)) {
        $$pre3$i123 = $$pre3$i123$pre$pre;
        $storemerge = $$pre3$i123$pre$pre + $755 | 0;
       } else {
        $$pre3$i123 = $$pre3$i123$pre$pre;
        $storemerge = $$pre$i120;
       }
      }
      HEAP32[$4 >> 2] = $storemerge;
      if ($$pre$i120) HEAP32[$14 >> 2] = $$pre$i120 + 1 - $$pre3$i123 + (HEAP32[$14 >> 2] | 0);
      $765 = $$pre3$i123 + -1 | 0;
      if ((HEAP8[$765 >> 0] | 0) == $746 << 24 >> 24) {
       $c$9$be = $747;
       break L349;
      }
      HEAP8[$765 >> 0] = $746;
      $c$9$be = $747;
      break L349;
     }
    } while (0);
    HEAP32[$4 >> 2] = 0;
    $c$9$be = -1;
   } while (0);
  } while ((HEAPU8[$c$9$be + 63529 >> 0] | 0) >>> 0 < $$124 >>> 0);
  HEAP32[(___errno_location() | 0) >> 2] = 34;
  $810 = $0;
  $811 = $1;
  $neg$0136$ph = $neg$0137;
  label = 264;
 } else {
  $810 = $816;
  $811 = $817;
  $neg$0136$ph = $neg$0137;
  label = 264;
 }
 if ((label | 0) == 264) if (!(HEAP32[$4 >> 2] | 0)) {
  $777 = $811;
  $779 = $810;
  $neg$0136145 = $neg$0136$ph;
 } else {
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
  $777 = $811;
  $779 = $810;
  $neg$0136145 = $neg$0136$ph;
 }
 if (!($777 >>> 0 < $1 >>> 0 | ($777 | 0) == ($1 | 0) & $779 >>> 0 < $0 >>> 0)) {
  if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$0136145 | 0) != 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $789 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
   $803 = tempRet0;
   $804 = $789;
   tempRet0 = $803;
   STACKTOP = sp;
   return $804 | 0;
  }
  if ($777 >>> 0 > $1 >>> 0 | ($777 | 0) == ($1 | 0) & $779 >>> 0 > $0 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $803 = $1;
   $804 = $0;
   tempRet0 = $803;
   STACKTOP = sp;
   return $804 | 0;
  }
 }
 $798 = (($neg$0136145 | 0) < 0) << 31 >> 31;
 $801 = _i64Subtract($779 ^ $neg$0136145 | 0, $777 ^ $798 | 0, $neg$0136145 | 0, $798 | 0) | 0;
 $803 = tempRet0;
 $804 = $801;
 tempRet0 = $803;
 STACKTOP = sp;
 return $804 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i9 = 0, $$0$i$i$i10$i = 0, $$0$i$i$i21$i = 0, $$04$i$i = 0, $$ph40 = 0, $$phi$trans$insert = 0, $$pre29 = 0, $$sroa$6 = 0, $$sroa$619 = 0, $0 = 0, $1 = 0, $104 = 0, $105 = 0, $111 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $120 = 0, $124 = 0, $126 = 0, $127 = 0, $131 = 0, $133 = 0, $136 = 0, $137 = 0, $139 = 0, $141 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $151 = 0, $16 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $171 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $180 = 0, $182 = 0, $186 = 0, $188 = 0, $189 = 0, $193 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $206 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $22 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $228 = 0, $23 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $245 = 0, $25 = 0, $254 = 0, $256 = 0, $257 = 0, $259 = 0, $263 = 0, $269 = 0, $270 = 0, $28 = 0, $281 = 0, $282 = 0, $283 = 0, $286 = 0, $288 = 0, $293 = 0, $3 = 0, $30 = 0, $301 = 0, $302 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $316 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $326 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $341 = 0, $346 = 0, $349 = 0, $350 = 0, $353 = 0, $36 = 0, $361 = 0, $367 = 0, $37 = 0, $378 = 0, $379 = 0, $379$phi = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $394 = 0, $4 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $70 = 0, $72 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $85 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $__p$0$i$i = 0, $__p$13$i$i = 0, $__v$i$i18$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $t0$0$i = 0, $t01$0$i = 0, $t01$1$i = 0, $t01$2$i = 0, $t1$0$i$lcssa = 0, $t1$0$i27 = 0, $t13$0$i$lcssa = 0, $t13$0$i30 = 0, $tmp$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $__v$i$i18$i = sp + 12 | 0;
 $0 = sp + 32 | 0;
 $$sroa$619 = sp;
 $1 = sp + 104 | 0;
 $tmp$i = sp + 152 | 0;
 $2 = sp + 164 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 140 | 0;
 $5 = sp + 80 | 0;
 $$sroa$6 = sp + 176 | 0;
 $6 = sp + 128 | 0;
 if (($first | 0) == ($last | 0)) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $8 = HEAP8[$first >> 0] | 0;
 $9 = $8 << 24 >> 24;
 switch ($9 | 0) {
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
  {
   $394 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   STACKTOP = sp;
   return $394 | 0;
  }
 case 68:
 case 67:
  {
   if (($last - $first | 0) <= 1) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $15 = $db + 4 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($16 | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if (($9 | 0) == 67) {
    $20 = HEAP8[$first + 1 >> 0] | 0;
    if (!(($20 | 0) == 53 | ($20 | 0) == 51 | ($20 | 0) == 50 | ($20 | 0) == 49)) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($4, $16 + -24 | 0);
    HEAP32[$3 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    HEAP32[$4 + 0 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    HEAP32[$4 + 8 >> 2] = 0;
    $22 = $3 + 12 | 0;
    HEAP32[$22 + 0 >> 2] = 0;
    HEAP32[$22 + 4 >> 2] = 0;
    HEAP32[$22 + 8 >> 2] = 0;
    $23 = HEAP32[$15 >> 2] | 0;
    $25 = HEAP32[$db + 8 >> 2] | 0;
    if ($23 >>> 0 < $25 >>> 0) {
     if (!$23) $30 = 0; else {
      HEAP32[$23 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
      HEAP32[$23 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
      HEAP32[$23 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
      HEAP32[$3 + 0 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      $28 = $23 + 12 | 0;
      HEAP32[$28 + 0 >> 2] = HEAP32[$22 + 0 >> 2];
      HEAP32[$28 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
      HEAP32[$28 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
      HEAP32[$22 + 0 >> 2] = 0;
      HEAP32[$22 + 4 >> 2] = 0;
      HEAP32[$22 + 8 >> 2] = 0;
      $30 = HEAP32[$15 >> 2] | 0;
     }
     HEAP32[$15 >> 2] = $30 + 24;
    } else {
     $34 = HEAP32[$db >> 2] | 0;
     $36 = ($23 - $34 | 0) / 24 | 0;
     $37 = $36 + 1 | 0;
     if (($37 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $41 = ($25 - $34 | 0) / 24 | 0;
     if ($41 >>> 0 < 1073741823) {
      $43 = $41 << 1;
      $$0$i$i$i$i = $43 >>> 0 < $37 >>> 0 ? $37 : $43;
     } else $$0$i$i$i$i = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i18$i, $$0$i$i$i$i, $36, $db + 12 | 0);
     $46 = $__v$i$i18$i + 8 | 0;
     $47 = HEAP32[$46 >> 2] | 0;
     if ($47) {
      HEAP32[$47 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
      HEAP32[$47 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
      HEAP32[$47 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
      HEAP32[$3 + 0 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      $49 = $47 + 12 | 0;
      HEAP32[$49 + 0 >> 2] = HEAP32[$22 + 0 >> 2];
      HEAP32[$49 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
      HEAP32[$49 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
      HEAP32[$22 + 0 >> 2] = 0;
      HEAP32[$22 + 4 >> 2] = 0;
      HEAP32[$22 + 8 >> 2] = 0;
     }
     HEAP32[$46 >> 2] = $47 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i18$i);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i18$i);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    HEAP8[$db + 60 >> 0] = 1;
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($9 | 0) == 68) {
    $55 = HEAP8[$first + 1 >> 0] | 0;
    if (!(($55 | 0) == 53 | ($55 | 0) == 50 | ($55 | 0) == 49 | ($55 | 0) == 48)) {
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($6, $16 + -24 | 0);
    $57 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($6, 0, 59104, 1) | 0;
    $58 = HEAP8[$57 >> 0] | 0;
    $59 = $57 + 1 | 0;
    HEAP8[$$sroa$6 + 0 >> 0] = HEAP8[$59 + 0 >> 0] | 0;
    HEAP8[$$sroa$6 + 1 >> 0] = HEAP8[$59 + 1 >> 0] | 0;
    HEAP8[$$sroa$6 + 2 >> 0] = HEAP8[$59 + 2 >> 0] | 0;
    HEAP8[$$sroa$6 + 3 >> 0] = HEAP8[$59 + 3 >> 0] | 0;
    HEAP8[$$sroa$6 + 4 >> 0] = HEAP8[$59 + 4 >> 0] | 0;
    HEAP8[$$sroa$6 + 5 >> 0] = HEAP8[$59 + 5 >> 0] | 0;
    HEAP8[$$sroa$6 + 6 >> 0] = HEAP8[$59 + 6 >> 0] | 0;
    $61 = HEAP32[$57 + 8 >> 2] | 0;
    HEAP32[$57 + 0 >> 2] = 0;
    HEAP32[$57 + 4 >> 2] = 0;
    HEAP32[$57 + 8 >> 2] = 0;
    HEAP8[$5 >> 0] = $58;
    $62 = $5 + 1 | 0;
    HEAP8[$62 + 0 >> 0] = HEAP8[$$sroa$6 + 0 >> 0] | 0;
    HEAP8[$62 + 1 >> 0] = HEAP8[$$sroa$6 + 1 >> 0] | 0;
    HEAP8[$62 + 2 >> 0] = HEAP8[$$sroa$6 + 2 >> 0] | 0;
    HEAP8[$62 + 3 >> 0] = HEAP8[$$sroa$6 + 3 >> 0] | 0;
    HEAP8[$62 + 4 >> 0] = HEAP8[$$sroa$6 + 4 >> 0] | 0;
    HEAP8[$62 + 5 >> 0] = HEAP8[$$sroa$6 + 5 >> 0] | 0;
    HEAP8[$62 + 6 >> 0] = HEAP8[$$sroa$6 + 6 >> 0] | 0;
    HEAP32[$5 + 8 >> 2] = $61;
    HEAP8[$$sroa$6 + 0 >> 0] = 0;
    HEAP8[$$sroa$6 + 1 >> 0] = 0;
    HEAP8[$$sroa$6 + 2 >> 0] = 0;
    HEAP8[$$sroa$6 + 3 >> 0] = 0;
    HEAP8[$$sroa$6 + 4 >> 0] = 0;
    HEAP8[$$sroa$6 + 5 >> 0] = 0;
    HEAP8[$$sroa$6 + 6 >> 0] = 0;
    $64 = $5 + 12 | 0;
    HEAP32[$64 + 0 >> 2] = 0;
    HEAP32[$64 + 4 >> 2] = 0;
    HEAP32[$64 + 8 >> 2] = 0;
    $65 = HEAP32[$15 >> 2] | 0;
    $67 = HEAP32[$db + 8 >> 2] | 0;
    if ($65 >>> 0 < $67 >>> 0) {
     if (!$65) $72 = 0; else {
      HEAP32[$65 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
      HEAP32[$65 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$65 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      HEAP32[$5 + 0 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$5 + 8 >> 2] = 0;
      $70 = $65 + 12 | 0;
      HEAP32[$70 + 0 >> 2] = HEAP32[$64 + 0 >> 2];
      HEAP32[$70 + 4 >> 2] = HEAP32[$64 + 4 >> 2];
      HEAP32[$70 + 8 >> 2] = HEAP32[$64 + 8 >> 2];
      HEAP32[$64 + 0 >> 2] = 0;
      HEAP32[$64 + 4 >> 2] = 0;
      HEAP32[$64 + 8 >> 2] = 0;
      $72 = HEAP32[$15 >> 2] | 0;
     }
     HEAP32[$15 >> 2] = $72 + 24;
    } else {
     $76 = HEAP32[$db >> 2] | 0;
     $78 = ($65 - $76 | 0) / 24 | 0;
     $79 = $78 + 1 | 0;
     if (($79 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $83 = ($67 - $76 | 0) / 24 | 0;
     if ($83 >>> 0 < 1073741823) {
      $85 = $83 << 1;
      $$0$i$i$i10$i = $85 >>> 0 < $79 >>> 0 ? $79 : $85;
     } else $$0$i$i$i10$i = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i18$i, $$0$i$i$i10$i, $78, $db + 12 | 0);
     $88 = $__v$i$i18$i + 8 | 0;
     $89 = HEAP32[$88 >> 2] | 0;
     if ($89) {
      HEAP32[$89 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
      HEAP32[$89 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$89 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      HEAP32[$5 + 0 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$5 + 8 >> 2] = 0;
      $91 = $89 + 12 | 0;
      HEAP32[$91 + 0 >> 2] = HEAP32[$64 + 0 >> 2];
      HEAP32[$91 + 4 >> 2] = HEAP32[$64 + 4 >> 2];
      HEAP32[$91 + 8 >> 2] = HEAP32[$64 + 8 >> 2];
      HEAP32[$64 + 0 >> 2] = 0;
      HEAP32[$64 + 4 >> 2] = 0;
      HEAP32[$64 + 8 >> 2] = 0;
     }
     HEAP32[$88 >> 2] = $89 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i18$i);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i18$i);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
    if (HEAP8[$6 >> 0] & 1) _free(HEAP32[$6 + 8 >> 2] | 0);
    HEAP8[$db + 60 >> 0] = 1;
    $$0 = $first + 2 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 85:
  {
   if (!(($last - $first | 0) > 2 & $8 << 24 >> 24 == 85)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $104 = HEAP8[$first + 1 >> 0] | 0;
   if (($104 | 0) == 116) {
    $105 = $$sroa$619;
    HEAP32[$105 >> 2] = 1852732711;
    HEAP32[$105 + 4 >> 2] = 1684368737;
    HEAP8[$$sroa$619 + 8 >> 0] = 0;
    HEAP8[$0 >> 0] = 16;
    dest = $0 + 1 | 0;
    src = $$sroa$619 + 0 | 0;
    stop = dest + 11 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP32[$$sroa$619 + 0 >> 2] = 0;
    HEAP32[$$sroa$619 + 4 >> 2] = 0;
    HEAP16[$$sroa$619 + 8 >> 1] = 0;
    HEAP8[$$sroa$619 + 10 >> 0] = 0;
    $111 = $0 + 12 | 0;
    HEAP32[$111 + 0 >> 2] = 0;
    HEAP32[$111 + 4 >> 2] = 0;
    HEAP32[$111 + 8 >> 2] = 0;
    $112 = $db + 4 | 0;
    $113 = HEAP32[$112 >> 2] | 0;
    $115 = HEAP32[$db + 8 >> 2] | 0;
    if ($113 >>> 0 < $115 >>> 0) {
     if (!$113) $120 = 0; else {
      HEAP32[$113 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
      HEAP32[$113 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
      HEAP32[$113 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
      HEAP32[$0 + 0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAP32[$0 + 8 >> 2] = 0;
      $118 = $113 + 12 | 0;
      HEAP32[$118 + 0 >> 2] = HEAP32[$111 + 0 >> 2];
      HEAP32[$118 + 4 >> 2] = HEAP32[$111 + 4 >> 2];
      HEAP32[$118 + 8 >> 2] = HEAP32[$111 + 8 >> 2];
      HEAP32[$111 + 0 >> 2] = 0;
      HEAP32[$111 + 4 >> 2] = 0;
      HEAP32[$111 + 8 >> 2] = 0;
      $120 = HEAP32[$112 >> 2] | 0;
     }
     HEAP32[$112 >> 2] = $120 + 24;
    } else {
     $124 = HEAP32[$db >> 2] | 0;
     $126 = ($113 - $124 | 0) / 24 | 0;
     $127 = $126 + 1 | 0;
     if (($127 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $131 = ($115 - $124 | 0) / 24 | 0;
     if ($131 >>> 0 < 1073741823) {
      $133 = $131 << 1;
      $$0$i$i$i$i9 = $133 >>> 0 < $127 >>> 0 ? $127 : $133;
     } else $$0$i$i$i$i9 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i18$i, $$0$i$i$i$i9, $126, $db + 12 | 0);
     $136 = $__v$i$i18$i + 8 | 0;
     $137 = HEAP32[$136 >> 2] | 0;
     if ($137) {
      HEAP32[$137 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
      HEAP32[$137 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
      HEAP32[$137 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
      HEAP32[$0 + 0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAP32[$0 + 8 >> 2] = 0;
      $139 = $137 + 12 | 0;
      HEAP32[$139 + 0 >> 2] = HEAP32[$111 + 0 >> 2];
      HEAP32[$139 + 4 >> 2] = HEAP32[$111 + 4 >> 2];
      HEAP32[$139 + 8 >> 2] = HEAP32[$111 + 8 >> 2];
      HEAP32[$111 + 0 >> 2] = 0;
      HEAP32[$111 + 4 >> 2] = 0;
      HEAP32[$111 + 8 >> 2] = 0;
     }
     HEAP32[$136 >> 2] = $137 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i18$i);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i18$i);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
    $141 = $first + 2 | 0;
    if (($141 | 0) == ($last | 0)) {
     $143 = HEAP32[$112 >> 2] | 0;
     $144 = $143 + -24 | 0;
     $146 = $143;
     do {
      $145 = $146 + -24 | 0;
      HEAP32[$112 >> 2] = $145;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($145);
      $146 = HEAP32[$112 >> 2] | 0;
     } while (($146 | 0) != ($144 | 0));
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    if (((HEAP8[$141 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
     $151 = $first + 3 | 0;
     L92 : do if (($151 | 0) == ($last | 0)) $t1$0$i$lcssa = $last; else {
      $t1$0$i27 = $151;
      while (1) {
       if (((HEAP8[$t1$0$i27 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
        $t1$0$i$lcssa = $t1$0$i27;
        break L92;
       }
       $t1$0$i27 = $t1$0$i27 + 1 | 0;
       if (($t1$0$i27 | 0) == ($last | 0)) {
        $t1$0$i$lcssa = $last;
        break;
       }
      }
     } while (0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_((HEAP32[$112 >> 2] | 0) + -24 | 0, $141, $t1$0$i$lcssa);
     $t0$0$i = $t1$0$i$lcssa;
    } else $t0$0$i = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$112 >> 2] | 0) + -24 | 0, 39);
    if (($t0$0$i | 0) != ($last | 0)) if ((HEAP8[$t0$0$i >> 0] | 0) == 95) {
     $$0 = $t0$0$i + 1 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $164 = HEAP32[$112 >> 2] | 0;
    $165 = $164 + -24 | 0;
    $167 = $164;
    do {
     $166 = $167 + -24 | 0;
     HEAP32[$112 >> 2] = $166;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($166);
     $167 = HEAP32[$112 >> 2] | 0;
    } while (($167 | 0) != ($165 | 0));
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($104 | 0) == 108) {
    HEAP8[$1 >> 0] = 18;
    $171 = $1 + 1 | 0;
    HEAP8[$171 + 0 >> 0] = HEAP8[60288] | 0;
    HEAP8[$171 + 1 >> 0] = HEAP8[60289] | 0;
    HEAP8[$171 + 2 >> 0] = HEAP8[60290] | 0;
    HEAP8[$171 + 3 >> 0] = HEAP8[60291] | 0;
    HEAP8[$171 + 4 >> 0] = HEAP8[60292] | 0;
    HEAP8[$171 + 5 >> 0] = HEAP8[60293] | 0;
    HEAP8[$171 + 6 >> 0] = HEAP8[60294] | 0;
    HEAP32[$1 + 8 >> 2] = 10279;
    $173 = $1 + 12 | 0;
    HEAP32[$173 + 0 >> 2] = 0;
    HEAP32[$173 + 4 >> 2] = 0;
    HEAP32[$173 + 8 >> 2] = 0;
    $174 = $db + 4 | 0;
    $175 = HEAP32[$174 >> 2] | 0;
    $177 = HEAP32[$db + 8 >> 2] | 0;
    if ($175 >>> 0 < $177 >>> 0) {
     if (!$175) $182 = 0; else {
      HEAP32[$175 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
      HEAP32[$175 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
      HEAP32[$175 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$1 + 0 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$1 + 8 >> 2] = 0;
      $180 = $175 + 12 | 0;
      HEAP32[$180 + 0 >> 2] = HEAP32[$173 + 0 >> 2];
      HEAP32[$180 + 4 >> 2] = HEAP32[$173 + 4 >> 2];
      HEAP32[$180 + 8 >> 2] = HEAP32[$173 + 8 >> 2];
      HEAP32[$173 + 0 >> 2] = 0;
      HEAP32[$173 + 4 >> 2] = 0;
      HEAP32[$173 + 8 >> 2] = 0;
      $182 = HEAP32[$174 >> 2] | 0;
     }
     HEAP32[$174 >> 2] = $182 + 24;
    } else {
     $186 = HEAP32[$db >> 2] | 0;
     $188 = ($175 - $186 | 0) / 24 | 0;
     $189 = $188 + 1 | 0;
     if (($189 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     $193 = ($177 - $186 | 0) / 24 | 0;
     if ($193 >>> 0 < 1073741823) {
      $195 = $193 << 1;
      $$0$i$i$i21$i = $195 >>> 0 < $189 >>> 0 ? $189 : $195;
     } else $$0$i$i$i21$i = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i18$i, $$0$i$i$i21$i, $188, $db + 12 | 0);
     $198 = $__v$i$i18$i + 8 | 0;
     $199 = HEAP32[$198 >> 2] | 0;
     if ($199) {
      HEAP32[$199 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
      HEAP32[$199 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
      HEAP32[$199 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$1 + 0 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$1 + 8 >> 2] = 0;
      $201 = $199 + 12 | 0;
      HEAP32[$201 + 0 >> 2] = HEAP32[$173 + 0 >> 2];
      HEAP32[$201 + 4 >> 2] = HEAP32[$173 + 4 >> 2];
      HEAP32[$201 + 8 >> 2] = HEAP32[$173 + 8 >> 2];
      HEAP32[$173 + 0 >> 2] = 0;
      HEAP32[$173 + 4 >> 2] = 0;
      HEAP32[$173 + 8 >> 2] = 0;
     }
     HEAP32[$198 >> 2] = $199 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i18$i);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i18$i);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
    $$phi$trans$insert = $first + 2 | 0;
    do if ((HEAP8[$$phi$trans$insert >> 0] | 0) == 118) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$174 >> 2] | 0) + -24 | 0, 41);
     $t01$1$i = $first + 3 | 0;
    } else {
     $206 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$phi$trans$insert, $last, $db) | 0;
     $208 = HEAP32[$174 >> 2] | 0;
     if (($206 | 0) == ($$phi$trans$insert | 0)) {
      $209 = $208 + -24 | 0;
      $211 = $208;
      do {
       $210 = $211 + -24 | 0;
       HEAP32[$174 >> 2] = $210;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($210);
       $211 = HEAP32[$174 >> 2] | 0;
      } while (($211 | 0) != ($209 | 0));
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if ((($208 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i, $208 + -24 | 0);
     $221 = HEAP32[$174 >> 2] | 0;
     $222 = $221 + -24 | 0;
     $224 = $221;
     do {
      $223 = $224 + -24 | 0;
      HEAP32[$174 >> 2] = $223;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($223);
      $224 = HEAP32[$174 >> 2] | 0;
     } while (($224 | 0) != ($222 | 0));
     $228 = HEAP8[$tmp$i >> 0] | 0;
     if (!($228 & 1)) {
      $238 = $tmp$i + 1 | 0;
      $239 = ($228 & 255) >>> 1;
     } else {
      $238 = HEAP32[$tmp$i + 8 >> 2] | 0;
      $239 = HEAP32[$tmp$i + 4 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($221 + -48 | 0, $238, $239) | 0;
     $240 = $tmp$i + 1 | 0;
     $241 = $tmp$i + 8 | 0;
     $242 = $tmp$i + 4 | 0;
     $254 = $228;
     $t01$0$i = $206;
     while (1) {
      $243 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t01$0$i, $last, $db) | 0;
      $245 = HEAP32[$174 >> 2] | 0;
      if (($243 | 0) == ($t01$0$i | 0)) {
       label = 105;
       break;
      }
      if ((($245 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) break;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2, $245 + -24 | 0);
      L146 : do if (!($254 & 1)) {
       HEAP8[$240 >> 0] = 0;
       HEAP8[$tmp$i >> 0] = 0;
      } else {
       $256 = HEAP32[$241 >> 2] | 0;
       HEAP8[$256 >> 0] = 0;
       HEAP32[$242 >> 2] = 0;
       $257 = HEAP32[$tmp$i >> 2] | 0;
       $phitmp$i$i$i$i$i$i$i = ($257 & -2) + -1 | 0;
       $259 = $257 & 255;
       do if (!($259 & 1)) {
        $263 = ($259 & 255) >>> 1;
        if (($259 & 255) < 22) {
         _memcpy($240 | 0, $256 | 0, (($259 & 255) >>> 1) + 1 | 0) | 0;
         _free($256);
         $$ph40 = $263;
         break;
        }
        $phitmp$i2$i$i$i$i$i$i = ($263 + 16 & 240) + -1 | 0;
        if (($phitmp$i2$i$i$i$i$i$i | 0) == ($phitmp$i$i$i$i$i$i$i | 0)) break L146;
        $269 = $phitmp$i2$i$i$i$i$i$i + 1 | 0;
        $270 = _malloc($269) | 0;
        if ($phitmp$i2$i$i$i$i$i$i >>> 0 <= $phitmp$i$i$i$i$i$i$i >>> 0 & ($270 | 0) == 0) break L146;
        _memcpy($270 | 0, $240 | 0, (($259 & 255) >>> 1) + 1 | 0) | 0;
        HEAP32[$tmp$i >> 2] = $269 | 1;
        HEAP32[$242 >> 2] = $263;
        HEAP32[$241 >> 2] = $270;
        break L146;
       } else {
        HEAP8[$240 >> 0] = 0;
        _free($256);
        $$ph40 = 0;
       } while (0);
       HEAP8[$tmp$i >> 0] = $$ph40 << 1;
      } while (0);
      HEAP32[$tmp$i + 0 >> 2] = HEAP32[$2 + 0 >> 2];
      HEAP32[$tmp$i + 4 >> 2] = HEAP32[$2 + 4 >> 2];
      HEAP32[$tmp$i + 8 >> 2] = HEAP32[$2 + 8 >> 2];
      HEAP32[$2 + 0 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      HEAP32[$2 + 8 >> 2] = 0;
      $$pre29 = HEAP32[$174 >> 2] | 0;
      $281 = $$pre29 + -24 | 0;
      $283 = $$pre29;
      do {
       $282 = $283 + -24 | 0;
       HEAP32[$174 >> 2] = $282;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($282);
       $283 = HEAP32[$174 >> 2] | 0;
      } while (($283 | 0) != ($281 | 0));
      $286 = HEAP8[$tmp$i >> 0] | 0;
      $288 = ($286 & 1) == 0;
      if ($288) $293 = ($286 & 255) >>> 1; else $293 = HEAP32[$242 >> 2] | 0;
      if (!$293) {
       $254 = $286;
       $t01$0$i = $243;
       continue;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($$pre29 + -48 | 0, 59432, 2) | 0;
      if ($288) {
       $301 = $240;
       $302 = ($286 & 255) >>> 1;
      } else {
       $301 = HEAP32[$241 >> 2] | 0;
       $302 = HEAP32[$242 >> 2] | 0;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$174 >> 2] | 0) + -24 | 0, $301, $302) | 0;
      $254 = $286;
      $t01$0$i = $243;
     }
     if ((label | 0) == 105) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($245 + -24 | 0, 58936, 1) | 0;
      if (!($254 & 1)) {
       $t01$1$i = $t01$0$i;
       break;
      }
      _free(HEAP32[$241 >> 2] | 0);
      $t01$1$i = $t01$0$i;
      break;
     }
     if (!($254 & 1)) {
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     _free(HEAP32[$241 >> 2] | 0);
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    } while (0);
    if (($t01$1$i | 0) != ($last | 0)) if ((HEAP8[$t01$1$i >> 0] | 0) == 69) {
     $316 = $t01$1$i + 1 | 0;
     if (($316 | 0) == ($last | 0)) {
      $318 = HEAP32[$174 >> 2] | 0;
      $319 = $318 + -24 | 0;
      $321 = $318;
      do {
       $320 = $321 + -24 | 0;
       HEAP32[$174 >> 2] = $320;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($320);
       $321 = HEAP32[$174 >> 2] | 0;
      } while (($321 | 0) != ($319 | 0));
      $$0 = $first;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if (((HEAP8[$316 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
      $326 = $t01$1$i + 2 | 0;
      L191 : do if (($326 | 0) == ($last | 0)) $t13$0$i$lcssa = $last; else {
       $t13$0$i30 = $326;
       while (1) {
        if (((HEAP8[$t13$0$i30 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
         $t13$0$i$lcssa = $t13$0$i30;
         break L191;
        }
        $t13$0$i30 = $t13$0$i30 + 1 | 0;
        if (($t13$0$i30 | 0) == ($last | 0)) {
         $t13$0$i$lcssa = $last;
         break;
        }
       }
      } while (0);
      $332 = HEAP32[$174 >> 2] | 0;
      $333 = $332 + -24 | 0;
      $334 = HEAP8[$333 >> 0] | 0;
      if (!($334 & 1)) {
       $349 = 10;
       $350 = ($334 & 255) >>> 1;
       $353 = $334;
      } else {
       $341 = HEAP32[$333 >> 2] | 0;
       $349 = ($341 & -2) + -1 | 0;
       $350 = HEAP32[$332 + -20 >> 2] | 0;
       $353 = $341 & 255;
      }
      $346 = $t13$0$i$lcssa - $316 | 0;
      if (($t13$0$i$lcssa | 0) == ($316 | 0)) $t01$2$i = $316; else {
       if (($349 - $350 | 0) >>> 0 < $346 >>> 0) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($333, $349, $350 + $346 - $349 | 0, $350, 7, $346);
        $__p$0$i$i = HEAP32[$332 + -16 >> 2] | 0;
       } else {
        if (!($353 & 1)) $361 = $333 + 1 | 0; else $361 = HEAP32[$332 + -16 >> 2] | 0;
        if (($350 | 0) == 7) $__p$0$i$i = $361; else {
         _memmove($361 + ($346 + 7) | 0, $361 + 7 | 0, $350 + -7 | 0) | 0;
         $__p$0$i$i = $361;
        }
       }
       $367 = $350 + $346 | 0;
       if (!(HEAP8[$333 >> 0] & 1)) HEAP8[$333 >> 0] = $367 << 1; else HEAP32[$332 + -20 >> 2] = $367;
       HEAP8[$__p$0$i$i + $367 >> 0] = 0;
       $$04$i$i = $316;
       $379 = $t01$1$i;
       $__p$13$i$i = $__p$0$i$i + 7 | 0;
       while (1) {
        HEAP8[$__p$13$i$i >> 0] = HEAP8[$$04$i$i >> 0] | 0;
        $378 = $379 + 2 | 0;
        if (($378 | 0) == ($t13$0$i$lcssa | 0)) {
         $t01$2$i = $t13$0$i$lcssa;
         break;
        } else {
         $379$phi = $$04$i$i;
         $$04$i$i = $378;
         $__p$13$i$i = $__p$13$i$i + 1 | 0;
         $379 = $379$phi;
        }
       }
      }
     } else $t01$2$i = $316;
     if (($t01$2$i | 0) != ($last | 0)) if ((HEAP8[$t01$2$i >> 0] | 0) == 95) {
      $$0 = $t01$2$i + 1 | 0;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $384 = HEAP32[$174 >> 2] | 0;
     $385 = $384 + -24 | 0;
     $387 = $384;
     do {
      $386 = $387 + -24 | 0;
      HEAP32[$174 >> 2] = $386;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($386);
      $387 = HEAP32[$174 >> 2] | 0;
     } while (($387 | 0) != ($385 | 0));
     $$0 = $first;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $310 = HEAP32[$174 >> 2] | 0;
    $311 = $310 + -24 | 0;
    $313 = $310;
    do {
     $312 = $313 + -24 | 0;
     HEAP32[$174 >> 2] = $312;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($312);
     $313 = HEAP32[$174 >> 2] | 0;
    } while (($313 | 0) != ($311 | 0));
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 default:
  {
   $$0 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i14 = 0, $$0$i$i$i22 = 0, $$0$i$i$i30 = 0, $$0$i$i$i38 = 0, $$0$i$i$i46 = 0, $$0$i$i$i53 = 0, $$0$i$i$i59 = 0, $0 = 0, $1 = 0, $102 = 0, $104 = 0, $105 = 0, $109 = 0, $111 = 0, $114 = 0, $115 = 0, $117 = 0, $120 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $131 = 0, $133 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $144 = 0, $146 = 0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $166 = 0, $168 = 0, $172 = 0, $174 = 0, $175 = 0, $179 = 0, $181 = 0, $184 = 0, $185 = 0, $187 = 0, $19 = 0, $190 = 0, $194 = 0, $195 = 0, $196 = 0, $198 = 0, $2 = 0, $20 = 0, $201 = 0, $203 = 0, $207 = 0, $209 = 0, $21 = 0, $210 = 0, $214 = 0, $216 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $23 = 0, $230 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $243 = 0, $250 = 0, $251 = 0, $26 = 0, $260 = 0, $265 = 0, $266 = 0, $269 = 0, $272 = 0, $28 = 0, $281 = 0, $282 = 0, $296 = 0, $299 = 0, $3 = 0, $300 = 0, $305 = 0, $308 = 0, $312 = 0, $319 = 0, $32 = 0, $321 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $332 = 0, $339 = 0, $34 = 0, $340 = 0, $349 = 0, $35 = 0, $354 = 0, $355 = 0, $358 = 0, $361 = 0, $370 = 0, $371 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $61 = 0, $63 = 0, $67 = 0, $69 = 0, $70 = 0, $74 = 0, $76 = 0, $79 = 0, $80 = 0, $82 = 0, $85 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $96 = 0, $98 = 0, $__v$i$i55 = 0, $isdigit = 0, $isdigit8 = 0, $isdigittmp = 0, $isdigittmp7 = 0, $sub$175 = 0, $t$076 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $__v$i$i55 = sp + 48 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 120 | 0;
 $2 = sp + 144 | 0;
 $3 = sp + 24 | 0;
 $4 = sp;
 $5 = sp + 72 | 0;
 if (($last - $first | 0) <= 1) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP8[$first >> 0] | 0) != 83) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $14 = HEAP8[$first + 1 >> 0] | 0;
 switch ($14 | 0) {
 case 95:
  {
   $226 = HEAP32[$db + 16 >> 2] | 0;
   if (($226 | 0) == (HEAP32[$db + 20 >> 2] | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $230 = HEAP32[$226 >> 2] | 0;
   $232 = HEAP32[$226 + 4 >> 2] | 0;
   L12 : do if (($230 | 0) != ($232 | 0)) {
    $234 = $db + 4 | 0;
    $235 = $db + 8 | 0;
    $236 = $db + 12 | 0;
    $237 = $__v$i$i55 + 8 | 0;
    $243 = $230;
    while (1) {
     $238 = HEAP32[$234 >> 2] | 0;
     if (($238 | 0) == (HEAP32[$235 >> 2] | 0)) {
      $265 = ($238 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
      $266 = $265 + 1 | 0;
      if (($266 | 0) < 0) break;
      if ($265 >>> 0 < 1073741823) {
       $269 = $265 << 1;
       $$0$i$i$i53 = $269 >>> 0 < $266 >>> 0 ? $266 : $269;
      } else $$0$i$i$i53 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i55, $$0$i$i$i53, $265, $236);
      $272 = HEAP32[$237 >> 2] | 0;
      do if ($272) {
       if (!(HEAP8[$243 >> 0] & 1)) {
        HEAP32[$272 + 0 >> 2] = HEAP32[$243 + 0 >> 2];
        HEAP32[$272 + 4 >> 2] = HEAP32[$243 + 4 >> 2];
        HEAP32[$272 + 8 >> 2] = HEAP32[$243 + 8 >> 2];
       } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($272, HEAP32[$243 + 8 >> 2] | 0, HEAP32[$243 + 4 >> 2] | 0);
       $281 = $272 + 12 | 0;
       $282 = $243 + 12 | 0;
       if (!(HEAP8[$282 >> 0] & 1)) {
        HEAP32[$281 + 0 >> 2] = HEAP32[$282 + 0 >> 2];
        HEAP32[$281 + 4 >> 2] = HEAP32[$282 + 4 >> 2];
        HEAP32[$281 + 8 >> 2] = HEAP32[$282 + 8 >> 2];
        break;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($281, HEAP32[$243 + 20 >> 2] | 0, HEAP32[$243 + 16 >> 2] | 0);
        break;
       }
      } while (0);
      HEAP32[$237 >> 2] = $272 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i55);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i55);
     } else {
      if (!$238) $260 = 0; else {
       if (!(HEAP8[$243 >> 0] & 1)) {
        HEAP32[$238 + 0 >> 2] = HEAP32[$243 + 0 >> 2];
        HEAP32[$238 + 4 >> 2] = HEAP32[$243 + 4 >> 2];
        HEAP32[$238 + 8 >> 2] = HEAP32[$243 + 8 >> 2];
       } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($238, HEAP32[$243 + 8 >> 2] | 0, HEAP32[$243 + 4 >> 2] | 0);
       $250 = $238 + 12 | 0;
       $251 = $243 + 12 | 0;
       if (!(HEAP8[$251 >> 0] & 1)) {
        HEAP32[$250 + 0 >> 2] = HEAP32[$251 + 0 >> 2];
        HEAP32[$250 + 4 >> 2] = HEAP32[$251 + 4 >> 2];
        HEAP32[$250 + 8 >> 2] = HEAP32[$251 + 8 >> 2];
       } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($250, HEAP32[$243 + 20 >> 2] | 0, HEAP32[$243 + 16 >> 2] | 0);
       $260 = HEAP32[$234 >> 2] | 0;
      }
      HEAP32[$234 >> 2] = $260 + 24;
     }
     $243 = $243 + 24 | 0;
     if (($243 | 0) == ($232 | 0)) break L12;
    }
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   } while (0);
   $$0 = $first + 2 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 105:
  {
   $120 = _malloc(16) | 0;
   HEAP32[$3 + 8 >> 2] = $120;
   HEAP32[$3 >> 2] = 17;
   HEAP32[$3 + 4 >> 2] = 12;
   dest = $120 + 0 | 0;
   src = 60408;
   stop = dest + 12 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$120 + 12 >> 0] = 0;
   $124 = $3 + 12 | 0;
   HEAP32[$124 + 0 >> 2] = 0;
   HEAP32[$124 + 4 >> 2] = 0;
   HEAP32[$124 + 8 >> 2] = 0;
   $125 = $db + 4 | 0;
   $126 = HEAP32[$125 >> 2] | 0;
   $128 = HEAP32[$db + 8 >> 2] | 0;
   if ($126 >>> 0 < $128 >>> 0) {
    if (!$126) $133 = 0; else {
     HEAP32[$126 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
     HEAP32[$126 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$126 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     HEAP32[$3 + 0 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$3 + 8 >> 2] = 0;
     $131 = $126 + 12 | 0;
     HEAP32[$131 + 0 >> 2] = HEAP32[$124 + 0 >> 2];
     HEAP32[$131 + 4 >> 2] = HEAP32[$124 + 4 >> 2];
     HEAP32[$131 + 8 >> 2] = HEAP32[$124 + 8 >> 2];
     HEAP32[$124 + 0 >> 2] = 0;
     HEAP32[$124 + 4 >> 2] = 0;
     HEAP32[$124 + 8 >> 2] = 0;
     $133 = HEAP32[$125 >> 2] | 0;
    }
    HEAP32[$125 >> 2] = $133 + 24;
   } else {
    $137 = HEAP32[$db >> 2] | 0;
    $139 = ($126 - $137 | 0) / 24 | 0;
    $140 = $139 + 1 | 0;
    if (($140 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $144 = ($128 - $137 | 0) / 24 | 0;
    if ($144 >>> 0 < 1073741823) {
     $146 = $144 << 1;
     $$0$i$i$i30 = $146 >>> 0 < $140 >>> 0 ? $140 : $146;
    } else $$0$i$i$i30 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i55, $$0$i$i$i30, $139, $db + 12 | 0);
    $149 = $__v$i$i55 + 8 | 0;
    $150 = HEAP32[$149 >> 2] | 0;
    if ($150) {
     HEAP32[$150 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
     HEAP32[$150 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$150 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     HEAP32[$3 + 0 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$3 + 8 >> 2] = 0;
     $152 = $150 + 12 | 0;
     HEAP32[$152 + 0 >> 2] = HEAP32[$124 + 0 >> 2];
     HEAP32[$152 + 4 >> 2] = HEAP32[$124 + 4 >> 2];
     HEAP32[$152 + 8 >> 2] = HEAP32[$124 + 8 >> 2];
     HEAP32[$124 + 0 >> 2] = 0;
     HEAP32[$124 + 4 >> 2] = 0;
     HEAP32[$124 + 8 >> 2] = 0;
    }
    HEAP32[$149 >> 2] = $150 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i55);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i55);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$0 = $first + 2 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 100:
  {
   $190 = _malloc(16) | 0;
   HEAP32[$5 + 8 >> 2] = $190;
   HEAP32[$5 >> 2] = 17;
   HEAP32[$5 + 4 >> 2] = 13;
   dest = $190 + 0 | 0;
   src = 60584;
   stop = dest + 13 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$190 + 13 >> 0] = 0;
   $194 = $5 + 12 | 0;
   HEAP32[$194 + 0 >> 2] = 0;
   HEAP32[$194 + 4 >> 2] = 0;
   HEAP32[$194 + 8 >> 2] = 0;
   $195 = $db + 4 | 0;
   $196 = HEAP32[$195 >> 2] | 0;
   $198 = HEAP32[$db + 8 >> 2] | 0;
   if ($196 >>> 0 < $198 >>> 0) {
    if (!$196) $203 = 0; else {
     HEAP32[$196 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
     HEAP32[$196 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
     HEAP32[$196 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
     HEAP32[$5 + 0 >> 2] = 0;
     HEAP32[$5 + 4 >> 2] = 0;
     HEAP32[$5 + 8 >> 2] = 0;
     $201 = $196 + 12 | 0;
     HEAP32[$201 + 0 >> 2] = HEAP32[$194 + 0 >> 2];
     HEAP32[$201 + 4 >> 2] = HEAP32[$194 + 4 >> 2];
     HEAP32[$201 + 8 >> 2] = HEAP32[$194 + 8 >> 2];
     HEAP32[$194 + 0 >> 2] = 0;
     HEAP32[$194 + 4 >> 2] = 0;
     HEAP32[$194 + 8 >> 2] = 0;
     $203 = HEAP32[$195 >> 2] | 0;
    }
    HEAP32[$195 >> 2] = $203 + 24;
   } else {
    $207 = HEAP32[$db >> 2] | 0;
    $209 = ($196 - $207 | 0) / 24 | 0;
    $210 = $209 + 1 | 0;
    if (($210 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $214 = ($198 - $207 | 0) / 24 | 0;
    if ($214 >>> 0 < 1073741823) {
     $216 = $214 << 1;
     $$0$i$i$i46 = $216 >>> 0 < $210 >>> 0 ? $210 : $216;
    } else $$0$i$i$i46 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i55, $$0$i$i$i46, $209, $db + 12 | 0);
    $219 = $__v$i$i55 + 8 | 0;
    $220 = HEAP32[$219 >> 2] | 0;
    if ($220) {
     HEAP32[$220 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
     HEAP32[$220 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
     HEAP32[$220 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
     HEAP32[$5 + 0 >> 2] = 0;
     HEAP32[$5 + 4 >> 2] = 0;
     HEAP32[$5 + 8 >> 2] = 0;
     $222 = $220 + 12 | 0;
     HEAP32[$222 + 0 >> 2] = HEAP32[$194 + 0 >> 2];
     HEAP32[$222 + 4 >> 2] = HEAP32[$194 + 4 >> 2];
     HEAP32[$222 + 8 >> 2] = HEAP32[$194 + 8 >> 2];
     HEAP32[$194 + 0 >> 2] = 0;
     HEAP32[$194 + 4 >> 2] = 0;
     HEAP32[$194 + 8 >> 2] = 0;
    }
    HEAP32[$219 >> 2] = $220 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i55);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i55);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
   $$0 = $first + 2 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 111:
  {
   $155 = _malloc(16) | 0;
   HEAP32[$4 + 8 >> 2] = $155;
   HEAP32[$4 >> 2] = 17;
   HEAP32[$4 + 4 >> 2] = 12;
   dest = $155 + 0 | 0;
   src = 60496;
   stop = dest + 12 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$155 + 12 >> 0] = 0;
   $159 = $4 + 12 | 0;
   HEAP32[$159 + 0 >> 2] = 0;
   HEAP32[$159 + 4 >> 2] = 0;
   HEAP32[$159 + 8 >> 2] = 0;
   $160 = $db + 4 | 0;
   $161 = HEAP32[$160 >> 2] | 0;
   $163 = HEAP32[$db + 8 >> 2] | 0;
   if ($161 >>> 0 < $163 >>> 0) {
    if (!$161) $168 = 0; else {
     HEAP32[$161 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
     HEAP32[$161 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
     HEAP32[$161 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
     HEAP32[$4 + 0 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$4 + 8 >> 2] = 0;
     $166 = $161 + 12 | 0;
     HEAP32[$166 + 0 >> 2] = HEAP32[$159 + 0 >> 2];
     HEAP32[$166 + 4 >> 2] = HEAP32[$159 + 4 >> 2];
     HEAP32[$166 + 8 >> 2] = HEAP32[$159 + 8 >> 2];
     HEAP32[$159 + 0 >> 2] = 0;
     HEAP32[$159 + 4 >> 2] = 0;
     HEAP32[$159 + 8 >> 2] = 0;
     $168 = HEAP32[$160 >> 2] | 0;
    }
    HEAP32[$160 >> 2] = $168 + 24;
   } else {
    $172 = HEAP32[$db >> 2] | 0;
    $174 = ($161 - $172 | 0) / 24 | 0;
    $175 = $174 + 1 | 0;
    if (($175 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $179 = ($163 - $172 | 0) / 24 | 0;
    if ($179 >>> 0 < 1073741823) {
     $181 = $179 << 1;
     $$0$i$i$i38 = $181 >>> 0 < $175 >>> 0 ? $175 : $181;
    } else $$0$i$i$i38 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i55, $$0$i$i$i38, $174, $db + 12 | 0);
    $184 = $__v$i$i55 + 8 | 0;
    $185 = HEAP32[$184 >> 2] | 0;
    if ($185) {
     HEAP32[$185 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
     HEAP32[$185 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
     HEAP32[$185 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
     HEAP32[$4 + 0 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$4 + 8 >> 2] = 0;
     $187 = $185 + 12 | 0;
     HEAP32[$187 + 0 >> 2] = HEAP32[$159 + 0 >> 2];
     HEAP32[$187 + 4 >> 2] = HEAP32[$159 + 4 >> 2];
     HEAP32[$187 + 8 >> 2] = HEAP32[$159 + 8 >> 2];
     HEAP32[$159 + 0 >> 2] = 0;
     HEAP32[$159 + 4 >> 2] = 0;
     HEAP32[$159 + 8 >> 2] = 0;
    }
    HEAP32[$184 >> 2] = $185 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i55);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i55);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
   $$0 = $first + 2 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 97:
  {
   $15 = _malloc(16) | 0;
   HEAP32[$0 + 8 >> 2] = $15;
   HEAP32[$0 >> 2] = 17;
   HEAP32[$0 + 4 >> 2] = 14;
   dest = $15 + 0 | 0;
   src = 60912;
   stop = dest + 14 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$15 + 14 >> 0] = 0;
   $19 = $0 + 12 | 0;
   HEAP32[$19 + 0 >> 2] = 0;
   HEAP32[$19 + 4 >> 2] = 0;
   HEAP32[$19 + 8 >> 2] = 0;
   $20 = $db + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   $23 = HEAP32[$db + 8 >> 2] | 0;
   if ($21 >>> 0 < $23 >>> 0) {
    if (!$21) $28 = 0; else {
     HEAP32[$21 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
     HEAP32[$21 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
     HEAP32[$21 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
     HEAP32[$0 + 0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$0 + 8 >> 2] = 0;
     $26 = $21 + 12 | 0;
     HEAP32[$26 + 0 >> 2] = HEAP32[$19 + 0 >> 2];
     HEAP32[$26 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
     HEAP32[$26 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
     HEAP32[$19 + 0 >> 2] = 0;
     HEAP32[$19 + 4 >> 2] = 0;
     HEAP32[$19 + 8 >> 2] = 0;
     $28 = HEAP32[$20 >> 2] | 0;
    }
    HEAP32[$20 >> 2] = $28 + 24;
   } else {
    $32 = HEAP32[$db >> 2] | 0;
    $34 = ($21 - $32 | 0) / 24 | 0;
    $35 = $34 + 1 | 0;
    if (($35 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $39 = ($23 - $32 | 0) / 24 | 0;
    if ($39 >>> 0 < 1073741823) {
     $41 = $39 << 1;
     $$0$i$i$i = $41 >>> 0 < $35 >>> 0 ? $35 : $41;
    } else $$0$i$i$i = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i55, $$0$i$i$i, $34, $db + 12 | 0);
    $44 = $__v$i$i55 + 8 | 0;
    $45 = HEAP32[$44 >> 2] | 0;
    if ($45) {
     HEAP32[$45 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
     HEAP32[$45 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
     HEAP32[$45 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
     HEAP32[$0 + 0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$0 + 8 >> 2] = 0;
     $47 = $45 + 12 | 0;
     HEAP32[$47 + 0 >> 2] = HEAP32[$19 + 0 >> 2];
     HEAP32[$47 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
     HEAP32[$47 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
     HEAP32[$19 + 0 >> 2] = 0;
     HEAP32[$19 + 4 >> 2] = 0;
     HEAP32[$19 + 8 >> 2] = 0;
    }
    HEAP32[$44 >> 2] = $45 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i55);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i55);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
   $$0 = $first + 2 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 115:
  {
   $85 = _malloc(16) | 0;
   HEAP32[$2 + 8 >> 2] = $85;
   HEAP32[$2 >> 2] = 17;
   HEAP32[$2 + 4 >> 2] = 11;
   dest = $85 + 0 | 0;
   src = 60304;
   stop = dest + 11 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$85 + 11 >> 0] = 0;
   $89 = $2 + 12 | 0;
   HEAP32[$89 + 0 >> 2] = 0;
   HEAP32[$89 + 4 >> 2] = 0;
   HEAP32[$89 + 8 >> 2] = 0;
   $90 = $db + 4 | 0;
   $91 = HEAP32[$90 >> 2] | 0;
   $93 = HEAP32[$db + 8 >> 2] | 0;
   if ($91 >>> 0 < $93 >>> 0) {
    if (!$91) $98 = 0; else {
     HEAP32[$91 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
     HEAP32[$91 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$91 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$2 + 0 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$2 + 8 >> 2] = 0;
     $96 = $91 + 12 | 0;
     HEAP32[$96 + 0 >> 2] = HEAP32[$89 + 0 >> 2];
     HEAP32[$96 + 4 >> 2] = HEAP32[$89 + 4 >> 2];
     HEAP32[$96 + 8 >> 2] = HEAP32[$89 + 8 >> 2];
     HEAP32[$89 + 0 >> 2] = 0;
     HEAP32[$89 + 4 >> 2] = 0;
     HEAP32[$89 + 8 >> 2] = 0;
     $98 = HEAP32[$90 >> 2] | 0;
    }
    HEAP32[$90 >> 2] = $98 + 24;
   } else {
    $102 = HEAP32[$db >> 2] | 0;
    $104 = ($91 - $102 | 0) / 24 | 0;
    $105 = $104 + 1 | 0;
    if (($105 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $109 = ($93 - $102 | 0) / 24 | 0;
    if ($109 >>> 0 < 1073741823) {
     $111 = $109 << 1;
     $$0$i$i$i22 = $111 >>> 0 < $105 >>> 0 ? $105 : $111;
    } else $$0$i$i$i22 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i55, $$0$i$i$i22, $104, $db + 12 | 0);
    $114 = $__v$i$i55 + 8 | 0;
    $115 = HEAP32[$114 >> 2] | 0;
    if ($115) {
     HEAP32[$115 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
     HEAP32[$115 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$115 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$2 + 0 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$2 + 8 >> 2] = 0;
     $117 = $115 + 12 | 0;
     HEAP32[$117 + 0 >> 2] = HEAP32[$89 + 0 >> 2];
     HEAP32[$117 + 4 >> 2] = HEAP32[$89 + 4 >> 2];
     HEAP32[$117 + 8 >> 2] = HEAP32[$89 + 8 >> 2];
     HEAP32[$89 + 0 >> 2] = 0;
     HEAP32[$89 + 4 >> 2] = 0;
     HEAP32[$89 + 8 >> 2] = 0;
    }
    HEAP32[$114 >> 2] = $115 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i55);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i55);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
   $$0 = $first + 2 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 98:
  {
   $50 = _malloc(32) | 0;
   HEAP32[$1 + 8 >> 2] = $50;
   HEAP32[$1 >> 2] = 33;
   HEAP32[$1 + 4 >> 2] = 17;
   dest = $50 + 0 | 0;
   src = 60928;
   stop = dest + 17 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$50 + 17 >> 0] = 0;
   $54 = $1 + 12 | 0;
   HEAP32[$54 + 0 >> 2] = 0;
   HEAP32[$54 + 4 >> 2] = 0;
   HEAP32[$54 + 8 >> 2] = 0;
   $55 = $db + 4 | 0;
   $56 = HEAP32[$55 >> 2] | 0;
   $58 = HEAP32[$db + 8 >> 2] | 0;
   if ($56 >>> 0 < $58 >>> 0) {
    if (!$56) $63 = 0; else {
     HEAP32[$56 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
     HEAP32[$56 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$56 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 0 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$1 + 8 >> 2] = 0;
     $61 = $56 + 12 | 0;
     HEAP32[$61 + 0 >> 2] = HEAP32[$54 + 0 >> 2];
     HEAP32[$61 + 4 >> 2] = HEAP32[$54 + 4 >> 2];
     HEAP32[$61 + 8 >> 2] = HEAP32[$54 + 8 >> 2];
     HEAP32[$54 + 0 >> 2] = 0;
     HEAP32[$54 + 4 >> 2] = 0;
     HEAP32[$54 + 8 >> 2] = 0;
     $63 = HEAP32[$55 >> 2] | 0;
    }
    HEAP32[$55 >> 2] = $63 + 24;
   } else {
    $67 = HEAP32[$db >> 2] | 0;
    $69 = ($56 - $67 | 0) / 24 | 0;
    $70 = $69 + 1 | 0;
    if (($70 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $74 = ($58 - $67 | 0) / 24 | 0;
    if ($74 >>> 0 < 1073741823) {
     $76 = $74 << 1;
     $$0$i$i$i14 = $76 >>> 0 < $70 >>> 0 ? $70 : $76;
    } else $$0$i$i$i14 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i55, $$0$i$i$i14, $69, $db + 12 | 0);
    $79 = $__v$i$i55 + 8 | 0;
    $80 = HEAP32[$79 >> 2] | 0;
    if ($80) {
     HEAP32[$80 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
     HEAP32[$80 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$80 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 0 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$1 + 8 >> 2] = 0;
     $82 = $80 + 12 | 0;
     HEAP32[$82 + 0 >> 2] = HEAP32[$54 + 0 >> 2];
     HEAP32[$82 + 4 >> 2] = HEAP32[$54 + 4 >> 2];
     HEAP32[$82 + 8 >> 2] = HEAP32[$54 + 8 >> 2];
     HEAP32[$54 + 0 >> 2] = 0;
     HEAP32[$54 + 4 >> 2] = 0;
     HEAP32[$54 + 8 >> 2] = 0;
    }
    HEAP32[$79 >> 2] = $80 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i55);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i55);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
   $$0 = $first + 2 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   $isdigittmp = $14 + -48 | 0;
   $isdigit = $isdigittmp >>> 0 < 10;
   if (!($isdigit | ($14 + -65 | 0) >>> 0 < 26)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $296 = $first + 2 | 0;
   if (($296 | 0) == ($last | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $sub$175 = $isdigit ? $isdigittmp : $14 + -55 | 0;
   $t$076 = $296;
   while (1) {
    $299 = HEAP8[$t$076 >> 0] | 0;
    $300 = $299 << 24 >> 24;
    $isdigittmp7 = $300 + -48 | 0;
    $isdigit8 = $isdigittmp7 >>> 0 < 10;
    if (!($isdigit8 | ($300 + -65 | 0) >>> 0 < 26)) break;
    $305 = $t$076 + 1 | 0;
    if (($305 | 0) == ($last | 0)) {
     $$0 = $first;
     label = 136;
     break;
    } else {
     $sub$175 = ($isdigit8 ? $isdigittmp7 : $300 + -55 | 0) + ($sub$175 * 36 | 0) | 0;
     $t$076 = $305;
    }
   }
   if ((label | 0) == 136) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   if ($299 << 24 >> 24 != 95) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $308 = $sub$175 + 1 | 0;
   $312 = HEAP32[$db + 16 >> 2] | 0;
   if ($308 >>> 0 >= (HEAP32[$db + 20 >> 2] | 0) - $312 >> 4 >>> 0) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $319 = HEAP32[$312 + ($308 << 4) >> 2] | 0;
   $321 = HEAP32[$312 + ($308 << 4) + 4 >> 2] | 0;
   L85 : do if (($319 | 0) != ($321 | 0)) {
    $323 = $db + 4 | 0;
    $324 = $db + 8 | 0;
    $325 = $db + 12 | 0;
    $326 = $__v$i$i55 + 8 | 0;
    $332 = $319;
    while (1) {
     $327 = HEAP32[$323 >> 2] | 0;
     if (($327 | 0) == (HEAP32[$324 >> 2] | 0)) {
      $354 = ($327 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
      $355 = $354 + 1 | 0;
      if (($355 | 0) < 0) break;
      if ($354 >>> 0 < 1073741823) {
       $358 = $354 << 1;
       $$0$i$i$i59 = $358 >>> 0 < $355 >>> 0 ? $355 : $358;
      } else $$0$i$i$i59 = 2147483647;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i55, $$0$i$i$i59, $354, $325);
      $361 = HEAP32[$326 >> 2] | 0;
      do if ($361) {
       if (!(HEAP8[$332 >> 0] & 1)) {
        HEAP32[$361 + 0 >> 2] = HEAP32[$332 + 0 >> 2];
        HEAP32[$361 + 4 >> 2] = HEAP32[$332 + 4 >> 2];
        HEAP32[$361 + 8 >> 2] = HEAP32[$332 + 8 >> 2];
       } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($361, HEAP32[$332 + 8 >> 2] | 0, HEAP32[$332 + 4 >> 2] | 0);
       $370 = $361 + 12 | 0;
       $371 = $332 + 12 | 0;
       if (!(HEAP8[$371 >> 0] & 1)) {
        HEAP32[$370 + 0 >> 2] = HEAP32[$371 + 0 >> 2];
        HEAP32[$370 + 4 >> 2] = HEAP32[$371 + 4 >> 2];
        HEAP32[$370 + 8 >> 2] = HEAP32[$371 + 8 >> 2];
        break;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($370, HEAP32[$332 + 20 >> 2] | 0, HEAP32[$332 + 16 >> 2] | 0);
        break;
       }
      } while (0);
      HEAP32[$326 >> 2] = $361 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i55);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i55);
     } else {
      if (!$327) $349 = 0; else {
       if (!(HEAP8[$332 >> 0] & 1)) {
        HEAP32[$327 + 0 >> 2] = HEAP32[$332 + 0 >> 2];
        HEAP32[$327 + 4 >> 2] = HEAP32[$332 + 4 >> 2];
        HEAP32[$327 + 8 >> 2] = HEAP32[$332 + 8 >> 2];
       } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($327, HEAP32[$332 + 8 >> 2] | 0, HEAP32[$332 + 4 >> 2] | 0);
       $339 = $327 + 12 | 0;
       $340 = $332 + 12 | 0;
       if (!(HEAP8[$340 >> 0] & 1)) {
        HEAP32[$339 + 0 >> 2] = HEAP32[$340 + 0 >> 2];
        HEAP32[$339 + 4 >> 2] = HEAP32[$340 + 4 >> 2];
        HEAP32[$339 + 8 >> 2] = HEAP32[$340 + 8 >> 2];
       } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($339, HEAP32[$332 + 20 >> 2] | 0, HEAP32[$332 + 16 >> 2] | 0);
       $349 = HEAP32[$323 >> 2] | 0;
      }
      HEAP32[$323 >> 2] = $349 + 24;
     }
     $332 = $332 + 24 | 0;
     if (($332 | 0) == ($321 | 0)) break L85;
    }
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   } while (0);
   $$0 = $t$076 + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$25$ph = 0, $$7 = 0, $$in = 0, $$in101 = 0, $$pre$i$i$i$i = 0, $$pre96 = 0, $$sroa$5 = 0, $0 = 0, $1 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $121 = 0, $125 = 0, $128 = 0, $133 = 0, $134 = 0, $137 = 0, $138 = 0, $140 = 0, $141 = 0, $150 = 0, $153 = 0, $157 = 0, $17 = 0, $176 = 0, $178 = 0, $182 = 0, $187 = 0, $190 = 0, $191 = 0, $192 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $214 = 0, $215 = 0, $217 = 0, $218 = 0, $220 = 0, $221 = 0, $223 = 0, $229 = 0, $240 = 0, $242 = 0, $25 = 0, $254 = 0, $266 = 0, $269 = 0, $271 = 0, $278 = 0, $28 = 0, $280 = 0, $281 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $297 = 0, $3 = 0, $307 = 0, $308 = 0, $315 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $327 = 0, $329 = 0, $33 = 0, $331 = 0, $338 = 0, $341 = 0, $343 = 0, $349 = 0, $352 = 0, $354 = 0, $359 = 0, $36 = 0, $360 = 0, $362 = 0, $365 = 0, $366 = 0, $367 = 0, $37 = 0, $371 = 0, $373 = 0, $378 = 0, $384 = 0, $386 = 0, $392 = 0, $393 = 0, $395 = 0, $399 = 0, $400 = 0, $41 = 0, $420 = 0, $422 = 0, $430 = 0, $431 = 0, $439 = 0, $44 = 0, $45 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $67 = 0, $7 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $8 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $95 = 0, $97 = 0, $first_arg$0$off0$ph = 0, $first_arg$3$off0$ph = 0, $k$081 = 0, $k2$082 = 0, $left$i = 0, $ret1 = 0, $ret2 = 0, $scevgep = 0, $t$0 = 0, $t$1 = 0, $t$1$ph = 0, $t$2 = 0, $tmp = 0, label = 0, sp = 0, $t$1$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $left$i = sp + 12 | 0;
 $$sroa$5 = sp + 96 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 84 | 0;
 $ret2 = sp;
 $ret1 = sp + 36 | 0;
 $tmp = sp + 24 | 0;
 $3 = sp + 48 | 0;
 if (($first | 0) == ($last | 0)) {
  $$7 = $first;
  STACKTOP = sp;
  return $$7 | 0;
 }
 $5 = $db + 56 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $6 + 1 | 0;
 HEAP32[$5 >> 2] = $7;
 $8 = $db + 61 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 if ($7 >>> 0 > 1) HEAP8[$8 >> 0] = 1;
 $12 = HEAP8[$first >> 0] | 0;
 L7 : do if (($12 | 0) == 84 | ($12 | 0) == 71) if (($last - $first | 0) > 2) {
  if (($12 | 0) == 71) {
   $190 = HEAP8[$first + 1 >> 0] | 0;
   if (($190 | 0) == 86) {
    $191 = $first + 2 | 0;
    $192 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($191, $last, $db) | 0;
    if (($192 | 0) == ($191 | 0)) {
     $$25$ph = $first;
     break;
    }
    $196 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($196 | 0)) {
     $$25$ph = $first;
     break;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($196 + -24 | 0, 0, 61528, 19) | 0;
    $$25$ph = $192;
    break;
   } else if (($190 | 0) == 82) {
    $199 = $first + 2 | 0;
    $200 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($199, $last, $db) | 0;
    if (($200 | 0) == ($199 | 0)) {
     $$25$ph = $first;
     break;
    }
    $204 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($204 | 0)) {
     $$25$ph = $first;
     break;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($204 + -24 | 0, 0, 61552, 24) | 0;
    $$25$ph = $200;
    break;
   } else {
    $$25$ph = $first;
    break;
   }
  } else if (($12 | 0) != 84) {
   $$25$ph = $first;
   break;
  }
  $17 = $first + 1 | 0;
  switch (HEAP8[$17 >> 0] | 0) {
  case 99:
   {
    $52 = $first + 2 | 0;
    $53 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($52, $last) | 0;
    if (($53 | 0) == ($52 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    $55 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($53, $last) | 0;
    if (($55 | 0) == ($53 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    $57 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($55, $last, $db) | 0;
    if (($57 | 0) == ($55 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    $61 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($61 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($61 + -24 | 0, 0, 61408, 26) | 0;
    $$25$ph = $57;
    break L7;
    break;
   }
  case 84:
   {
    $28 = $first + 2 | 0;
    $29 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($28, $last, $db) | 0;
    if (($29 | 0) == ($28 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    $33 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($33 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($33 + -24 | 0, 0, 61352, 8) | 0;
    $$25$ph = $29;
    break L7;
    break;
   }
  case 86:
   {
    $20 = $first + 2 | 0;
    $21 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($20, $last, $db) | 0;
    if (($21 | 0) == ($20 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    $25 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($25 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($25 + -24 | 0, 0, 61336, 11) | 0;
    $$25$ph = $21;
    break L7;
    break;
   }
  case 83:
   {
    $44 = $first + 2 | 0;
    $45 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($44, $last, $db) | 0;
    if (($45 | 0) == ($44 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    $49 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($49 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($49 + -24 | 0, 0, 61384, 18) | 0;
    $$25$ph = $45;
    break L7;
    break;
   }
  case 73:
   {
    $36 = $first + 2 | 0;
    $37 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($36, $last, $db) | 0;
    if (($37 | 0) == ($36 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    $41 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($41 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($41 + -24 | 0, 0, 61368, 13) | 0;
    $$25$ph = $37;
    break L7;
    break;
   }
  case 67:
   {
    $64 = $first + 2 | 0;
    $65 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($64, $last, $db) | 0;
    if (($65 | 0) == ($64 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    $67 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($65, $last) | 0;
    if (($67 | 0) == ($65 | 0) | ($67 | 0) == ($last | 0)) {
     $$25$ph = $first;
     break L7;
    }
    if ((HEAP8[$67 >> 0] | 0) != 95) {
     $$25$ph = $first;
     break L7;
    }
    $72 = $67 + 1 | 0;
    $73 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($72, $last, $db) | 0;
    if (($73 | 0) == ($72 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    $75 = $db + 4 | 0;
    $76 = HEAP32[$75 >> 2] | 0;
    if ((($76 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$25$ph = $first;
     break L7;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($left$i, $76 + -24 | 0);
    $84 = HEAP32[$75 >> 2] | 0;
    $85 = $84 + -24 | 0;
    $87 = $84;
    do {
     $86 = $87 + -24 | 0;
     HEAP32[$75 >> 2] = $86;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($86);
     $87 = HEAP32[$75 >> 2] | 0;
    } while (($87 | 0) != ($85 | 0));
    $90 = $84 + -48 | 0;
    $91 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($left$i, 0, 61440, 24) | 0;
    HEAP32[$1 + 0 >> 2] = HEAP32[$91 + 0 >> 2];
    HEAP32[$1 + 4 >> 2] = HEAP32[$91 + 4 >> 2];
    HEAP32[$1 + 8 >> 2] = HEAP32[$91 + 8 >> 2];
    HEAP32[$91 + 0 >> 2] = 0;
    HEAP32[$91 + 4 >> 2] = 0;
    HEAP32[$91 + 8 >> 2] = 0;
    $92 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1, 61472, 4) | 0;
    HEAP32[$0 + 0 >> 2] = HEAP32[$92 + 0 >> 2];
    HEAP32[$0 + 4 >> 2] = HEAP32[$92 + 4 >> 2];
    HEAP32[$0 + 8 >> 2] = HEAP32[$92 + 8 >> 2];
    HEAP32[$92 + 0 >> 2] = 0;
    HEAP32[$92 + 4 >> 2] = 0;
    HEAP32[$92 + 8 >> 2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2, (HEAP32[$75 >> 2] | 0) + -24 | 0);
    $95 = HEAP8[$2 >> 0] | 0;
    $97 = ($95 & 1) == 0;
    if ($97) {
     $105 = $2 + 1 | 0;
     $106 = ($95 & 255) >>> 1;
    } else {
     $105 = HEAP32[$2 + 8 >> 2] | 0;
     $106 = HEAP32[$2 + 4 >> 2] | 0;
    }
    $107 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, $105, $106) | 0;
    $108 = HEAP8[$107 >> 0] | 0;
    $109 = $107 + 1 | 0;
    HEAP8[$$sroa$5 + 0 >> 0] = HEAP8[$109 + 0 >> 0] | 0;
    HEAP8[$$sroa$5 + 1 >> 0] = HEAP8[$109 + 1 >> 0] | 0;
    HEAP8[$$sroa$5 + 2 >> 0] = HEAP8[$109 + 2 >> 0] | 0;
    HEAP8[$$sroa$5 + 3 >> 0] = HEAP8[$109 + 3 >> 0] | 0;
    HEAP8[$$sroa$5 + 4 >> 0] = HEAP8[$109 + 4 >> 0] | 0;
    HEAP8[$$sroa$5 + 5 >> 0] = HEAP8[$109 + 5 >> 0] | 0;
    HEAP8[$$sroa$5 + 6 >> 0] = HEAP8[$109 + 6 >> 0] | 0;
    $111 = HEAP32[$107 + 8 >> 2] | 0;
    HEAP32[$107 + 0 >> 2] = 0;
    HEAP32[$107 + 4 >> 2] = 0;
    HEAP32[$107 + 8 >> 2] = 0;
    do if (!(HEAP8[$90 >> 0] & 1)) {
     HEAP8[$90 + 1 >> 0] = 0;
     HEAP8[$90 >> 0] = 0;
    } else {
     $116 = $84 + -40 | 0;
     HEAP8[HEAP32[$116 >> 2] >> 0] = 0;
     $118 = $84 + -44 | 0;
     HEAP32[$118 >> 2] = 0;
     $$pre$i$i$i$i = HEAP8[$90 >> 0] | 0;
     if (!($$pre$i$i$i$i & 1)) {
      $125 = $$pre$i$i$i$i;
      $134 = 10;
     } else {
      $121 = HEAP32[$90 >> 2] | 0;
      $125 = $121 & 255;
      $134 = ($121 & -2) + -1 | 0;
     }
     if (!($125 & 1)) {
      $128 = ($125 & 255) >>> 1;
      if (($125 & 255) < 22) {
       $133 = 10;
       $153 = $128;
       $439 = 1;
      } else {
       $133 = ($128 + 16 & 240) + -1 | 0;
       $153 = $128;
       $439 = 1;
      }
     } else {
      $133 = 10;
      $153 = 0;
      $439 = 0;
     }
     if (($133 | 0) != ($134 | 0)) {
      if (($133 | 0) == 10) {
       $140 = $90 + 1 | 0;
       $141 = HEAP32[$116 >> 2] | 0;
       if ($439) {
        _memcpy($140 | 0, $141 | 0, (($125 & 255) >>> 1) + 1 | 0) | 0;
        _free($141);
       } else {
        HEAP8[$140 >> 0] = HEAP8[$141 >> 0] | 0;
        _free($141);
       }
       HEAP8[$90 >> 0] = $153 << 1;
       break;
      }
      $137 = $133 + 1 | 0;
      $138 = _malloc($137) | 0;
      if (!($133 >>> 0 <= $134 >>> 0 & ($138 | 0) == 0)) {
       if ($439) _memcpy($138 | 0, $90 + 1 | 0, (($125 & 255) >>> 1) + 1 | 0) | 0; else {
        $150 = HEAP32[$116 >> 2] | 0;
        HEAP8[$138 >> 0] = HEAP8[$150 >> 0] | 0;
        _free($150);
       }
       HEAP32[$90 >> 2] = $137 | 1;
       HEAP32[$118 >> 2] = $153;
       HEAP32[$116 >> 2] = $138;
      }
     }
    } while (0);
    HEAP8[$84 + -48 >> 0] = $108;
    $157 = $84 + -47 | 0;
    HEAP8[$157 + 0 >> 0] = HEAP8[$$sroa$5 + 0 >> 0] | 0;
    HEAP8[$157 + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0;
    HEAP8[$157 + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0;
    HEAP8[$157 + 3 >> 0] = HEAP8[$$sroa$5 + 3 >> 0] | 0;
    HEAP8[$157 + 4 >> 0] = HEAP8[$$sroa$5 + 4 >> 0] | 0;
    HEAP8[$157 + 5 >> 0] = HEAP8[$$sroa$5 + 5 >> 0] | 0;
    HEAP8[$157 + 6 >> 0] = HEAP8[$$sroa$5 + 6 >> 0] | 0;
    HEAP32[$84 + -40 >> 2] = $111;
    HEAP8[$$sroa$5 + 0 >> 0] = 0;
    HEAP8[$$sroa$5 + 1 >> 0] = 0;
    HEAP8[$$sroa$5 + 2 >> 0] = 0;
    HEAP8[$$sroa$5 + 3 >> 0] = 0;
    HEAP8[$$sroa$5 + 4 >> 0] = 0;
    HEAP8[$$sroa$5 + 5 >> 0] = 0;
    HEAP8[$$sroa$5 + 6 >> 0] = 0;
    if (!$97) _free(HEAP32[$2 + 8 >> 2] | 0);
    if (HEAP8[$0 >> 0] & 1) _free(HEAP32[$0 + 8 >> 2] | 0);
    if (HEAP8[$1 >> 0] & 1) _free(HEAP32[$1 + 8 >> 2] | 0);
    if (!(HEAP8[$left$i >> 0] & 1)) {
     $$25$ph = $73;
     break L7;
    }
    _free(HEAP32[$left$i + 8 >> 2] | 0);
    $$25$ph = $73;
    break L7;
    break;
   }
  default:
   {
    $176 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($17, $last) | 0;
    if (($176 | 0) == ($17 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    $178 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($176, $last, $db) | 0;
    if (($178 | 0) == ($176 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    $182 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($182 | 0)) {
     $$25$ph = $first;
     break L7;
    }
    $187 = $182 + -24 | 0;
    if ((HEAP8[$first + 2 >> 0] | 0) == 118) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($187, 0, 61480, 17) | 0;
     $$25$ph = $178;
     break L7;
    } else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($187, 0, 61504, 21) | 0;
     $$25$ph = $178;
     break L7;
    }
   }
  }
 } else $$25$ph = $first; else {
  $207 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  $209 = HEAP32[$db + 48 >> 2] | 0;
  $211 = HEAP32[$db + 52 >> 2] | 0;
  if (($207 | 0) == ($first | 0)) $$25$ph = $first; else if (($207 | 0) == ($last | 0)) $$25$ph = $last; else {
   $214 = HEAP8[$207 >> 0] | 0;
   if ($214 << 24 >> 24 == 46 | $214 << 24 >> 24 == 69) $$25$ph = $207; else {
    $215 = HEAP8[$8 >> 0] | 0;
    HEAP8[$8 >> 0] = 0;
    HEAP32[$ret2 + 0 >> 2] = 0;
    HEAP32[$ret2 + 4 >> 2] = 0;
    HEAP32[$ret2 + 8 >> 2] = 0;
    $217 = $db + 4 | 0;
    $218 = HEAP32[$217 >> 2] | 0;
    L96 : do if ((HEAP32[$db >> 2] | 0) != ($218 | 0)) {
     $220 = $218 + -24 | 0;
     $221 = HEAP8[$220 >> 0] | 0;
     $223 = ($221 & 1) == 0;
     if ($223) $229 = ($221 & 255) >>> 1; else $229 = HEAP32[$218 + -20 >> 2] | 0;
     if ($229) {
      if (!(HEAP8[$db + 60 >> 0] | 0)) {
       if ($223) {
        $240 = ($221 & 255) >>> 1;
        $242 = $220 + 1 | 0;
       } else {
        $240 = HEAP32[$218 + -20 >> 2] | 0;
        $242 = HEAP32[$218 + -16 >> 2] | 0;
       }
       if ((HEAP8[$242 + ($240 + -1) >> 0] | 0) == 62) {
        if ($223) {
         $$in = ($221 & 255) >>> 1;
         $254 = $220 + 1 | 0;
        } else {
         $$in = HEAP32[$218 + -20 >> 2] | 0;
         $254 = HEAP32[$218 + -16 >> 2] | 0;
        }
        if ((HEAP8[$254 + ($$in + -2) >> 0] | 0) == 45) {
         $315 = $218;
         $t$0 = $207;
        } else {
         if ($223) {
          $$in101 = ($221 & 255) >>> 1;
          $266 = $220 + 1 | 0;
         } else {
          $$in101 = HEAP32[$218 + -20 >> 2] | 0;
          $266 = HEAP32[$218 + -16 >> 2] | 0;
         }
         if ((HEAP8[$266 + ($$in101 + -2) >> 0] | 0) == 62) {
          $315 = $218;
          $t$0 = $207;
         } else {
          $269 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($207, $last, $db) | 0;
          if (($269 | 0) == ($207 | 0)) break;
          $271 = HEAP32[$217 >> 2] | 0;
          if ((($271 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) break;
          $278 = $271 + -24 | 0;
          HEAP32[$ret1 + 0 >> 2] = HEAP32[$278 + 0 >> 2];
          HEAP32[$ret1 + 4 >> 2] = HEAP32[$278 + 4 >> 2];
          HEAP32[$ret1 + 8 >> 2] = HEAP32[$278 + 8 >> 2];
          HEAP32[$278 + 0 >> 2] = 0;
          HEAP32[$278 + 4 >> 2] = 0;
          HEAP32[$278 + 8 >> 2] = 0;
          $280 = (HEAP32[$217 >> 2] | 0) + -12 | 0;
          HEAP32[$ret2 + 0 >> 2] = HEAP32[$280 + 0 >> 2];
          HEAP32[$ret2 + 4 >> 2] = HEAP32[$280 + 4 >> 2];
          HEAP32[$ret2 + 8 >> 2] = HEAP32[$280 + 8 >> 2];
          HEAP32[$280 + 0 >> 2] = 0;
          HEAP32[$280 + 4 >> 2] = 0;
          HEAP32[$280 + 8 >> 2] = 0;
          $281 = HEAP8[$ret2 >> 0] | 0;
          if (!($281 & 1)) $289 = ($281 & 255) >>> 1; else $289 = HEAP32[$ret2 + 4 >> 2] | 0;
          if (!$289) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($ret1, 32);
          $290 = HEAP32[$217 >> 2] | 0;
          $291 = $290 + -24 | 0;
          $293 = $290;
          do {
           $292 = $293 + -24 | 0;
           HEAP32[$217 >> 2] = $292;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($292);
           $293 = HEAP32[$217 >> 2] | 0;
          } while (($293 | 0) != ($291 | 0));
          $297 = HEAP8[$ret1 >> 0] | 0;
          if (!($297 & 1)) {
           $307 = $ret1 + 1 | 0;
           $308 = ($297 & 255) >>> 1;
          } else {
           $307 = HEAP32[$ret1 + 8 >> 2] | 0;
           $308 = HEAP32[$ret1 + 4 >> 2] | 0;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($290 + -48 | 0, 0, $307, $308) | 0;
          if (HEAP8[$ret1 >> 0] & 1) _free(HEAP32[$ret1 + 8 >> 2] | 0);
          $315 = HEAP32[$217 >> 2] | 0;
          $t$0 = $269;
         }
        }
       } else {
        $315 = $218;
        $t$0 = $207;
       }
      } else {
       $315 = $218;
       $t$0 = $207;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($315 + -24 | 0, 40);
      if (($t$0 | 0) == ($last | 0)) label = 112; else if ((HEAP8[$t$0 >> 0] | 0) == 118) {
       $399 = HEAP32[$db >> 2] | 0;
       $400 = HEAP32[$217 >> 2] | 0;
       $t$2 = $t$0 + 1 | 0;
      } else label = 112;
      L143 : do if ((label | 0) == 112) {
       $319 = $tmp + 1 | 0;
       $320 = $tmp + 8 | 0;
       $321 = $tmp + 4 | 0;
       $322 = $3 + 1 | 0;
       $323 = $3 + 8 | 0;
       $324 = $3 + 4 | 0;
       $first_arg$0$off0$ph = 1;
       $t$1$ph = $t$0;
       while (1) {
        $327 = HEAP32[$217 >> 2] | 0;
        $329 = HEAP32[$db >> 2] | 0;
        $t$1 = $t$1$ph;
        do {
         $331 = ($327 - $329 | 0) / 24 | 0;
         $t$1$looptemp = $t$1;
         $t$1 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$1, $last, $db) | 0;
         $327 = HEAP32[$217 >> 2] | 0;
         $329 = HEAP32[$db >> 2] | 0;
         $338 = ($327 - $329 | 0) / 24 | 0;
         if (($t$1 | 0) == ($t$1$looptemp | 0)) {
          $399 = $329;
          $400 = $327;
          $t$2 = $t$1$looptemp;
          break L143;
         }
        } while ($331 >>> 0 >= $338 >>> 0);
        HEAP32[$tmp + 0 >> 2] = 0;
        HEAP32[$tmp + 4 >> 2] = 0;
        HEAP32[$tmp + 8 >> 2] = 0;
        $343 = 0;
        $k$081 = $331;
        while (1) {
         if (!($343 & 1)) $349 = ($343 & 255) >>> 1; else $349 = HEAP32[$321 >> 2] | 0;
         if ($349) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($tmp, 59432, 2) | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, (HEAP32[$db >> 2] | 0) + ($k$081 * 24 | 0) | 0);
         $352 = HEAP8[$3 >> 0] | 0;
         $354 = ($352 & 1) == 0;
         if ($354) {
          $359 = $322;
          $360 = ($352 & 255) >>> 1;
         } else {
          $359 = HEAP32[$323 >> 2] | 0;
          $360 = HEAP32[$324 >> 2] | 0;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($tmp, $359, $360) | 0;
         if (!$354) _free(HEAP32[$323 >> 2] | 0);
         $362 = $k$081 + 1 | 0;
         if ($362 >>> 0 >= $338 >>> 0) break;
         $343 = HEAP8[$tmp >> 0] | 0;
         $k$081 = $362;
        }
        $$pre96 = HEAP32[$217 >> 2] | 0;
        $341 = $331 - $338 | 0;
        $365 = $$pre96;
        $k2$082 = $331;
        do {
         $367 = $365;
         $365 = $365 + -24 | 0;
         do {
          $366 = $367 + -24 | 0;
          HEAP32[$217 >> 2] = $366;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($366);
          $367 = HEAP32[$217 >> 2] | 0;
         } while (($367 | 0) != ($365 | 0));
         $k2$082 = $k2$082 + 1 | 0;
        } while (($k2$082 | 0) != ($338 | 0));
        $scevgep = $$pre96 + ($341 * 24 | 0) | 0;
        $371 = HEAP8[$tmp >> 0] | 0;
        $373 = ($371 & 1) == 0;
        if ($373) $378 = ($371 & 255) >>> 1; else $378 = HEAP32[$321 >> 2] | 0;
        if (!$378) {
         $395 = $371;
         $first_arg$3$off0$ph = $first_arg$0$off0$ph;
        } else {
         if ((HEAP32[$db >> 2] | 0) == ($scevgep | 0)) break;
         if ($first_arg$0$off0$ph) {
          $384 = $scevgep;
          $386 = $371;
         } else {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($$pre96 + (($341 + -1 | 0) * 24 | 0) | 0, 59432, 2) | 0;
          $384 = HEAP32[$217 >> 2] | 0;
          $386 = HEAP8[$tmp >> 0] | 0;
         }
         if (!($386 & 1)) {
          $392 = $319;
          $393 = ($386 & 255) >>> 1;
         } else {
          $392 = HEAP32[$320 >> 2] | 0;
          $393 = HEAP32[$321 >> 2] | 0;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($384 + -24 | 0, $392, $393) | 0;
         $395 = HEAP8[$tmp >> 0] | 0;
         $first_arg$3$off0$ph = 0;
        }
        if (!($395 & 1)) {
         $first_arg$0$off0$ph = $first_arg$3$off0$ph;
         $t$1$ph = $t$1;
         continue;
        }
        _free(HEAP32[$320 >> 2] | 0);
        $first_arg$0$off0$ph = $first_arg$3$off0$ph;
        $t$1$ph = $t$1;
       }
       if ($373) break L96;
       _free(HEAP32[$320 >> 2] | 0);
       break L96;
      } while (0);
      if (($399 | 0) != ($400 | 0)) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($400 + -24 | 0, 41);
       if ($209 & 1) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$217 >> 2] | 0) + -24 | 0, 58848, 6) | 0;
       if ($209 & 2) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$217 >> 2] | 0) + -24 | 0, 58856, 9) | 0;
       if ($209 & 4) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$217 >> 2] | 0) + -24 | 0, 58872, 9) | 0;
       if (($211 | 0) == 1) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$217 >> 2] | 0) + -24 | 0, 61040, 2) | 0; else if (($211 | 0) == 2) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$217 >> 2] | 0) + -24 | 0, 61048, 3) | 0;
       $420 = HEAP8[$ret2 >> 0] | 0;
       $422 = ($420 & 1) == 0;
       if ($422) {
        $430 = $ret2 + 1 | 0;
        $431 = ($420 & 255) >>> 1;
       } else {
        $430 = HEAP32[$ret2 + 8 >> 2] | 0;
        $431 = HEAP32[$ret2 + 4 >> 2] | 0;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$217 >> 2] | 0) + -24 | 0, $430, $431) | 0;
       if (!$422) _free(HEAP32[$ret2 + 8 >> 2] | 0);
       HEAP8[$8 >> 0] = $215;
       $$25$ph = $t$2;
       break L7;
      }
     }
    } while (0);
    if (HEAP8[$ret2 >> 0] & 1) _free(HEAP32[$ret2 + 8 >> 2] | 0);
    HEAP8[$8 >> 0] = $9;
    HEAP32[$5 >> 2] = $6;
    $$7 = $first;
    STACKTOP = sp;
    return $$7 | 0;
   }
  }
 } while (0);
 HEAP8[$8 >> 0] = $9;
 HEAP32[$5 >> 2] = $6;
 $$7 = $$25$ph;
 STACKTOP = sp;
 return $$7 | 0;
}

function __Z8tokenizeNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $script) {
 $agg$result = $agg$result | 0;
 $script = $script | 0;
 var $$01$i$i = 0, $$lcssa$i = 0, $$lcssa$i$i = 0, $$lcssa$i13$i = 0, $$lcssa$i18 = 0, $$lcssa$i28$i = 0, $$lcssa$i35 = 0, $$lcssa$i40$i = 0, $$lcssa$i50 = 0, $$lcssa$i65 = 0, $$lcssa$i7 = 0, $$lcssa$i79 = 0, $$lcssa$i87 = 0, $$pre165 = 0, $$pre166 = 0, $$size$i = 0, $$size$i24$i = 0, $$size$i31 = 0, $$size$i46 = 0, $$size$i61 = 0, $$size$i9$i = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $124 = 0, $126 = 0, $14 = 0, $142 = 0, $144 = 0, $151 = 0, $153 = 0, $155 = 0, $158 = 0, $160 = 0, $165 = 0, $17 = 0, $170 = 0, $172 = 0, $179 = 0, $181 = 0, $183 = 0, $186 = 0, $188 = 0, $19 = 0, $194 = 0, $20 = 0, $203 = 0, $204 = 0, $206 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $215 = 0, $217 = 0, $22 = 0, $220 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $231 = 0, $233 = 0, $235 = 0, $236 = 0, $241 = 0, $243 = 0, $245 = 0, $252 = 0, $254 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $266 = 0, $267 = 0, $27 = 0, $272 = 0, $274 = 0, $28 = 0, $281 = 0, $283 = 0, $285 = 0, $288 = 0, $29 = 0, $290 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $71 = 0, $73 = 0, $75 = 0, $78 = 0, $80 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $__p$0$i = 0, $__p$0$i$i = 0, $__p$0$i20$i = 0, $__p$0$i27 = 0, $__p$0$i42 = 0, $__p$0$i57 = 0, $i$013 = 0, $lexer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $lexer = sp + 24 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 HEAP32[$lexer + 28 >> 2] = 60816;
 HEAP8[$lexer + 32 >> 0] = 0;
 if (!(HEAP8[$script >> 0] & 1)) $10 = $script + 1 | 0; else $10 = HEAP32[$script + 8 >> 2] | 0;
 $11 = __ZN5Lexer8tokenizeEPc($lexer, $10) | 0;
 $12 = _malloc(12) | 0;
 L5 : do if (!$12) {
  while (1) {
   $14 = HEAP32[15470] | 0;
   HEAP32[15470] = $14 + 0;
   if (!$14) break;
   FUNCTION_TABLE_v[$14 & 3]();
   $17 = _malloc(12) | 0;
   if ($17) {
    $$lcssa$i = $17;
    break L5;
   }
  }
  $19 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$19 >> 2] = 61776;
  ___cxa_throw($19 | 0, 61824, 94);
 } else $$lcssa$i = $12; while (0);
 HEAP32[$$lcssa$i >> 2] = 0;
 $20 = $$lcssa$i + 4 | 0;
 HEAP32[$20 >> 2] = 0;
 $21 = $$lcssa$i + 8 | 0;
 HEAP32[$21 >> 2] = 0;
 $22 = $11 + 4 | 0;
 L11 : do if ((HEAP32[$22 >> 2] | 0) == (HEAP32[$11 >> 2] | 0)) {
  $206 = 0;
  $208 = 0;
 } else {
  $26 = $0 + 1 | 0;
  $27 = $1 + 1 | 0;
  $28 = $1 + 8 | 0;
  $29 = $1 + 4 | 0;
  $30 = $0 + 8 | 0;
  $31 = $0 + 4 | 0;
  $i$013 = 0;
  L13 : while (1) {
   $32 = _malloc(24) | 0;
   if (!$32) while (1) {
    $34 = HEAP32[15470] | 0;
    HEAP32[15470] = $34 + 0;
    if (!$34) {
     label = 13;
     break L13;
    }
    FUNCTION_TABLE_v[$34 & 3]();
    $37 = _malloc(24) | 0;
    if ($37) {
     $$lcssa$i7 = $37;
     break;
    }
   } else $$lcssa$i7 = $32;
   HEAP32[$$lcssa$i7 + 0 >> 2] = 0;
   HEAP32[$$lcssa$i7 + 4 >> 2] = 0;
   HEAP32[$$lcssa$i7 + 8 >> 2] = 0;
   HEAP32[$$lcssa$i7 + 12 >> 2] = 0;
   HEAP32[$$lcssa$i7 + 16 >> 2] = 0;
   HEAP32[$$lcssa$i7 + 20 >> 2] = 0;
   $40 = $$lcssa$i7 + 12 | 0;
   $42 = HEAP32[$11 >> 2] | 0;
   if ((HEAP32[$22 >> 2] | 0) - $42 >> 2 >>> 0 <= $i$013 >>> 0) {
    label = 15;
    break;
   }
   $64 = HEAP32[(HEAP32[$42 + ($i$013 << 2) >> 2] | 0) + 16 >> 2] | 0;
   $65 = _strlen($64 | 0) | 0;
   if ($65 >>> 0 > 4294967279) {
    label = 21;
    break;
   }
   if ($65 >>> 0 < 11) {
    HEAP8[$0 >> 0] = $65 << 1;
    $__p$0$i = $26;
   } else {
    $71 = $65 + 16 & -16;
    $$size$i = ($71 | 0) == 0 ? 1 : $71;
    $73 = _malloc($$size$i) | 0;
    if (!$73) while (1) {
     $75 = HEAP32[15470] | 0;
     HEAP32[15470] = $75 + 0;
     if (!$75) {
      label = 27;
      break L13;
     }
     FUNCTION_TABLE_v[$75 & 3]();
     $78 = _malloc($$size$i) | 0;
     if ($78) {
      $$lcssa$i18 = $78;
      break;
     }
    } else $$lcssa$i18 = $73;
    HEAP32[$30 >> 2] = $$lcssa$i18;
    HEAP32[$0 >> 2] = $71 | 1;
    HEAP32[$31 >> 2] = $65;
    $__p$0$i = $$lcssa$i18;
   }
   _memcpy($__p$0$i | 0, $64 | 0, $65 | 0) | 0;
   HEAP8[$__p$0$i + $65 >> 0] = 0;
   if (!(HEAP8[$40 >> 0] & 1)) {
    HEAP8[$$lcssa$i7 + 13 >> 0] = 0;
    HEAP8[$40 >> 0] = 0;
   } else {
    HEAP8[HEAP32[$$lcssa$i7 + 20 >> 2] >> 0] = 0;
    HEAP32[$$lcssa$i7 + 16 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($40);
   HEAP32[$40 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
   HEAP32[$40 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   HEAP32[$40 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$0 + 0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   $$pre165 = HEAP32[$11 >> 2] | 0;
   if ((HEAP32[$22 >> 2] | 0) - $$pre165 >> 2 >>> 0 <= $i$013 >>> 0) {
    label = 33;
    break;
   }
   $110 = HEAP32[(HEAP32[$$pre165 + ($i$013 << 2) >> 2] | 0) + 52 >> 2] | 0;
   $111 = _strlen($110 | 0) | 0;
   if ($111 >>> 0 > 4294967279) {
    label = 39;
    break;
   }
   if ($111 >>> 0 < 11) {
    HEAP8[$1 >> 0] = $111 << 1;
    $__p$0$i27 = $27;
   } else {
    $117 = $111 + 16 & -16;
    $$size$i31 = ($117 | 0) == 0 ? 1 : $117;
    $119 = _malloc($$size$i31) | 0;
    if (!$119) while (1) {
     $121 = HEAP32[15470] | 0;
     HEAP32[15470] = $121 + 0;
     if (!$121) {
      label = 45;
      break L13;
     }
     FUNCTION_TABLE_v[$121 & 3]();
     $124 = _malloc($$size$i31) | 0;
     if ($124) {
      $$lcssa$i35 = $124;
      break;
     }
    } else $$lcssa$i35 = $119;
    HEAP32[$28 >> 2] = $$lcssa$i35;
    HEAP32[$1 >> 2] = $117 | 1;
    HEAP32[$29 >> 2] = $111;
    $__p$0$i27 = $$lcssa$i35;
   }
   _memcpy($__p$0$i27 | 0, $110 | 0, $111 | 0) | 0;
   HEAP8[$__p$0$i27 + $111 >> 0] = 0;
   if (!(HEAP8[$$lcssa$i7 >> 0] & 1)) {
    HEAP8[$$lcssa$i7 + 1 >> 0] = 0;
    HEAP8[$$lcssa$i7 >> 0] = 0;
   } else {
    HEAP8[HEAP32[$$lcssa$i7 + 8 >> 2] >> 0] = 0;
    HEAP32[$$lcssa$i7 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($$lcssa$i7);
   HEAP32[$$lcssa$i7 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$$lcssa$i7 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$$lcssa$i7 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 0 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   $$pre166 = HEAP32[$20 >> 2] | 0;
   if (($$pre166 | 0) == (HEAP32[$21 >> 2] | 0)) __ZNSt3__16vectorI18CompilerLexerTokenNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($$lcssa$i, $$lcssa$i7); else {
    if (!$$pre166) $194 = 0; else {
     if (!(HEAP8[$$lcssa$i7 >> 0] & 1)) {
      HEAP32[$$pre166 + 0 >> 2] = HEAP32[$$lcssa$i7 + 0 >> 2];
      HEAP32[$$pre166 + 4 >> 2] = HEAP32[$$lcssa$i7 + 4 >> 2];
      HEAP32[$$pre166 + 8 >> 2] = HEAP32[$$lcssa$i7 + 8 >> 2];
     } else {
      $142 = HEAP32[$$lcssa$i7 + 8 >> 2] | 0;
      $144 = HEAP32[$$lcssa$i7 + 4 >> 2] | 0;
      if ($144 >>> 0 > 4294967279) {
       label = 55;
       break;
      }
      if ($144 >>> 0 < 11) {
       HEAP8[$$pre166 >> 0] = $144 << 1;
       $__p$0$i42 = $$pre166 + 1 | 0;
      } else {
       $151 = $144 + 16 & -16;
       $$size$i46 = ($151 | 0) == 0 ? 1 : $151;
       $153 = _malloc($$size$i46) | 0;
       if (!$153) while (1) {
        $155 = HEAP32[15470] | 0;
        HEAP32[15470] = $155 + 0;
        if (!$155) {
         label = 61;
         break L13;
        }
        FUNCTION_TABLE_v[$155 & 3]();
        $158 = _malloc($$size$i46) | 0;
        if ($158) {
         $$lcssa$i50 = $158;
         break;
        }
       } else $$lcssa$i50 = $153;
       HEAP32[$$pre166 + 8 >> 2] = $$lcssa$i50;
       HEAP32[$$pre166 >> 2] = $151 | 1;
       HEAP32[$$pre166 + 4 >> 2] = $144;
       $__p$0$i42 = $$lcssa$i50;
      }
      _memcpy($__p$0$i42 | 0, $142 | 0, $144 | 0) | 0;
      HEAP8[$__p$0$i42 + $144 >> 0] = 0;
     }
     $165 = $$pre166 + 12 | 0;
     if (!(HEAP8[$40 >> 0] & 1)) {
      HEAP32[$165 + 0 >> 2] = HEAP32[$40 + 0 >> 2];
      HEAP32[$165 + 4 >> 2] = HEAP32[$40 + 4 >> 2];
      HEAP32[$165 + 8 >> 2] = HEAP32[$40 + 8 >> 2];
     } else {
      $170 = HEAP32[$$lcssa$i7 + 20 >> 2] | 0;
      $172 = HEAP32[$$lcssa$i7 + 16 >> 2] | 0;
      if ($172 >>> 0 > 4294967279) {
       label = 67;
       break;
      }
      if ($172 >>> 0 < 11) {
       HEAP8[$165 >> 0] = $172 << 1;
       $__p$0$i57 = $165 + 1 | 0;
      } else {
       $179 = $172 + 16 & -16;
       $$size$i61 = ($179 | 0) == 0 ? 1 : $179;
       $181 = _malloc($$size$i61) | 0;
       if (!$181) while (1) {
        $183 = HEAP32[15470] | 0;
        HEAP32[15470] = $183 + 0;
        if (!$183) {
         label = 73;
         break L13;
        }
        FUNCTION_TABLE_v[$183 & 3]();
        $186 = _malloc($$size$i61) | 0;
        if ($186) {
         $$lcssa$i65 = $186;
         break;
        }
       } else $$lcssa$i65 = $181;
       HEAP32[$$pre166 + 20 >> 2] = $$lcssa$i65;
       HEAP32[$165 >> 2] = $179 | 1;
       HEAP32[$$pre166 + 16 >> 2] = $172;
       $__p$0$i57 = $$lcssa$i65;
      }
      _memcpy($__p$0$i57 | 0, $170 | 0, $172 | 0) | 0;
      HEAP8[$__p$0$i57 + $172 >> 0] = 0;
     }
     $194 = HEAP32[$20 >> 2] | 0;
    }
    HEAP32[$20 >> 2] = $194 + 24;
   }
   $i$013 = $i$013 + 1 | 0;
   if ($i$013 >>> 0 >= (HEAP32[$22 >> 2] | 0) - (HEAP32[$11 >> 2] | 0) >> 2 >>> 0) {
    label = 80;
    break;
   }
  }
  switch (label | 0) {
  case 13:
   {
    $39 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$39 >> 2] = 61776;
    ___cxa_throw($39 | 0, 61824, 94);
    break;
   }
  case 15:
   {
    $48 = ___cxa_allocate_exception(8) | 0;
    HEAP32[$48 >> 2] = 61920;
    $49 = $48 + 4 | 0;
    $50 = _malloc(19) | 0;
    if ($50) {
     $$lcssa$i79 = $50;
     HEAP32[$$lcssa$i79 >> 2] = 6;
     $58 = $$lcssa$i79 + 4 | 0;
     HEAP32[$58 >> 2] = 6;
     $59 = $$lcssa$i79 + 8 | 0;
     HEAP32[$59 >> 2] = 0;
     $60 = $$lcssa$i79 + 12 | 0;
     HEAP8[$60 + 0 >> 0] = HEAP8[50728] | 0;
     HEAP8[$60 + 1 >> 0] = HEAP8[50729] | 0;
     HEAP8[$60 + 2 >> 0] = HEAP8[50730] | 0;
     HEAP8[$60 + 3 >> 0] = HEAP8[50731] | 0;
     HEAP8[$60 + 4 >> 0] = HEAP8[50732] | 0;
     HEAP8[$60 + 5 >> 0] = HEAP8[50733] | 0;
     HEAP8[$60 + 6 >> 0] = HEAP8[50734] | 0;
     HEAP32[$49 >> 2] = $60;
     HEAP32[$48 >> 2] = 62064;
     ___cxa_throw($48 | 0, 62104, 96);
    }
    while (1) {
     $52 = HEAP32[15470] | 0;
     HEAP32[15470] = $52 + 0;
     if (!$52) {
      label = 18;
      break;
     }
     FUNCTION_TABLE_v[$52 & 3]();
     $55 = _malloc(19) | 0;
     if ($55) {
      $$lcssa$i79 = $55;
      label = 19;
      break;
     }
    }
    if ((label | 0) == 18) {
     $57 = ___cxa_allocate_exception(4) | 0;
     HEAP32[$57 >> 2] = 61776;
     ___cxa_throw($57 | 0, 61824, 94);
    } else if ((label | 0) == 19) {
     HEAP32[$$lcssa$i79 >> 2] = 6;
     $58 = $$lcssa$i79 + 4 | 0;
     HEAP32[$58 >> 2] = 6;
     $59 = $$lcssa$i79 + 8 | 0;
     HEAP32[$59 >> 2] = 0;
     $60 = $$lcssa$i79 + 12 | 0;
     HEAP8[$60 + 0 >> 0] = HEAP8[50728] | 0;
     HEAP8[$60 + 1 >> 0] = HEAP8[50729] | 0;
     HEAP8[$60 + 2 >> 0] = HEAP8[50730] | 0;
     HEAP8[$60 + 3 >> 0] = HEAP8[50731] | 0;
     HEAP8[$60 + 4 >> 0] = HEAP8[50732] | 0;
     HEAP8[$60 + 5 >> 0] = HEAP8[50733] | 0;
     HEAP8[$60 + 6 >> 0] = HEAP8[50734] | 0;
     HEAP32[$49 >> 2] = $60;
     HEAP32[$48 >> 2] = 62064;
     ___cxa_throw($48 | 0, 62104, 96);
    }
    break;
   }
  case 21:
   {
    __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
    break;
   }
  case 27:
   {
    $80 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$80 >> 2] = 61776;
    ___cxa_throw($80 | 0, 61824, 94);
    break;
   }
  case 33:
   {
    $94 = ___cxa_allocate_exception(8) | 0;
    HEAP32[$94 >> 2] = 61920;
    $95 = $94 + 4 | 0;
    $96 = _malloc(19) | 0;
    if ($96) {
     $$lcssa$i87 = $96;
     HEAP32[$$lcssa$i87 >> 2] = 6;
     $104 = $$lcssa$i87 + 4 | 0;
     HEAP32[$104 >> 2] = 6;
     $105 = $$lcssa$i87 + 8 | 0;
     HEAP32[$105 >> 2] = 0;
     $106 = $$lcssa$i87 + 12 | 0;
     HEAP8[$106 + 0 >> 0] = HEAP8[50728] | 0;
     HEAP8[$106 + 1 >> 0] = HEAP8[50729] | 0;
     HEAP8[$106 + 2 >> 0] = HEAP8[50730] | 0;
     HEAP8[$106 + 3 >> 0] = HEAP8[50731] | 0;
     HEAP8[$106 + 4 >> 0] = HEAP8[50732] | 0;
     HEAP8[$106 + 5 >> 0] = HEAP8[50733] | 0;
     HEAP8[$106 + 6 >> 0] = HEAP8[50734] | 0;
     HEAP32[$95 >> 2] = $106;
     HEAP32[$94 >> 2] = 62064;
     ___cxa_throw($94 | 0, 62104, 96);
    }
    while (1) {
     $98 = HEAP32[15470] | 0;
     HEAP32[15470] = $98 + 0;
     if (!$98) {
      label = 36;
      break;
     }
     FUNCTION_TABLE_v[$98 & 3]();
     $101 = _malloc(19) | 0;
     if ($101) {
      $$lcssa$i87 = $101;
      label = 37;
      break;
     }
    }
    if ((label | 0) == 36) {
     $103 = ___cxa_allocate_exception(4) | 0;
     HEAP32[$103 >> 2] = 61776;
     ___cxa_throw($103 | 0, 61824, 94);
    } else if ((label | 0) == 37) {
     HEAP32[$$lcssa$i87 >> 2] = 6;
     $104 = $$lcssa$i87 + 4 | 0;
     HEAP32[$104 >> 2] = 6;
     $105 = $$lcssa$i87 + 8 | 0;
     HEAP32[$105 >> 2] = 0;
     $106 = $$lcssa$i87 + 12 | 0;
     HEAP8[$106 + 0 >> 0] = HEAP8[50728] | 0;
     HEAP8[$106 + 1 >> 0] = HEAP8[50729] | 0;
     HEAP8[$106 + 2 >> 0] = HEAP8[50730] | 0;
     HEAP8[$106 + 3 >> 0] = HEAP8[50731] | 0;
     HEAP8[$106 + 4 >> 0] = HEAP8[50732] | 0;
     HEAP8[$106 + 5 >> 0] = HEAP8[50733] | 0;
     HEAP8[$106 + 6 >> 0] = HEAP8[50734] | 0;
     HEAP32[$95 >> 2] = $106;
     HEAP32[$94 >> 2] = 62064;
     ___cxa_throw($94 | 0, 62104, 96);
    }
    break;
   }
  case 39:
   {
    __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
    break;
   }
  case 45:
   {
    $126 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$126 >> 2] = 61776;
    ___cxa_throw($126 | 0, 61824, 94);
    break;
   }
  case 55:
   {
    __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
    break;
   }
  case 61:
   {
    $160 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$160 >> 2] = 61776;
    ___cxa_throw($160 | 0, 61824, 94);
    break;
   }
  case 67:
   {
    __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
    break;
   }
  case 73:
   {
    $188 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$188 >> 2] = 61776;
    ___cxa_throw($188 | 0, 61824, 94);
    break;
   }
  case 80:
   {
    $206 = HEAP32[$20 >> 2] | 0;
    $208 = HEAP32[$$lcssa$i >> 2] | 0;
    break L11;
    break;
   }
  }
 } while (0);
 HEAP32[$agg$result >> 2] = 0;
 $203 = $agg$result + 4 | 0;
 HEAP32[$203 >> 2] = 0;
 $204 = $agg$result + 8 | 0;
 HEAP32[$204 >> 2] = 0;
 $209 = $206 - $208 | 0;
 $210 = ($209 | 0) / 24 | 0;
 if (($206 | 0) == ($208 | 0)) {
  STACKTOP = sp;
  return;
 }
 if ($210 >>> 0 > 178956970) {
  $213 = ___cxa_allocate_exception(8) | 0;
  HEAP32[$213 >> 2] = 61920;
  $214 = $213 + 4 | 0;
  $215 = _malloc(19) | 0;
  if ($215) {
   $$lcssa$i40$i = $215;
   HEAP32[$$lcssa$i40$i >> 2] = 6;
   $223 = $$lcssa$i40$i + 4 | 0;
   HEAP32[$223 >> 2] = 6;
   $224 = $$lcssa$i40$i + 8 | 0;
   HEAP32[$224 >> 2] = 0;
   $225 = $$lcssa$i40$i + 12 | 0;
   HEAP8[$225 + 0 >> 0] = HEAP8[50728] | 0;
   HEAP8[$225 + 1 >> 0] = HEAP8[50729] | 0;
   HEAP8[$225 + 2 >> 0] = HEAP8[50730] | 0;
   HEAP8[$225 + 3 >> 0] = HEAP8[50731] | 0;
   HEAP8[$225 + 4 >> 0] = HEAP8[50732] | 0;
   HEAP8[$225 + 5 >> 0] = HEAP8[50733] | 0;
   HEAP8[$225 + 6 >> 0] = HEAP8[50734] | 0;
   HEAP32[$214 >> 2] = $225;
   HEAP32[$213 >> 2] = 62e3;
   ___cxa_throw($213 | 0, 62040, 96);
  }
  while (1) {
   $217 = HEAP32[15470] | 0;
   HEAP32[15470] = $217 + 0;
   if (!$217) {
    label = 86;
    break;
   }
   FUNCTION_TABLE_v[$217 & 3]();
   $220 = _malloc(19) | 0;
   if ($220) {
    $$lcssa$i40$i = $220;
    label = 87;
    break;
   }
  }
  if ((label | 0) == 86) {
   $222 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$222 >> 2] = 61776;
   ___cxa_throw($222 | 0, 61824, 94);
  } else if ((label | 0) == 87) {
   HEAP32[$$lcssa$i40$i >> 2] = 6;
   $223 = $$lcssa$i40$i + 4 | 0;
   HEAP32[$223 >> 2] = 6;
   $224 = $$lcssa$i40$i + 8 | 0;
   HEAP32[$224 >> 2] = 0;
   $225 = $$lcssa$i40$i + 12 | 0;
   HEAP8[$225 + 0 >> 0] = HEAP8[50728] | 0;
   HEAP8[$225 + 1 >> 0] = HEAP8[50729] | 0;
   HEAP8[$225 + 2 >> 0] = HEAP8[50730] | 0;
   HEAP8[$225 + 3 >> 0] = HEAP8[50731] | 0;
   HEAP8[$225 + 4 >> 0] = HEAP8[50732] | 0;
   HEAP8[$225 + 5 >> 0] = HEAP8[50733] | 0;
   HEAP8[$225 + 6 >> 0] = HEAP8[50734] | 0;
   HEAP32[$214 >> 2] = $225;
   HEAP32[$213 >> 2] = 62e3;
   ___cxa_throw($213 | 0, 62040, 96);
  }
 }
 $226 = _malloc($209) | 0;
 L129 : do if (!$226) {
  while (1) {
   $228 = HEAP32[15470] | 0;
   HEAP32[15470] = $228 + 0;
   if (!$228) break;
   FUNCTION_TABLE_v[$228 & 3]();
   $231 = _malloc($209) | 0;
   if ($231) {
    $$lcssa$i$i = $231;
    break L129;
   }
  }
  $233 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$233 >> 2] = 61776;
  ___cxa_throw($233 | 0, 61824, 94);
 } else $$lcssa$i$i = $226; while (0);
 HEAP32[$203 >> 2] = $$lcssa$i$i;
 HEAP32[$agg$result >> 2] = $$lcssa$i$i;
 HEAP32[$204 >> 2] = $$lcssa$i$i + ($210 * 24 | 0);
 $235 = HEAP32[$$lcssa$i >> 2] | 0;
 $236 = HEAP32[$20 >> 2] | 0;
 if (($235 | 0) == ($236 | 0)) {
  STACKTOP = sp;
  return;
 } else {
  $$01$i$i = $235;
  $241 = $$lcssa$i$i;
 }
 L137 : while (1) {
  if (!(HEAP8[$$01$i$i >> 0] & 1)) {
   HEAP32[$241 + 0 >> 2] = HEAP32[$$01$i$i + 0 >> 2];
   HEAP32[$241 + 4 >> 2] = HEAP32[$$01$i$i + 4 >> 2];
   HEAP32[$241 + 8 >> 2] = HEAP32[$$01$i$i + 8 >> 2];
  } else {
   $243 = HEAP32[$$01$i$i + 8 >> 2] | 0;
   $245 = HEAP32[$$01$i$i + 4 >> 2] | 0;
   if ($245 >>> 0 > 4294967279) {
    label = 96;
    break;
   }
   if ($245 >>> 0 < 11) {
    HEAP8[$241 >> 0] = $245 << 1;
    $__p$0$i$i = $241 + 1 | 0;
   } else {
    $252 = $245 + 16 & -16;
    $$size$i9$i = ($252 | 0) == 0 ? 1 : $252;
    $254 = _malloc($$size$i9$i) | 0;
    if (!$254) while (1) {
     $256 = HEAP32[15470] | 0;
     HEAP32[15470] = $256 + 0;
     if (!$256) {
      label = 102;
      break L137;
     }
     FUNCTION_TABLE_v[$256 & 3]();
     $259 = _malloc($$size$i9$i) | 0;
     if ($259) {
      $$lcssa$i13$i = $259;
      break;
     }
    } else $$lcssa$i13$i = $254;
    HEAP32[$241 + 8 >> 2] = $$lcssa$i13$i;
    HEAP32[$241 >> 2] = $252 | 1;
    HEAP32[$241 + 4 >> 2] = $245;
    $__p$0$i$i = $$lcssa$i13$i;
   }
   _memcpy($__p$0$i$i | 0, $243 | 0, $245 | 0) | 0;
   HEAP8[$__p$0$i$i + $245 >> 0] = 0;
  }
  $266 = $241 + 12 | 0;
  $267 = $$01$i$i + 12 | 0;
  if (!(HEAP8[$267 >> 0] & 1)) {
   HEAP32[$266 + 0 >> 2] = HEAP32[$267 + 0 >> 2];
   HEAP32[$266 + 4 >> 2] = HEAP32[$267 + 4 >> 2];
   HEAP32[$266 + 8 >> 2] = HEAP32[$267 + 8 >> 2];
  } else {
   $272 = HEAP32[$$01$i$i + 20 >> 2] | 0;
   $274 = HEAP32[$$01$i$i + 16 >> 2] | 0;
   if ($274 >>> 0 > 4294967279) {
    label = 108;
    break;
   }
   if ($274 >>> 0 < 11) {
    HEAP8[$266 >> 0] = $274 << 1;
    $__p$0$i20$i = $266 + 1 | 0;
   } else {
    $281 = $274 + 16 & -16;
    $$size$i24$i = ($281 | 0) == 0 ? 1 : $281;
    $283 = _malloc($$size$i24$i) | 0;
    if (!$283) while (1) {
     $285 = HEAP32[15470] | 0;
     HEAP32[15470] = $285 + 0;
     if (!$285) {
      label = 114;
      break L137;
     }
     FUNCTION_TABLE_v[$285 & 3]();
     $288 = _malloc($$size$i24$i) | 0;
     if ($288) {
      $$lcssa$i28$i = $288;
      break;
     }
    } else $$lcssa$i28$i = $283;
    HEAP32[$241 + 20 >> 2] = $$lcssa$i28$i;
    HEAP32[$266 >> 2] = $281 | 1;
    HEAP32[$241 + 16 >> 2] = $274;
    $__p$0$i20$i = $$lcssa$i28$i;
   }
   _memcpy($__p$0$i20$i | 0, $272 | 0, $274 | 0) | 0;
   HEAP8[$__p$0$i20$i + $274 >> 0] = 0;
  }
  $241 = (HEAP32[$203 >> 2] | 0) + 24 | 0;
  HEAP32[$203 >> 2] = $241;
  $$01$i$i = $$01$i$i + 24 | 0;
  if (($$01$i$i | 0) == ($236 | 0)) {
   label = 118;
   break;
  }
 }
 if ((label | 0) == 96) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 102) {
  $261 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$261 >> 2] = 61776;
  ___cxa_throw($261 | 0, 61824, 94);
 } else if ((label | 0) == 108) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 114) {
  $290 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$290 >> 2] = 61776;
  ___cxa_throw($290 | 0, 61824, 94);
 } else if ((label | 0) == 118) {
  STACKTOP = sp;
  return;
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$19 = 0, $0 = 0, $1 = 0, $102 = 0, $104 = 0, $106 = 0, $111 = 0, $112 = 0, $120 = 0, $121 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $132 = 0, $133 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $147 = 0, $149 = 0, $15 = 0, $151 = 0, $159 = 0, $160 = 0, $168 = 0, $170 = 0, $172 = 0, $173 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $188 = 0, $19 = 0, $190 = 0, $198 = 0, $199 = 0, $2 = 0, $202 = 0, $205 = 0, $206 = 0, $208 = 0, $209 = 0, $210 = 0, $213 = 0, $214 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $228 = 0, $230 = 0, $232 = 0, $240 = 0, $241 = 0, $249 = 0, $254 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $267 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $281 = 0, $283 = 0, $285 = 0, $290 = 0, $291 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $303 = 0, $304 = 0, $306 = 0, $307 = 0, $308 = 0, $311 = 0, $312 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $326 = 0, $328 = 0, $33 = 0, $330 = 0, $338 = 0, $339 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $55 = 0, $57 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $88 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $args = 0, $args3 = 0, $global$0$off0 = 0, $s = 0, $s1 = 0, $s4 = 0, $s5 = 0, $s6 = 0, $t$0 = 0, $t$1$lcssa = 0, $t$1$ph = 0, $t$167 = 0, $t$2 = 0, $t$3$lcssa = 0, $t$368 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $args = sp + 12 | 0;
 $s = sp + 48 | 0;
 $0 = sp + 108 | 0;
 $s1 = sp;
 $1 = sp + 96 | 0;
 $args3 = sp + 120 | 0;
 $s4 = sp + 132 | 0;
 $2 = sp + 72 | 0;
 $s5 = sp + 60 | 0;
 $3 = sp + 24 | 0;
 $s6 = sp + 36 | 0;
 $4 = sp + 84 | 0;
 $5 = $last;
 if (($5 - $first | 0) <= 2) {
  $$19 = $first;
  STACKTOP = sp;
  return $$19 | 0;
 }
 if ((HEAP8[$first >> 0] | 0) == 103) {
  $13 = (HEAP8[$first + 1 >> 0] | 0) == 115;
  $global$0$off0 = $13;
  $t$0 = $13 ? $first + 2 | 0 : $first;
 } else {
  $global$0$off0 = 0;
  $t$0 = $first;
 }
 $15 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$0, $last, $db) | 0;
 if (($15 | 0) != ($t$0 | 0)) {
  if (!$global$0$off0) {
   $$19 = $15;
   STACKTOP = sp;
   return $$19 | 0;
  }
  $19 = HEAP32[$db + 4 >> 2] | 0;
  if ((HEAP32[$db >> 2] | 0) == ($19 | 0)) {
   $$19 = $first;
   STACKTOP = sp;
   return $$19 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($19 + -24 | 0, 0, 59112, 2) | 0;
  $$19 = $15;
  STACKTOP = sp;
  return $$19 | 0;
 }
 if (($5 - $t$0 | 0) <= 2) {
  $$19 = $first;
  STACKTOP = sp;
  return $$19 | 0;
 }
 if ((HEAP8[$t$0 >> 0] | 0) != 115) {
  $$19 = $first;
  STACKTOP = sp;
  return $$19 | 0;
 }
 if ((HEAP8[$t$0 + 1 >> 0] | 0) != 114) {
  $$19 = $first;
  STACKTOP = sp;
  return $$19 | 0;
 }
 $30 = $t$0 + 2 | 0;
 if ((HEAP8[$30 >> 0] | 0) == 78) {
  $33 = $t$0 + 3 | 0;
  $34 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($33, $last, $db) | 0;
  if (($34 | 0) == ($33 | 0) | ($34 | 0) == ($last | 0)) {
   $$19 = $first;
   STACKTOP = sp;
   return $$19 | 0;
  }
  $37 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($34, $last, $db) | 0;
  do if (($37 | 0) == ($34 | 0)) $t$1$ph = $34; else {
   $39 = $db + 4 | 0;
   $40 = HEAP32[$39 >> 2] | 0;
   if ((($40 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
    $$19 = $first;
    STACKTOP = sp;
    return $$19 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $40 + -24 | 0);
   $48 = HEAP32[$39 >> 2] | 0;
   $49 = $48 + -24 | 0;
   $51 = $48;
   do {
    $50 = $51 + -24 | 0;
    HEAP32[$39 >> 2] = $50;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($50);
    $51 = HEAP32[$39 >> 2] | 0;
   } while (($51 | 0) != ($49 | 0));
   $55 = HEAP8[$args >> 0] | 0;
   $57 = ($55 & 1) == 0;
   if ($57) {
    $65 = $args + 1 | 0;
    $66 = ($55 & 255) >>> 1;
   } else {
    $65 = HEAP32[$args + 8 >> 2] | 0;
    $66 = HEAP32[$args + 4 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($48 + -48 | 0, $65, $66) | 0;
   if (($37 | 0) != ($last | 0)) {
    if ($57) {
     $t$1$ph = $37;
     break;
    }
    _free(HEAP32[$args + 8 >> 2] | 0);
    $t$1$ph = $37;
    break;
   }
   $68 = HEAP32[$39 >> 2] | 0;
   $69 = $68 + -24 | 0;
   $71 = $68;
   do {
    $70 = $71 + -24 | 0;
    HEAP32[$39 >> 2] = $70;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($70);
    $71 = HEAP32[$39 >> 2] | 0;
   } while (($71 | 0) != ($69 | 0));
   if ($57) {
    $$19 = $first;
    STACKTOP = sp;
    return $$19 | 0;
   }
   _free(HEAP32[$args + 8 >> 2] | 0);
   $$19 = $first;
   STACKTOP = sp;
   return $$19 | 0;
  } while (0);
  L55 : do if ((HEAP8[$t$1$ph >> 0] | 0) == 69) $t$1$lcssa = $t$1$ph; else {
   $80 = $db + 4 | 0;
   $81 = $0 + 1 | 0;
   $82 = $0 + 8 | 0;
   $83 = $0 + 4 | 0;
   $84 = $s + 8 | 0;
   $t$167 = $t$1$ph;
   while (1) {
    $85 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($t$167, $last, $db) | 0;
    if (($85 | 0) == ($t$167 | 0) | ($85 | 0) == ($last | 0)) {
     $$19 = $first;
     label = 111;
     break;
    }
    $88 = HEAP32[$80 >> 2] | 0;
    if ((($88 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$19 = $first;
     label = 111;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s, $88 + -24 | 0);
    $96 = HEAP32[$80 >> 2] | 0;
    $97 = $96 + -24 | 0;
    $99 = $96;
    do {
     $98 = $99 + -24 | 0;
     HEAP32[$80 >> 2] = $98;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($98);
     $99 = HEAP32[$80 >> 2] | 0;
    } while (($99 | 0) != ($97 | 0));
    $102 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($s, 0, 59112, 2) | 0;
    HEAP32[$0 + 0 >> 2] = HEAP32[$102 + 0 >> 2];
    HEAP32[$0 + 4 >> 2] = HEAP32[$102 + 4 >> 2];
    HEAP32[$0 + 8 >> 2] = HEAP32[$102 + 8 >> 2];
    HEAP32[$102 + 0 >> 2] = 0;
    HEAP32[$102 + 4 >> 2] = 0;
    HEAP32[$102 + 8 >> 2] = 0;
    $104 = HEAP8[$0 >> 0] | 0;
    $106 = ($104 & 1) == 0;
    if ($106) {
     $111 = $81;
     $112 = ($104 & 255) >>> 1;
    } else {
     $111 = HEAP32[$82 >> 2] | 0;
     $112 = HEAP32[$83 >> 2] | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($96 + -48 | 0, $111, $112) | 0;
    if (!$106) _free(HEAP32[$82 >> 2] | 0);
    if (HEAP8[$s >> 0] & 1) _free(HEAP32[$84 >> 2] | 0);
    if ((HEAP8[$85 >> 0] | 0) == 69) {
     $t$1$lcssa = $85;
     break L55;
    } else $t$167 = $85;
   }
   if ((label | 0) == 111) {
    STACKTOP = sp;
    return $$19 | 0;
   }
  } while (0);
  $120 = $t$1$lcssa + 1 | 0;
  $121 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($120, $last, $db) | 0;
  if (($121 | 0) == ($120 | 0)) {
   $124 = $db + 4 | 0;
   $125 = HEAP32[$124 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($125 | 0)) {
    $$19 = $first;
    STACKTOP = sp;
    return $$19 | 0;
   }
   $127 = $125 + -24 | 0;
   $129 = $125;
   do {
    $128 = $129 + -24 | 0;
    HEAP32[$124 >> 2] = $128;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($128);
    $129 = HEAP32[$124 >> 2] | 0;
   } while (($129 | 0) != ($127 | 0));
   $$19 = $first;
   STACKTOP = sp;
   return $$19 | 0;
  }
  $132 = $db + 4 | 0;
  $133 = HEAP32[$132 >> 2] | 0;
  if ((($133 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
   $$19 = $first;
   STACKTOP = sp;
   return $$19 | 0;
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s1, $133 + -24 | 0);
  $141 = HEAP32[$132 >> 2] | 0;
  $142 = $141 + -24 | 0;
  $144 = $141;
  do {
   $143 = $144 + -24 | 0;
   HEAP32[$132 >> 2] = $143;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($143);
   $144 = HEAP32[$132 >> 2] | 0;
  } while (($144 | 0) != ($142 | 0));
  $147 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($s1, 0, 59112, 2) | 0;
  HEAP32[$1 + 0 >> 2] = HEAP32[$147 + 0 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$147 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$147 + 8 >> 2];
  HEAP32[$147 + 0 >> 2] = 0;
  HEAP32[$147 + 4 >> 2] = 0;
  HEAP32[$147 + 8 >> 2] = 0;
  $149 = HEAP8[$1 >> 0] | 0;
  $151 = ($149 & 1) == 0;
  if ($151) {
   $159 = $1 + 1 | 0;
   $160 = ($149 & 255) >>> 1;
  } else {
   $159 = HEAP32[$1 + 8 >> 2] | 0;
   $160 = HEAP32[$1 + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($141 + -48 | 0, $159, $160) | 0;
  if (!$151) _free(HEAP32[$1 + 8 >> 2] | 0);
  if (!(HEAP8[$s1 >> 0] & 1)) {
   $$19 = $121;
   STACKTOP = sp;
   return $$19 | 0;
  }
  _free(HEAP32[$s1 + 8 >> 2] | 0);
  $$19 = $121;
  STACKTOP = sp;
  return $$19 | 0;
 }
 $168 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($30, $last, $db) | 0;
 if (($168 | 0) != ($30 | 0)) {
  $170 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($168, $last, $db) | 0;
  if (($170 | 0) == ($168 | 0)) $t$2 = $168; else {
   $172 = $db + 4 | 0;
   $173 = HEAP32[$172 >> 2] | 0;
   if ((($173 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
    $$19 = $first;
    STACKTOP = sp;
    return $$19 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args3, $173 + -24 | 0);
   $181 = HEAP32[$172 >> 2] | 0;
   $182 = $181 + -24 | 0;
   $184 = $181;
   do {
    $183 = $184 + -24 | 0;
    HEAP32[$172 >> 2] = $183;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($183);
    $184 = HEAP32[$172 >> 2] | 0;
   } while (($184 | 0) != ($182 | 0));
   $188 = HEAP8[$args3 >> 0] | 0;
   $190 = ($188 & 1) == 0;
   if ($190) {
    $198 = $args3 + 1 | 0;
    $199 = ($188 & 255) >>> 1;
   } else {
    $198 = HEAP32[$args3 + 8 >> 2] | 0;
    $199 = HEAP32[$args3 + 4 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($181 + -48 | 0, $198, $199) | 0;
   if ($190) $t$2 = $170; else {
    _free(HEAP32[$args3 + 8 >> 2] | 0);
    $t$2 = $170;
   }
  }
  $202 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$2, $last, $db) | 0;
  if (($202 | 0) == ($t$2 | 0)) {
   $205 = $db + 4 | 0;
   $206 = HEAP32[$205 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($206 | 0)) {
    $$19 = $first;
    STACKTOP = sp;
    return $$19 | 0;
   }
   $208 = $206 + -24 | 0;
   $210 = $206;
   do {
    $209 = $210 + -24 | 0;
    HEAP32[$205 >> 2] = $209;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($209);
    $210 = HEAP32[$205 >> 2] | 0;
   } while (($210 | 0) != ($208 | 0));
   $$19 = $first;
   STACKTOP = sp;
   return $$19 | 0;
  }
  $213 = $db + 4 | 0;
  $214 = HEAP32[$213 >> 2] | 0;
  if ((($214 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
   $$19 = $first;
   STACKTOP = sp;
   return $$19 | 0;
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s4, $214 + -24 | 0);
  $222 = HEAP32[$213 >> 2] | 0;
  $223 = $222 + -24 | 0;
  $225 = $222;
  do {
   $224 = $225 + -24 | 0;
   HEAP32[$213 >> 2] = $224;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($224);
   $225 = HEAP32[$213 >> 2] | 0;
  } while (($225 | 0) != ($223 | 0));
  $228 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($s4, 0, 59112, 2) | 0;
  HEAP32[$2 + 0 >> 2] = HEAP32[$228 + 0 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$228 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$228 + 8 >> 2];
  HEAP32[$228 + 0 >> 2] = 0;
  HEAP32[$228 + 4 >> 2] = 0;
  HEAP32[$228 + 8 >> 2] = 0;
  $230 = HEAP8[$2 >> 0] | 0;
  $232 = ($230 & 1) == 0;
  if ($232) {
   $240 = $2 + 1 | 0;
   $241 = ($230 & 255) >>> 1;
  } else {
   $240 = HEAP32[$2 + 8 >> 2] | 0;
   $241 = HEAP32[$2 + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($222 + -48 | 0, $240, $241) | 0;
  if (!$232) _free(HEAP32[$2 + 8 >> 2] | 0);
  if (!(HEAP8[$s4 >> 0] & 1)) {
   $$19 = $202;
   STACKTOP = sp;
   return $$19 | 0;
  }
  _free(HEAP32[$s4 + 8 >> 2] | 0);
  $$19 = $202;
  STACKTOP = sp;
  return $$19 | 0;
 }
 $249 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($30, $last, $db) | 0;
 if (($249 | 0) == ($30 | 0) | ($249 | 0) == ($last | 0)) {
  $$19 = $first;
  STACKTOP = sp;
  return $$19 | 0;
 }
 do if ($global$0$off0) {
  $254 = HEAP32[$db + 4 >> 2] | 0;
  if ((HEAP32[$db >> 2] | 0) == ($254 | 0)) {
   $$19 = $first;
   STACKTOP = sp;
   return $$19 | 0;
  } else {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($254 + -24 | 0, 0, 59112, 2) | 0;
   break;
  }
 } while (0);
 L157 : do if ((HEAP8[$249 >> 0] | 0) == 69) $t$3$lcssa = $249; else {
  $259 = $db + 4 | 0;
  $260 = $3 + 1 | 0;
  $261 = $3 + 8 | 0;
  $262 = $3 + 4 | 0;
  $263 = $s5 + 8 | 0;
  $t$368 = $249;
  while (1) {
   $264 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($t$368, $last, $db) | 0;
   if (($264 | 0) == ($t$368 | 0) | ($264 | 0) == ($last | 0)) {
    $$19 = $first;
    label = 111;
    break;
   }
   $267 = HEAP32[$259 >> 2] | 0;
   if ((($267 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
    $$19 = $first;
    label = 111;
    break;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s5, $267 + -24 | 0);
   $275 = HEAP32[$259 >> 2] | 0;
   $276 = $275 + -24 | 0;
   $278 = $275;
   do {
    $277 = $278 + -24 | 0;
    HEAP32[$259 >> 2] = $277;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($277);
    $278 = HEAP32[$259 >> 2] | 0;
   } while (($278 | 0) != ($276 | 0));
   $281 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($s5, 0, 59112, 2) | 0;
   HEAP32[$3 + 0 >> 2] = HEAP32[$281 + 0 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$281 + 4 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$281 + 8 >> 2];
   HEAP32[$281 + 0 >> 2] = 0;
   HEAP32[$281 + 4 >> 2] = 0;
   HEAP32[$281 + 8 >> 2] = 0;
   $283 = HEAP8[$3 >> 0] | 0;
   $285 = ($283 & 1) == 0;
   if ($285) {
    $290 = $260;
    $291 = ($283 & 255) >>> 1;
   } else {
    $290 = HEAP32[$261 >> 2] | 0;
    $291 = HEAP32[$262 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($275 + -48 | 0, $290, $291) | 0;
   if (!$285) _free(HEAP32[$261 >> 2] | 0);
   if (HEAP8[$s5 >> 0] & 1) _free(HEAP32[$263 >> 2] | 0);
   if ((HEAP8[$264 >> 0] | 0) == 69) {
    $t$3$lcssa = $264;
    break L157;
   } else $t$368 = $264;
  }
  if ((label | 0) == 111) {
   STACKTOP = sp;
   return $$19 | 0;
  }
 } while (0);
 $299 = $t$3$lcssa + 1 | 0;
 $300 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($299, $last, $db) | 0;
 if (($300 | 0) == ($299 | 0)) {
  $303 = $db + 4 | 0;
  $304 = HEAP32[$303 >> 2] | 0;
  if ((HEAP32[$db >> 2] | 0) == ($304 | 0)) {
   $$19 = $first;
   STACKTOP = sp;
   return $$19 | 0;
  }
  $306 = $304 + -24 | 0;
  $308 = $304;
  do {
   $307 = $308 + -24 | 0;
   HEAP32[$303 >> 2] = $307;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($307);
   $308 = HEAP32[$303 >> 2] | 0;
  } while (($308 | 0) != ($306 | 0));
  $$19 = $first;
  STACKTOP = sp;
  return $$19 | 0;
 }
 $311 = $db + 4 | 0;
 $312 = HEAP32[$311 >> 2] | 0;
 if ((($312 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
  $$19 = $first;
  STACKTOP = sp;
  return $$19 | 0;
 }
 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s6, $312 + -24 | 0);
 $320 = HEAP32[$311 >> 2] | 0;
 $321 = $320 + -24 | 0;
 $323 = $320;
 do {
  $322 = $323 + -24 | 0;
  HEAP32[$311 >> 2] = $322;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($322);
  $323 = HEAP32[$311 >> 2] | 0;
 } while (($323 | 0) != ($321 | 0));
 $326 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($s6, 0, 59112, 2) | 0;
 HEAP32[$4 + 0 >> 2] = HEAP32[$326 + 0 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$326 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$326 + 8 >> 2];
 HEAP32[$326 + 0 >> 2] = 0;
 HEAP32[$326 + 4 >> 2] = 0;
 HEAP32[$326 + 8 >> 2] = 0;
 $328 = HEAP8[$4 >> 0] | 0;
 $330 = ($328 & 1) == 0;
 if ($330) {
  $338 = $4 + 1 | 0;
  $339 = ($328 & 255) >>> 1;
 } else {
  $338 = HEAP32[$4 + 8 >> 2] | 0;
  $339 = HEAP32[$4 + 4 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($320 + -48 | 0, $338, $339) | 0;
 if (!$330) _free(HEAP32[$4 + 8 >> 2] | 0);
 if (!(HEAP8[$s6 >> 0] & 1)) {
  $$19 = $300;
  STACKTOP = sp;
  return $$19 | 0;
 }
 _free(HEAP32[$s6 + 8 >> 2] | 0);
 $$19 = $300;
 STACKTOP = sp;
 return $$19 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i13 = 0, $$0$i$i$i25 = 0, $$0$i$i$i9 = 0, $$1 = 0, $$pre40 = 0, $$sroa$5 = 0, $0 = 0, $1 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $118 = 0, $12 = 0, $122 = 0, $124 = 0, $125 = 0, $128 = 0, $131 = 0, $134 = 0, $14 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $161 = 0, $162 = 0, $171 = 0, $177 = 0, $178 = 0, $18 = 0, $181 = 0, $184 = 0, $19 = 0, $193 = 0, $194 = 0, $206 = 0, $213 = 0, $216 = 0, $218 = 0, $22 = 0, $223 = 0, $224 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $236 = 0, $244 = 0, $246 = 0, $248 = 0, $251 = 0, $252 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $259 = 0, $261 = 0, $264 = 0, $266 = 0, $270 = 0, $272 = 0, $273 = 0, $277 = 0, $279 = 0, $28 = 0, $282 = 0, $283 = 0, $285 = 0, $289 = 0, $29 = 0, $290 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $46 = 0, $47 = 0, $48 = 0, $55 = 0, $58 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $70 = 0, $8 = 0, $81 = 0, $87 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $__v$i$i23 = 0, $args = 0, $k$059 = 0, $k1$063 = 0, $k2$061 = 0, $t$065 = 0, label = 0, sp = 0, $t$065$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $__v$i$i23 = sp + 48 | 0;
 $args = sp + 36 | 0;
 $0 = sp + 24 | 0;
 $1 = sp;
 $$sroa$5 = sp + 68 | 0;
 if (($last - $first | 0) <= 1) {
  $$1 = $first;
  STACKTOP = sp;
  return $$1 | 0;
 }
 if ((HEAP8[$first >> 0] | 0) != 73) {
  $$1 = $first;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $8 = $db + 61 | 0;
 if (HEAP8[$8 >> 0] | 0) {
  $12 = HEAP32[$db + 36 >> 2] | 0;
  $14 = HEAP32[$12 + -16 >> 2] | 0;
  $15 = $12 + -12 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  if (($16 | 0) != ($14 | 0)) {
   $19 = $16;
   do {
    $18 = $19 + -16 | 0;
    HEAP32[$15 >> 2] = $18;
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($18);
    $19 = HEAP32[$15 >> 2] | 0;
   } while (($19 | 0) != ($14 | 0));
  }
 }
 $22 = $first + 1 | 0;
 HEAP8[$args >> 0] = 2;
 $23 = $args + 1 | 0;
 HEAP8[$23 >> 0] = 60;
 HEAP8[$args + 2 >> 0] = 0;
 do if ((HEAP8[$22 >> 0] | 0) == 69) {
  $244 = 2;
  $289 = $22 + 1 | 0;
  label = 83;
 } else {
  $28 = $db + 4 | 0;
  $29 = $db + 36 | 0;
  $30 = $db + 12 | 0;
  $31 = $__v$i$i23 + 8 | 0;
  $32 = $__v$i$i23 + 8 | 0;
  $33 = $0 + 1 | 0;
  $34 = $0 + 8 | 0;
  $35 = $0 + 4 | 0;
  $36 = $args + 4 | 0;
  $37 = $db + 32 | 0;
  $38 = $db + 40 | 0;
  $39 = $db + 44 | 0;
  $40 = $__v$i$i23 + 8 | 0;
  $t$065 = $22;
  L15 : while (1) {
   do if (HEAP8[$8 >> 0] | 0) {
    $46 = HEAP32[$30 >> 2] | 0;
    $47 = HEAP32[$29 >> 2] | 0;
    $48 = HEAP32[$38 >> 2] | 0;
    if ($47 >>> 0 < $48 >>> 0) {
     if (!$47) $55 = 0; else {
      HEAP32[$47 >> 2] = 0;
      HEAP32[$47 + 4 >> 2] = 0;
      HEAP32[$47 + 8 >> 2] = 0;
      HEAP32[$47 + 12 >> 2] = $46;
      $55 = HEAP32[$29 >> 2] | 0;
     }
     HEAP32[$29 >> 2] = $55 + 16;
     break;
    }
    $58 = HEAP32[$37 >> 2] | 0;
    $60 = $47 - $58 >> 4;
    $61 = $60 + 1 | 0;
    if (($61 | 0) < 0) {
     label = 16;
     break L15;
    }
    $64 = $48 - $58 | 0;
    if ($64 >> 4 >>> 0 < 1073741823) {
     $67 = $64 >> 3;
     $$0$i$i$i = $67 >>> 0 < $61 >>> 0 ? $61 : $67;
    } else $$0$i$i$i = 2147483647;
    __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($__v$i$i23, $$0$i$i$i, $60, $39);
    $70 = HEAP32[$40 >> 2] | 0;
    if ($70) {
     HEAP32[$70 >> 2] = 0;
     HEAP32[$70 + 4 >> 2] = 0;
     HEAP32[$70 + 8 >> 2] = 0;
     HEAP32[$70 + 12 >> 2] = $46;
    }
    HEAP32[$40 >> 2] = $70 + 16;
    __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($37, $__v$i$i23);
    __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v$i$i23);
   } while (0);
   $81 = ((HEAP32[$28 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   $t$065$looptemp = $t$065;
   $t$065 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($t$065, $last, $db) | 0;
   $87 = ((HEAP32[$28 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   if (HEAP8[$8 >> 0] | 0) {
    $90 = HEAP32[$29 >> 2] | 0;
    $91 = $90 + -16 | 0;
    $93 = $90;
    do {
     $92 = $93 + -16 | 0;
     HEAP32[$29 >> 2] = $92;
     __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($92);
     $93 = HEAP32[$29 >> 2] | 0;
    } while (($93 | 0) != ($91 | 0));
   }
   if (($t$065 | 0) == ($t$065$looptemp | 0) | ($t$065 | 0) == ($last | 0)) {
    label = 26;
    break;
   }
   if (HEAP8[$8 >> 0] | 0) {
    $105 = HEAP32[$29 >> 2] | 0;
    $106 = $105 + -16 | 0;
    $107 = HEAP32[$30 >> 2] | 0;
    $108 = $105 + -12 | 0;
    $109 = HEAP32[$108 >> 2] | 0;
    $111 = HEAP32[$105 + -8 >> 2] | 0;
    if ($109 >>> 0 < $111 >>> 0) {
     if (!$109) $118 = 0; else {
      HEAP32[$109 >> 2] = 0;
      HEAP32[$109 + 4 >> 2] = 0;
      HEAP32[$109 + 8 >> 2] = 0;
      HEAP32[$109 + 12 >> 2] = $107;
      $118 = HEAP32[$108 >> 2] | 0;
     }
     HEAP32[$108 >> 2] = $118 + 16;
    } else {
     $122 = HEAP32[$106 >> 2] | 0;
     $124 = $109 - $122 >> 4;
     $125 = $124 + 1 | 0;
     if (($125 | 0) < 0) {
      label = 34;
      break;
     }
     $128 = $111 - $122 | 0;
     if ($128 >> 4 >>> 0 < 1073741823) {
      $131 = $128 >> 3;
      $$0$i$i$i9 = $131 >>> 0 < $125 >>> 0 ? $125 : $131;
     } else $$0$i$i$i9 = 2147483647;
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i23, $$0$i$i$i9, $124, $105 + -4 | 0);
     $134 = HEAP32[$31 >> 2] | 0;
     if ($134) {
      HEAP32[$134 >> 2] = 0;
      HEAP32[$134 + 4 >> 2] = 0;
      HEAP32[$134 + 8 >> 2] = 0;
      HEAP32[$134 + 12 >> 2] = $107;
     }
     HEAP32[$31 >> 2] = $134 + 16;
     __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($106, $__v$i$i23);
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i23);
    }
    if ($81 >>> 0 < $87 >>> 0) {
     $k$059 = $81;
     do {
      $144 = HEAP32[(HEAP32[$29 >> 2] | 0) + -12 >> 2] | 0;
      $145 = $144 + -16 | 0;
      $146 = HEAP32[$db >> 2] | 0;
      $147 = $146 + ($k$059 * 24 | 0) | 0;
      $148 = $144 + -12 | 0;
      $149 = HEAP32[$148 >> 2] | 0;
      if (($149 | 0) == (HEAP32[$144 + -8 >> 2] | 0)) {
       $177 = ($149 - (HEAP32[$145 >> 2] | 0) | 0) / 24 | 0;
       $178 = $177 + 1 | 0;
       if (($178 | 0) < 0) {
        label = 53;
        break L15;
       }
       if ($177 >>> 0 < 1073741823) {
        $181 = $177 << 1;
        $$0$i$i$i13 = $181 >>> 0 < $178 >>> 0 ? $178 : $181;
       } else $$0$i$i$i13 = 2147483647;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i23, $$0$i$i$i13, $177, $144 + -4 | 0);
       $184 = HEAP32[$32 >> 2] | 0;
       do if ($184) {
        if (!(HEAP8[$147 >> 0] & 1)) {
         HEAP32[$184 + 0 >> 2] = HEAP32[$147 + 0 >> 2];
         HEAP32[$184 + 4 >> 2] = HEAP32[$147 + 4 >> 2];
         HEAP32[$184 + 8 >> 2] = HEAP32[$147 + 8 >> 2];
        } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($184, HEAP32[$146 + ($k$059 * 24 | 0) + 8 >> 2] | 0, HEAP32[$146 + ($k$059 * 24 | 0) + 4 >> 2] | 0);
        $193 = $184 + 12 | 0;
        $194 = $146 + ($k$059 * 24 | 0) + 12 | 0;
        if (!(HEAP8[$194 >> 0] & 1)) {
         HEAP32[$193 + 0 >> 2] = HEAP32[$194 + 0 >> 2];
         HEAP32[$193 + 4 >> 2] = HEAP32[$194 + 4 >> 2];
         HEAP32[$193 + 8 >> 2] = HEAP32[$194 + 8 >> 2];
         break;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($193, HEAP32[$146 + ($k$059 * 24 | 0) + 20 >> 2] | 0, HEAP32[$146 + ($k$059 * 24 | 0) + 16 >> 2] | 0);
         break;
        }
       } while (0);
       HEAP32[$32 >> 2] = $184 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($145, $__v$i$i23);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i23);
      } else {
       if (!$149) $171 = 0; else {
        if (!(HEAP8[$147 >> 0] & 1)) {
         HEAP32[$149 + 0 >> 2] = HEAP32[$147 + 0 >> 2];
         HEAP32[$149 + 4 >> 2] = HEAP32[$147 + 4 >> 2];
         HEAP32[$149 + 8 >> 2] = HEAP32[$147 + 8 >> 2];
        } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($149, HEAP32[$146 + ($k$059 * 24 | 0) + 8 >> 2] | 0, HEAP32[$146 + ($k$059 * 24 | 0) + 4 >> 2] | 0);
        $161 = $149 + 12 | 0;
        $162 = $146 + ($k$059 * 24 | 0) + 12 | 0;
        if (!(HEAP8[$162 >> 0] & 1)) {
         HEAP32[$161 + 0 >> 2] = HEAP32[$162 + 0 >> 2];
         HEAP32[$161 + 4 >> 2] = HEAP32[$162 + 4 >> 2];
         HEAP32[$161 + 8 >> 2] = HEAP32[$162 + 8 >> 2];
        } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($161, HEAP32[$146 + ($k$059 * 24 | 0) + 20 >> 2] | 0, HEAP32[$146 + ($k$059 * 24 | 0) + 16 >> 2] | 0);
        $171 = HEAP32[$148 >> 2] | 0;
       }
       HEAP32[$148 >> 2] = $171 + 24;
      }
      $k$059 = $k$059 + 1 | 0;
     } while ($k$059 >>> 0 < $87 >>> 0);
    }
   }
   if ($81 >>> 0 < $87 >>> 0) {
    $k2$061 = $81;
    do {
     $206 = HEAP8[$args >> 0] | 0;
     if (!($206 & 1)) $213 = ($206 & 255) >>> 1; else $213 = HEAP32[$36 >> 2] | 0;
     if ($213 >>> 0 > 1) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($args, 59432, 2) | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, (HEAP32[$db >> 2] | 0) + ($k2$061 * 24 | 0) | 0);
     $216 = HEAP8[$0 >> 0] | 0;
     $218 = ($216 & 1) == 0;
     if ($218) {
      $223 = $33;
      $224 = ($216 & 255) >>> 1;
     } else {
      $223 = HEAP32[$34 >> 2] | 0;
      $224 = HEAP32[$35 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($args, $223, $224) | 0;
     if (!$218) _free(HEAP32[$34 >> 2] | 0);
     $k2$061 = $k2$061 + 1 | 0;
    } while ($k2$061 >>> 0 < $87 >>> 0);
   }
   if (($87 | 0) != ($81 | 0)) {
    $229 = HEAP32[$28 >> 2] | 0;
    $k1$063 = $87;
    do {
     $231 = $229;
     $229 = $229 + -24 | 0;
     do {
      $230 = $231 + -24 | 0;
      HEAP32[$28 >> 2] = $230;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($230);
      $231 = HEAP32[$28 >> 2] | 0;
     } while (($231 | 0) != ($229 | 0));
     $k1$063 = $k1$063 + -1 | 0;
    } while (($k1$063 | 0) != ($81 | 0));
   }
   if ((HEAP8[$t$065 >> 0] | 0) == 69) {
    label = 81;
    break;
   }
  }
  if ((label | 0) == 16) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 26) {
   if (!(HEAP8[$args >> 0] & 1)) {
    $$1 = $first;
    STACKTOP = sp;
    return $$1 | 0;
   }
   _free(HEAP32[$args + 8 >> 2] | 0);
   $$1 = $first;
   STACKTOP = sp;
   return $$1 | 0;
  } else if ((label | 0) == 34) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 53) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 81) {
   $$pre40 = HEAP8[$args >> 0] | 0;
   $236 = $t$065 + 1 | 0;
   if (!($$pre40 & 1)) {
    $244 = $$pre40;
    $289 = $236;
    label = 83;
    break;
   }
   $246 = HEAP32[$args + 4 >> 2] | 0;
   $248 = HEAP32[$args + 8 >> 2] | 0;
   $290 = $236;
   break;
  }
 } while (0);
 if ((label | 0) == 83) {
  $246 = ($244 & 255) >>> 1;
  $248 = $23;
  $290 = $289;
 }
 if ((HEAP8[$248 + ($246 + -1) >> 0] | 0) == 62) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($args, 61024, 2) | 0; else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($args, 59032, 1) | 0;
 $251 = HEAP8[$args >> 0] | 0;
 $252 = $args + 1 | 0;
 HEAP8[$$sroa$5 + 0 >> 0] = HEAP8[$252 + 0 >> 0] | 0;
 HEAP8[$$sroa$5 + 1 >> 0] = HEAP8[$252 + 1 >> 0] | 0;
 HEAP8[$$sroa$5 + 2 >> 0] = HEAP8[$252 + 2 >> 0] | 0;
 HEAP8[$$sroa$5 + 3 >> 0] = HEAP8[$252 + 3 >> 0] | 0;
 HEAP8[$$sroa$5 + 4 >> 0] = HEAP8[$252 + 4 >> 0] | 0;
 HEAP8[$$sroa$5 + 5 >> 0] = HEAP8[$252 + 5 >> 0] | 0;
 HEAP8[$$sroa$5 + 6 >> 0] = HEAP8[$252 + 6 >> 0] | 0;
 $254 = HEAP32[$args + 8 >> 2] | 0;
 HEAP32[$args + 0 >> 2] = 0;
 HEAP32[$args + 4 >> 2] = 0;
 HEAP32[$args + 8 >> 2] = 0;
 HEAP8[$1 >> 0] = $251;
 $255 = $1 + 1 | 0;
 HEAP8[$255 + 0 >> 0] = HEAP8[$$sroa$5 + 0 >> 0] | 0;
 HEAP8[$255 + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0;
 HEAP8[$255 + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0;
 HEAP8[$255 + 3 >> 0] = HEAP8[$$sroa$5 + 3 >> 0] | 0;
 HEAP8[$255 + 4 >> 0] = HEAP8[$$sroa$5 + 4 >> 0] | 0;
 HEAP8[$255 + 5 >> 0] = HEAP8[$$sroa$5 + 5 >> 0] | 0;
 HEAP8[$255 + 6 >> 0] = HEAP8[$$sroa$5 + 6 >> 0] | 0;
 HEAP32[$1 + 8 >> 2] = $254;
 HEAP8[$$sroa$5 + 0 >> 0] = 0;
 HEAP8[$$sroa$5 + 1 >> 0] = 0;
 HEAP8[$$sroa$5 + 2 >> 0] = 0;
 HEAP8[$$sroa$5 + 3 >> 0] = 0;
 HEAP8[$$sroa$5 + 4 >> 0] = 0;
 HEAP8[$$sroa$5 + 5 >> 0] = 0;
 HEAP8[$$sroa$5 + 6 >> 0] = 0;
 $257 = $1 + 12 | 0;
 HEAP32[$257 + 0 >> 2] = 0;
 HEAP32[$257 + 4 >> 2] = 0;
 HEAP32[$257 + 8 >> 2] = 0;
 $258 = $db + 4 | 0;
 $259 = HEAP32[$258 >> 2] | 0;
 $261 = HEAP32[$db + 8 >> 2] | 0;
 if ($259 >>> 0 < $261 >>> 0) {
  if (!$259) $266 = 0; else {
   HEAP32[$259 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$259 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$259 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 0 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   $264 = $259 + 12 | 0;
   HEAP32[$264 + 0 >> 2] = HEAP32[$257 + 0 >> 2];
   HEAP32[$264 + 4 >> 2] = HEAP32[$257 + 4 >> 2];
   HEAP32[$264 + 8 >> 2] = HEAP32[$257 + 8 >> 2];
   HEAP32[$257 + 0 >> 2] = 0;
   HEAP32[$257 + 4 >> 2] = 0;
   HEAP32[$257 + 8 >> 2] = 0;
   $266 = HEAP32[$258 >> 2] | 0;
  }
  HEAP32[$258 >> 2] = $266 + 24;
 } else {
  $270 = HEAP32[$db >> 2] | 0;
  $272 = ($259 - $270 | 0) / 24 | 0;
  $273 = $272 + 1 | 0;
  if (($273 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
  $277 = ($261 - $270 | 0) / 24 | 0;
  if ($277 >>> 0 < 1073741823) {
   $279 = $277 << 1;
   $$0$i$i$i25 = $279 >>> 0 < $273 >>> 0 ? $273 : $279;
  } else $$0$i$i$i25 = 2147483647;
  __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i23, $$0$i$i$i25, $272, $db + 12 | 0);
  $282 = $__v$i$i23 + 8 | 0;
  $283 = HEAP32[$282 >> 2] | 0;
  if ($283) {
   HEAP32[$283 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$283 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$283 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 0 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   $285 = $283 + 12 | 0;
   HEAP32[$285 + 0 >> 2] = HEAP32[$257 + 0 >> 2];
   HEAP32[$285 + 4 >> 2] = HEAP32[$257 + 4 >> 2];
   HEAP32[$285 + 8 >> 2] = HEAP32[$257 + 8 >> 2];
   HEAP32[$257 + 0 >> 2] = 0;
   HEAP32[$257 + 4 >> 2] = 0;
   HEAP32[$257 + 8 >> 2] = 0;
  }
  HEAP32[$282 >> 2] = $283 + 24;
  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i23);
  __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i23);
 }
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
 if (!(HEAP8[$args >> 0] & 1)) {
  $$1 = $290;
  STACKTOP = sp;
  return $$1 | 0;
 }
 _free(HEAP32[$args + 8 >> 2] | 0);
 $$1 = $290;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i$i23 = 0, $$0$i$i$i$i1$i = 0, $$0$i$i$i$i1$i33 = 0, $$0$i$i$i31 = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i$i29 = 0, $$0$i$i1$i$i7$i = 0, $$0$i$i1$i$i7$i39 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i3$i$i9$i = 0, $$pre$i3$i$i915$i = 0, $$sroa$092$0 = 0, $$sroa$092$2 = 0, $1 = 0, $106 = 0, $109 = 0, $11 = 0, $12 = 0, $121 = 0, $131 = 0, $133 = 0, $14 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $156 = 0, $159 = 0, $16 = 0, $17 = 0, $171 = 0, $183 = 0, $184 = 0, $185 = 0, $189 = 0, $190 = 0, $198 = 0, $2 = 0, $206 = 0, $208 = 0, $212 = 0, $214 = 0, $229 = 0, $230 = 0, $239 = 0, $240 = 0, $248 = 0, $251 = 0, $255 = 0, $258 = 0, $269 = 0, $27 = 0, $270 = 0, $275 = 0, $281 = 0, $282 = 0, $285 = 0, $297 = 0, $3 = 0, $309 = 0, $31 = 0, $311 = 0, $327 = 0, $328 = 0, $329 = 0, $338 = 0, $34 = 0, $340 = 0, $352 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $4 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $64 = 0, $65 = 0, $7 = 0, $72 = 0, $73 = 0, $8 = 0, $81 = 0, $82 = 0, $89 = 0, $9 = 0, $90 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $$byval_copy1 = sp + 36 | 0;
 $$byval_copy = sp + 16 | 0;
 $1 = sp;
 $2 = sp + 28 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 HEAP32[$__err >> 2] = 0;
 $11 = HEAP32[$__iob + 28 >> 2] | 0;
 $12 = $11 + 4 | 0;
 HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 $14 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $15 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$11 + 8 >> 2] | 0, HEAP32[$11 + 12 >> 2] | 0, $14) | 0;
 $16 = $11 + 4 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 HEAP32[$16 >> 2] = $17 + -1;
 if (!$17) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] & 127]($11);
 L4 : do switch ($__fmt << 24 >> 24 | 0) {
 case 112:
  {
   $183 = $__tm + 8 | 0;
   $184 = HEAP32[$__e >> 2] | 0;
   $185 = $this + 8 | 0;
   $189 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$185 >> 2] | 0) + 8 >> 2] & 127]($185) | 0;
   $190 = HEAP8[$189 >> 0] | 0;
   if (!($190 & 1)) $208 = ($190 & 255) >>> 1; else $208 = HEAP32[$189 + 4 >> 2] | 0;
   $198 = HEAP8[$189 + 12 >> 0] | 0;
   if (!($198 & 1)) $206 = ($198 & 255) >>> 1; else $206 = HEAP32[$189 + 16 >> 2] | 0;
   if (($208 | 0) == (0 - $206 | 0)) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    break L4;
   }
   $212 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $184, $189, $189 + 24 | 0, $15, $__err, 0) | 0;
   $214 = HEAP32[$183 >> 2] | 0;
   if (($212 | 0) == ($189 | 0) & ($214 | 0) == 12) {
    HEAP32[$183 >> 2] = 0;
    break L4;
   }
   if (($212 - $189 | 0) == 12 & ($214 | 0) < 12) HEAP32[$183 >> 2] = $214 + 12;
   break;
  }
 case 83:
  {
   $229 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 2) | 0;
   $230 = HEAP32[$__err >> 2] | 0;
   if (($230 & 4 | 0) == 0 & ($229 | 0) < 61) {
    HEAP32[$__tm >> 2] = $229;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $230 | 4;
    break L4;
   }
   break;
  }
 case 77:
  {
   $98 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 2) | 0;
   $99 = HEAP32[$__err >> 2] | 0;
   if (($99 & 4 | 0) == 0 & ($98 | 0) < 60) {
    HEAP32[$__tm + 4 >> 2] = $98;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $99 | 4;
    break L4;
   }
   break;
  }
 case 70:
  {
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($3, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 49968, 5e4 | 0);
   HEAP32[$__b >> 2] = HEAP32[$3 >> 2];
   break;
  }
 case 99:
  {
   $27 = $this + 8 | 0;
   $31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 12 >> 2] & 127]($27) | 0;
   $34 = HEAP8[$31 >> 0] | 0;
   if (!($34 & 1)) {
    $45 = $31 + 4 | 0;
    $46 = ($34 & 255) >>> 1;
   } else {
    $45 = HEAP32[$31 + 8 >> 2] | 0;
    $46 = HEAP32[$31 + 4 >> 2] | 0;
   }
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($1, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, $45, $45 + ($46 << 2) | 0);
   HEAP32[$__b >> 2] = HEAP32[$1 >> 2];
   break;
  }
 case 101:
 case 100:
  {
   $49 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 2) | 0;
   $50 = HEAP32[$__err >> 2] | 0;
   if (($50 & 4 | 0) == 0 & ($49 | 0) > 0 & ($49 | 0) < 32) {
    HEAP32[$__tm + 12 >> 2] = $49;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $50 | 4;
    break L4;
   }
   break;
  }
 case 116:
 case 110:
  {
   $$sroa$092$0 = HEAP32[$__e >> 2] | 0;
   while (1) {
    $106 = HEAP32[$__b >> 2] | 0;
    do if (!$106) $367 = 1; else {
     $109 = HEAP32[$106 + 12 >> 2] | 0;
     if (($109 | 0) == (HEAP32[$106 + 16 >> 2] | 0)) $$0$i$i$i$i$i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$106 >> 2] | 0) + 36 >> 2] & 127]($106) | 0; else $$0$i$i$i$i$i23 = HEAP32[$109 >> 2] | 0;
     if (($$0$i$i$i$i$i23 | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $367 = 1;
      break;
     } else {
      $367 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    if (!$$sroa$092$0) label = 43; else {
     $121 = HEAP32[$$sroa$092$0 + 12 >> 2] | 0;
     if (($121 | 0) == (HEAP32[$$sroa$092$0 + 16 >> 2] | 0)) $$0$i$i1$i$i$i29 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$092$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$092$0) | 0; else $$0$i$i1$i$i$i29 = HEAP32[$121 >> 2] | 0;
     if (($$0$i$i1$i$i$i29 | 0) == -1) label = 43; else if ($367) $$sroa$092$2 = $$sroa$092$0; else {
      $$pre$i3$i$i9$i = $$sroa$092$0;
      break;
     }
    }
    if ((label | 0) == 43) {
     label = 0;
     if ($367) {
      $$pre$i3$i$i9$i = 0;
      break;
     } else $$sroa$092$2 = 0;
    }
    $131 = HEAP32[$__b >> 2] | 0;
    $133 = HEAP32[$131 + 12 >> 2] | 0;
    if (($133 | 0) == (HEAP32[$131 + 16 >> 2] | 0)) $$0$i$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$131 >> 2] | 0) + 36 >> 2] & 127]($131) | 0; else $$0$i$i$i31 = HEAP32[$133 >> 2] | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 12 >> 2] & 31]($15, 8192, $$0$i$i$i31) | 0)) {
     $$pre$i3$i$i9$i = $$sroa$092$2;
     break;
    }
    $146 = HEAP32[$__b >> 2] | 0;
    $147 = $146 + 12 | 0;
    $148 = HEAP32[$147 >> 2] | 0;
    if (($148 | 0) == (HEAP32[$146 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$146 >> 2] | 0) + 40 >> 2] & 127]($146) | 0;
     $$sroa$092$0 = $$sroa$092$2;
     continue;
    } else {
     HEAP32[$147 >> 2] = $148 + 4;
     $$sroa$092$0 = $$sroa$092$2;
     continue;
    }
   }
   $156 = HEAP32[$__b >> 2] | 0;
   do if (!$156) $368 = 1; else {
    $159 = HEAP32[$156 + 12 >> 2] | 0;
    if (($159 | 0) == (HEAP32[$156 + 16 >> 2] | 0)) $$0$i$i$i$i1$i33 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$156 >> 2] | 0) + 36 >> 2] & 127]($156) | 0; else $$0$i$i$i$i1$i33 = HEAP32[$159 >> 2] | 0;
    if (($$0$i$i$i$i1$i33 | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $368 = 1;
     break;
    } else {
     $368 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } while (0);
   if (!$$pre$i3$i$i9$i) label = 64; else {
    $171 = HEAP32[$$pre$i3$i$i9$i + 12 >> 2] | 0;
    if (($171 | 0) == (HEAP32[$$pre$i3$i$i9$i + 16 >> 2] | 0)) $$0$i$i1$i$i7$i39 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i9$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i9$i) | 0; else $$0$i$i1$i$i7$i39 = HEAP32[$171 >> 2] | 0;
    if (($$0$i$i1$i$i7$i39 | 0) == -1) label = 64; else if ($368) break L4;
   }
   if ((label | 0) == 64) if (!$368) break L4;
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   break;
  }
 case 68:
  {
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($2, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 49936, 49968 | 0);
   HEAP32[$__b >> 2] = HEAP32[$2 >> 2];
   break;
  }
 case 72:
  {
   $64 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 2) | 0;
   $65 = HEAP32[$__err >> 2] | 0;
   if (($65 & 4 | 0) == 0 & ($64 | 0) < 24) {
    HEAP32[$__tm + 8 >> 2] = $64;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $65 | 4;
    break L4;
   }
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $15);
   break;
  }
 case 84:
  {
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($6, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 50072, 50104 | 0);
   HEAP32[$__b >> 2] = HEAP32[$6 >> 2];
   break;
  }
 case 119:
  {
   $239 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 1) | 0;
   $240 = HEAP32[$__err >> 2] | 0;
   if (($240 & 4 | 0) == 0 & ($239 | 0) < 7) {
    HEAP32[$__tm + 24 >> 2] = $239;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $240 | 4;
    break L4;
   }
   break;
  }
 case 114:
  {
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 5e4, 50044 | 0);
   HEAP32[$__b >> 2] = HEAP32[$4 >> 2];
   break;
  }
 case 73:
  {
   $72 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 2) | 0;
   $73 = HEAP32[$__err >> 2] | 0;
   if (($73 & 4 | 0) == 0 & ($72 | 0) > 0 & ($72 | 0) < 13) {
    HEAP32[$__tm + 8 >> 2] = $72;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $73 | 4;
    break L4;
   }
   break;
  }
 case 106:
  {
   $81 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 3) | 0;
   $82 = HEAP32[$__err >> 2] | 0;
   if (($82 & 4 | 0) == 0 & ($81 | 0) < 366) {
    HEAP32[$__tm + 28 >> 2] = $81;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $82 | 4;
    break L4;
   }
   break;
  }
 case 109:
  {
   $89 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 2) | 0;
   $90 = HEAP32[$__err >> 2] | 0;
   if (($90 & 4 | 0) == 0 & ($89 | 0) < 13) {
    HEAP32[$__tm + 16 >> 2] = $89 + -1;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $90 | 4;
    break L4;
   }
   break;
  }
 case 65:
 case 97:
  {
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $15);
   break;
  }
 case 82:
  {
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($5, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 50048, 50068 | 0);
   HEAP32[$__b >> 2] = HEAP32[$5 >> 2];
   break;
  }
 case 120:
  {
   $248 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$7 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$8 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$7 + 0 >> 2];
   HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$8 + 0 >> 2];
   FUNCTION_TABLE_viiiiiii[$248 & 63]($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm);
   STACKTOP = sp;
   return;
  }
 case 88:
  {
   $251 = $this + 8 | 0;
   $255 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$251 >> 2] | 0) + 24 >> 2] & 127]($251) | 0;
   $258 = HEAP8[$255 >> 0] | 0;
   if (!($258 & 1)) {
    $269 = $255 + 4 | 0;
    $270 = ($258 & 255) >>> 1;
   } else {
    $269 = HEAP32[$255 + 8 >> 2] | 0;
    $270 = HEAP32[$255 + 4 >> 2] | 0;
   }
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($9, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, $269, $269 + ($270 << 2) | 0);
   HEAP32[$__b >> 2] = HEAP32[$9 >> 2];
   break;
  }
 case 121:
  {
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($__tm + 20 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $15);
   break;
  }
 case 89:
  {
   $275 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 4) | 0;
   if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__tm + 20 >> 2] = $275 + -1900;
   break;
  }
 case 37:
  {
   $281 = HEAP32[$__e >> 2] | 0;
   $282 = HEAP32[$__b >> 2] | 0;
   do if (!$282) $369 = 1; else {
    $285 = HEAP32[$282 + 12 >> 2] | 0;
    if (($285 | 0) == (HEAP32[$282 + 16 >> 2] | 0)) $$0$i$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$282 >> 2] | 0) + 36 >> 2] & 127]($282) | 0; else $$0$i$i$i$i$i = HEAP32[$285 >> 2] | 0;
    if (($$0$i$i$i$i$i | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $369 = 1;
     break;
    } else {
     $369 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } while (0);
   if (!$281) label = 108; else {
    $297 = HEAP32[$281 + 12 >> 2] | 0;
    if (($297 | 0) == (HEAP32[$281 + 16 >> 2] | 0)) $$0$i$i1$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$281 >> 2] | 0) + 36 >> 2] & 127]($281) | 0; else $$0$i$i1$i$i$i = HEAP32[$297 >> 2] | 0;
    if (($$0$i$i1$i$i$i | 0) == -1) label = 108; else if ($369) $$pre$i3$i$i915$i = $281; else label = 110;
   }
   if ((label | 0) == 108) if ($369) label = 110; else $$pre$i3$i$i915$i = 0;
   if ((label | 0) == 110) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
    break L4;
   }
   $309 = HEAP32[$__b >> 2] | 0;
   $311 = HEAP32[$309 + 12 >> 2] | 0;
   if (($311 | 0) == (HEAP32[$309 + 16 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$309 >> 2] | 0) + 36 >> 2] & 127]($309) | 0; else $$0$i$i$i = HEAP32[$311 >> 2] | 0;
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 52 >> 2] & 31]($15, $$0$i$i$i, 0) | 0) << 24 >> 24 != 37) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    break L4;
   }
   $327 = HEAP32[$__b >> 2] | 0;
   $328 = $327 + 12 | 0;
   $329 = HEAP32[$328 >> 2] | 0;
   if (($329 | 0) == (HEAP32[$327 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[$327 >> 2] | 0) + 40 >> 2] & 127]($327) | 0;
    $338 = HEAP32[$__b >> 2] | 0;
   } else {
    HEAP32[$328 >> 2] = $329 + 4;
    $338 = $327;
   }
   do if (!$338) $370 = 1; else {
    $340 = HEAP32[$338 + 12 >> 2] | 0;
    if (($340 | 0) == (HEAP32[$338 + 16 >> 2] | 0)) $$0$i$i$i$i1$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$338 >> 2] | 0) + 36 >> 2] & 127]($338) | 0; else $$0$i$i$i$i1$i = HEAP32[$340 >> 2] | 0;
    if (($$0$i$i$i$i1$i | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $370 = 1;
     break;
    } else {
     $370 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } while (0);
   if (!$$pre$i3$i$i915$i) label = 131; else {
    $352 = HEAP32[$$pre$i3$i$i915$i + 12 >> 2] | 0;
    if (($352 | 0) == (HEAP32[$$pre$i3$i$i915$i + 16 >> 2] | 0)) $$0$i$i1$i$i7$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i915$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i915$i) | 0; else $$0$i$i1$i$i7$i = HEAP32[$352 >> 2] | 0;
    if (($$0$i$i1$i$i7$i | 0) == -1) label = 131; else if ($370) break L4;
   }
   if ((label | 0) == 131) if (!$370) break L4;
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   break;
  }
 default:
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
 } while (0);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i28 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i2$i$i6$i = 0, $$pre$i2$i$i611$i = 0, $$sroa$086$0 = 0, $$sroa$086$2 = 0, $1 = 0, $106 = 0, $107 = 0, $11 = 0, $119 = 0, $12 = 0, $120 = 0, $132 = 0, $134 = 0, $14 = 0, $15 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $161 = 0, $17 = 0, $173 = 0, $174 = 0, $188 = 0, $189 = 0, $190 = 0, $194 = 0, $195 = 0, $2 = 0, $203 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $234 = 0, $235 = 0, $244 = 0, $245 = 0, $253 = 0, $256 = 0, $260 = 0, $263 = 0, $27 = 0, $274 = 0, $275 = 0, $280 = 0, $286 = 0, $287 = 0, $299 = 0, $3 = 0, $300 = 0, $31 = 0, $314 = 0, $316 = 0, $334 = 0, $335 = 0, $336 = 0, $34 = 0, $345 = 0, $356 = 0, $357 = 0, $4 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $64 = 0, $65 = 0, $7 = 0, $72 = 0, $73 = 0, $8 = 0, $81 = 0, $82 = 0, $89 = 0, $9 = 0, $90 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $$byval_copy1 = sp + 36 | 0;
 $$byval_copy = sp + 16 | 0;
 $1 = sp;
 $2 = sp + 28 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 HEAP32[$__err >> 2] = 0;
 $11 = HEAP32[$__iob + 28 >> 2] | 0;
 $12 = $11 + 4 | 0;
 HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 $14 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $15 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$11 + 8 >> 2] | 0, HEAP32[$11 + 12 >> 2] | 0, $14) | 0;
 $16 = $11 + 4 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 HEAP32[$16 >> 2] = $17 + -1;
 if (!$17) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] & 127]($11);
 L4 : do switch ($__fmt << 24 >> 24 | 0) {
 case 109:
  {
   $89 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 2) | 0;
   $90 = HEAP32[$__err >> 2] | 0;
   if (($90 & 4 | 0) == 0 & ($89 | 0) < 13) {
    HEAP32[$__tm + 16 >> 2] = $89 + -1;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $90 | 4;
    break L4;
   }
   break;
  }
 case 73:
  {
   $72 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 2) | 0;
   $73 = HEAP32[$__err >> 2] | 0;
   if (($73 & 4 | 0) == 0 & ($72 | 0) > 0 & ($72 | 0) < 13) {
    HEAP32[$__tm + 8 >> 2] = $72;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $73 | 4;
    break L4;
   }
   break;
  }
 case 106:
  {
   $81 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 3) | 0;
   $82 = HEAP32[$__err >> 2] | 0;
   if (($82 & 4 | 0) == 0 & ($81 | 0) < 366) {
    HEAP32[$__tm + 28 >> 2] = $81;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $82 | 4;
    break L4;
   }
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $15);
   break;
  }
 case 70:
  {
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($3, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 49768, 49776 | 0);
   HEAP32[$__b >> 2] = HEAP32[$3 >> 2];
   break;
  }
 case 68:
  {
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($2, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 49760, 49768 | 0);
   HEAP32[$__b >> 2] = HEAP32[$2 >> 2];
   break;
  }
 case 77:
  {
   $98 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 2) | 0;
   $99 = HEAP32[$__err >> 2] | 0;
   if (($99 & 4 | 0) == 0 & ($98 | 0) < 60) {
    HEAP32[$__tm + 4 >> 2] = $98;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $99 | 4;
    break L4;
   }
   break;
  }
 case 99:
  {
   $27 = $this + 8 | 0;
   $31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 12 >> 2] & 127]($27) | 0;
   $34 = HEAP8[$31 >> 0] | 0;
   if (!($34 & 1)) {
    $45 = $31 + 1 | 0;
    $46 = ($34 & 255) >>> 1;
   } else {
    $45 = HEAP32[$31 + 8 >> 2] | 0;
    $46 = HEAP32[$31 + 4 >> 2] | 0;
   }
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($1, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, $45, $45 + $46 | 0);
   HEAP32[$__b >> 2] = HEAP32[$1 >> 2];
   break;
  }
 case 72:
  {
   $64 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 2) | 0;
   $65 = HEAP32[$__err >> 2] | 0;
   if (($65 & 4 | 0) == 0 & ($64 | 0) < 24) {
    HEAP32[$__tm + 8 >> 2] = $64;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $65 | 4;
    break L4;
   }
   break;
  }
 case 121:
  {
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($__tm + 20 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $15);
   break;
  }
 case 89:
  {
   $280 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 4) | 0;
   if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__tm + 20 >> 2] = $280 + -1900;
   break;
  }
 case 37:
  {
   $286 = HEAP32[$__e >> 2] | 0;
   $287 = HEAP32[$__b >> 2] | 0;
   do if (!$287) $300 = 0; else if ((HEAP32[$287 + 12 >> 2] | 0) == (HEAP32[$287 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$287 >> 2] | 0) + 36 >> 2] & 127]($287) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $300 = 0;
    break;
   } else {
    $300 = HEAP32[$__b >> 2] | 0;
    break;
   } else $300 = $287; while (0);
   $299 = ($300 | 0) == 0;
   do if (!$286) label = 99; else {
    if ((HEAP32[$286 + 12 >> 2] | 0) == (HEAP32[$286 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$286 >> 2] | 0) + 36 >> 2] & 127]($286) | 0) == -1) {
     label = 99;
     break;
    }
    if ($299) $$pre$i2$i$i611$i = $286; else label = 100;
   } while (0);
   if ((label | 0) == 99) if ($299) label = 100; else $$pre$i2$i$i611$i = 0;
   if ((label | 0) == 100) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
    break L4;
   }
   $314 = HEAP32[$__b >> 2] | 0;
   $316 = HEAP32[$314 + 12 >> 2] | 0;
   if (($316 | 0) == (HEAP32[$314 + 16 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$314 >> 2] | 0) + 36 >> 2] & 127]($314) | 0; else $$0$i$i$i = HEAPU8[$316 >> 0] | 0;
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 36 >> 2] & 31]($15, $$0$i$i$i & 255, 0) | 0) << 24 >> 24 != 37) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    break L4;
   }
   $334 = HEAP32[$__b >> 2] | 0;
   $335 = $334 + 12 | 0;
   $336 = HEAP32[$335 >> 2] | 0;
   if (($336 | 0) == (HEAP32[$334 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[$334 >> 2] | 0) + 40 >> 2] & 127]($334) | 0;
    $345 = HEAP32[$__b >> 2] | 0;
   } else {
    HEAP32[$335 >> 2] = $336 + 1;
    $345 = $334;
   }
   do if (!$345) $357 = 0; else if ((HEAP32[$345 + 12 >> 2] | 0) == (HEAP32[$345 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$345 >> 2] | 0) + 36 >> 2] & 127]($345) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $357 = 0;
    break;
   } else {
    $357 = HEAP32[$__b >> 2] | 0;
    break;
   } else $357 = $345; while (0);
   $356 = ($357 | 0) == 0;
   do if (!$$pre$i2$i$i611$i) label = 118; else {
    if ((HEAP32[$$pre$i2$i$i611$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i611$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i611$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i611$i) | 0) == -1) {
     label = 118;
     break;
    }
    if ($356) break L4;
   } while (0);
   if ((label | 0) == 118) if (!$356) break L4;
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   break;
  }
 case 116:
 case 110:
  {
   $106 = $15 + 8 | 0;
   $$sroa$086$0 = HEAP32[$__e >> 2] | 0;
   L81 : while (1) {
    $107 = HEAP32[$__b >> 2] | 0;
    do if (!$107) $120 = 0; else if ((HEAP32[$107 + 12 >> 2] | 0) == (HEAP32[$107 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$107 >> 2] | 0) + 36 >> 2] & 127]($107) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $120 = 0;
     break;
    } else {
     $120 = HEAP32[$__b >> 2] | 0;
     break;
    } else $120 = $107; while (0);
    $119 = ($120 | 0) == 0;
    do if (!$$sroa$086$0) label = 40; else {
     if ((HEAP32[$$sroa$086$0 + 12 >> 2] | 0) != (HEAP32[$$sroa$086$0 + 16 >> 2] | 0)) if ($119) {
      $$sroa$086$2 = $$sroa$086$0;
      break;
     } else {
      $$pre$i2$i$i6$i = $$sroa$086$0;
      break L81;
     }
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$086$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$086$0) | 0) == -1) label = 40; else if ($119) $$sroa$086$2 = $$sroa$086$0; else {
      $$pre$i2$i$i6$i = $$sroa$086$0;
      break L81;
     }
    } while (0);
    if ((label | 0) == 40) {
     label = 0;
     if ($119) {
      $$pre$i2$i$i6$i = 0;
      break;
     } else $$sroa$086$2 = 0;
    }
    $132 = HEAP32[$__b >> 2] | 0;
    $134 = HEAP32[$132 + 12 >> 2] | 0;
    if (($134 | 0) == (HEAP32[$132 + 16 >> 2] | 0)) $$0$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$132 >> 2] | 0) + 36 >> 2] & 127]($132) | 0; else $$0$i$i$i28 = HEAPU8[$134 >> 0] | 0;
    if (($$0$i$i$i28 & 255) << 24 >> 24 <= -1) {
     $$pre$i2$i$i6$i = $$sroa$086$2;
     break;
    }
    if (!(HEAP16[(HEAP32[$106 >> 2] | 0) + ($$0$i$i$i28 << 24 >> 24 << 1) >> 1] & 8192)) {
     $$pre$i2$i$i6$i = $$sroa$086$2;
     break;
    }
    $151 = HEAP32[$__b >> 2] | 0;
    $152 = $151 + 12 | 0;
    $153 = HEAP32[$152 >> 2] | 0;
    if (($153 | 0) == (HEAP32[$151 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$151 >> 2] | 0) + 40 >> 2] & 127]($151) | 0;
     $$sroa$086$0 = $$sroa$086$2;
     continue;
    } else {
     HEAP32[$152 >> 2] = $153 + 1;
     $$sroa$086$0 = $$sroa$086$2;
     continue;
    }
   }
   $161 = HEAP32[$__b >> 2] | 0;
   do if (!$161) $174 = 0; else if ((HEAP32[$161 + 12 >> 2] | 0) == (HEAP32[$161 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$161 >> 2] | 0) + 36 >> 2] & 127]($161) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $174 = 0;
    break;
   } else {
    $174 = HEAP32[$__b >> 2] | 0;
    break;
   } else $174 = $161; while (0);
   $173 = ($174 | 0) == 0;
   do if (!$$pre$i2$i$i6$i) label = 59; else {
    if ((HEAP32[$$pre$i2$i$i6$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i6$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i6$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i6$i) | 0) == -1) {
     label = 59;
     break;
    }
    if ($173) break L4;
   } while (0);
   if ((label | 0) == 59) if (!$173) break L4;
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   break;
  }
 case 65:
 case 97:
  {
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $15);
   break;
  }
 case 101:
 case 100:
  {
   $49 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 2) | 0;
   $50 = HEAP32[$__err >> 2] | 0;
   if (($50 & 4 | 0) == 0 & ($49 | 0) > 0 & ($49 | 0) < 32) {
    HEAP32[$__tm + 12 >> 2] = $49;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $50 | 4;
    break L4;
   }
   break;
  }
 case 112:
  {
   $188 = $__tm + 8 | 0;
   $189 = HEAP32[$__e >> 2] | 0;
   $190 = $this + 8 | 0;
   $194 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$190 >> 2] | 0) + 8 >> 2] & 127]($190) | 0;
   $195 = HEAP8[$194 >> 0] | 0;
   if (!($195 & 1)) $213 = ($195 & 255) >>> 1; else $213 = HEAP32[$194 + 4 >> 2] | 0;
   $203 = HEAP8[$194 + 12 >> 0] | 0;
   if (!($203 & 1)) $211 = ($203 & 255) >>> 1; else $211 = HEAP32[$194 + 16 >> 2] | 0;
   if (($213 | 0) == (0 - $211 | 0)) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    break L4;
   }
   $217 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $189, $194, $194 + 24 | 0, $15, $__err, 0) | 0;
   $219 = HEAP32[$188 >> 2] | 0;
   if (($217 | 0) == ($194 | 0) & ($219 | 0) == 12) {
    HEAP32[$188 >> 2] = 0;
    break L4;
   }
   if (($217 - $194 | 0) == 12 & ($219 | 0) < 12) HEAP32[$188 >> 2] = $219 + 12;
   break;
  }
 case 114:
  {
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 49776, 49787 | 0);
   HEAP32[$__b >> 2] = HEAP32[$4 >> 2];
   break;
  }
 case 82:
  {
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($5, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 49792, 49797 | 0);
   HEAP32[$__b >> 2] = HEAP32[$5 >> 2];
   break;
  }
 case 83:
  {
   $234 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 2) | 0;
   $235 = HEAP32[$__err >> 2] | 0;
   if (($235 & 4 | 0) == 0 & ($234 | 0) < 61) {
    HEAP32[$__tm >> 2] = $234;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $235 | 4;
    break L4;
   }
   break;
  }
 case 84:
  {
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($6, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 49800, 49808 | 0);
   HEAP32[$__b >> 2] = HEAP32[$6 >> 2];
   break;
  }
 case 119:
  {
   $244 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2] | 0, $__err, $15, 1) | 0;
   $245 = HEAP32[$__err >> 2] | 0;
   if (($245 & 4 | 0) == 0 & ($244 | 0) < 7) {
    HEAP32[$__tm + 24 >> 2] = $244;
    break L4;
   } else {
    HEAP32[$__err >> 2] = $245 | 4;
    break L4;
   }
   break;
  }
 case 120:
  {
   $253 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$7 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$8 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$7 + 0 >> 2];
   HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$8 + 0 >> 2];
   FUNCTION_TABLE_viiiiiii[$253 & 63]($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm);
   STACKTOP = sp;
   return;
  }
 case 88:
  {
   $256 = $this + 8 | 0;
   $260 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$256 >> 2] | 0) + 24 >> 2] & 127]($256) | 0;
   $263 = HEAP8[$260 >> 0] | 0;
   if (!($263 & 1)) {
    $274 = $260 + 1 | 0;
    $275 = ($263 & 255) >>> 1;
   } else {
    $274 = HEAP32[$260 + 8 >> 2] | 0;
    $275 = HEAP32[$260 + 4 >> 2] | 0;
   }
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($9, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, $274, $274 + $275 | 0);
   HEAP32[$__b >> 2] = HEAP32[$9 >> 2];
   break;
  }
 default:
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
 } while (0);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i14 = 0, $$0$i$i$i23 = 0, $$0$i$i$i8 = 0, $$02$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $108 = 0, $110 = 0, $113 = 0, $114 = 0, $116 = 0, $121 = 0, $123 = 0, $127 = 0, $133 = 0, $135 = 0, $139 = 0, $146 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $159 = 0, $166 = 0, $167 = 0, $176 = 0, $18 = 0, $181 = 0, $182 = 0, $185 = 0, $188 = 0, $197 = 0, $198 = 0, $2 = 0, $210 = 0, $212 = 0, $219 = 0, $22 = 0, $220 = 0, $225 = 0, $226 = 0, $229 = 0, $230 = 0, $231 = 0, $233 = 0, $236 = 0, $238 = 0, $24 = 0, $242 = 0, $244 = 0, $245 = 0, $249 = 0, $251 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $35 = 0, $4 = 0, $42 = 0, $43 = 0, $52 = 0, $57 = 0, $58 = 0, $61 = 0, $64 = 0, $73 = 0, $74 = 0, $86 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $95 = 0, $97 = 0, $__p$0$lcssa$i$i = 0, $__p$0$ph$i$i = 0, $__p$01$i$i = 0, $__v$i$i19 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $sub$042 = 0, $t1$041 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $__v$i$i19 = sp + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 16 | 0;
 $2 = sp;
 $4 = $first;
 if (($last - $4 | 0) <= 1) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP8[$first >> 0] | 0) != 84) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $10 = HEAP8[$first + 1 >> 0] | 0;
 if ($10 << 24 >> 24 == 95) {
  $15 = HEAP32[$db + 36 >> 2] | 0;
  if ((HEAP32[$db + 32 >> 2] | 0) == ($15 | 0)) {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $18 = HEAP32[$15 + -16 >> 2] | 0;
  if (($18 | 0) == (HEAP32[$15 + -12 >> 2] | 0)) {
   HEAP8[$0 >> 0] = 4;
   $86 = $0 + 1 | 0;
   HEAP8[$86 >> 0] = 84;
   HEAP8[$86 + 1 >> 0] = 95;
   HEAP8[$0 + 3 >> 0] = 0;
   $88 = $0 + 12 | 0;
   HEAP32[$88 + 0 >> 2] = 0;
   HEAP32[$88 + 4 >> 2] = 0;
   HEAP32[$88 + 8 >> 2] = 0;
   $89 = $db + 4 | 0;
   $90 = HEAP32[$89 >> 2] | 0;
   $92 = HEAP32[$db + 8 >> 2] | 0;
   if ($90 >>> 0 < $92 >>> 0) {
    if (!$90) $97 = 0; else {
     HEAP32[$90 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
     HEAP32[$90 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
     HEAP32[$90 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
     HEAP32[$0 + 0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$0 + 8 >> 2] = 0;
     $95 = $90 + 12 | 0;
     HEAP32[$95 + 0 >> 2] = HEAP32[$88 + 0 >> 2];
     HEAP32[$95 + 4 >> 2] = HEAP32[$88 + 4 >> 2];
     HEAP32[$95 + 8 >> 2] = HEAP32[$88 + 8 >> 2];
     HEAP32[$88 + 0 >> 2] = 0;
     HEAP32[$88 + 4 >> 2] = 0;
     HEAP32[$88 + 8 >> 2] = 0;
     $97 = HEAP32[$89 >> 2] | 0;
    }
    HEAP32[$89 >> 2] = $97 + 24;
   } else {
    $101 = HEAP32[$db >> 2] | 0;
    $103 = ($90 - $101 | 0) / 24 | 0;
    $104 = $103 + 1 | 0;
    if (($104 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    $108 = ($92 - $101 | 0) / 24 | 0;
    if ($108 >>> 0 < 1073741823) {
     $110 = $108 << 1;
     $$0$i$i$i14 = $110 >>> 0 < $104 >>> 0 ? $104 : $110;
    } else $$0$i$i$i14 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i19, $$0$i$i$i14, $103, $db + 12 | 0);
    $113 = $__v$i$i19 + 8 | 0;
    $114 = HEAP32[$113 >> 2] | 0;
    if ($114) {
     HEAP32[$114 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
     HEAP32[$114 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
     HEAP32[$114 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
     HEAP32[$0 + 0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$0 + 8 >> 2] = 0;
     $116 = $114 + 12 | 0;
     HEAP32[$116 + 0 >> 2] = HEAP32[$88 + 0 >> 2];
     HEAP32[$116 + 4 >> 2] = HEAP32[$88 + 4 >> 2];
     HEAP32[$116 + 8 >> 2] = HEAP32[$88 + 8 >> 2];
     HEAP32[$88 + 0 >> 2] = 0;
     HEAP32[$88 + 4 >> 2] = 0;
     HEAP32[$88 + 8 >> 2] = 0;
    }
    HEAP32[$113 >> 2] = $114 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i19);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i19);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
   HEAP8[$db + 62 >> 0] = 1;
   $$0 = $first + 2 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $22 = HEAP32[$18 >> 2] | 0;
  $24 = HEAP32[$18 + 4 >> 2] | 0;
  L32 : do if (($22 | 0) != ($24 | 0)) {
   $26 = $db + 4 | 0;
   $27 = $db + 8 | 0;
   $28 = $db + 12 | 0;
   $29 = $__v$i$i19 + 8 | 0;
   $35 = $22;
   while (1) {
    $30 = HEAP32[$26 >> 2] | 0;
    if (($30 | 0) == (HEAP32[$27 >> 2] | 0)) {
     $57 = ($30 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     $58 = $57 + 1 | 0;
     if (($58 | 0) < 0) break;
     if ($57 >>> 0 < 1073741823) {
      $61 = $57 << 1;
      $$0$i$i$i8 = $61 >>> 0 < $58 >>> 0 ? $58 : $61;
     } else $$0$i$i$i8 = 2147483647;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i19, $$0$i$i$i8, $57, $28);
     $64 = HEAP32[$29 >> 2] | 0;
     do if ($64) {
      if (!(HEAP8[$35 >> 0] & 1)) {
       HEAP32[$64 + 0 >> 2] = HEAP32[$35 + 0 >> 2];
       HEAP32[$64 + 4 >> 2] = HEAP32[$35 + 4 >> 2];
       HEAP32[$64 + 8 >> 2] = HEAP32[$35 + 8 >> 2];
      } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($64, HEAP32[$35 + 8 >> 2] | 0, HEAP32[$35 + 4 >> 2] | 0);
      $73 = $64 + 12 | 0;
      $74 = $35 + 12 | 0;
      if (!(HEAP8[$74 >> 0] & 1)) {
       HEAP32[$73 + 0 >> 2] = HEAP32[$74 + 0 >> 2];
       HEAP32[$73 + 4 >> 2] = HEAP32[$74 + 4 >> 2];
       HEAP32[$73 + 8 >> 2] = HEAP32[$74 + 8 >> 2];
       break;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($73, HEAP32[$35 + 20 >> 2] | 0, HEAP32[$35 + 16 >> 2] | 0);
       break;
      }
     } while (0);
     HEAP32[$29 >> 2] = $64 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i19);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i19);
    } else {
     if (!$30) $52 = 0; else {
      if (!(HEAP8[$35 >> 0] & 1)) {
       HEAP32[$30 + 0 >> 2] = HEAP32[$35 + 0 >> 2];
       HEAP32[$30 + 4 >> 2] = HEAP32[$35 + 4 >> 2];
       HEAP32[$30 + 8 >> 2] = HEAP32[$35 + 8 >> 2];
      } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($30, HEAP32[$35 + 8 >> 2] | 0, HEAP32[$35 + 4 >> 2] | 0);
      $42 = $30 + 12 | 0;
      $43 = $35 + 12 | 0;
      if (!(HEAP8[$43 >> 0] & 1)) {
       HEAP32[$42 + 0 >> 2] = HEAP32[$43 + 0 >> 2];
       HEAP32[$42 + 4 >> 2] = HEAP32[$43 + 4 >> 2];
       HEAP32[$42 + 8 >> 2] = HEAP32[$43 + 8 >> 2];
      } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($42, HEAP32[$35 + 20 >> 2] | 0, HEAP32[$35 + 16 >> 2] | 0);
      $52 = HEAP32[$26 >> 2] | 0;
     }
     HEAP32[$26 >> 2] = $52 + 24;
    }
    $35 = $35 + 24 | 0;
    if (($35 | 0) == ($24 | 0)) break L32;
   }
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
  } while (0);
  $$0 = $first + 2 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $isdigittmp = ($10 << 24 >> 24) + -48 | 0;
 if ($isdigittmp >>> 0 >= 10) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $121 = $first + 2 | 0;
 if (($121 | 0) == ($last | 0)) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $sub$042 = $isdigittmp;
  $t1$041 = $121;
 }
 while (1) {
  $123 = HEAP8[$t1$041 >> 0] | 0;
  $isdigittmp4 = ($123 << 24 >> 24) + -48 | 0;
  if ($isdigittmp4 >>> 0 >= 10) break;
  $127 = $t1$041 + 1 | 0;
  if (($127 | 0) == ($last | 0)) {
   $$0 = $first;
   label = 98;
   break;
  } else {
   $sub$042 = $isdigittmp4 + ($sub$042 * 10 | 0) | 0;
   $t1$041 = $127;
  }
 }
 if ((label | 0) == 98) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($123 << 24 >> 24 != 95) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $133 = HEAP32[$db + 36 >> 2] | 0;
 if ((HEAP32[$db + 32 >> 2] | 0) == ($133 | 0)) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $135 = $sub$042 + 1 | 0;
 $139 = HEAP32[$133 + -16 >> 2] | 0;
 if ($135 >>> 0 >= (HEAP32[$133 + -12 >> 2] | 0) - $139 >> 4 >>> 0) {
  $210 = $t1$041 + 1 | 0;
  $212 = $210 - $4 | 0;
  if ($212 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($212 >>> 0 < 11) {
   HEAP8[$2 >> 0] = $212 << 1;
   $__p$0$ph$i$i = $2 + 1 | 0;
  } else {
   $219 = $212 + 16 & -16;
   $220 = _malloc($219) | 0;
   HEAP32[$2 + 8 >> 2] = $220;
   HEAP32[$2 >> 2] = $219 | 1;
   HEAP32[$2 + 4 >> 2] = $212;
   $__p$0$ph$i$i = $220;
  }
  if (($210 | 0) == ($first | 0)) $__p$0$lcssa$i$i = $__p$0$ph$i$i; else {
   $$02$i$i = $first;
   $225 = 84;
   $__p$01$i$i = $__p$0$ph$i$i;
   while (1) {
    HEAP8[$__p$01$i$i >> 0] = $225;
    $226 = $$02$i$i + 1 | 0;
    if (($$02$i$i | 0) == ($t1$041 | 0)) break;
    $$02$i$i = $226;
    $225 = HEAP8[$226 >> 0] | 0;
    $__p$01$i$i = $__p$01$i$i + 1 | 0;
   }
   $__p$0$lcssa$i$i = $__p$0$ph$i$i + $212 | 0;
  }
  HEAP8[$__p$0$lcssa$i$i >> 0] = 0;
  HEAP32[$1 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 0 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  $229 = $1 + 12 | 0;
  HEAP32[$229 + 0 >> 2] = 0;
  HEAP32[$229 + 4 >> 2] = 0;
  HEAP32[$229 + 8 >> 2] = 0;
  $230 = $db + 4 | 0;
  $231 = HEAP32[$230 >> 2] | 0;
  $233 = HEAP32[$db + 8 >> 2] | 0;
  if ($231 >>> 0 < $233 >>> 0) {
   if (!$231) $238 = 0; else {
    HEAP32[$231 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
    HEAP32[$231 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
    HEAP32[$231 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 0 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    $236 = $231 + 12 | 0;
    HEAP32[$236 + 0 >> 2] = HEAP32[$229 + 0 >> 2];
    HEAP32[$236 + 4 >> 2] = HEAP32[$229 + 4 >> 2];
    HEAP32[$236 + 8 >> 2] = HEAP32[$229 + 8 >> 2];
    HEAP32[$229 + 0 >> 2] = 0;
    HEAP32[$229 + 4 >> 2] = 0;
    HEAP32[$229 + 8 >> 2] = 0;
    $238 = HEAP32[$230 >> 2] | 0;
   }
   HEAP32[$230 >> 2] = $238 + 24;
  } else {
   $242 = HEAP32[$db >> 2] | 0;
   $244 = ($231 - $242 | 0) / 24 | 0;
   $245 = $244 + 1 | 0;
   if (($245 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   $249 = ($233 - $242 | 0) / 24 | 0;
   if ($249 >>> 0 < 1073741823) {
    $251 = $249 << 1;
    $$0$i$i$i = $251 >>> 0 < $245 >>> 0 ? $245 : $251;
   } else $$0$i$i$i = 2147483647;
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i19, $$0$i$i$i, $244, $db + 12 | 0);
   $254 = $__v$i$i19 + 8 | 0;
   $255 = HEAP32[$254 >> 2] | 0;
   if ($255) {
    HEAP32[$255 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
    HEAP32[$255 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
    HEAP32[$255 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 0 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    $257 = $255 + 12 | 0;
    HEAP32[$257 + 0 >> 2] = HEAP32[$229 + 0 >> 2];
    HEAP32[$257 + 4 >> 2] = HEAP32[$229 + 4 >> 2];
    HEAP32[$257 + 8 >> 2] = HEAP32[$229 + 8 >> 2];
    HEAP32[$229 + 0 >> 2] = 0;
    HEAP32[$229 + 4 >> 2] = 0;
    HEAP32[$229 + 8 >> 2] = 0;
   }
   HEAP32[$254 >> 2] = $255 + 24;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i19);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i19);
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
  HEAP8[$db + 62 >> 0] = 1;
  $$0 = $210;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $146 = HEAP32[$139 + ($135 << 4) >> 2] | 0;
 $148 = HEAP32[$139 + ($135 << 4) + 4 >> 2] | 0;
 L119 : do if (($146 | 0) != ($148 | 0)) {
  $150 = $db + 4 | 0;
  $151 = $db + 8 | 0;
  $152 = $db + 12 | 0;
  $153 = $__v$i$i19 + 8 | 0;
  $159 = $146;
  while (1) {
   $154 = HEAP32[$150 >> 2] | 0;
   if (($154 | 0) == (HEAP32[$151 >> 2] | 0)) {
    $181 = ($154 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
    $182 = $181 + 1 | 0;
    if (($182 | 0) < 0) break;
    if ($181 >>> 0 < 1073741823) {
     $185 = $181 << 1;
     $$0$i$i$i23 = $185 >>> 0 < $182 >>> 0 ? $182 : $185;
    } else $$0$i$i$i23 = 2147483647;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i19, $$0$i$i$i23, $181, $152);
    $188 = HEAP32[$153 >> 2] | 0;
    do if ($188) {
     if (!(HEAP8[$159 >> 0] & 1)) {
      HEAP32[$188 + 0 >> 2] = HEAP32[$159 + 0 >> 2];
      HEAP32[$188 + 4 >> 2] = HEAP32[$159 + 4 >> 2];
      HEAP32[$188 + 8 >> 2] = HEAP32[$159 + 8 >> 2];
     } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($188, HEAP32[$159 + 8 >> 2] | 0, HEAP32[$159 + 4 >> 2] | 0);
     $197 = $188 + 12 | 0;
     $198 = $159 + 12 | 0;
     if (!(HEAP8[$198 >> 0] & 1)) {
      HEAP32[$197 + 0 >> 2] = HEAP32[$198 + 0 >> 2];
      HEAP32[$197 + 4 >> 2] = HEAP32[$198 + 4 >> 2];
      HEAP32[$197 + 8 >> 2] = HEAP32[$198 + 8 >> 2];
      break;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($197, HEAP32[$159 + 20 >> 2] | 0, HEAP32[$159 + 16 >> 2] | 0);
      break;
     }
    } while (0);
    HEAP32[$153 >> 2] = $188 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i19);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i19);
   } else {
    if (!$154) $176 = 0; else {
     if (!(HEAP8[$159 >> 0] & 1)) {
      HEAP32[$154 + 0 >> 2] = HEAP32[$159 + 0 >> 2];
      HEAP32[$154 + 4 >> 2] = HEAP32[$159 + 4 >> 2];
      HEAP32[$154 + 8 >> 2] = HEAP32[$159 + 8 >> 2];
     } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($154, HEAP32[$159 + 8 >> 2] | 0, HEAP32[$159 + 4 >> 2] | 0);
     $166 = $154 + 12 | 0;
     $167 = $159 + 12 | 0;
     if (!(HEAP8[$167 >> 0] & 1)) {
      HEAP32[$166 + 0 >> 2] = HEAP32[$167 + 0 >> 2];
      HEAP32[$166 + 4 >> 2] = HEAP32[$167 + 4 >> 2];
      HEAP32[$166 + 8 >> 2] = HEAP32[$167 + 8 >> 2];
     } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($166, HEAP32[$159 + 20 >> 2] | 0, HEAP32[$159 + 16 >> 2] | 0);
     $176 = HEAP32[$150 >> 2] | 0;
    }
    HEAP32[$150 >> 2] = $176 + 24;
   }
   $159 = $159 + 24 | 0;
   if (($159 | 0) == ($148 | 0)) break L119;
  }
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
 } while (0);
 $$0 = $t1$041 + 1 | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$pre$i = 0, $$pre$i16 = 0, $$pre$i29 = 0, $$pre$i3 = 0, $$pre$i42 = 0, $$pre3$i = 0, $$pre3$i$pre$pre = 0, $$pre3$i19 = 0, $$pre3$i19$pre$pre = 0, $$pre3$i32 = 0, $$pre3$i32$pre$pre = 0, $$pre3$i45 = 0, $$pre3$i45$pre$pre = 0, $$pre3$i6 = 0, $$pre3$i6$pre$pre = 0, $0 = 0, $1 = 0, $100 = 0, $106 = 0, $111 = 0, $112 = 0, $113 = 0, $121 = 0, $127 = 0, $132 = 0, $136 = 0, $14 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $161 = 0, $167 = 0, $17 = 0, $174 = 0, $182 = 0, $188 = 0, $19 = 0, $193 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $204 = 0, $214 = 0, $218 = 0, $221 = 0, $224 = 0, $225 = 0, $226 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $238 = 0, $245 = 0, $25 = 0, $253 = 0, $259 = 0, $263 = 0, $264 = 0, $265 = 0, $272 = 0, $282 = 0, $292 = 0, $298 = 0, $305 = 0, $313 = 0, $319 = 0, $32 = 0, $323 = 0, $324 = 0, $325 = 0, $332 = 0, $342 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $357 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $38 = 0, $43 = 0, $44 = 0, $45 = 0, $53 = 0, $59 = 0, $64 = 0, $68 = 0, $69 = 0, $70 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $85 = 0, $87 = 0, $9 = 0, $91 = 0, $93 = 0, $addconv = 0, $c$0 = 0, $c$1$be = 0, $c$111 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $c$i = 0, $c$i10 = 0, $c$i23 = 0, $c$i36 = 0, $c$i49 = 0, $neg$0 = 0, $storemerge = 0, $storemerge100 = 0, $storemerge101 = 0, $storemerge102 = 0, $storemerge103 = 0, $x$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c$i49 = sp + 4 | 0;
 $c$i36 = sp + 3 | 0;
 $c$i23 = sp + 2 | 0;
 $c$i10 = sp + 1 | 0;
 $c$i = sp;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 100 | 0;
 L1 : do if ($1 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $68 = HEAPU8[$1 >> 0] | 0;
 } else {
  $8 = $f + 104 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  if (!$9) label = 5; else if ((HEAP32[$f + 108 >> 2] | 0) < ($9 | 0)) label = 5;
  L5 : do if ((label | 0) == 5) {
   $14 = $f + 8 | 0;
   do if (!(HEAP32[$14 >> 2] | 0)) {
    $17 = $f + 74 | 0;
    $19 = HEAP8[$17 >> 0] | 0;
    HEAP8[$17 >> 0] = $19 + 255 | $19;
    $23 = $f + 20 | 0;
    $25 = $f + 44 | 0;
    if ((HEAP32[$23 >> 2] | 0) >>> 0 > (HEAP32[$25 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
    HEAP32[$f + 16 >> 2] = 0;
    HEAP32[$f + 28 >> 2] = 0;
    HEAP32[$23 >> 2] = 0;
    $32 = HEAP32[$f >> 2] | 0;
    if (!($32 & 20)) {
     $38 = HEAP32[$25 >> 2] | 0;
     HEAP32[$14 >> 2] = $38;
     HEAP32[$0 >> 2] = $38;
     break;
    }
    if (!($32 & 4)) break L5;
    HEAP32[$f >> 2] = $32 | 32;
    break L5;
   } while (0);
   if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 31]($f, $c$i, 1) | 0) == 1) {
    $43 = HEAP8[$c$i >> 0] | 0;
    $44 = $43 & 255;
    $45 = HEAP32[$8 >> 2] | 0;
    $$pre$i = HEAP32[$14 >> 2] | 0;
    $$pre3$i$pre$pre = HEAP32[$0 >> 2] | 0;
    if (!$45) {
     $$pre3$i = $$pre3$i$pre$pre;
     $storemerge = $$pre$i;
    } else {
     $53 = $45 - (HEAP32[$f + 108 >> 2] | 0) + -1 | 0;
     if (($$pre$i - $$pre3$i$pre$pre | 0) > ($53 | 0)) {
      $$pre3$i = $$pre3$i$pre$pre;
      $storemerge = $$pre3$i$pre$pre + $53 | 0;
     } else {
      $$pre3$i = $$pre3$i$pre$pre;
      $storemerge = $$pre$i;
     }
    }
    HEAP32[$2 >> 2] = $storemerge;
    if ($$pre$i) {
     $59 = $f + 108 | 0;
     HEAP32[$59 >> 2] = $$pre$i + 1 - $$pre3$i + (HEAP32[$59 >> 2] | 0);
    }
    $64 = $$pre3$i + -1 | 0;
    if ((HEAP8[$64 >> 0] | 0) == $43 << 24 >> 24) {
     $68 = $44;
     break L1;
    }
    HEAP8[$64 >> 0] = $43;
    $68 = $44;
    break L1;
   }
  } while (0);
  HEAP32[$2 >> 2] = 0;
  $357 = -2147483648;
  $358 = 0;
  tempRet0 = $357;
  STACKTOP = sp;
  return $358 | 0;
 } while (0);
 if (($68 | 0) == 43 | ($68 | 0) == 45) {
  $69 = ($68 | 0) == 45 & 1;
  $70 = HEAP32[$0 >> 2] | 0;
  L32 : do if ($70 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $70 + 1;
   $136 = HEAPU8[$70 >> 0] | 0;
  } else {
   $76 = $f + 104 | 0;
   $77 = HEAP32[$76 >> 2] | 0;
   if (!$77) label = 26; else if ((HEAP32[$f + 108 >> 2] | 0) < ($77 | 0)) label = 26;
   L37 : do if ((label | 0) == 26) {
    $82 = $f + 8 | 0;
    do if (!(HEAP32[$82 >> 2] | 0)) {
     $85 = $f + 74 | 0;
     $87 = HEAP8[$85 >> 0] | 0;
     HEAP8[$85 >> 0] = $87 + 255 | $87;
     $91 = $f + 20 | 0;
     $93 = $f + 44 | 0;
     if ((HEAP32[$91 >> 2] | 0) >>> 0 > (HEAP32[$93 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
     HEAP32[$f + 16 >> 2] = 0;
     HEAP32[$f + 28 >> 2] = 0;
     HEAP32[$91 >> 2] = 0;
     $100 = HEAP32[$f >> 2] | 0;
     if (!($100 & 20)) {
      $106 = HEAP32[$93 >> 2] | 0;
      HEAP32[$82 >> 2] = $106;
      HEAP32[$0 >> 2] = $106;
      break;
     }
     if (!($100 & 4)) break L37;
     HEAP32[$f >> 2] = $100 | 32;
     break L37;
    } while (0);
    if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 31]($f, $c$i10, 1) | 0) == 1) {
     $111 = HEAP8[$c$i10 >> 0] | 0;
     $112 = $111 & 255;
     $113 = HEAP32[$76 >> 2] | 0;
     $$pre$i3 = HEAP32[$82 >> 2] | 0;
     $$pre3$i6$pre$pre = HEAP32[$0 >> 2] | 0;
     if (!$113) {
      $$pre3$i6 = $$pre3$i6$pre$pre;
      $storemerge103 = $$pre$i3;
     } else {
      $121 = $113 - (HEAP32[$f + 108 >> 2] | 0) + -1 | 0;
      if (($$pre$i3 - $$pre3$i6$pre$pre | 0) > ($121 | 0)) {
       $$pre3$i6 = $$pre3$i6$pre$pre;
       $storemerge103 = $$pre3$i6$pre$pre + $121 | 0;
      } else {
       $$pre3$i6 = $$pre3$i6$pre$pre;
       $storemerge103 = $$pre$i3;
      }
     }
     HEAP32[$2 >> 2] = $storemerge103;
     if ($$pre$i3) {
      $127 = $f + 108 | 0;
      HEAP32[$127 >> 2] = $$pre$i3 + 1 - $$pre3$i6 + (HEAP32[$127 >> 2] | 0);
     }
     $132 = $$pre3$i6 + -1 | 0;
     if ((HEAP8[$132 >> 0] | 0) == $111 << 24 >> 24) {
      $136 = $112;
      break L32;
     }
     HEAP8[$132 >> 0] = $111;
     $136 = $112;
     break L32;
    }
   } while (0);
   HEAP32[$2 >> 2] = 0;
   $136 = -1;
  } while (0);
  if (($136 + -48 | 0) >>> 0 > 9 & ($pok | 0) != 0) if (!(HEAP32[$2 >> 2] | 0)) {
   $c$0 = $136;
   $neg$0 = $69;
  } else {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   $c$0 = $136;
   $neg$0 = $69;
  } else {
   $c$0 = $136;
   $neg$0 = $69;
  }
 } else {
  $c$0 = $68;
  $neg$0 = 0;
 }
 if (($c$0 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $357 = -2147483648;
   $358 = 0;
   tempRet0 = $357;
   STACKTOP = sp;
   return $358 | 0;
  }
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $357 = -2147483648;
  $358 = 0;
  tempRet0 = $357;
  STACKTOP = sp;
  return $358 | 0;
 }
 $145 = $f + 104 | 0;
 $146 = $f + 8 | 0;
 $147 = $f + 74 | 0;
 $148 = $f + 20 | 0;
 $149 = $f + 44 | 0;
 $150 = $f + 36 | 0;
 $151 = $f + 16 | 0;
 $152 = $f + 28 | 0;
 $153 = $f + 32 | 0;
 $154 = $f + 108 | 0;
 $c$111 = $c$0;
 $x$012 = 0;
 while (1) {
  $x$012 = $c$111 + -48 + ($x$012 * 10 | 0) | 0;
  $161 = HEAP32[$0 >> 2] | 0;
  if ($161 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $161 + 1;
   $c$1$be = HEAPU8[$161 >> 0] | 0;
  } else {
   $167 = HEAP32[$145 >> 2] | 0;
   if ($167) if ((HEAP32[$154 >> 2] | 0) >= ($167 | 0)) {
    $193 = $x$012;
    label = 61;
    break;
   }
   if (!(HEAP32[$146 >> 2] | 0)) {
    $174 = HEAP8[$147 >> 0] | 0;
    HEAP8[$147 >> 0] = $174 + 255 | $174;
    if ((HEAP32[$148 >> 2] | 0) >>> 0 > (HEAP32[$149 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$150 >> 2] & 31]($f, 0, 0) | 0;
    HEAP32[$151 >> 2] = 0;
    HEAP32[$152 >> 2] = 0;
    HEAP32[$148 >> 2] = 0;
    $182 = HEAP32[$f >> 2] | 0;
    if ($182 & 20) {
     label = 57;
     break;
    }
    $188 = HEAP32[$149 >> 2] | 0;
    HEAP32[$146 >> 2] = $188;
    HEAP32[$0 >> 2] = $188;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$153 >> 2] & 31]($f, $c$i23, 1) | 0) != 1) {
    $193 = $x$012;
    label = 61;
    break;
   }
   $195 = HEAP8[$c$i23 >> 0] | 0;
   $196 = $195 & 255;
   $197 = HEAP32[$145 >> 2] | 0;
   $$pre$i16 = HEAP32[$146 >> 2] | 0;
   $$pre3$i19$pre$pre = HEAP32[$0 >> 2] | 0;
   if (!$197) {
    $$pre3$i19 = $$pre3$i19$pre$pre;
    $storemerge100 = $$pre$i16;
   } else {
    $204 = $197 - (HEAP32[$154 >> 2] | 0) + -1 | 0;
    if (($$pre$i16 - $$pre3$i19$pre$pre | 0) > ($204 | 0)) {
     $$pre3$i19 = $$pre3$i19$pre$pre;
     $storemerge100 = $$pre3$i19$pre$pre + $204 | 0;
    } else {
     $$pre3$i19 = $$pre3$i19$pre$pre;
     $storemerge100 = $$pre$i16;
    }
   }
   HEAP32[$2 >> 2] = $storemerge100;
   if ($$pre$i16) HEAP32[$154 >> 2] = $$pre$i16 + 1 - $$pre3$i19 + (HEAP32[$154 >> 2] | 0);
   $214 = $$pre3$i19 + -1 | 0;
   if ((HEAP8[$214 >> 0] | 0) == $195 << 24 >> 24) $c$1$be = $196; else {
    HEAP8[$214 >> 0] = $195;
    $c$1$be = $196;
   }
  }
  $218 = ($c$1$be + -48 | 0) >>> 0 < 10;
  if (!($218 & ($x$012 | 0) < 214748364)) {
   label = 70;
   break;
  } else $c$111 = $c$1$be;
 }
 L95 : do if ((label | 0) == 57) if (!($182 & 4)) {
  $193 = $x$012;
  label = 61;
 } else {
  HEAP32[$f >> 2] = $182 | 32;
  $193 = $x$012;
  label = 61;
 } else if ((label | 0) == 70) {
  $221 = (($x$012 | 0) < 0) << 31 >> 31;
  L99 : do if ($218) {
   $224 = $x$012;
   $225 = $221;
   $c$27 = $c$1$be;
   while (1) {
    $226 = ___muldi3($224 | 0, $225 | 0, 10, 0) | 0;
    $addconv = $c$27 + -48 | 0;
    $230 = _i64Add($addconv | 0, (($addconv | 0) < 0) << 31 >> 31 | 0, $226 | 0, tempRet0 | 0) | 0;
    $231 = tempRet0;
    $232 = HEAP32[$0 >> 2] | 0;
    if ($232 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $232 + 1;
     $c$2$be = HEAPU8[$232 >> 0] | 0;
    } else {
     $238 = HEAP32[$145 >> 2] | 0;
     if ($238) if ((HEAP32[$154 >> 2] | 0) >= ($238 | 0)) {
      $361 = $230;
      $362 = $231;
      break;
     }
     if (!(HEAP32[$146 >> 2] | 0)) {
      $245 = HEAP8[$147 >> 0] | 0;
      HEAP8[$147 >> 0] = $245 + 255 | $245;
      if ((HEAP32[$148 >> 2] | 0) >>> 0 > (HEAP32[$149 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$150 >> 2] & 31]($f, 0, 0) | 0;
      HEAP32[$151 >> 2] = 0;
      HEAP32[$152 >> 2] = 0;
      HEAP32[$148 >> 2] = 0;
      $253 = HEAP32[$f >> 2] | 0;
      if ($253 & 20) {
       label = 80;
       break;
      }
      $259 = HEAP32[$149 >> 2] | 0;
      HEAP32[$146 >> 2] = $259;
      HEAP32[$0 >> 2] = $259;
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[$153 >> 2] & 31]($f, $c$i36, 1) | 0) != 1) {
      $361 = $230;
      $362 = $231;
      break;
     }
     $263 = HEAP8[$c$i36 >> 0] | 0;
     $264 = $263 & 255;
     $265 = HEAP32[$145 >> 2] | 0;
     $$pre$i29 = HEAP32[$146 >> 2] | 0;
     $$pre3$i32$pre$pre = HEAP32[$0 >> 2] | 0;
     if (!$265) {
      $$pre3$i32 = $$pre3$i32$pre$pre;
      $storemerge102 = $$pre$i29;
     } else {
      $272 = $265 - (HEAP32[$154 >> 2] | 0) + -1 | 0;
      if (($$pre$i29 - $$pre3$i32$pre$pre | 0) > ($272 | 0)) {
       $$pre3$i32 = $$pre3$i32$pre$pre;
       $storemerge102 = $$pre3$i32$pre$pre + $272 | 0;
      } else {
       $$pre3$i32 = $$pre3$i32$pre$pre;
       $storemerge102 = $$pre$i29;
      }
     }
     HEAP32[$2 >> 2] = $storemerge102;
     if ($$pre$i29) HEAP32[$154 >> 2] = $$pre$i29 + 1 - $$pre3$i32 + (HEAP32[$154 >> 2] | 0);
     $282 = $$pre3$i32 + -1 | 0;
     if ((HEAP8[$282 >> 0] | 0) == $263 << 24 >> 24) $c$2$be = $264; else {
      HEAP8[$282 >> 0] = $263;
      $c$2$be = $264;
     }
    }
    if (($c$2$be + -48 | 0) >>> 0 < 10 & (($231 | 0) < 21474836 | ($231 | 0) == 21474836 & $230 >>> 0 < 2061584302)) {
     $224 = $230;
     $225 = $231;
     $c$27 = $c$2$be;
    } else {
     $359 = $230;
     $360 = $231;
     $c$2$lcssa = $c$2$be;
     break L99;
    }
   }
   if ((label | 0) == 80) if (!($253 & 4)) {
    $361 = $230;
    $362 = $231;
   } else {
    HEAP32[$f >> 2] = $253 | 32;
    $361 = $230;
    $362 = $231;
   }
   HEAP32[$2 >> 2] = 0;
   $351 = $361;
   $352 = $362;
   break L95;
  } else {
   $359 = $x$012;
   $360 = $221;
   $c$2$lcssa = $c$1$be;
  } while (0);
  L130 : do if (($c$2$lcssa + -48 | 0) >>> 0 < 10) {
   while (1) {
    $292 = HEAP32[$0 >> 2] | 0;
    if ($292 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $292 + 1;
     $c$3$be = HEAPU8[$292 >> 0] | 0;
    } else {
     $298 = HEAP32[$145 >> 2] | 0;
     if ($298) if ((HEAP32[$154 >> 2] | 0) >= ($298 | 0)) break;
     if (!(HEAP32[$146 >> 2] | 0)) {
      $305 = HEAP8[$147 >> 0] | 0;
      HEAP8[$147 >> 0] = $305 + 255 | $305;
      if ((HEAP32[$148 >> 2] | 0) >>> 0 > (HEAP32[$149 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$150 >> 2] & 31]($f, 0, 0) | 0;
      HEAP32[$151 >> 2] = 0;
      HEAP32[$152 >> 2] = 0;
      HEAP32[$148 >> 2] = 0;
      $313 = HEAP32[$f >> 2] | 0;
      if ($313 & 20) {
       label = 101;
       break;
      }
      $319 = HEAP32[$149 >> 2] | 0;
      HEAP32[$146 >> 2] = $319;
      HEAP32[$0 >> 2] = $319;
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[$153 >> 2] & 31]($f, $c$i49, 1) | 0) != 1) break;
     $323 = HEAP8[$c$i49 >> 0] | 0;
     $324 = $323 & 255;
     $325 = HEAP32[$145 >> 2] | 0;
     $$pre$i42 = HEAP32[$146 >> 2] | 0;
     $$pre3$i45$pre$pre = HEAP32[$0 >> 2] | 0;
     if (!$325) {
      $$pre3$i45 = $$pre3$i45$pre$pre;
      $storemerge101 = $$pre$i42;
     } else {
      $332 = $325 - (HEAP32[$154 >> 2] | 0) + -1 | 0;
      if (($$pre$i42 - $$pre3$i45$pre$pre | 0) > ($332 | 0)) {
       $$pre3$i45 = $$pre3$i45$pre$pre;
       $storemerge101 = $$pre3$i45$pre$pre + $332 | 0;
      } else {
       $$pre3$i45 = $$pre3$i45$pre$pre;
       $storemerge101 = $$pre$i42;
      }
     }
     HEAP32[$2 >> 2] = $storemerge101;
     if ($$pre$i42) HEAP32[$154 >> 2] = $$pre$i42 + 1 - $$pre3$i45 + (HEAP32[$154 >> 2] | 0);
     $342 = $$pre3$i45 + -1 | 0;
     if ((HEAP8[$342 >> 0] | 0) == $323 << 24 >> 24) $c$3$be = $324; else {
      HEAP8[$342 >> 0] = $323;
      $c$3$be = $324;
     }
    }
    if (($c$3$be + -48 | 0) >>> 0 >= 10) break L130;
   }
   if ((label | 0) == 101) if ($313 & 4) HEAP32[$f >> 2] = $313 | 32;
   HEAP32[$2 >> 2] = 0;
   $351 = $359;
   $352 = $360;
   break L95;
  } while (0);
  if (!(HEAP32[$2 >> 2] | 0)) {
   $351 = $359;
   $352 = $360;
  } else {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   $351 = $359;
   $352 = $360;
  }
 } while (0);
 if ((label | 0) == 61) {
  HEAP32[$2 >> 2] = 0;
  $351 = $193;
  $352 = (($193 | 0) < 0) << 31 >> 31;
 }
 $350 = ($neg$0 | 0) != 0;
 $353 = _i64Subtract(0, 0, $351 | 0, $352 | 0) | 0;
 $357 = $350 ? tempRet0 : $352;
 $358 = $350 ? $353 : $351;
 tempRet0 = $357;
 STACKTOP = sp;
 return $358 | 0;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($agg$result, $this, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$03$i$i = 0, $$03$i11$i = 0, $$03$i18$i = 0, $$03$i4$i = 0, $$06$i = 0, $$lcssa$i = 0, $$lcssa$i10 = 0, $$lcssa$i6 = 0, $$lcssa12$i = 0, $$pre$i = 0, $$size$i = 0, $0 = 0, $103 = 0, $104 = 0, $106 = 0, $108 = 0, $109 = 0, $111 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $13 = 0, $136 = 0, $146 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $162 = 0, $163 = 0, $165 = 0, $166 = 0, $170 = 0, $172 = 0, $174 = 0, $175 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $184 = 0, $185 = 0, $186 = 0, $189 = 0, $191 = 0, $199 = 0, $2 = 0, $200 = 0, $201 = 0, $204 = 0, $205 = 0, $206 = 0, $211 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $219 = 0, $22 = 0, $222 = 0, $227 = 0, $236 = 0, $237 = 0, $24 = 0, $240 = 0, $241 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $254 = 0, $257 = 0, $26 = 0, $261 = 0, $265 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $29 = 0, $31 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $45 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $__nd$0$in$i = 0, $__nd$0$in$lcssa$i = 0, $__nd$0$in$lcssa10$i = 0, $__nd$0$in$lcssa11$i = 0, $__nd$0$in$us$i = 0, $__p$0$i = 0, $__parent$i = 0, $__r$0$i = 0, $l$04$i$i = 0, $l$04$i10$i = 0, $l$04$i17$i = 0, $l$04$i3$i = 0, $r$05$i$i = 0, $r$05$i16$i = 0, $r$05$i2$i = 0, $r$05$i9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__parent$i = sp;
 $0 = _malloc(40) | 0;
 L1 : do if (!$0) {
  while (1) {
   $2 = HEAP32[15470] | 0;
   HEAP32[15470] = $2 + 0;
   if (!$2) break;
   FUNCTION_TABLE_v[$2 & 3]();
   $5 = _malloc(40) | 0;
   if ($5) {
    $$lcssa$i = $5;
    break L1;
   }
  }
  $7 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$7 >> 2] = 61776;
  ___cxa_throw($7 | 0, 61824, 94);
 } else $$lcssa$i = $0; while (0);
 $8 = $$lcssa$i + 16 | 0;
 if (!(HEAP8[$__v >> 0] & 1)) {
  HEAP32[$8 + 0 >> 2] = HEAP32[$__v + 0 >> 2];
  HEAP32[$8 + 4 >> 2] = HEAP32[$__v + 4 >> 2];
  HEAP32[$8 + 8 >> 2] = HEAP32[$__v + 8 >> 2];
 } else {
  $13 = HEAP32[$__v + 8 >> 2] | 0;
  $15 = HEAP32[$__v + 4 >> 2] | 0;
  if ($15 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($15 >>> 0 < 11) {
   HEAP8[$8 >> 0] = $15 << 1;
   $__p$0$i = $$lcssa$i + 17 | 0;
  } else {
   $22 = $15 + 16 & -16;
   $$size$i = ($22 | 0) == 0 ? 1 : $22;
   $24 = _malloc($$size$i) | 0;
   L15 : do if (!$24) {
    while (1) {
     $26 = HEAP32[15470] | 0;
     HEAP32[15470] = $26 + 0;
     if (!$26) break;
     FUNCTION_TABLE_v[$26 & 3]();
     $29 = _malloc($$size$i) | 0;
     if ($29) {
      $$lcssa$i6 = $29;
      break L15;
     }
    }
    $31 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$31 >> 2] = 61776;
    ___cxa_throw($31 | 0, 61824, 94);
   } else $$lcssa$i6 = $24; while (0);
   HEAP32[$$lcssa$i + 24 >> 2] = $$lcssa$i6;
   HEAP32[$8 >> 2] = $22 | 1;
   HEAP32[$$lcssa$i + 20 >> 2] = $15;
   $__p$0$i = $$lcssa$i6;
  }
  _memcpy($__p$0$i | 0, $13 | 0, $15 | 0) | 0;
  HEAP8[$__p$0$i + $15 >> 0] = 0;
 }
 $36 = $$lcssa$i + 28 | 0;
 $37 = $__v + 12 | 0;
 HEAP32[$36 + 0 >> 2] = HEAP32[$37 + 0 >> 2];
 HEAP32[$36 + 4 >> 2] = HEAP32[$37 + 4 >> 2];
 HEAP32[$36 + 8 >> 2] = HEAP32[$37 + 8 >> 2];
 HEAP32[$37 + 0 >> 2] = 0;
 HEAP32[$37 + 4 >> 2] = 0;
 HEAP32[$37 + 8 >> 2] = 0;
 $38 = $this + 4 | 0;
 $39 = HEAP32[$38 >> 2] | 0;
 do if (!$39) {
  $165 = $this + 4 | 0;
  HEAP32[$__parent$i >> 2] = $165;
  $$0$i = $165;
  $170 = $165;
 } else {
  $41 = HEAP8[$8 >> 0] | 0;
  $45 = ($41 & 255) >>> 1;
  $46 = $$lcssa$i + 17 | 0;
  $48 = HEAP32[$$lcssa$i + 24 >> 2] | 0;
  $50 = HEAP32[$$lcssa$i + 20 >> 2] | 0;
  L26 : do if (!($41 & 1)) {
   $__nd$0$in$us$i = $39;
   while (1) {
    $51 = $__nd$0$in$us$i + 16 | 0;
    $52 = HEAP8[$51 >> 0] | 0;
    $54 = ($52 & 1) == 0;
    if ($54) {
     $277 = $51 + 1 | 0;
     $63 = ($52 & 255) >>> 1;
    } else {
     $277 = HEAP32[$__nd$0$in$us$i + 24 >> 2] | 0;
     $63 = HEAP32[$__nd$0$in$us$i + 20 >> 2] | 0;
    }
    $64 = $63 >>> 0 < $45 >>> 0 ? $63 : $45;
    L63 : do if (!$64) label = 27; else {
     $$03$i$i = $64;
     $l$04$i$i = $46;
     $r$05$i$i = $277;
     while (1) {
      $66 = HEAP8[$l$04$i$i >> 0] | 0;
      $67 = HEAP8[$r$05$i$i >> 0] | 0;
      if ($66 << 24 >> 24 != $67 << 24 >> 24) break;
      $$03$i$i = $$03$i$i + -1 | 0;
      if (!$$03$i$i) {
       label = 27;
       break L63;
      } else {
       $l$04$i$i = $l$04$i$i + 1 | 0;
       $r$05$i$i = $r$05$i$i + 1 | 0;
      }
     }
     if ($66 << 24 >> 24 == $67 << 24 >> 24) label = 27; else if ((($66 & 255) - ($67 & 255) | 0) < 0) label = 38;
    } while (0);
    if ((label | 0) == 27) {
     label = 0;
     if ($45 >>> 0 < $63 >>> 0) label = 38;
    }
    if ((label | 0) == 38) {
     label = 0;
     $106 = HEAP32[$__nd$0$in$us$i >> 2] | 0;
     if (!$106) {
      $$lcssa12$i = $__nd$0$in$us$i;
      $__nd$0$in$lcssa11$i = $__nd$0$in$us$i;
      label = 49;
      break;
     } else {
      $__nd$0$in$us$i = $106;
      continue;
     }
    }
    if ($54) {
     $278 = $51 + 1 | 0;
     $87 = ($52 & 255) >>> 1;
    } else {
     $278 = HEAP32[$__nd$0$in$us$i + 24 >> 2] | 0;
     $87 = HEAP32[$__nd$0$in$us$i + 20 >> 2] | 0;
    }
    $88 = $45 >>> 0 < $87 >>> 0 ? $45 : $87;
    L78 : do if (!$88) label = 36; else {
     $$03$i18$i = $88;
     $l$04$i17$i = $278;
     $r$05$i16$i = $46;
     while (1) {
      $90 = HEAP8[$l$04$i17$i >> 0] | 0;
      $91 = HEAP8[$r$05$i16$i >> 0] | 0;
      if ($90 << 24 >> 24 != $91 << 24 >> 24) break;
      $$03$i18$i = $$03$i18$i + -1 | 0;
      if (!$$03$i18$i) {
       label = 36;
       break L78;
      } else {
       $l$04$i17$i = $l$04$i17$i + 1 | 0;
       $r$05$i16$i = $r$05$i16$i + 1 | 0;
      }
     }
     if ($90 << 24 >> 24 == $91 << 24 >> 24) label = 36; else if ((($90 & 255) - ($91 & 255) | 0) >= 0) {
      $__nd$0$in$lcssa$i = $__nd$0$in$us$i;
      label = 61;
      break L26;
     }
    } while (0);
    if ((label | 0) == 36) {
     label = 0;
     if ($87 >>> 0 >= $45 >>> 0) {
      $__nd$0$in$lcssa$i = $__nd$0$in$us$i;
      label = 61;
      break L26;
     }
    }
    $103 = $__nd$0$in$us$i + 4 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    if (!$104) {
     $$lcssa$i10 = $103;
     $__nd$0$in$lcssa10$i = $__nd$0$in$us$i;
     label = 60;
     break;
    } else $__nd$0$in$us$i = $104;
   }
  } else {
   $__nd$0$in$i = $39;
   while (1) {
    $108 = $__nd$0$in$i + 16 | 0;
    $109 = HEAP8[$108 >> 0] | 0;
    $111 = ($109 & 1) == 0;
    if ($111) {
     $120 = ($109 & 255) >>> 1;
     $279 = $108 + 1 | 0;
    } else {
     $120 = HEAP32[$__nd$0$in$i + 20 >> 2] | 0;
     $279 = HEAP32[$__nd$0$in$i + 24 >> 2] | 0;
    }
    $121 = $120 >>> 0 < $50 >>> 0 ? $120 : $50;
    L33 : do if (!$121) label = 46; else {
     $$03$i11$i = $121;
     $l$04$i10$i = $48;
     $r$05$i9$i = $279;
     while (1) {
      $123 = HEAP8[$l$04$i10$i >> 0] | 0;
      $124 = HEAP8[$r$05$i9$i >> 0] | 0;
      if ($123 << 24 >> 24 != $124 << 24 >> 24) break;
      $$03$i11$i = $$03$i11$i + -1 | 0;
      if (!$$03$i11$i) {
       label = 46;
       break L33;
      } else {
       $l$04$i10$i = $l$04$i10$i + 1 | 0;
       $r$05$i9$i = $r$05$i9$i + 1 | 0;
      }
     }
     if ($123 << 24 >> 24 == $124 << 24 >> 24) label = 46; else if ((($123 & 255) - ($124 & 255) | 0) < 0) label = 48;
    } while (0);
    if ((label | 0) == 46) {
     label = 0;
     if ($50 >>> 0 < $120 >>> 0) label = 48;
    }
    if ((label | 0) == 48) {
     label = 0;
     $136 = HEAP32[$__nd$0$in$i >> 2] | 0;
     if (!$136) {
      $$lcssa12$i = $__nd$0$in$i;
      $__nd$0$in$lcssa11$i = $__nd$0$in$i;
      label = 49;
      break;
     } else {
      $__nd$0$in$i = $136;
      continue;
     }
    }
    if ($111) {
     $146 = ($109 & 255) >>> 1;
     $280 = $108 + 1 | 0;
    } else {
     $146 = HEAP32[$__nd$0$in$i + 20 >> 2] | 0;
     $280 = HEAP32[$__nd$0$in$i + 24 >> 2] | 0;
    }
    $147 = $50 >>> 0 < $146 >>> 0 ? $50 : $146;
    L48 : do if (!$147) label = 57; else {
     $$03$i4$i = $147;
     $l$04$i3$i = $280;
     $r$05$i2$i = $48;
     while (1) {
      $149 = HEAP8[$l$04$i3$i >> 0] | 0;
      $150 = HEAP8[$r$05$i2$i >> 0] | 0;
      if ($149 << 24 >> 24 != $150 << 24 >> 24) break;
      $$03$i4$i = $$03$i4$i + -1 | 0;
      if (!$$03$i4$i) {
       label = 57;
       break L48;
      } else {
       $l$04$i3$i = $l$04$i3$i + 1 | 0;
       $r$05$i2$i = $r$05$i2$i + 1 | 0;
      }
     }
     if ($149 << 24 >> 24 == $150 << 24 >> 24) label = 57; else if ((($149 & 255) - ($150 & 255) | 0) >= 0) {
      $__nd$0$in$lcssa$i = $__nd$0$in$i;
      label = 61;
      break L26;
     }
    } while (0);
    if ((label | 0) == 57) {
     label = 0;
     if ($146 >>> 0 >= $50 >>> 0) {
      $__nd$0$in$lcssa$i = $__nd$0$in$i;
      label = 61;
      break L26;
     }
    }
    $162 = $__nd$0$in$i + 4 | 0;
    $163 = HEAP32[$162 >> 2] | 0;
    if (!$163) {
     $$lcssa$i10 = $162;
     $__nd$0$in$lcssa10$i = $__nd$0$in$i;
     label = 60;
     break;
    } else $__nd$0$in$i = $163;
   }
  } while (0);
  if ((label | 0) == 49) {
   HEAP32[$__parent$i >> 2] = $__nd$0$in$lcssa11$i;
   $$0$i = $$lcssa12$i;
   $170 = $__nd$0$in$lcssa11$i;
   break;
  } else if ((label | 0) == 60) {
   HEAP32[$__parent$i >> 2] = $__nd$0$in$lcssa10$i;
   $$0$i = $$lcssa$i10;
   $170 = $__nd$0$in$lcssa10$i;
   break;
  } else if ((label | 0) == 61) {
   HEAP32[$__parent$i >> 2] = $__nd$0$in$lcssa$i;
   $$0$i = $__parent$i;
   $170 = $__nd$0$in$lcssa$i;
   break;
  }
 } while (0);
 $166 = HEAP32[$$0$i >> 2] | 0;
 if (!$166) {
  HEAP32[$$lcssa$i >> 2] = 0;
  HEAP32[$$lcssa$i + 4 >> 2] = 0;
  HEAP32[$$lcssa$i + 8 >> 2] = $170;
  HEAP32[$$0$i >> 2] = $$lcssa$i;
  $172 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
  if (!$172) $176 = $$lcssa$i; else {
   HEAP32[$this >> 2] = $172;
   $176 = HEAP32[$$0$i >> 2] | 0;
  }
  $174 = HEAP32[$38 >> 2] | 0;
  $175 = ($176 | 0) == ($174 | 0);
  HEAP8[$176 + 12 >> 0] = $175 & 1;
  L98 : do if (!$175) {
   $$06$i = $176;
   while (1) {
    $179 = $$06$i + 8 | 0;
    $180 = HEAP32[$179 >> 2] | 0;
    $181 = $180 + 12 | 0;
    if (HEAP8[$181 >> 0] | 0) break L98;
    $184 = $180 + 8 | 0;
    $185 = HEAP32[$184 >> 2] | 0;
    $186 = HEAP32[$185 >> 2] | 0;
    if (($186 | 0) == ($180 | 0)) {
     $189 = HEAP32[$185 + 4 >> 2] | 0;
     if (!$189) {
      label = 72;
      break;
     }
     $191 = $189 + 12 | 0;
     if (HEAP8[$191 >> 0] | 0) {
      label = 72;
      break;
     }
     HEAP8[$181 >> 0] = 1;
     HEAP8[$185 + 12 >> 0] = ($185 | 0) == ($174 | 0) & 1;
     HEAP8[$191 >> 0] = 1;
    } else {
     if (!$186) {
      label = 89;
      break;
     }
     $227 = $186 + 12 | 0;
     if (HEAP8[$227 >> 0] | 0) {
      label = 89;
      break;
     }
     HEAP8[$181 >> 0] = 1;
     HEAP8[$185 + 12 >> 0] = ($185 | 0) == ($174 | 0) & 1;
     HEAP8[$227 >> 0] = 1;
    }
    if (($185 | 0) == ($174 | 0)) break L98; else $$06$i = $185;
   }
   if ((label | 0) == 72) {
    if ((HEAP32[$180 >> 2] | 0) == ($$06$i | 0)) {
     $211 = $180;
     $213 = $185;
     $215 = $180;
    } else {
     $199 = $180 + 4 | 0;
     $200 = HEAP32[$199 >> 2] | 0;
     $201 = HEAP32[$200 >> 2] | 0;
     HEAP32[$199 >> 2] = $201;
     if (!$201) $205 = $185; else {
      HEAP32[$201 + 8 >> 2] = $180;
      $205 = HEAP32[$184 >> 2] | 0;
     }
     $204 = $200 + 8 | 0;
     HEAP32[$204 >> 2] = $205;
     $206 = HEAP32[$184 >> 2] | 0;
     if ((HEAP32[$206 >> 2] | 0) == ($180 | 0)) HEAP32[$206 >> 2] = $200; else HEAP32[$206 + 4 >> 2] = $200;
     HEAP32[$200 >> 2] = $180;
     HEAP32[$184 >> 2] = $200;
     $$pre$i = HEAP32[$204 >> 2] | 0;
     $211 = $200;
     $213 = $$pre$i;
     $215 = HEAP32[$$pre$i >> 2] | 0;
    }
    HEAP8[$211 + 12 >> 0] = 1;
    HEAP8[$213 + 12 >> 0] = 0;
    $214 = $215 + 4 | 0;
    $216 = HEAP32[$214 >> 2] | 0;
    HEAP32[$213 >> 2] = $216;
    if ($216) HEAP32[$216 + 8 >> 2] = $213;
    $219 = $213 + 8 | 0;
    HEAP32[$215 + 8 >> 2] = HEAP32[$219 >> 2];
    $222 = HEAP32[$219 >> 2] | 0;
    if ((HEAP32[$222 >> 2] | 0) == ($213 | 0)) HEAP32[$222 >> 2] = $215; else HEAP32[$222 + 4 >> 2] = $215;
    HEAP32[$214 >> 2] = $213;
    HEAP32[$219 >> 2] = $215;
    break;
   } else if ((label | 0) == 89) {
    if ((HEAP32[$180 >> 2] | 0) == ($$06$i | 0)) {
     $236 = $$06$i + 4 | 0;
     $237 = HEAP32[$236 >> 2] | 0;
     HEAP32[$180 >> 2] = $237;
     if (!$237) $240 = $185; else {
      HEAP32[$237 + 8 >> 2] = $180;
      $240 = HEAP32[$184 >> 2] | 0;
     }
     HEAP32[$179 >> 2] = $240;
     $241 = HEAP32[$184 >> 2] | 0;
     if ((HEAP32[$241 >> 2] | 0) == ($180 | 0)) HEAP32[$241 >> 2] = $$06$i; else HEAP32[$241 + 4 >> 2] = $$06$i;
     HEAP32[$236 >> 2] = $180;
     HEAP32[$184 >> 2] = $$06$i;
     $246 = $$06$i;
     $248 = HEAP32[$179 >> 2] | 0;
    } else {
     $246 = $180;
     $248 = $185;
    }
    HEAP8[$246 + 12 >> 0] = 1;
    HEAP8[$248 + 12 >> 0] = 0;
    $249 = $248 + 4 | 0;
    $250 = HEAP32[$249 >> 2] | 0;
    $251 = HEAP32[$250 >> 2] | 0;
    HEAP32[$249 >> 2] = $251;
    if ($251) HEAP32[$251 + 8 >> 2] = $248;
    $254 = $248 + 8 | 0;
    HEAP32[$250 + 8 >> 2] = HEAP32[$254 >> 2];
    $257 = HEAP32[$254 >> 2] | 0;
    if ((HEAP32[$257 >> 2] | 0) == ($248 | 0)) HEAP32[$257 >> 2] = $250; else HEAP32[$257 + 4 >> 2] = $250;
    HEAP32[$250 >> 2] = $248;
    HEAP32[$254 >> 2] = $250;
    break;
   }
  } while (0);
  $261 = $this + 8 | 0;
  HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + 1;
  $265 = 1;
  $__r$0$i = $$lcssa$i;
 } else {
  $265 = 0;
  $__r$0$i = $166;
 }
 HEAP32[$agg$result >> 2] = $__r$0$i;
 HEAP8[$agg$result + 4 >> 0] = $265;
 if ($265 << 24 >> 24) {
  STACKTOP = sp;
  return;
 }
 if (HEAP8[$36 >> 0] & 1) _free(HEAP32[$$lcssa$i + 36 >> 2] | 0);
 if (HEAP8[$8 >> 0] & 1) _free(HEAP32[$$lcssa$i + 24 >> 2] | 0);
 _free($$lcssa$i);
 STACKTOP = sp;
 return;
}
function __ZN7Scanner14scanPrevSymbolEP10LexContextc($this, $ctx) {
 $this = $this | 0;
 $ctx = $ctx | 0;
 var $$lcssa$i = 0, $$size$i = 0, $0 = 0, $1 = 0, $100 = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $116 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $126 = 0, $127 = 0, $128 = 0, $133 = 0, $134 = 0, $141 = 0, $143 = 0, $145 = 0, $148 = 0, $150 = 0, $163 = 0, $164 = 0, $167 = 0, $168 = 0, $169 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $5 = 0, $50 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $82 = 0, $83 = 0, $84 = 0, $87 = 0, $90 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$i = 0, $ret$0 = 0, $ret$0$i = 0, $ret$0$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp;
 $1 = sp + 52 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 20 | 0;
 $4 = $ctx + 36 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $ctx + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $11 = HEAP32[$7 + 72 >> 2] | 0;
 if ((HEAP32[$7 + 68 >> 2] | 0) == ($11 | 0)) label = 3; else if ((HEAP32[$11 + -64 >> 2] | 0) != 125) label = 3;
 if ((label | 0) == 3) {
  if (__ZN7Scanner17isRegexStartDelimEP10LexContextRKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES9_NS2_4lessIS9_EENS7_INS2_4pairIKS9_S9_EEEEEE($ctx, $this + 44 | 0) | 0) {
   $18 = HEAP32[$6 >> 2] | 0;
   $19 = $ctx + 8 | 0;
   HEAP32[$0 + 0 >> 2] = HEAP32[$19 + 0 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = HEAP32[$19 + 12 >> 2];
   HEAP32[$0 + 16 >> 2] = HEAP32[$19 + 16 >> 2];
   $20 = $18 + 72 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   HEAP32[$20 >> 2] = $21 + 72;
   HEAP32[$21 >> 2] = 0;
   HEAP32[$21 + 4 >> 2] = 211;
   $24 = $21 + 28 | 0;
   HEAP32[$24 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
   HEAP32[$24 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   HEAP32[$24 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$24 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
   HEAP32[$24 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
   $25 = $21 + 8 | 0;
   $26 = $18 + 48 | 0;
   HEAP32[$25 + 0 >> 2] = HEAP32[$26 + 0 >> 2];
   HEAP32[$25 + 4 >> 2] = HEAP32[$26 + 4 >> 2];
   HEAP32[$25 + 8 >> 2] = HEAP32[$26 + 8 >> 2];
   HEAP32[$25 + 12 >> 2] = HEAP32[$26 + 12 >> 2];
   HEAP32[$25 + 16 >> 2] = HEAP32[$26 + 16 >> 2];
   HEAP32[$21 + 52 >> 2] = $5;
   HEAP32[$21 + 56 >> 2] = 0;
   HEAP32[$21 + 60 >> 2] = 0;
   HEAP32[$21 + 64 >> 2] = 60816;
   $32 = __ZN18ReservedKeywordMap11in_word_setEPKcj($5, _strlen($5 | 0) | 0) | 0;
   if (!$32) {
    $35 = $7 + 48 | 0;
    HEAP32[$1 + 0 >> 2] = HEAP32[$35 + 0 >> 2];
    HEAP32[$1 + 4 >> 2] = HEAP32[$35 + 4 >> 2];
    HEAP32[$1 + 8 >> 2] = HEAP32[$35 + 8 >> 2];
    HEAP32[$1 + 12 >> 2] = HEAP32[$35 + 12 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[$35 + 16 >> 2];
   } else {
    $34 = $32 + 4 | 0;
    HEAP32[$1 + 0 >> 2] = HEAP32[$34 + 0 >> 2];
    HEAP32[$1 + 4 >> 2] = HEAP32[$34 + 4 >> 2];
    HEAP32[$1 + 8 >> 2] = HEAP32[$34 + 8 >> 2];
    HEAP32[$1 + 12 >> 2] = HEAP32[$34 + 12 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[$34 + 16 >> 2];
   };
   HEAP32[$25 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$25 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$25 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$25 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
   HEAP32[$25 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
   $36 = HEAP32[$ctx >> 2] | 0;
   $42 = HEAP8[(HEAP32[$36 + 4 >> 2] | 0) + (HEAP32[$36 + 12 >> 2] | 0) >> 0] | 0;
   $43 = $42 << 24 >> 24;
   if (($43 | 0) == 60) $ret$0$i = 62; else if (($43 | 0) == 40) {
    $47 = $this + 24 | 0;
    HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
    $ret$0$i = 41;
   } else if (($43 | 0) == 91) {
    $50 = $this + 20 | 0;
    HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1;
    $ret$0$i = 93;
   } else if (($43 | 0) == 123) {
    $44 = $this + 16 | 0;
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 1;
    $ret$0$i = 125;
   } else $ret$0$i = $42;
   HEAP8[$this + 12 >> 0] = $ret$0$i;
   HEAP8[$this + 1 >> 0] = 1;
   HEAP8[$this + 10 >> 0] = 1;
   $ret$0 = $21;
   $174 = $ctx + 40 | 0;
   $175 = HEAP32[$174 >> 2] | 0;
   $176 = HEAP32[$4 >> 2] | 0;
   $177 = $176 + $175 | 0;
   HEAP32[$4 >> 2] = $177;
   HEAP8[$177 >> 0] = 0;
   HEAP32[$174 >> 2] = 0;
   $178 = HEAP32[$4 >> 2] | 0;
   $179 = $178 + 1 | 0;
   HEAP32[$4 >> 2] = $179;
   HEAP8[$179 >> 0] = 0;
   STACKTOP = sp;
   return $ret$0 | 0;
  }
  if (__ZN7Scanner17isRegexStartDelimEP10LexContextRKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES9_NS2_4lessIS9_EENS7_INS2_4pairIKS9_S9_EEEEEE($ctx, $this + 56 | 0) | 0) {
   $58 = HEAP32[$6 >> 2] | 0;
   $59 = $ctx + 8 | 0;
   HEAP32[$0 + 0 >> 2] = HEAP32[$59 + 0 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$59 + 4 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$59 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = HEAP32[$59 + 12 >> 2];
   HEAP32[$0 + 16 >> 2] = HEAP32[$59 + 16 >> 2];
   $60 = $58 + 72 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   HEAP32[$60 >> 2] = $61 + 72;
   HEAP32[$61 >> 2] = 0;
   HEAP32[$61 + 4 >> 2] = 211;
   $64 = $61 + 28 | 0;
   HEAP32[$64 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
   HEAP32[$64 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   HEAP32[$64 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$64 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
   HEAP32[$64 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
   $65 = $61 + 8 | 0;
   $66 = $58 + 48 | 0;
   HEAP32[$65 + 0 >> 2] = HEAP32[$66 + 0 >> 2];
   HEAP32[$65 + 4 >> 2] = HEAP32[$66 + 4 >> 2];
   HEAP32[$65 + 8 >> 2] = HEAP32[$66 + 8 >> 2];
   HEAP32[$65 + 12 >> 2] = HEAP32[$66 + 12 >> 2];
   HEAP32[$65 + 16 >> 2] = HEAP32[$66 + 16 >> 2];
   HEAP32[$61 + 52 >> 2] = $5;
   HEAP32[$61 + 56 >> 2] = 0;
   HEAP32[$61 + 60 >> 2] = 0;
   HEAP32[$61 + 64 >> 2] = 60816;
   $72 = __ZN18ReservedKeywordMap11in_word_setEPKcj($5, _strlen($5 | 0) | 0) | 0;
   if (!$72) {
    $75 = $7 + 48 | 0;
    HEAP32[$2 + 0 >> 2] = HEAP32[$75 + 0 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[$75 + 4 >> 2];
    HEAP32[$2 + 8 >> 2] = HEAP32[$75 + 8 >> 2];
    HEAP32[$2 + 12 >> 2] = HEAP32[$75 + 12 >> 2];
    HEAP32[$2 + 16 >> 2] = HEAP32[$75 + 16 >> 2];
   } else {
    $74 = $72 + 4 | 0;
    HEAP32[$2 + 0 >> 2] = HEAP32[$74 + 0 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[$74 + 4 >> 2];
    HEAP32[$2 + 8 >> 2] = HEAP32[$74 + 8 >> 2];
    HEAP32[$2 + 12 >> 2] = HEAP32[$74 + 12 >> 2];
    HEAP32[$2 + 16 >> 2] = HEAP32[$74 + 16 >> 2];
   };
   HEAP32[$65 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
   HEAP32[$65 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$65 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[$65 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
   HEAP32[$65 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
   $76 = HEAP32[$ctx >> 2] | 0;
   $82 = HEAP8[(HEAP32[$76 + 4 >> 2] | 0) + (HEAP32[$76 + 12 >> 2] | 0) >> 0] | 0;
   $83 = $82 << 24 >> 24;
   if (($83 | 0) == 123) {
    $84 = $this + 16 | 0;
    HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 1;
    $ret$0$i7 = 125;
   } else if (($83 | 0) == 91) {
    $90 = $this + 20 | 0;
    HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + 1;
    $ret$0$i7 = 93;
   } else if (($83 | 0) == 40) {
    $87 = $this + 24 | 0;
    HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + 1;
    $ret$0$i7 = 41;
   } else if (($83 | 0) == 60) $ret$0$i7 = 62; else $ret$0$i7 = $82;
   HEAP8[$this + 12 >> 0] = $ret$0$i7;
   HEAP8[$this + 13 >> 0] = $ret$0$i7;
   HEAP8[$this + 1 >> 0] = 1;
   HEAP8[$this + 10 >> 0] = 1;
   $ret$0 = $61;
   $174 = $ctx + 40 | 0;
   $175 = HEAP32[$174 >> 2] | 0;
   $176 = HEAP32[$4 >> 2] | 0;
   $177 = $176 + $175 | 0;
   HEAP32[$4 >> 2] = $177;
   HEAP8[$177 >> 0] = 0;
   HEAP32[$174 >> 2] = 0;
   $178 = HEAP32[$4 >> 2] | 0;
   $179 = $178 + 1 | 0;
   HEAP32[$4 >> 2] = $179;
   HEAP8[$179 >> 0] = 0;
   STACKTOP = sp;
   return $ret$0 | 0;
  }
 }
 $97 = __ZN7Scanner11isPrototypeEP10LexContext($ctx) | 0;
 $98 = HEAP32[$6 >> 2] | 0;
 if ($97) {
  $99 = $ctx + 8 | 0;
  HEAP32[$0 + 0 >> 2] = HEAP32[$99 + 0 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$99 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$99 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$99 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$99 + 16 >> 2];
  $100 = $98 + 72 | 0;
  $101 = HEAP32[$100 >> 2] | 0;
  HEAP32[$100 >> 2] = $101 + 72;
  HEAP32[$101 >> 2] = 0;
  HEAP32[$101 + 4 >> 2] = 211;
  $104 = $101 + 28 | 0;
  HEAP32[$104 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  HEAP32[$104 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$104 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$104 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$104 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
  $105 = $101 + 8 | 0;
  $106 = $98 + 48 | 0;
  HEAP32[$105 + 0 >> 2] = HEAP32[$106 + 0 >> 2];
  HEAP32[$105 + 4 >> 2] = HEAP32[$106 + 4 >> 2];
  HEAP32[$105 + 8 >> 2] = HEAP32[$106 + 8 >> 2];
  HEAP32[$105 + 12 >> 2] = HEAP32[$106 + 12 >> 2];
  HEAP32[$105 + 16 >> 2] = HEAP32[$106 + 16 >> 2];
  HEAP32[$101 + 52 >> 2] = $5;
  HEAP32[$101 + 56 >> 2] = 0;
  HEAP32[$101 + 60 >> 2] = 0;
  HEAP32[$101 + 64 >> 2] = 60816;
  HEAP8[$this + 2 >> 0] = 1;
  HEAP8[$this + 10 >> 0] = 1;
  $ret$0 = $101;
  $174 = $ctx + 40 | 0;
  $175 = HEAP32[$174 >> 2] | 0;
  $176 = HEAP32[$4 >> 2] | 0;
  $177 = $176 + $175 | 0;
  HEAP32[$4 >> 2] = $177;
  HEAP8[$177 >> 0] = 0;
  HEAP32[$174 >> 2] = 0;
  $178 = HEAP32[$4 >> 2] | 0;
  $179 = $178 + 1 | 0;
  HEAP32[$4 >> 2] = $179;
  HEAP8[$179 >> 0] = 0;
  STACKTOP = sp;
  return $ret$0 | 0;
 }
 $116 = HEAP32[$98 + 72 >> 2] | 0;
 $119 = __ZN7Scanner14isHereDocumentEP10LexContextP5Token($ctx, (HEAP32[$98 + 68 >> 2] | 0) == ($116 | 0) ? 0 : $116 + -72 | 0) | 0;
 $120 = HEAP32[$6 >> 2] | 0;
 $121 = $ctx + 8 | 0;
 if (!$119) {
  HEAP32[$0 + 0 >> 2] = HEAP32[$121 + 0 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$121 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$121 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$121 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$121 + 16 >> 2];
  $163 = $120 + 72 | 0;
  $164 = HEAP32[$163 >> 2] | 0;
  HEAP32[$163 >> 2] = $164 + 72;
  HEAP32[$164 >> 2] = 0;
  HEAP32[$164 + 4 >> 2] = 211;
  $167 = $164 + 28 | 0;
  HEAP32[$167 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  HEAP32[$167 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$167 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$167 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$167 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
  $168 = $164 + 8 | 0;
  $169 = $120 + 48 | 0;
  HEAP32[$168 + 0 >> 2] = HEAP32[$169 + 0 >> 2];
  HEAP32[$168 + 4 >> 2] = HEAP32[$169 + 4 >> 2];
  HEAP32[$168 + 8 >> 2] = HEAP32[$169 + 8 >> 2];
  HEAP32[$168 + 12 >> 2] = HEAP32[$169 + 12 >> 2];
  HEAP32[$168 + 16 >> 2] = HEAP32[$169 + 16 >> 2];
  HEAP32[$164 + 52 >> 2] = $5;
  HEAP32[$164 + 56 >> 2] = 0;
  HEAP32[$164 + 60 >> 2] = 0;
  HEAP32[$164 + 64 >> 2] = 60816;
  $ret$0 = $164;
  $174 = $ctx + 40 | 0;
  $175 = HEAP32[$174 >> 2] | 0;
  $176 = HEAP32[$4 >> 2] | 0;
  $177 = $176 + $175 | 0;
  HEAP32[$4 >> 2] = $177;
  HEAP8[$177 >> 0] = 0;
  HEAP32[$174 >> 2] = 0;
  $178 = HEAP32[$4 >> 2] | 0;
  $179 = $178 + 1 | 0;
  HEAP32[$4 >> 2] = $179;
  HEAP8[$179 >> 0] = 0;
  STACKTOP = sp;
  return $ret$0 | 0;
 };
 HEAP32[$0 + 0 >> 2] = HEAP32[$121 + 0 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$121 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$121 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$121 + 12 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$121 + 16 >> 2];
 $122 = $120 + 72 | 0;
 $123 = HEAP32[$122 >> 2] | 0;
 HEAP32[$122 >> 2] = $123 + 72;
 HEAP32[$123 >> 2] = 0;
 HEAP32[$123 + 4 >> 2] = 211;
 $126 = $123 + 28 | 0;
 HEAP32[$126 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$126 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$126 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$126 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$126 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 $127 = $123 + 8 | 0;
 $128 = $120 + 48 | 0;
 HEAP32[$127 + 0 >> 2] = HEAP32[$128 + 0 >> 2];
 HEAP32[$127 + 4 >> 2] = HEAP32[$128 + 4 >> 2];
 HEAP32[$127 + 8 >> 2] = HEAP32[$128 + 8 >> 2];
 HEAP32[$127 + 12 >> 2] = HEAP32[$128 + 12 >> 2];
 HEAP32[$127 + 16 >> 2] = HEAP32[$128 + 16 >> 2];
 HEAP32[$123 + 52 >> 2] = $5;
 HEAP32[$123 + 56 >> 2] = 0;
 HEAP32[$123 + 60 >> 2] = 0;
 HEAP32[$123 + 64 >> 2] = 60816;
 $133 = $this + 32 | 0;
 $134 = _strlen($5 | 0) | 0;
 if ($134 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($134 >>> 0 < 11) {
  HEAP8[$3 >> 0] = $134 << 1;
  $__p$0$i = $3 + 1 | 0;
 } else {
  $141 = $134 + 16 & -16;
  $$size$i = ($141 | 0) == 0 ? 1 : $141;
  $143 = _malloc($$size$i) | 0;
  L45 : do if (!$143) {
   while (1) {
    $145 = HEAP32[15470] | 0;
    HEAP32[15470] = $145 + 0;
    if (!$145) break;
    FUNCTION_TABLE_v[$145 & 3]();
    $148 = _malloc($$size$i) | 0;
    if ($148) {
     $$lcssa$i = $148;
     break L45;
    }
   }
   $150 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$150 >> 2] = 61776;
   ___cxa_throw($150 | 0, 61824, 94);
  } else $$lcssa$i = $143; while (0);
  HEAP32[$3 + 8 >> 2] = $$lcssa$i;
  HEAP32[$3 >> 2] = $141 | 1;
  HEAP32[$3 + 4 >> 2] = $134;
  $__p$0$i = $$lcssa$i;
 }
 _memcpy($__p$0$i | 0, $5 | 0, $134 | 0) | 0;
 HEAP8[$__p$0$i + $134 >> 0] = 0;
 if (!(HEAP8[$133 >> 0] & 1)) {
  HEAP8[$133 + 1 >> 0] = 0;
  HEAP8[$133 >> 0] = 0;
 } else {
  HEAP8[HEAP32[$this + 40 >> 2] >> 0] = 0;
  HEAP32[$this + 36 >> 2] = 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($133);
 HEAP32[$133 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
 HEAP32[$133 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$133 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$3 + 0 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$this + 28 >> 2] = $123;
 _memmove($127 | 0, 44060 | 0, 20) | 0;
 $ret$0 = $123;
 $174 = $ctx + 40 | 0;
 $175 = HEAP32[$174 >> 2] | 0;
 $176 = HEAP32[$4 >> 2] | 0;
 $177 = $176 + $175 | 0;
 HEAP32[$4 >> 2] = $177;
 HEAP8[$177 >> 0] = 0;
 HEAP32[$174 >> 2] = 0;
 $178 = HEAP32[$4 >> 2] | 0;
 $179 = $178 + 1 | 0;
 HEAP32[$4 >> 2] = $179;
 HEAP8[$179 >> 0] = 0;
 STACKTOP = sp;
 return $ret$0 | 0;
}

function __ZNSt3__16vectorI18CompilerLexerTokenNS_9allocatorIS1_EEE6resizeEjRKS1_($this, $__sz, $__x) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 $__x = $__x | 0;
 var $$0$i$i = 0, $$0$i131$i = 0, $$0$i132$i = 0, $$0$i3$i = 0, $$01$i$i$i = 0, $$lcssa$i$i = 0, $$lcssa$i12$i = 0, $$lcssa$i20$i = 0, $$lcssa$i33$i = 0, $$lcssa$i48$i = 0, $$lcssa$i63$i = 0, $$pre$i8$i = 0, $$pre30$i = 0, $$size$i$i = 0, $$size$i16$i = 0, $$size$i29$i = 0, $$size$i44$i = 0, $$size$i8$i = 0, $0 = 0, $1 = 0, $100 = 0, $102 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $121 = 0, $122 = 0, $129 = 0, $131 = 0, $133 = 0, $136 = 0, $138 = 0, $143 = 0, $147 = 0, $148 = 0, $15 = 0, $155 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $17 = 0, $170 = 0, $173 = 0, $174 = 0, $179 = 0, $18 = 0, $181 = 0, $183 = 0, $184 = 0, $19 = 0, $190 = 0, $2 = 0, $204 = 0, $206 = 0, $208 = 0, $209 = 0, $21 = 0, $25 = 0, $26 = 0, $3 = 0, $33 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $42 = 0, $47 = 0, $51 = 0, $52 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $66 = 0, $68 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $85 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $__p$0$i$i = 0, $__p$0$i25$i = 0, $__p$0$i4$i = 0, $__p$0$i40$i = 0, label = 0, sp = 0, $$01$i$i$i$looptemp = 0, $181$looptemp = 0, $190$looptemp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP32[$this >> 2] | 0;
 $3 = $1;
 $4 = $2;
 $6 = ($3 - $4 | 0) / 24 | 0;
 if ($6 >>> 0 >= $__sz >>> 0) {
  if ($6 >>> 0 <= $__sz >>> 0) {
   STACKTOP = sp;
   return;
  }
  $206 = $2 + ($__sz * 24 | 0) | 0;
  if (($1 | 0) == ($206 | 0)) {
   STACKTOP = sp;
   return;
  } else $209 = $1;
  do {
   $208 = $209 + -24 | 0;
   HEAP32[$0 >> 2] = $208;
   if (HEAP8[$209 + -12 >> 0] & 1) _free(HEAP32[$209 + -4 >> 2] | 0);
   if (HEAP8[$208 >> 0] & 1) _free(HEAP32[$209 + -16 >> 2] | 0);
   $209 = HEAP32[$0 >> 2] | 0;
  } while (($209 | 0) != ($206 | 0));
  STACKTOP = sp;
  return;
 }
 $8 = $__sz - $6 | 0;
 $9 = $this + 8 | 0;
 $11 = HEAP32[$9 >> 2] | 0;
 if ((($11 - $3 | 0) / 24 | 0) >>> 0 >= $8 >>> 0) {
  $15 = $__x + 12 | 0;
  $16 = $__x + 20 | 0;
  $17 = $__x + 16 | 0;
  $18 = $__x + 8 | 0;
  $19 = $__x + 4 | 0;
  $$0$i$i = $8;
  $21 = $1;
  L20 : while (1) {
   if (!$21) $74 = 0; else {
    if (!(HEAP8[$__x >> 0] & 1)) {
     HEAP32[$21 + 0 >> 2] = HEAP32[$__x + 0 >> 2];
     HEAP32[$21 + 4 >> 2] = HEAP32[$__x + 4 >> 2];
     HEAP32[$21 + 8 >> 2] = HEAP32[$__x + 8 >> 2];
    } else {
     $25 = HEAP32[$18 >> 2] | 0;
     $26 = HEAP32[$19 >> 2] | 0;
     if ($26 >>> 0 > 4294967279) {
      label = 8;
      break;
     }
     if ($26 >>> 0 < 11) {
      HEAP8[$21 >> 0] = $26 << 1;
      $__p$0$i$i = $21 + 1 | 0;
     } else {
      $33 = $26 + 16 & -16;
      $$size$i$i = ($33 | 0) == 0 ? 1 : $33;
      $35 = _malloc($$size$i$i) | 0;
      if (!$35) while (1) {
       $37 = HEAP32[15470] | 0;
       HEAP32[15470] = $37 + 0;
       if (!$37) {
        label = 14;
        break L20;
       }
       FUNCTION_TABLE_v[$37 & 3]();
       $40 = _malloc($$size$i$i) | 0;
       if ($40) {
        $$lcssa$i$i = $40;
        break;
       }
      } else $$lcssa$i$i = $35;
      HEAP32[$21 + 8 >> 2] = $$lcssa$i$i;
      HEAP32[$21 >> 2] = $33 | 1;
      HEAP32[$21 + 4 >> 2] = $26;
      $__p$0$i$i = $$lcssa$i$i;
     }
     _memcpy($__p$0$i$i | 0, $25 | 0, $26 | 0) | 0;
     HEAP8[$__p$0$i$i + $26 >> 0] = 0;
    }
    $47 = $21 + 12 | 0;
    if (!(HEAP8[$15 >> 0] & 1)) {
     HEAP32[$47 + 0 >> 2] = HEAP32[$15 + 0 >> 2];
     HEAP32[$47 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
     HEAP32[$47 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
    } else {
     $51 = HEAP32[$16 >> 2] | 0;
     $52 = HEAP32[$17 >> 2] | 0;
     if ($52 >>> 0 > 4294967279) {
      label = 20;
      break;
     }
     if ($52 >>> 0 < 11) {
      HEAP8[$47 >> 0] = $52 << 1;
      $__p$0$i4$i = $47 + 1 | 0;
     } else {
      $59 = $52 + 16 & -16;
      $$size$i8$i = ($59 | 0) == 0 ? 1 : $59;
      $61 = _malloc($$size$i8$i) | 0;
      if (!$61) while (1) {
       $63 = HEAP32[15470] | 0;
       HEAP32[15470] = $63 + 0;
       if (!$63) {
        label = 26;
        break L20;
       }
       FUNCTION_TABLE_v[$63 & 3]();
       $66 = _malloc($$size$i8$i) | 0;
       if ($66) {
        $$lcssa$i12$i = $66;
        break;
       }
      } else $$lcssa$i12$i = $61;
      HEAP32[$21 + 20 >> 2] = $$lcssa$i12$i;
      HEAP32[$47 >> 2] = $59 | 1;
      HEAP32[$21 + 16 >> 2] = $52;
      $__p$0$i4$i = $$lcssa$i12$i;
     }
     _memcpy($__p$0$i4$i | 0, $51 | 0, $52 | 0) | 0;
     HEAP8[$__p$0$i4$i + $52 >> 0] = 0;
    }
    $74 = HEAP32[$0 >> 2] | 0;
   }
   $21 = $74 + 24 | 0;
   HEAP32[$0 >> 2] = $21;
   $$0$i$i = $$0$i$i + -1 | 0;
   if (!$$0$i$i) {
    label = 90;
    break;
   }
  }
  if ((label | 0) == 8) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 14) {
   $42 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$42 >> 2] = 61776;
   ___cxa_throw($42 | 0, 61824, 94);
  } else if ((label | 0) == 20) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 26) {
   $68 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$68 >> 2] = 61776;
   ___cxa_throw($68 | 0, 61824, 94);
  } else if ((label | 0) == 90) {
   STACKTOP = sp;
   return;
  }
 }
 if ($__sz >>> 0 > 178956970) {
  $78 = ___cxa_allocate_exception(8) | 0;
  HEAP32[$78 >> 2] = 61920;
  $79 = $78 + 4 | 0;
  $80 = _malloc(19) | 0;
  if ($80) {
   $$lcssa$i63$i = $80;
   HEAP32[$$lcssa$i63$i >> 2] = 6;
   $88 = $$lcssa$i63$i + 4 | 0;
   HEAP32[$88 >> 2] = 6;
   $89 = $$lcssa$i63$i + 8 | 0;
   HEAP32[$89 >> 2] = 0;
   $90 = $$lcssa$i63$i + 12 | 0;
   HEAP8[$90 + 0 >> 0] = HEAP8[50728] | 0;
   HEAP8[$90 + 1 >> 0] = HEAP8[50729] | 0;
   HEAP8[$90 + 2 >> 0] = HEAP8[50730] | 0;
   HEAP8[$90 + 3 >> 0] = HEAP8[50731] | 0;
   HEAP8[$90 + 4 >> 0] = HEAP8[50732] | 0;
   HEAP8[$90 + 5 >> 0] = HEAP8[50733] | 0;
   HEAP8[$90 + 6 >> 0] = HEAP8[50734] | 0;
   HEAP32[$79 >> 2] = $90;
   HEAP32[$78 >> 2] = 62e3;
   ___cxa_throw($78 | 0, 62040, 96);
  }
  while (1) {
   $82 = HEAP32[15470] | 0;
   HEAP32[15470] = $82 + 0;
   if (!$82) {
    label = 35;
    break;
   }
   FUNCTION_TABLE_v[$82 & 3]();
   $85 = _malloc(19) | 0;
   if ($85) {
    $$lcssa$i63$i = $85;
    label = 36;
    break;
   }
  }
  if ((label | 0) == 35) {
   $87 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$87 >> 2] = 61776;
   ___cxa_throw($87 | 0, 61824, 94);
  } else if ((label | 0) == 36) {
   HEAP32[$$lcssa$i63$i >> 2] = 6;
   $88 = $$lcssa$i63$i + 4 | 0;
   HEAP32[$88 >> 2] = 6;
   $89 = $$lcssa$i63$i + 8 | 0;
   HEAP32[$89 >> 2] = 0;
   $90 = $$lcssa$i63$i + 12 | 0;
   HEAP8[$90 + 0 >> 0] = HEAP8[50728] | 0;
   HEAP8[$90 + 1 >> 0] = HEAP8[50729] | 0;
   HEAP8[$90 + 2 >> 0] = HEAP8[50730] | 0;
   HEAP8[$90 + 3 >> 0] = HEAP8[50731] | 0;
   HEAP8[$90 + 4 >> 0] = HEAP8[50732] | 0;
   HEAP8[$90 + 5 >> 0] = HEAP8[50733] | 0;
   HEAP8[$90 + 6 >> 0] = HEAP8[50734] | 0;
   HEAP32[$79 >> 2] = $90;
   HEAP32[$78 >> 2] = 62e3;
   ___cxa_throw($78 | 0, 62040, 96);
  }
 }
 $92 = ($11 - $4 | 0) / 24 | 0;
 if ($92 >>> 0 < 89478485) {
  $94 = $92 << 1;
  $96 = $94 >>> 0 < $__sz >>> 0 ? $__sz : $94;
  if (!$96) {
   $$0$i132$i = 0;
   $109 = 0;
  } else {
   $$0$i131$i = $96;
   label = 39;
  }
 } else {
  $$0$i131$i = 178956970;
  label = 39;
 }
 if ((label | 0) == 39) {
  $98 = $$0$i131$i * 24 | 0;
  $$size$i16$i = ($98 | 0) == 0 ? 1 : $98;
  $100 = _malloc($$size$i16$i) | 0;
  L75 : do if (!$100) {
   while (1) {
    $102 = HEAP32[15470] | 0;
    HEAP32[15470] = $102 + 0;
    if (!$102) break;
    FUNCTION_TABLE_v[$102 & 3]();
    $105 = _malloc($$size$i16$i) | 0;
    if ($105) {
     $$lcssa$i20$i = $105;
     break L75;
    }
   }
   $107 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$107 >> 2] = 61776;
   ___cxa_throw($107 | 0, 61824, 94);
  } else $$lcssa$i20$i = $100; while (0);
  $$0$i132$i = $$0$i131$i;
  $109 = $$lcssa$i20$i;
 }
 $108 = $109 + ($6 * 24 | 0) | 0;
 $110 = $109 + ($$0$i132$i * 24 | 0) | 0;
 $111 = $__x + 12 | 0;
 $112 = $__x + 20 | 0;
 $113 = $__x + 16 | 0;
 $114 = $__x + 8 | 0;
 $115 = $__x + 4 | 0;
 $$0$i3$i = $8;
 $117 = $108;
 L82 : while (1) {
  do if (!$117) $170 = 0; else {
   if (!(HEAP8[$__x >> 0] & 1)) {
    HEAP32[$117 + 0 >> 2] = HEAP32[$__x + 0 >> 2];
    HEAP32[$117 + 4 >> 2] = HEAP32[$__x + 4 >> 2];
    HEAP32[$117 + 8 >> 2] = HEAP32[$__x + 8 >> 2];
   } else {
    $121 = HEAP32[$114 >> 2] | 0;
    $122 = HEAP32[$115 >> 2] | 0;
    if ($122 >>> 0 > 4294967279) {
     label = 49;
     break L82;
    }
    if ($122 >>> 0 < 11) {
     HEAP8[$117 >> 0] = $122 << 1;
     $__p$0$i25$i = $117 + 1 | 0;
    } else {
     $129 = $122 + 16 & -16;
     $$size$i29$i = ($129 | 0) == 0 ? 1 : $129;
     $131 = _malloc($$size$i29$i) | 0;
     if (!$131) while (1) {
      $133 = HEAP32[15470] | 0;
      HEAP32[15470] = $133 + 0;
      if (!$133) {
       label = 55;
       break L82;
      }
      FUNCTION_TABLE_v[$133 & 3]();
      $136 = _malloc($$size$i29$i) | 0;
      if ($136) {
       $$lcssa$i33$i = $136;
       break;
      }
     } else $$lcssa$i33$i = $131;
     HEAP32[$117 + 8 >> 2] = $$lcssa$i33$i;
     HEAP32[$117 >> 2] = $129 | 1;
     HEAP32[$117 + 4 >> 2] = $122;
     $__p$0$i25$i = $$lcssa$i33$i;
    }
    _memcpy($__p$0$i25$i | 0, $121 | 0, $122 | 0) | 0;
    HEAP8[$__p$0$i25$i + $122 >> 0] = 0;
   }
   $143 = $117 + 12 | 0;
   if (!(HEAP8[$111 >> 0] & 1)) {
    HEAP32[$143 + 0 >> 2] = HEAP32[$111 + 0 >> 2];
    HEAP32[$143 + 4 >> 2] = HEAP32[$111 + 4 >> 2];
    HEAP32[$143 + 8 >> 2] = HEAP32[$111 + 8 >> 2];
    $170 = $117;
    break;
   }
   $147 = HEAP32[$112 >> 2] | 0;
   $148 = HEAP32[$113 >> 2] | 0;
   if ($148 >>> 0 > 4294967279) {
    label = 61;
    break L82;
   }
   if ($148 >>> 0 < 11) {
    HEAP8[$143 >> 0] = $148 << 1;
    $__p$0$i40$i = $143 + 1 | 0;
   } else {
    $155 = $148 + 16 & -16;
    $$size$i44$i = ($155 | 0) == 0 ? 1 : $155;
    $157 = _malloc($$size$i44$i) | 0;
    if (!$157) while (1) {
     $159 = HEAP32[15470] | 0;
     HEAP32[15470] = $159 + 0;
     if (!$159) {
      label = 67;
      break L82;
     }
     FUNCTION_TABLE_v[$159 & 3]();
     $162 = _malloc($$size$i44$i) | 0;
     if ($162) {
      $$lcssa$i48$i = $162;
      break;
     }
    } else $$lcssa$i48$i = $157;
    HEAP32[$117 + 20 >> 2] = $$lcssa$i48$i;
    HEAP32[$143 >> 2] = $155 | 1;
    HEAP32[$117 + 16 >> 2] = $148;
    $__p$0$i40$i = $$lcssa$i48$i;
   }
   _memcpy($__p$0$i40$i | 0, $147 | 0, $148 | 0) | 0;
   HEAP8[$__p$0$i40$i + $148 >> 0] = 0;
   $170 = $117;
  } while (0);
  $117 = $170 + 24 | 0;
  $$0$i3$i = $$0$i3$i + -1 | 0;
  if (!$$0$i3$i) {
   label = 71;
   break;
  }
 }
 if ((label | 0) == 49) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 55) {
  $138 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$138 >> 2] = 61776;
  ___cxa_throw($138 | 0, 61824, 94);
 } else if ((label | 0) == 61) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(); else if ((label | 0) == 67) {
  $164 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$164 >> 2] = 61776;
  ___cxa_throw($164 | 0, 61824, 94);
 } else if ((label | 0) == 71) {
  $173 = HEAP32[$this >> 2] | 0;
  $174 = HEAP32[$0 >> 2] | 0;
  if (($174 | 0) == ($173 | 0)) {
   HEAP32[$this >> 2] = $108;
   HEAP32[$0 >> 2] = $117;
   HEAP32[$9 >> 2] = $110;
   $204 = $173;
  } else {
   $179 = (($174 + -24 - $173 | 0) >>> 0) / 24 | 0;
   $$01$i$i$i = $174;
   $181 = $108;
   do {
    $181$looptemp = $181;
    $181 = $181 + -24 | 0;
    $$01$i$i$i$looptemp = $$01$i$i$i;
    $$01$i$i$i = $$01$i$i$i + -24 | 0;
    HEAP32[$181 + 0 >> 2] = HEAP32[$$01$i$i$i + 0 >> 2];
    HEAP32[$181 + 4 >> 2] = HEAP32[$$01$i$i$i + 4 >> 2];
    HEAP32[$181 + 8 >> 2] = HEAP32[$$01$i$i$i + 8 >> 2];
    HEAP32[$$01$i$i$i + 0 >> 2] = 0;
    HEAP32[$$01$i$i$i + 4 >> 2] = 0;
    HEAP32[$$01$i$i$i + 8 >> 2] = 0;
    $183 = $181$looptemp + -12 | 0;
    $184 = $$01$i$i$i$looptemp + -12 | 0;
    HEAP32[$183 + 0 >> 2] = HEAP32[$184 + 0 >> 2];
    HEAP32[$183 + 4 >> 2] = HEAP32[$184 + 4 >> 2];
    HEAP32[$183 + 8 >> 2] = HEAP32[$184 + 8 >> 2];
    HEAP32[$184 + 0 >> 2] = 0;
    HEAP32[$184 + 4 >> 2] = 0;
    HEAP32[$184 + 8 >> 2] = 0;
   } while (($$01$i$i$i | 0) != ($173 | 0));
   $$pre$i8$i = HEAP32[$this >> 2] | 0;
   $$pre30$i = HEAP32[$0 >> 2] | 0;
   HEAP32[$this >> 2] = $109 + (($6 + -1 - $179 | 0) * 24 | 0);
   HEAP32[$0 >> 2] = $117;
   HEAP32[$9 >> 2] = $110;
   if (($$pre30$i | 0) == ($$pre$i8$i | 0)) $204 = $$pre$i8$i; else {
    $190 = $$pre30$i;
    do {
     $190$looptemp = $190;
     $190 = $190 + -24 | 0;
     if (HEAP8[$190$looptemp + -12 >> 0] & 1) _free(HEAP32[$190$looptemp + -4 >> 2] | 0);
     if (HEAP8[$190 >> 0] & 1) _free(HEAP32[$190$looptemp + -16 >> 2] | 0);
    } while (($190 | 0) != ($$pre$i8$i | 0));
    $204 = $$pre$i8$i;
   }
  }
  if (!$204) {
   STACKTOP = sp;
   return;
  }
  _free($204);
  STACKTOP = sp;
  return;
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i21 = 0, $$0$i8 = 0, $$02$i$i = 0, $$02$i$i8 = 0, $$1$i = 0, $$1$i10 = 0, $$2$i = 0, $$2$i11 = 0, $$sroa$5 = 0, $$sroa$520 = 0, $0 = 0, $1 = 0, $100 = 0, $102 = 0, $104 = 0, $11 = 0, $110 = 0, $117 = 0, $118 = 0, $12 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $141 = 0, $143 = 0, $147 = 0, $149 = 0, $150 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $160 = 0, $162 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $61 = 0, $63 = 0, $67 = 0, $69 = 0, $70 = 0, $74 = 0, $76 = 0, $79 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, $__p$0$lcssa$i$i = 0, $__p$0$lcssa$i$i13 = 0, $__p$0$ph$i$i = 0, $__p$0$ph$i$i6 = 0, $__p$01$i$i = 0, $__p$01$i$i9 = 0, $__v$i$i18 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__v$i$i18 = sp;
 $0 = sp + 32 | 0;
 $$sroa$520 = sp + 92 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 56 | 0;
 $$sroa$5 = sp + 99 | 0;
 $3 = sp + 20 | 0;
 if (($last - $first | 0) <= 2) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP8[$first >> 0] | 0) != 102) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $11 = HEAP8[$first + 1 >> 0] | 0;
 if ($11 << 24 >> 24 == 76) {
  $88 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first + 2 | 0, $last) | 0;
  if (($88 | 0) == ($last | 0)) {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if ((HEAP8[$88 >> 0] | 0) != 112) {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $92 = $88 + 1 | 0;
  if (($92 | 0) == ($last | 0)) $$2$i11 = $last; else {
   $94 = HEAP8[$92 >> 0] | 0;
   if ($94 << 24 >> 24 == 114) {
    $96 = $88 + 2 | 0;
    $$0$i8 = $96;
    $100 = $92;
    $98 = HEAP8[$96 >> 0] | 0;
   } else {
    $$0$i8 = $92;
    $100 = $88;
    $98 = $94;
   }
   if ($98 << 24 >> 24 == 86) {
    $99 = $100 + 2 | 0;
    $$1$i10 = $99;
    $102 = HEAP8[$99 >> 0] | 0;
   } else {
    $$1$i10 = $$0$i8;
    $102 = $98;
   }
   $$2$i11 = $102 << 24 >> 24 == 75 ? $$1$i10 + 1 | 0 : $$1$i10;
  }
  $104 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($$2$i11, $last) | 0;
  if (($104 | 0) == ($last | 0)) {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if ((HEAP8[$104 >> 0] | 0) != 95) {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $110 = $104 - $$2$i11 | 0;
  if ($110 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($110 >>> 0 < 11) {
   HEAP8[$3 >> 0] = $110 << 1;
   $__p$0$ph$i$i6 = $3 + 1 | 0;
  } else {
   $117 = $110 + 16 & -16;
   $118 = _malloc($117) | 0;
   HEAP32[$3 + 8 >> 2] = $118;
   HEAP32[$3 >> 2] = $117 | 1;
   HEAP32[$3 + 4 >> 2] = $110;
   $__p$0$ph$i$i6 = $118;
  }
  if (($$2$i11 | 0) == ($104 | 0)) $__p$0$lcssa$i$i13 = $__p$0$ph$i$i6; else {
   $$02$i$i8 = $$2$i11;
   $__p$01$i$i9 = $__p$0$ph$i$i6;
   while (1) {
    HEAP8[$__p$01$i$i9 >> 0] = HEAP8[$$02$i$i8 >> 0] | 0;
    $$02$i$i8 = $$02$i$i8 + 1 | 0;
    if (($$02$i$i8 | 0) == ($104 | 0)) break; else $__p$01$i$i9 = $__p$01$i$i9 + 1 | 0;
   }
   $__p$0$lcssa$i$i13 = $__p$0$ph$i$i6 + $110 | 0;
  }
  HEAP8[$__p$0$lcssa$i$i13 >> 0] = 0;
  $127 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($3, 0, 60728, 2) | 0;
  $128 = HEAP8[$127 >> 0] | 0;
  $129 = $127 + 1 | 0;
  HEAP8[$$sroa$5 + 0 >> 0] = HEAP8[$129 + 0 >> 0] | 0;
  HEAP8[$$sroa$5 + 1 >> 0] = HEAP8[$129 + 1 >> 0] | 0;
  HEAP8[$$sroa$5 + 2 >> 0] = HEAP8[$129 + 2 >> 0] | 0;
  HEAP8[$$sroa$5 + 3 >> 0] = HEAP8[$129 + 3 >> 0] | 0;
  HEAP8[$$sroa$5 + 4 >> 0] = HEAP8[$129 + 4 >> 0] | 0;
  HEAP8[$$sroa$5 + 5 >> 0] = HEAP8[$129 + 5 >> 0] | 0;
  HEAP8[$$sroa$5 + 6 >> 0] = HEAP8[$129 + 6 >> 0] | 0;
  $131 = HEAP32[$127 + 8 >> 2] | 0;
  HEAP32[$127 + 0 >> 2] = 0;
  HEAP32[$127 + 4 >> 2] = 0;
  HEAP32[$127 + 8 >> 2] = 0;
  HEAP8[$2 >> 0] = $128;
  $132 = $2 + 1 | 0;
  HEAP8[$132 + 0 >> 0] = HEAP8[$$sroa$5 + 0 >> 0] | 0;
  HEAP8[$132 + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0;
  HEAP8[$132 + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0;
  HEAP8[$132 + 3 >> 0] = HEAP8[$$sroa$5 + 3 >> 0] | 0;
  HEAP8[$132 + 4 >> 0] = HEAP8[$$sroa$5 + 4 >> 0] | 0;
  HEAP8[$132 + 5 >> 0] = HEAP8[$$sroa$5 + 5 >> 0] | 0;
  HEAP8[$132 + 6 >> 0] = HEAP8[$$sroa$5 + 6 >> 0] | 0;
  HEAP32[$2 + 8 >> 2] = $131;
  HEAP8[$$sroa$5 + 0 >> 0] = 0;
  HEAP8[$$sroa$5 + 1 >> 0] = 0;
  HEAP8[$$sroa$5 + 2 >> 0] = 0;
  HEAP8[$$sroa$5 + 3 >> 0] = 0;
  HEAP8[$$sroa$5 + 4 >> 0] = 0;
  HEAP8[$$sroa$5 + 5 >> 0] = 0;
  HEAP8[$$sroa$5 + 6 >> 0] = 0;
  $134 = $2 + 12 | 0;
  HEAP32[$134 + 0 >> 2] = 0;
  HEAP32[$134 + 4 >> 2] = 0;
  HEAP32[$134 + 8 >> 2] = 0;
  $135 = $db + 4 | 0;
  $136 = HEAP32[$135 >> 2] | 0;
  $138 = HEAP32[$db + 8 >> 2] | 0;
  if ($136 >>> 0 < $138 >>> 0) {
   if (!$136) $143 = 0; else {
    HEAP32[$136 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
    HEAP32[$136 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$136 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAP32[$2 + 0 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = 0;
    $141 = $136 + 12 | 0;
    HEAP32[$141 + 0 >> 2] = HEAP32[$134 + 0 >> 2];
    HEAP32[$141 + 4 >> 2] = HEAP32[$134 + 4 >> 2];
    HEAP32[$141 + 8 >> 2] = HEAP32[$134 + 8 >> 2];
    HEAP32[$134 + 0 >> 2] = 0;
    HEAP32[$134 + 4 >> 2] = 0;
    HEAP32[$134 + 8 >> 2] = 0;
    $143 = HEAP32[$135 >> 2] | 0;
   }
   HEAP32[$135 >> 2] = $143 + 24;
  } else {
   $147 = HEAP32[$db >> 2] | 0;
   $149 = ($136 - $147 | 0) / 24 | 0;
   $150 = $149 + 1 | 0;
   if (($150 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   $154 = ($138 - $147 | 0) / 24 | 0;
   if ($154 >>> 0 < 1073741823) {
    $156 = $154 << 1;
    $$0$i$i$i21 = $156 >>> 0 < $150 >>> 0 ? $150 : $156;
   } else $$0$i$i$i21 = 2147483647;
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i18, $$0$i$i$i21, $149, $db + 12 | 0);
   $159 = $__v$i$i18 + 8 | 0;
   $160 = HEAP32[$159 >> 2] | 0;
   if ($160) {
    HEAP32[$160 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
    HEAP32[$160 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$160 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAP32[$2 + 0 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = 0;
    $162 = $160 + 12 | 0;
    HEAP32[$162 + 0 >> 2] = HEAP32[$134 + 0 >> 2];
    HEAP32[$162 + 4 >> 2] = HEAP32[$134 + 4 >> 2];
    HEAP32[$162 + 8 >> 2] = HEAP32[$134 + 8 >> 2];
    HEAP32[$134 + 0 >> 2] = 0;
    HEAP32[$134 + 4 >> 2] = 0;
    HEAP32[$134 + 8 >> 2] = 0;
   }
   HEAP32[$159 >> 2] = $160 + 24;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i18);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i18);
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
  if (HEAP8[$3 >> 0] & 1) _free(HEAP32[$3 + 8 >> 2] | 0);
  $$0 = $104 + 1 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ($11 << 24 >> 24 == 112) {
  $12 = $first + 2 | 0;
  if (($12 | 0) == ($last | 0)) $$2$i = $last; else {
   $14 = HEAP8[$12 >> 0] | 0;
   if ($14 << 24 >> 24 == 114) {
    $16 = $first + 3 | 0;
    $$0$i = $16;
    $18 = HEAP8[$16 >> 0] | 0;
    $20 = 4;
   } else {
    $$0$i = $12;
    $18 = $14;
    $20 = 3;
   }
   if ($18 << 24 >> 24 == 86) {
    $19 = $first + $20 | 0;
    $$1$i = $19;
    $22 = HEAP8[$19 >> 0] | 0;
   } else {
    $$1$i = $$0$i;
    $22 = $18;
   }
   $$2$i = $22 << 24 >> 24 == 75 ? $$1$i + 1 | 0 : $$1$i;
  }
  $24 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($$2$i, $last) | 0;
  if (($24 | 0) == ($last | 0)) {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if ((HEAP8[$24 >> 0] | 0) != 95) {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $30 = $24 - $$2$i | 0;
  if ($30 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($30 >>> 0 < 11) {
   HEAP8[$1 >> 0] = $30 << 1;
   $__p$0$ph$i$i = $1 + 1 | 0;
  } else {
   $37 = $30 + 16 & -16;
   $38 = _malloc($37) | 0;
   HEAP32[$1 + 8 >> 2] = $38;
   HEAP32[$1 >> 2] = $37 | 1;
   HEAP32[$1 + 4 >> 2] = $30;
   $__p$0$ph$i$i = $38;
  }
  if (($$2$i | 0) == ($24 | 0)) $__p$0$lcssa$i$i = $__p$0$ph$i$i; else {
   $$02$i$i = $$2$i;
   $__p$01$i$i = $__p$0$ph$i$i;
   while (1) {
    HEAP8[$__p$01$i$i >> 0] = HEAP8[$$02$i$i >> 0] | 0;
    $$02$i$i = $$02$i$i + 1 | 0;
    if (($$02$i$i | 0) == ($24 | 0)) break; else $__p$01$i$i = $__p$01$i$i + 1 | 0;
   }
   $__p$0$lcssa$i$i = $__p$0$ph$i$i + $30 | 0;
  }
  HEAP8[$__p$0$lcssa$i$i >> 0] = 0;
  $47 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($1, 0, 60728, 2) | 0;
  $48 = HEAP8[$47 >> 0] | 0;
  $49 = $47 + 1 | 0;
  HEAP8[$$sroa$520 + 0 >> 0] = HEAP8[$49 + 0 >> 0] | 0;
  HEAP8[$$sroa$520 + 1 >> 0] = HEAP8[$49 + 1 >> 0] | 0;
  HEAP8[$$sroa$520 + 2 >> 0] = HEAP8[$49 + 2 >> 0] | 0;
  HEAP8[$$sroa$520 + 3 >> 0] = HEAP8[$49 + 3 >> 0] | 0;
  HEAP8[$$sroa$520 + 4 >> 0] = HEAP8[$49 + 4 >> 0] | 0;
  HEAP8[$$sroa$520 + 5 >> 0] = HEAP8[$49 + 5 >> 0] | 0;
  HEAP8[$$sroa$520 + 6 >> 0] = HEAP8[$49 + 6 >> 0] | 0;
  $51 = HEAP32[$47 + 8 >> 2] | 0;
  HEAP32[$47 + 0 >> 2] = 0;
  HEAP32[$47 + 4 >> 2] = 0;
  HEAP32[$47 + 8 >> 2] = 0;
  HEAP8[$0 >> 0] = $48;
  $52 = $0 + 1 | 0;
  HEAP8[$52 + 0 >> 0] = HEAP8[$$sroa$520 + 0 >> 0] | 0;
  HEAP8[$52 + 1 >> 0] = HEAP8[$$sroa$520 + 1 >> 0] | 0;
  HEAP8[$52 + 2 >> 0] = HEAP8[$$sroa$520 + 2 >> 0] | 0;
  HEAP8[$52 + 3 >> 0] = HEAP8[$$sroa$520 + 3 >> 0] | 0;
  HEAP8[$52 + 4 >> 0] = HEAP8[$$sroa$520 + 4 >> 0] | 0;
  HEAP8[$52 + 5 >> 0] = HEAP8[$$sroa$520 + 5 >> 0] | 0;
  HEAP8[$52 + 6 >> 0] = HEAP8[$$sroa$520 + 6 >> 0] | 0;
  HEAP32[$0 + 8 >> 2] = $51;
  HEAP8[$$sroa$520 + 0 >> 0] = 0;
  HEAP8[$$sroa$520 + 1 >> 0] = 0;
  HEAP8[$$sroa$520 + 2 >> 0] = 0;
  HEAP8[$$sroa$520 + 3 >> 0] = 0;
  HEAP8[$$sroa$520 + 4 >> 0] = 0;
  HEAP8[$$sroa$520 + 5 >> 0] = 0;
  HEAP8[$$sroa$520 + 6 >> 0] = 0;
  $54 = $0 + 12 | 0;
  HEAP32[$54 + 0 >> 2] = 0;
  HEAP32[$54 + 4 >> 2] = 0;
  HEAP32[$54 + 8 >> 2] = 0;
  $55 = $db + 4 | 0;
  $56 = HEAP32[$55 >> 2] | 0;
  $58 = HEAP32[$db + 8 >> 2] | 0;
  if ($56 >>> 0 < $58 >>> 0) {
   if (!$56) $63 = 0; else {
    HEAP32[$56 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
    HEAP32[$56 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
    HEAP32[$56 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
    HEAP32[$0 + 0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    $61 = $56 + 12 | 0;
    HEAP32[$61 + 0 >> 2] = HEAP32[$54 + 0 >> 2];
    HEAP32[$61 + 4 >> 2] = HEAP32[$54 + 4 >> 2];
    HEAP32[$61 + 8 >> 2] = HEAP32[$54 + 8 >> 2];
    HEAP32[$54 + 0 >> 2] = 0;
    HEAP32[$54 + 4 >> 2] = 0;
    HEAP32[$54 + 8 >> 2] = 0;
    $63 = HEAP32[$55 >> 2] | 0;
   }
   HEAP32[$55 >> 2] = $63 + 24;
  } else {
   $67 = HEAP32[$db >> 2] | 0;
   $69 = ($56 - $67 | 0) / 24 | 0;
   $70 = $69 + 1 | 0;
   if (($70 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   $74 = ($58 - $67 | 0) / 24 | 0;
   if ($74 >>> 0 < 1073741823) {
    $76 = $74 << 1;
    $$0$i$i$i = $76 >>> 0 < $70 >>> 0 ? $70 : $76;
   } else $$0$i$i$i = 2147483647;
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i18, $$0$i$i$i, $69, $db + 12 | 0);
   $79 = $__v$i$i18 + 8 | 0;
   $80 = HEAP32[$79 >> 2] | 0;
   if ($80) {
    HEAP32[$80 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
    HEAP32[$80 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
    HEAP32[$80 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
    HEAP32[$0 + 0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    $82 = $80 + 12 | 0;
    HEAP32[$82 + 0 >> 2] = HEAP32[$54 + 0 >> 2];
    HEAP32[$82 + 4 >> 2] = HEAP32[$54 + 4 >> 2];
    HEAP32[$82 + 8 >> 2] = HEAP32[$54 + 8 >> 2];
    HEAP32[$54 + 0 >> 2] = 0;
    HEAP32[$54 + 4 >> 2] = 0;
    HEAP32[$54 + 8 >> 2] = 0;
   }
   HEAP32[$79 >> 2] = $80 + 24;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i18);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i18);
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
  if (HEAP8[$1 >> 0] & 1) _free(HEAP32[$1 + 8 >> 2] | 0);
  $$0 = $24 + 1 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$sum2 = 0, $1 = 0, $103 = 0, $104 = 0, $111 = 0, $112 = 0, $12 = 0, $120 = 0, $128 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $141 = 0, $15 = 0, $156 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $191 = 0, $192 = 0, $2 = 0, $201 = 0, $206 = 0, $210 = 0, $216 = 0, $22 = 0, $231 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $252 = 0, $253 = 0, $256 = 0, $258 = 0, $26 = 0, $261 = 0, $266 = 0, $272 = 0, $276 = 0, $277 = 0, $284 = 0, $293 = 0, $296 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $318 = 0, $39 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $9 = 0, $91 = 0, $97 = 0, $F16$0 = 0, $I18$0 = 0, $K19$060 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$059 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, sp = 0;
 sp = STACKTOP;
 if (!$mem) {
  STACKTOP = sp;
  return;
 }
 $1 = $mem + -8 | 0;
 $2 = HEAP32[15762] | 0;
 if ($1 >>> 0 < $2 >>> 0) _abort();
 $5 = HEAP32[$mem + -4 >> 2] | 0;
 $6 = $5 & 3;
 if (($6 | 0) == 1) _abort();
 $8 = $5 & -8;
 $9 = $mem + ($8 + -8) | 0;
 do if (!($5 & 1)) {
  $12 = HEAP32[$1 >> 2] | 0;
  if (!$6) {
   STACKTOP = sp;
   return;
  }
  $$sum2 = -8 - $12 | 0;
  $14 = $mem + $$sum2 | 0;
  $15 = $12 + $8 | 0;
  if ($14 >>> 0 < $2 >>> 0) _abort();
  if (($14 | 0) == (HEAP32[15763] | 0)) {
   $103 = $mem + ($8 + -4) | 0;
   $104 = HEAP32[$103 >> 2] | 0;
   if (($104 & 3 | 0) != 3) {
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   HEAP32[15760] = $15;
   HEAP32[$103 >> 2] = $104 & -2;
   HEAP32[$mem + ($$sum2 + 4) >> 2] = $15 | 1;
   HEAP32[$9 >> 2] = $15;
   STACKTOP = sp;
   return;
  }
  $19 = $12 >>> 3;
  if ($12 >>> 0 < 256) {
   $22 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
   $24 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
   $26 = 63072 + ($19 << 1 << 2) | 0;
   if (($22 | 0) != ($26 | 0)) {
    if ($22 >>> 0 < $2 >>> 0) _abort();
    if ((HEAP32[$22 + 12 >> 2] | 0) != ($14 | 0)) _abort();
   }
   if (($24 | 0) == ($22 | 0)) {
    HEAP32[15758] = HEAP32[15758] & ~(1 << $19);
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   if (($24 | 0) == ($26 | 0)) $$pre$phi68Z2D = $24 + 8 | 0; else {
    if ($24 >>> 0 < $2 >>> 0) _abort();
    $39 = $24 + 8 | 0;
    if ((HEAP32[$39 >> 2] | 0) == ($14 | 0)) $$pre$phi68Z2D = $39; else _abort();
   }
   HEAP32[$22 + 12 >> 2] = $24;
   HEAP32[$$pre$phi68Z2D >> 2] = $22;
   $p$0 = $14;
   $psize$0 = $15;
   break;
  }
  $44 = HEAP32[$mem + ($$sum2 + 24) >> 2] | 0;
  $46 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
  do if (($46 | 0) == ($14 | 0)) {
   $57 = $mem + ($$sum2 + 20) | 0;
   $58 = HEAP32[$57 >> 2] | 0;
   if (!$58) {
    $60 = $mem + ($$sum2 + 16) | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    if (!$61) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $61;
     $RP$0 = $60;
    }
   } else {
    $R$0 = $58;
    $RP$0 = $57;
   }
   while (1) {
    $63 = $R$0 + 20 | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    if ($64) {
     $R$0 = $64;
     $RP$0 = $63;
     continue;
    }
    $66 = $R$0 + 16 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    if (!$67) break; else {
     $R$0 = $67;
     $RP$0 = $66;
    }
   }
   if ($RP$0 >>> 0 < $2 >>> 0) _abort(); else {
    HEAP32[$RP$0 >> 2] = 0;
    $R$1 = $R$0;
    break;
   }
  } else {
   $49 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
   if ($49 >>> 0 < $2 >>> 0) _abort();
   $51 = $49 + 12 | 0;
   if ((HEAP32[$51 >> 2] | 0) != ($14 | 0)) _abort();
   $54 = $46 + 8 | 0;
   if ((HEAP32[$54 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$51 >> 2] = $46;
    HEAP32[$54 >> 2] = $49;
    $R$1 = $46;
    break;
   } else _abort();
  } while (0);
  if (!$44) {
   $p$0 = $14;
   $psize$0 = $15;
  } else {
   $72 = HEAP32[$mem + ($$sum2 + 28) >> 2] | 0;
   $73 = 63336 + ($72 << 2) | 0;
   if (($14 | 0) == (HEAP32[$73 >> 2] | 0)) {
    HEAP32[$73 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[15759] = HEAP32[15759] & ~(1 << $72);
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
   } else {
    if ($44 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
    $82 = $44 + 16 | 0;
    if ((HEAP32[$82 >> 2] | 0) == ($14 | 0)) HEAP32[$82 >> 2] = $R$1; else HEAP32[$44 + 20 >> 2] = $R$1;
    if (!$R$1) {
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
   }
   $87 = HEAP32[15762] | 0;
   if ($R$1 >>> 0 < $87 >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $44;
   $91 = HEAP32[$mem + ($$sum2 + 16) >> 2] | 0;
   do if ($91) if ($91 >>> 0 < $87 >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $91;
    HEAP32[$91 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $97 = HEAP32[$mem + ($$sum2 + 20) >> 2] | 0;
   if (!$97) {
    $p$0 = $14;
    $psize$0 = $15;
   } else if ($97 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $97;
    HEAP32[$97 + 24 >> 2] = $R$1;
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
  }
 } else {
  $p$0 = $1;
  $psize$0 = $8;
 } while (0);
 if ($p$0 >>> 0 >= $9 >>> 0) _abort();
 $111 = $mem + ($8 + -4) | 0;
 $112 = HEAP32[$111 >> 2] | 0;
 if (!($112 & 1)) _abort();
 if (!($112 & 2)) {
  if (($9 | 0) == (HEAP32[15764] | 0)) {
   $120 = (HEAP32[15761] | 0) + $psize$0 | 0;
   HEAP32[15761] = $120;
   HEAP32[15764] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $120 | 1;
   if (($p$0 | 0) != (HEAP32[15763] | 0)) {
    STACKTOP = sp;
    return;
   }
   HEAP32[15763] = 0;
   HEAP32[15760] = 0;
   STACKTOP = sp;
   return;
  }
  if (($9 | 0) == (HEAP32[15763] | 0)) {
   $128 = (HEAP32[15760] | 0) + $psize$0 | 0;
   HEAP32[15760] = $128;
   HEAP32[15763] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $128 | 1;
   HEAP32[$p$0 + $128 >> 2] = $128;
   STACKTOP = sp;
   return;
  }
  $133 = ($112 & -8) + $psize$0 | 0;
  $134 = $112 >>> 3;
  do if ($112 >>> 0 < 256) {
   $137 = HEAP32[$mem + $8 >> 2] | 0;
   $139 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
   $141 = 63072 + ($134 << 1 << 2) | 0;
   if (($137 | 0) != ($141 | 0)) {
    if ($137 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
    if ((HEAP32[$137 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($139 | 0) == ($137 | 0)) {
    HEAP32[15758] = HEAP32[15758] & ~(1 << $134);
    break;
   }
   if (($139 | 0) == ($141 | 0)) $$pre$phi66Z2D = $139 + 8 | 0; else {
    if ($139 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
    $156 = $139 + 8 | 0;
    if ((HEAP32[$156 >> 2] | 0) == ($9 | 0)) $$pre$phi66Z2D = $156; else _abort();
   }
   HEAP32[$137 + 12 >> 2] = $139;
   HEAP32[$$pre$phi66Z2D >> 2] = $137;
  } else {
   $161 = HEAP32[$mem + ($8 + 16) >> 2] | 0;
   $163 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
   do if (($163 | 0) == ($9 | 0)) {
    $175 = $mem + ($8 + 12) | 0;
    $176 = HEAP32[$175 >> 2] | 0;
    if (!$176) {
     $178 = $mem + ($8 + 8) | 0;
     $179 = HEAP32[$178 >> 2] | 0;
     if (!$179) {
      $R7$1 = 0;
      break;
     } else {
      $R7$0 = $179;
      $RP9$0 = $178;
     }
    } else {
     $R7$0 = $176;
     $RP9$0 = $175;
    }
    while (1) {
     $181 = $R7$0 + 20 | 0;
     $182 = HEAP32[$181 >> 2] | 0;
     if ($182) {
      $R7$0 = $182;
      $RP9$0 = $181;
      continue;
     }
     $184 = $R7$0 + 16 | 0;
     $185 = HEAP32[$184 >> 2] | 0;
     if (!$185) break; else {
      $R7$0 = $185;
      $RP9$0 = $184;
     }
    }
    if ($RP9$0 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
     HEAP32[$RP9$0 >> 2] = 0;
     $R7$1 = $R7$0;
     break;
    }
   } else {
    $166 = HEAP32[$mem + $8 >> 2] | 0;
    if ($166 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
    $169 = $166 + 12 | 0;
    if ((HEAP32[$169 >> 2] | 0) != ($9 | 0)) _abort();
    $172 = $163 + 8 | 0;
    if ((HEAP32[$172 >> 2] | 0) == ($9 | 0)) {
     HEAP32[$169 >> 2] = $163;
     HEAP32[$172 >> 2] = $166;
     $R7$1 = $163;
     break;
    } else _abort();
   } while (0);
   if ($161) {
    $191 = HEAP32[$mem + ($8 + 20) >> 2] | 0;
    $192 = 63336 + ($191 << 2) | 0;
    if (($9 | 0) == (HEAP32[$192 >> 2] | 0)) {
     HEAP32[$192 >> 2] = $R7$1;
     if (!$R7$1) {
      HEAP32[15759] = HEAP32[15759] & ~(1 << $191);
      break;
     }
    } else {
     if ($161 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
     $201 = $161 + 16 | 0;
     if ((HEAP32[$201 >> 2] | 0) == ($9 | 0)) HEAP32[$201 >> 2] = $R7$1; else HEAP32[$161 + 20 >> 2] = $R7$1;
     if (!$R7$1) break;
    }
    $206 = HEAP32[15762] | 0;
    if ($R7$1 >>> 0 < $206 >>> 0) _abort();
    HEAP32[$R7$1 + 24 >> 2] = $161;
    $210 = HEAP32[$mem + ($8 + 8) >> 2] | 0;
    do if ($210) if ($210 >>> 0 < $206 >>> 0) _abort(); else {
     HEAP32[$R7$1 + 16 >> 2] = $210;
     HEAP32[$210 + 24 >> 2] = $R7$1;
     break;
    } while (0);
    $216 = HEAP32[$mem + ($8 + 12) >> 2] | 0;
    if ($216) if ($216 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$1 + 20 >> 2] = $216;
     HEAP32[$216 + 24 >> 2] = $R7$1;
     break;
    }
   }
  } while (0);
  HEAP32[$p$0 + 4 >> 2] = $133 | 1;
  HEAP32[$p$0 + $133 >> 2] = $133;
  if (($p$0 | 0) == (HEAP32[15763] | 0)) {
   HEAP32[15760] = $133;
   STACKTOP = sp;
   return;
  } else $psize$1 = $133;
 } else {
  HEAP32[$111 >> 2] = $112 & -2;
  HEAP32[$p$0 + 4 >> 2] = $psize$0 | 1;
  HEAP32[$p$0 + $psize$0 >> 2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 if ($psize$1 >>> 0 < 256) {
  $233 = $231 << 1;
  $234 = 63072 + ($233 << 2) | 0;
  $235 = HEAP32[15758] | 0;
  $236 = 1 << $231;
  if (!($235 & $236)) {
   HEAP32[15758] = $235 | $236;
   $$pre$phiZ2D = 63072 + ($233 + 2 << 2) | 0;
   $F16$0 = $234;
  } else {
   $240 = 63072 + ($233 + 2 << 2) | 0;
   $241 = HEAP32[$240 >> 2] | 0;
   if ($241 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $240;
    $F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0;
  HEAP32[$F16$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $F16$0;
  HEAP32[$p$0 + 12 >> 2] = $234;
  STACKTOP = sp;
  return;
 }
 $247 = $psize$1 >>> 8;
 if (!$247) $I18$0 = 0; else if ($psize$1 >>> 0 > 16777215) $I18$0 = 31; else {
  $252 = ($247 + 1048320 | 0) >>> 16 & 8;
  $253 = $247 << $252;
  $256 = ($253 + 520192 | 0) >>> 16 & 4;
  $258 = $253 << $256;
  $261 = ($258 + 245760 | 0) >>> 16 & 2;
  $266 = 14 - ($256 | $252 | $261) + ($258 << $261 >>> 15) | 0;
  $I18$0 = $psize$1 >>> ($266 + 7 | 0) & 1 | $266 << 1;
 }
 $272 = 63336 + ($I18$0 << 2) | 0;
 HEAP32[$p$0 + 28 >> 2] = $I18$0;
 HEAP32[$p$0 + 20 >> 2] = 0;
 HEAP32[$p$0 + 16 >> 2] = 0;
 $276 = HEAP32[15759] | 0;
 $277 = 1 << $I18$0;
 L199 : do if (!($276 & $277)) {
  HEAP32[15759] = $276 | $277;
  HEAP32[$272 >> 2] = $p$0;
  HEAP32[$p$0 + 24 >> 2] = $272;
  HEAP32[$p$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $p$0;
 } else {
  $284 = HEAP32[$272 >> 2] | 0;
  if (($I18$0 | 0) == 31) $293 = 0; else $293 = 25 - ($I18$0 >>> 1) | 0;
  L204 : do if ((HEAP32[$284 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) $T$0$lcssa = $284; else {
   $K19$060 = $psize$1 << $293;
   $T$059 = $284;
   while (1) {
    $301 = $T$059 + ($K19$060 >>> 31 << 2) + 16 | 0;
    $296 = HEAP32[$301 >> 2] | 0;
    if (!$296) break;
    if ((HEAP32[$296 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
     $T$0$lcssa = $296;
     break L204;
    } else {
     $K19$060 = $K19$060 << 1;
     $T$059 = $296;
    }
   }
   if ($301 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
    HEAP32[$301 >> 2] = $p$0;
    HEAP32[$p$0 + 24 >> 2] = $T$059;
    HEAP32[$p$0 + 12 >> 2] = $p$0;
    HEAP32[$p$0 + 8 >> 2] = $p$0;
    break L199;
   }
  } while (0);
  $308 = $T$0$lcssa + 8 | 0;
  $309 = HEAP32[$308 >> 2] | 0;
  $310 = HEAP32[15762] | 0;
  if ($T$0$lcssa >>> 0 >= $310 >>> 0 & $309 >>> 0 >= $310 >>> 0) {
   HEAP32[$309 + 12 >> 2] = $p$0;
   HEAP32[$308 >> 2] = $p$0;
   HEAP32[$p$0 + 8 >> 2] = $309;
   HEAP32[$p$0 + 12 >> 2] = $T$0$lcssa;
   HEAP32[$p$0 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $318 = (HEAP32[15766] | 0) + -1 | 0;
 HEAP32[15766] = $318;
 if (!$318) $sp$0$in$i = 63488 | 0; else {
  STACKTOP = sp;
  return;
 }
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[15766] = -1;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result, $this, $__b$0, $__e$0, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i25 = 0, $$0$ph$be = 0, $$0$ph40 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i45 = 0, $$pre$i$i$i45$lcssa = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i2042 = 0, $$pre$i2$i$i2043 = 0, $$pre$pre49 = 0, $$pre$pre50 = 0, $$pre$pre51 = 0, $0 = 0, $1 = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $127 = 0, $134 = 0, $135 = 0, $136 = 0, $149 = 0, $156 = 0, $16 = 0, $174 = 0, $175 = 0, $176 = 0, $190 = 0, $2 = 0, $27 = 0, $28 = 0, $4 = 0, $46 = 0, $5 = 0, $52 = 0, $53 = 0, $62 = 0, $63 = 0, $65 = 0, $69 = 0, $7 = 0, $71 = 0, $77 = 0, $8 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__b$sroa$0$3 = 0, $__b$sroa$0$4 = 0, $__cmd$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__opt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy1 = sp + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 $4 = HEAP32[$__iob + 28 >> 2] | 0;
 $5 = $4 + 4 | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 $7 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $8 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$4 + 8 >> 2] | 0, HEAP32[$4 + 12 >> 2] | 0, $7) | 0;
 $9 = $4 + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 HEAP32[$9 >> 2] = $10 + -1;
 if (!$10) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] & 127]($4);
 HEAP32[$__err >> 2] = 0;
 L4 : do if (($__fmtb | 0) == ($__fmte | 0)) {
  $$pre$i$i$i7 = $__b$0;
  $__e$sroa$0$8 = $__e$0;
 } else {
  $16 = $8 + 8 | 0;
  $$0$ph40 = $__fmtb;
  $__b$sroa$0$0 = $__b$0;
  $__e$sroa$0$0 = $__e$0;
  L6 : while (1) {
   if (!$__b$sroa$0$0) {
    $$pre$i$i$i45 = 0;
    $__b$sroa$0$1 = 0;
   } else if ((HEAP32[$__b$sroa$0$0 + 12 >> 2] | 0) == (HEAP32[$__b$sroa$0$0 + 16 >> 2] | 0)) {
    $27 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__b$sroa$0$0 >> 2] | 0) + 36 >> 2] & 127]($__b$sroa$0$0) | 0) == -1;
    $$pre$i$i$i45 = $27 ? 0 : $__b$sroa$0$0;
    $__b$sroa$0$1 = $27 ? 0 : $__b$sroa$0$0;
   } else {
    $$pre$i$i$i45 = $__b$sroa$0$0;
    $__b$sroa$0$1 = $__b$sroa$0$0;
   }
   $28 = ($$pre$i$i$i45 | 0) == 0;
   do if (!$__e$sroa$0$0) label = 12; else {
    if ((HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$0) | 0) == -1) {
     label = 12;
     break;
    }
    if ($28) $__e$sroa$0$3 = $__e$sroa$0$0; else {
     $$pre$i$i$i45$lcssa = $$pre$i$i$i45;
     $__e$sroa$0$2 = $__e$sroa$0$0;
     label = 13;
     break L6;
    }
   } while (0);
   if ((label | 0) == 12) {
    label = 0;
    if ($28) {
     $$pre$i$i$i45$lcssa = 0;
     $__e$sroa$0$2 = 0;
     label = 13;
     break;
    } else $__e$sroa$0$3 = 0;
   }
   L20 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 31]($8, HEAP8[$$0$ph40 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
    $46 = $$0$ph40 + 1 | 0;
    if (($46 | 0) == ($__fmte | 0)) {
     label = 16;
     break L6;
    }
    $52 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 31]($8, HEAP8[$46 >> 0] | 0, 0) | 0;
    if ($52 << 24 >> 24 == 48 | $52 << 24 >> 24 == 69) {
     $53 = $$0$ph40 + 2 | 0;
     if (($53 | 0) == ($__fmte | 0)) {
      label = 19;
      break L6;
     }
     $65 = $46;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 31]($8, HEAP8[$53 >> 0] | 0, 0) | 0;
     $__opt$0 = $52;
    } else {
     $65 = $$0$ph40;
     $__cmd$0 = $52;
     $__opt$0 = 0;
    }
    $62 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
    HEAP32[$1 >> 2] = $$pre$i$i$i45;
    HEAP32[$2 >> 2] = $__e$sroa$0$3;
    HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
    HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
    FUNCTION_TABLE_viiiiiiiii[$62 & 3]($0, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0);
    $63 = HEAP32[$0 >> 2] | 0;
    $$0$ph$be = $65 + 2 | 0;
    $$pre$pre49 = $63;
    $__b$sroa$0$2 = $63;
    $__e$sroa$0$4 = $__e$sroa$0$3;
   } else {
    $69 = HEAP8[$$0$ph40 >> 0] | 0;
    if ($69 << 24 >> 24 > -1) {
     $71 = HEAP32[$16 >> 2] | 0;
     if (HEAP16[$71 + ($69 << 24 >> 24 << 1) >> 1] & 8192) {
      $$0$pn = $$0$ph40;
      while (1) {
       $$2 = $$0$pn + 1 | 0;
       if (($$2 | 0) == ($__fmte | 0)) {
        $$2$lcssa = $__fmte;
        break;
       }
       $77 = HEAP8[$$2 >> 0] | 0;
       if ($77 << 24 >> 24 <= -1) {
        $$2$lcssa = $$2;
        break;
       }
       if (!(HEAP16[$71 + ($77 << 24 >> 24 << 1) >> 1] & 8192)) {
        $$2$lcssa = $$2;
        break;
       } else $$0$pn = $$2;
      }
      $$pre$i$i$i16 = $$pre$i$i$i45;
      $$pre$i2$i$i20 = $__e$sroa$0$3;
      $$pre$pre51 = $$pre$i$i$i45;
      $97 = $__e$sroa$0$3;
      $__b$sroa$0$3 = $__b$sroa$0$1;
      $__e$sroa$0$5 = $__e$sroa$0$3;
      while (1) {
       if (!$$pre$i$i$i16) {
        $$pre$pre50 = $$pre$pre51;
        $95 = 0;
        $__b$sroa$0$4 = $__b$sroa$0$3;
       } else if ((HEAP32[$$pre$i$i$i16 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i16 + 16 >> 2] | 0)) {
        $93 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i16 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i16) | 0) == -1;
        $$pre$pre50 = $93 ? 0 : $$pre$pre51;
        $95 = $93 ? 0 : $$pre$i$i$i16;
        $__b$sroa$0$4 = $93 ? 0 : $__b$sroa$0$3;
       } else {
        $$pre$pre50 = $$pre$pre51;
        $95 = $$pre$i$i$i16;
        $__b$sroa$0$4 = $__b$sroa$0$3;
       }
       $94 = ($95 | 0) == 0;
       do if (!$97) {
        $$pre$i2$i$i2043 = $$pre$i2$i$i20;
        $__e$sroa$0$6 = $__e$sroa$0$5;
        label = 36;
       } else {
        if ((HEAP32[$97 + 12 >> 2] | 0) != (HEAP32[$97 + 16 >> 2] | 0)) if ($94) {
         $$pre$i2$i$i2042 = $$pre$i2$i$i20;
         $190 = $97;
         $__e$sroa$0$7 = $__e$sroa$0$5;
         break;
        } else {
         $$0$ph$be = $$2$lcssa;
         $$pre$pre49 = $$pre$pre50;
         $__b$sroa$0$2 = $__b$sroa$0$4;
         $__e$sroa$0$4 = $__e$sroa$0$5;
         break L20;
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$97 >> 2] | 0) + 36 >> 2] & 127]($97) | 0) == -1) {
         $$pre$i2$i$i2043 = 0;
         $__e$sroa$0$6 = 0;
         label = 36;
        } else if ($94 ^ ($$pre$i2$i$i20 | 0) == 0) {
         $$pre$i2$i$i2042 = $$pre$i2$i$i20;
         $190 = $$pre$i2$i$i20;
         $__e$sroa$0$7 = $__e$sroa$0$5;
        } else {
         $$0$ph$be = $$2$lcssa;
         $$pre$pre49 = $$pre$pre50;
         $__b$sroa$0$2 = $__b$sroa$0$4;
         $__e$sroa$0$4 = $__e$sroa$0$5;
         break L20;
        }
       } while (0);
       if ((label | 0) == 36) {
        label = 0;
        if ($94) {
         $$0$ph$be = $$2$lcssa;
         $$pre$pre49 = $$pre$pre50;
         $__b$sroa$0$2 = $__b$sroa$0$4;
         $__e$sroa$0$4 = $__e$sroa$0$6;
         break L20;
        } else {
         $$pre$i2$i$i2042 = $$pre$i2$i$i2043;
         $190 = 0;
         $__e$sroa$0$7 = $__e$sroa$0$6;
        }
       }
       $109 = $95 + 12 | 0;
       $110 = HEAP32[$109 >> 2] | 0;
       $111 = $95 + 16 | 0;
       if (($110 | 0) == (HEAP32[$111 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$95 >> 2] | 0) + 36 >> 2] & 127]($95) | 0; else $$0$i$i = HEAPU8[$110 >> 0] | 0;
       if (($$0$i$i & 255) << 24 >> 24 <= -1) {
        $$0$ph$be = $$2$lcssa;
        $$pre$pre49 = $$pre$pre50;
        $__b$sroa$0$2 = $__b$sroa$0$4;
        $__e$sroa$0$4 = $__e$sroa$0$7;
        break L20;
       }
       if (!(HEAP16[(HEAP32[$16 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
        $$0$ph$be = $$2$lcssa;
        $$pre$pre49 = $$pre$pre50;
        $__b$sroa$0$2 = $__b$sroa$0$4;
        $__e$sroa$0$4 = $__e$sroa$0$7;
        break L20;
       }
       $127 = HEAP32[$109 >> 2] | 0;
       if (($127 | 0) == (HEAP32[$111 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$95 >> 2] | 0) + 40 >> 2] & 127]($95) | 0;
        $$pre$i$i$i16 = $95;
        $$pre$i2$i$i20 = $$pre$i2$i$i2042;
        $$pre$pre51 = $$pre$pre50;
        $97 = $190;
        $__b$sroa$0$3 = $__b$sroa$0$4;
        $__e$sroa$0$5 = $__e$sroa$0$7;
        continue;
       } else {
        HEAP32[$109 >> 2] = $127 + 1;
        $$pre$i$i$i16 = $95;
        $$pre$i2$i$i20 = $$pre$i2$i$i2042;
        $$pre$pre51 = $$pre$pre50;
        $97 = $190;
        $__b$sroa$0$3 = $__b$sroa$0$4;
        $__e$sroa$0$5 = $__e$sroa$0$7;
        continue;
       }
      }
     }
    }
    $134 = $$pre$i$i$i45 + 12 | 0;
    $135 = HEAP32[$134 >> 2] | 0;
    $136 = $$pre$i$i$i45 + 16 | 0;
    if (($135 | 0) == (HEAP32[$136 >> 2] | 0)) $$0$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i45) | 0; else $$0$i$i25 = HEAPU8[$135 >> 0] | 0;
    $149 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] & 31]($8, $$0$i$i25 & 255) | 0;
    if ($149 << 24 >> 24 != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] & 31]($8, HEAP8[$$0$ph40 >> 0] | 0) | 0) << 24 >> 24) {
     label = 54;
     break L6;
    }
    $156 = HEAP32[$134 >> 2] | 0;
    if (($156 | 0) == (HEAP32[$136 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i45) | 0; else HEAP32[$134 >> 2] = $156 + 1;
    $$0$ph$be = $$0$ph40 + 1 | 0;
    $$pre$pre49 = $$pre$i$i$i45;
    $__b$sroa$0$2 = $__b$sroa$0$1;
    $__e$sroa$0$4 = $__e$sroa$0$3;
   } while (0);
   if (($$0$ph$be | 0) != ($__fmte | 0) & (HEAP32[$__err >> 2] | 0) == 0) {
    $$0$ph40 = $$0$ph$be;
    $__b$sroa$0$0 = $__b$sroa$0$2;
    $__e$sroa$0$0 = $__e$sroa$0$4;
   } else {
    $$pre$i$i$i7 = $$pre$pre49;
    $__e$sroa$0$8 = $__e$sroa$0$4;
    break L4;
   }
  }
  if ((label | 0) == 13) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i7 = $$pre$i$i$i45$lcssa;
   $__e$sroa$0$8 = $__e$sroa$0$2;
   break;
  } else if ((label | 0) == 16) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i7 = $$pre$i$i$i45;
   $__e$sroa$0$8 = $__e$sroa$0$3;
   break;
  } else if ((label | 0) == 19) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i7 = $$pre$i$i$i45;
   $__e$sroa$0$8 = $__e$sroa$0$3;
   break;
  } else if ((label | 0) == 54) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i7 = $$pre$i$i$i45;
   $__e$sroa$0$8 = $__e$sroa$0$3;
   break;
  }
 } while (0);
 if (!$$pre$i$i$i7) $176 = 0; else if ((HEAP32[$$pre$i$i$i7 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i7 + 16 >> 2] | 0)) {
  $174 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i7 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i7) | 0) == -1;
  $176 = $174 ? 0 : $$pre$i$i$i7;
 } else $176 = $$pre$i$i$i7;
 $175 = ($176 | 0) == 0;
 do if (!$__e$sroa$0$8) label = 62; else {
  if ((HEAP32[$__e$sroa$0$8 + 12 >> 2] | 0) == (HEAP32[$__e$sroa$0$8 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$8 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$8) | 0) == -1) {
   label = 62;
   break;
  }
  if ($175) {
   HEAP32[$agg$result >> 2] = $176;
   STACKTOP = sp;
   return;
  }
 } while (0);
 if ((label | 0) == 62) if (!$175) {
  HEAP32[$agg$result >> 2] = $176;
  STACKTOP = sp;
  return;
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $176;
 STACKTOP = sp;
 return;
}
function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$sum24 = 0, $$sum27 = 0, $0 = 0, $10 = 0, $100 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $115 = 0, $123 = 0, $128 = 0, $129 = 0, $132 = 0, $134 = 0, $136 = 0, $149 = 0, $15 = 0, $154 = 0, $156 = 0, $159 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $197 = 0, $2 = 0, $20 = 0, $201 = 0, $207 = 0, $22 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $231 = 0, $232 = 0, $238 = 0, $243 = 0, $244 = 0, $247 = 0, $249 = 0, $252 = 0, $257 = 0, $263 = 0, $267 = 0, $268 = 0, $275 = 0, $284 = 0, $287 = 0, $292 = 0, $299 = 0, $300 = 0, $301 = 0, $35 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $78 = 0, $83 = 0, $87 = 0, $9 = 0, $93 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$051 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$050 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $p + $psize | 0;
 $2 = HEAP32[$p + 4 >> 2] | 0;
 do if (!($2 & 1)) {
  $5 = HEAP32[$p >> 2] | 0;
  if (!($2 & 3)) {
   STACKTOP = sp;
   return;
  }
  $9 = $p + (0 - $5) | 0;
  $10 = $5 + $psize | 0;
  $11 = HEAP32[15762] | 0;
  if ($9 >>> 0 < $11 >>> 0) _abort();
  if (($9 | 0) == (HEAP32[15763] | 0)) {
   $99 = $p + ($psize + 4) | 0;
   $100 = HEAP32[$99 >> 2] | 0;
   if (($100 & 3 | 0) != 3) {
    $$0 = $9;
    $$02 = $10;
    break;
   }
   HEAP32[15760] = $10;
   HEAP32[$99 >> 2] = $100 & -2;
   HEAP32[$p + (4 - $5) >> 2] = $10 | 1;
   HEAP32[$0 >> 2] = $10;
   STACKTOP = sp;
   return;
  }
  $15 = $5 >>> 3;
  if ($5 >>> 0 < 256) {
   $18 = HEAP32[$p + (8 - $5) >> 2] | 0;
   $20 = HEAP32[$p + (12 - $5) >> 2] | 0;
   $22 = 63072 + ($15 << 1 << 2) | 0;
   if (($18 | 0) != ($22 | 0)) {
    if ($18 >>> 0 < $11 >>> 0) _abort();
    if ((HEAP32[$18 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($20 | 0) == ($18 | 0)) {
    HEAP32[15758] = HEAP32[15758] & ~(1 << $15);
    $$0 = $9;
    $$02 = $10;
    break;
   }
   if (($20 | 0) == ($22 | 0)) $$pre$phi59Z2D = $20 + 8 | 0; else {
    if ($20 >>> 0 < $11 >>> 0) _abort();
    $35 = $20 + 8 | 0;
    if ((HEAP32[$35 >> 2] | 0) == ($9 | 0)) $$pre$phi59Z2D = $35; else _abort();
   }
   HEAP32[$18 + 12 >> 2] = $20;
   HEAP32[$$pre$phi59Z2D >> 2] = $18;
   $$0 = $9;
   $$02 = $10;
   break;
  }
  $40 = HEAP32[$p + (24 - $5) >> 2] | 0;
  $42 = HEAP32[$p + (12 - $5) >> 2] | 0;
  do if (($42 | 0) == ($9 | 0)) {
   $$sum24 = 16 - $5 | 0;
   $53 = $p + ($$sum24 + 4) | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   if (!$54) {
    $56 = $p + $$sum24 | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    if (!$57) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $57;
     $RP$0 = $56;
    }
   } else {
    $R$0 = $54;
    $RP$0 = $53;
   }
   while (1) {
    $59 = $R$0 + 20 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    if ($60) {
     $R$0 = $60;
     $RP$0 = $59;
     continue;
    }
    $62 = $R$0 + 16 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    if (!$63) break; else {
     $R$0 = $63;
     $RP$0 = $62;
    }
   }
   if ($RP$0 >>> 0 < $11 >>> 0) _abort(); else {
    HEAP32[$RP$0 >> 2] = 0;
    $R$1 = $R$0;
    break;
   }
  } else {
   $45 = HEAP32[$p + (8 - $5) >> 2] | 0;
   if ($45 >>> 0 < $11 >>> 0) _abort();
   $47 = $45 + 12 | 0;
   if ((HEAP32[$47 >> 2] | 0) != ($9 | 0)) _abort();
   $50 = $42 + 8 | 0;
   if ((HEAP32[$50 >> 2] | 0) == ($9 | 0)) {
    HEAP32[$47 >> 2] = $42;
    HEAP32[$50 >> 2] = $45;
    $R$1 = $42;
    break;
   } else _abort();
  } while (0);
  if (!$40) {
   $$0 = $9;
   $$02 = $10;
  } else {
   $68 = HEAP32[$p + (28 - $5) >> 2] | 0;
   $69 = 63336 + ($68 << 2) | 0;
   if (($9 | 0) == (HEAP32[$69 >> 2] | 0)) {
    HEAP32[$69 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[15759] = HEAP32[15759] & ~(1 << $68);
     $$0 = $9;
     $$02 = $10;
     break;
    }
   } else {
    if ($40 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
    $78 = $40 + 16 | 0;
    if ((HEAP32[$78 >> 2] | 0) == ($9 | 0)) HEAP32[$78 >> 2] = $R$1; else HEAP32[$40 + 20 >> 2] = $R$1;
    if (!$R$1) {
     $$0 = $9;
     $$02 = $10;
     break;
    }
   }
   $83 = HEAP32[15762] | 0;
   if ($R$1 >>> 0 < $83 >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $40;
   $$sum27 = 16 - $5 | 0;
   $87 = HEAP32[$p + $$sum27 >> 2] | 0;
   do if ($87) if ($87 >>> 0 < $83 >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $87;
    HEAP32[$87 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $93 = HEAP32[$p + ($$sum27 + 4) >> 2] | 0;
   if (!$93) {
    $$0 = $9;
    $$02 = $10;
   } else if ($93 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $R$1;
    $$0 = $9;
    $$02 = $10;
    break;
   }
  }
 } else {
  $$0 = $p;
  $$02 = $psize;
 } while (0);
 $106 = HEAP32[15762] | 0;
 if ($0 >>> 0 < $106 >>> 0) _abort();
 $108 = $p + ($psize + 4) | 0;
 $109 = HEAP32[$108 >> 2] | 0;
 if (!($109 & 2)) {
  if (($0 | 0) == (HEAP32[15764] | 0)) {
   $115 = (HEAP32[15761] | 0) + $$02 | 0;
   HEAP32[15761] = $115;
   HEAP32[15764] = $$0;
   HEAP32[$$0 + 4 >> 2] = $115 | 1;
   if (($$0 | 0) != (HEAP32[15763] | 0)) {
    STACKTOP = sp;
    return;
   }
   HEAP32[15763] = 0;
   HEAP32[15760] = 0;
   STACKTOP = sp;
   return;
  }
  if (($0 | 0) == (HEAP32[15763] | 0)) {
   $123 = (HEAP32[15760] | 0) + $$02 | 0;
   HEAP32[15760] = $123;
   HEAP32[15763] = $$0;
   HEAP32[$$0 + 4 >> 2] = $123 | 1;
   HEAP32[$$0 + $123 >> 2] = $123;
   STACKTOP = sp;
   return;
  }
  $128 = ($109 & -8) + $$02 | 0;
  $129 = $109 >>> 3;
  do if ($109 >>> 0 < 256) {
   $132 = HEAP32[$p + ($psize + 8) >> 2] | 0;
   $134 = HEAP32[$p + ($psize + 12) >> 2] | 0;
   $136 = 63072 + ($129 << 1 << 2) | 0;
   if (($132 | 0) != ($136 | 0)) {
    if ($132 >>> 0 < $106 >>> 0) _abort();
    if ((HEAP32[$132 + 12 >> 2] | 0) != ($0 | 0)) _abort();
   }
   if (($134 | 0) == ($132 | 0)) {
    HEAP32[15758] = HEAP32[15758] & ~(1 << $129);
    break;
   }
   if (($134 | 0) == ($136 | 0)) $$pre$phi57Z2D = $134 + 8 | 0; else {
    if ($134 >>> 0 < $106 >>> 0) _abort();
    $149 = $134 + 8 | 0;
    if ((HEAP32[$149 >> 2] | 0) == ($0 | 0)) $$pre$phi57Z2D = $149; else _abort();
   }
   HEAP32[$132 + 12 >> 2] = $134;
   HEAP32[$$pre$phi57Z2D >> 2] = $132;
  } else {
   $154 = HEAP32[$p + ($psize + 24) >> 2] | 0;
   $156 = HEAP32[$p + ($psize + 12) >> 2] | 0;
   do if (($156 | 0) == ($0 | 0)) {
    $167 = $p + ($psize + 20) | 0;
    $168 = HEAP32[$167 >> 2] | 0;
    if (!$168) {
     $170 = $p + ($psize + 16) | 0;
     $171 = HEAP32[$170 >> 2] | 0;
     if (!$171) {
      $R7$1 = 0;
      break;
     } else {
      $R7$0 = $171;
      $RP9$0 = $170;
     }
    } else {
     $R7$0 = $168;
     $RP9$0 = $167;
    }
    while (1) {
     $173 = $R7$0 + 20 | 0;
     $174 = HEAP32[$173 >> 2] | 0;
     if ($174) {
      $R7$0 = $174;
      $RP9$0 = $173;
      continue;
     }
     $176 = $R7$0 + 16 | 0;
     $177 = HEAP32[$176 >> 2] | 0;
     if (!$177) break; else {
      $R7$0 = $177;
      $RP9$0 = $176;
     }
    }
    if ($RP9$0 >>> 0 < $106 >>> 0) _abort(); else {
     HEAP32[$RP9$0 >> 2] = 0;
     $R7$1 = $R7$0;
     break;
    }
   } else {
    $159 = HEAP32[$p + ($psize + 8) >> 2] | 0;
    if ($159 >>> 0 < $106 >>> 0) _abort();
    $161 = $159 + 12 | 0;
    if ((HEAP32[$161 >> 2] | 0) != ($0 | 0)) _abort();
    $164 = $156 + 8 | 0;
    if ((HEAP32[$164 >> 2] | 0) == ($0 | 0)) {
     HEAP32[$161 >> 2] = $156;
     HEAP32[$164 >> 2] = $159;
     $R7$1 = $156;
     break;
    } else _abort();
   } while (0);
   if ($154) {
    $182 = HEAP32[$p + ($psize + 28) >> 2] | 0;
    $183 = 63336 + ($182 << 2) | 0;
    if (($0 | 0) == (HEAP32[$183 >> 2] | 0)) {
     HEAP32[$183 >> 2] = $R7$1;
     if (!$R7$1) {
      HEAP32[15759] = HEAP32[15759] & ~(1 << $182);
      break;
     }
    } else {
     if ($154 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
     $192 = $154 + 16 | 0;
     if ((HEAP32[$192 >> 2] | 0) == ($0 | 0)) HEAP32[$192 >> 2] = $R7$1; else HEAP32[$154 + 20 >> 2] = $R7$1;
     if (!$R7$1) break;
    }
    $197 = HEAP32[15762] | 0;
    if ($R7$1 >>> 0 < $197 >>> 0) _abort();
    HEAP32[$R7$1 + 24 >> 2] = $154;
    $201 = HEAP32[$p + ($psize + 16) >> 2] | 0;
    do if ($201) if ($201 >>> 0 < $197 >>> 0) _abort(); else {
     HEAP32[$R7$1 + 16 >> 2] = $201;
     HEAP32[$201 + 24 >> 2] = $R7$1;
     break;
    } while (0);
    $207 = HEAP32[$p + ($psize + 20) >> 2] | 0;
    if ($207) if ($207 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$1 + 20 >> 2] = $207;
     HEAP32[$207 + 24 >> 2] = $R7$1;
     break;
    }
   }
  } while (0);
  HEAP32[$$0 + 4 >> 2] = $128 | 1;
  HEAP32[$$0 + $128 >> 2] = $128;
  if (($$0 | 0) == (HEAP32[15763] | 0)) {
   HEAP32[15760] = $128;
   STACKTOP = sp;
   return;
  } else $$1 = $128;
 } else {
  HEAP32[$108 >> 2] = $109 & -2;
  HEAP32[$$0 + 4 >> 2] = $$02 | 1;
  HEAP32[$$0 + $$02 >> 2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 if ($$1 >>> 0 < 256) {
  $224 = $222 << 1;
  $225 = 63072 + ($224 << 2) | 0;
  $226 = HEAP32[15758] | 0;
  $227 = 1 << $222;
  if (!($226 & $227)) {
   HEAP32[15758] = $226 | $227;
   $$pre$phiZ2D = 63072 + ($224 + 2 << 2) | 0;
   $F16$0 = $225;
  } else {
   $231 = 63072 + ($224 + 2 << 2) | 0;
   $232 = HEAP32[$231 >> 2] | 0;
   if ($232 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $231;
    $F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$0;
  HEAP32[$F16$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $F16$0;
  HEAP32[$$0 + 12 >> 2] = $225;
  STACKTOP = sp;
  return;
 }
 $238 = $$1 >>> 8;
 if (!$238) $I19$0 = 0; else if ($$1 >>> 0 > 16777215) $I19$0 = 31; else {
  $243 = ($238 + 1048320 | 0) >>> 16 & 8;
  $244 = $238 << $243;
  $247 = ($244 + 520192 | 0) >>> 16 & 4;
  $249 = $244 << $247;
  $252 = ($249 + 245760 | 0) >>> 16 & 2;
  $257 = 14 - ($247 | $243 | $252) + ($249 << $252 >>> 15) | 0;
  $I19$0 = $$1 >>> ($257 + 7 | 0) & 1 | $257 << 1;
 }
 $263 = 63336 + ($I19$0 << 2) | 0;
 HEAP32[$$0 + 28 >> 2] = $I19$0;
 HEAP32[$$0 + 20 >> 2] = 0;
 HEAP32[$$0 + 16 >> 2] = 0;
 $267 = HEAP32[15759] | 0;
 $268 = 1 << $I19$0;
 if (!($267 & $268)) {
  HEAP32[15759] = $267 | $268;
  HEAP32[$263 >> 2] = $$0;
  HEAP32[$$0 + 24 >> 2] = $263;
  HEAP32[$$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $$0;
  STACKTOP = sp;
  return;
 }
 $275 = HEAP32[$263 >> 2] | 0;
 if (($I19$0 | 0) == 31) $284 = 0; else $284 = 25 - ($I19$0 >>> 1) | 0;
 L194 : do if ((HEAP32[$275 + 4 >> 2] & -8 | 0) == ($$1 | 0)) $T$0$lcssa = $275; else {
  $K20$051 = $$1 << $284;
  $T$050 = $275;
  while (1) {
   $292 = $T$050 + ($K20$051 >>> 31 << 2) + 16 | 0;
   $287 = HEAP32[$292 >> 2] | 0;
   if (!$287) break;
   if ((HEAP32[$287 + 4 >> 2] & -8 | 0) == ($$1 | 0)) {
    $T$0$lcssa = $287;
    break L194;
   } else {
    $K20$051 = $K20$051 << 1;
    $T$050 = $287;
   }
  }
  if ($292 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
  HEAP32[$292 >> 2] = $$0;
  HEAP32[$$0 + 24 >> 2] = $T$050;
  HEAP32[$$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $$0;
  STACKTOP = sp;
  return;
 } while (0);
 $299 = $T$0$lcssa + 8 | 0;
 $300 = HEAP32[$299 >> 2] | 0;
 $301 = HEAP32[15762] | 0;
 if (!($T$0$lcssa >>> 0 >= $301 >>> 0 & $300 >>> 0 >= $301 >>> 0)) _abort();
 HEAP32[$300 + 12 >> 2] = $$0;
 HEAP32[$299 >> 2] = $$0;
 HEAP32[$$0 + 8 >> 2] = $300;
 HEAP32[$$0 + 12 >> 2] = $T$0$lcssa;
 HEAP32[$$0 + 24 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result, $this, $__b$0, $__e$0, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph45 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i50 = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0, $$pre$i3$i$i1247 = 0, $$pre$i3$i$i1248 = 0, $$pre$pre54 = 0, $$pre$pre55 = 0, $$pre$pre56 = 0, $0 = 0, $1 = 0, $10 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $121 = 0, $128 = 0, $129 = 0, $130 = 0, $141 = 0, $148 = 0, $158 = 0, $167 = 0, $170 = 0, $18 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $2 = 0, $27 = 0, $30 = 0, $4 = 0, $46 = 0, $5 = 0, $52 = 0, $53 = 0, $62 = 0, $63 = 0, $65 = 0, $7 = 0, $8 = 0, $82 = 0, $9 = 0, $91 = 0, $93 = 0, $95 = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__b$sroa$0$3 = 0, $__b$sroa$0$4 = 0, $__cmd$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__opt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy1 = sp + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 $4 = HEAP32[$__iob + 28 >> 2] | 0;
 $5 = $4 + 4 | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 $7 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $8 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$4 + 8 >> 2] | 0, HEAP32[$4 + 12 >> 2] | 0, $7) | 0;
 $9 = $4 + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 HEAP32[$9 >> 2] = $10 + -1;
 if (!$10) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] & 127]($4);
 HEAP32[$__err >> 2] = 0;
 L4 : do if (($__fmtb | 0) == ($__fmte | 0)) {
  $$pre$i$i$i21 = $__b$0;
  $__e$sroa$0$8 = $__e$0;
 } else {
  $$0$ph45 = $__fmtb;
  $__b$sroa$0$0 = $__b$0;
  $__e$sroa$0$0 = $__e$0;
  L6 : while (1) {
   if (!$__b$sroa$0$0) {
    $$pre$i$i$i50 = 0;
    $183 = 1;
    $__b$sroa$0$1 = 0;
   } else {
    $18 = HEAP32[$__b$sroa$0$0 + 12 >> 2] | 0;
    if (($18 | 0) == (HEAP32[$__b$sroa$0$0 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__b$sroa$0$0 >> 2] | 0) + 36 >> 2] & 127]($__b$sroa$0$0) | 0; else $$0$i$i$i$i = HEAP32[$18 >> 2] | 0;
    $27 = ($$0$i$i$i$i | 0) == -1;
    $$pre$i$i$i50 = $27 ? 0 : $__b$sroa$0$0;
    $183 = $27 ? 1 : 0;
    $__b$sroa$0$1 = $27 ? 0 : $__b$sroa$0$0;
   }
   if (!$__e$sroa$0$0) label = 15; else {
    $30 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
    if (($30 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$0) | 0; else $$0$i$i1$i$i = HEAP32[$30 >> 2] | 0;
    if (($$0$i$i1$i$i | 0) == -1) label = 15; else if ($183) $__e$sroa$0$3 = $__e$sroa$0$0; else {
     $__e$sroa$0$2 = $__e$sroa$0$0;
     label = 17;
     break;
    }
   }
   if ((label | 0) == 15) {
    label = 0;
    if ($183) {
     $__e$sroa$0$2 = 0;
     label = 17;
     break;
    } else $__e$sroa$0$3 = 0;
   }
   L25 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 52 >> 2] & 31]($8, HEAP32[$$0$ph45 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
    $46 = $$0$ph45 + 4 | 0;
    if (($46 | 0) == ($__fmte | 0)) {
     label = 20;
     break L6;
    }
    $52 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 52 >> 2] & 31]($8, HEAP32[$46 >> 2] | 0, 0) | 0;
    if ($52 << 24 >> 24 == 48 | $52 << 24 >> 24 == 69) {
     $53 = $$0$ph45 + 8 | 0;
     if (($53 | 0) == ($__fmte | 0)) {
      label = 23;
      break L6;
     }
     $65 = $46;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 52 >> 2] & 31]($8, HEAP32[$53 >> 2] | 0, 0) | 0;
     $__opt$0 = $52;
    } else {
     $65 = $$0$ph45;
     $__cmd$0 = $52;
     $__opt$0 = 0;
    }
    $62 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
    HEAP32[$1 >> 2] = $$pre$i$i$i50;
    HEAP32[$2 >> 2] = $__e$sroa$0$3;
    HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
    HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
    FUNCTION_TABLE_viiiiiiiii[$62 & 3]($0, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0);
    $63 = HEAP32[$0 >> 2] | 0;
    $$0$ph$be = $65 + 8 | 0;
    $$pre$pre54 = $63;
    $__b$sroa$0$2 = $63;
    $__e$sroa$0$4 = $__e$sroa$0$3;
   } else {
    if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] & 31]($8, 8192, HEAP32[$$0$ph45 >> 2] | 0) | 0) $$0$pn = $$0$ph45; else {
     $128 = $$pre$i$i$i50 + 12 | 0;
     $129 = HEAP32[$128 >> 2] | 0;
     $130 = $$pre$i$i$i50 + 16 | 0;
     if (($129 | 0) == (HEAP32[$130 >> 2] | 0)) $$0$i$i16 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i50 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i50) | 0; else $$0$i$i16 = HEAP32[$129 >> 2] | 0;
     $141 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 31]($8, $$0$i$i16) | 0;
     if (($141 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 31]($8, HEAP32[$$0$ph45 >> 2] | 0) | 0)) {
      label = 58;
      break L6;
     }
     $148 = HEAP32[$128 >> 2] | 0;
     if (($148 | 0) == (HEAP32[$130 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i50 >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i50) | 0; else HEAP32[$128 >> 2] = $148 + 4;
     $$0$ph$be = $$0$ph45 + 4 | 0;
     $$pre$pre54 = $$pre$i$i$i50;
     $__b$sroa$0$2 = $__b$sroa$0$1;
     $__e$sroa$0$4 = $__e$sroa$0$3;
     break;
    }
    while (1) {
     $$2 = $$0$pn + 4 | 0;
     if (($$2 | 0) == ($__fmte | 0)) {
      $$2$lcssa = $__fmte;
      break;
     }
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] & 31]($8, 8192, HEAP32[$$2 >> 2] | 0) | 0) $$0$pn = $$2; else {
      $$2$lcssa = $$2;
      break;
     }
    }
    $$pre$i$i$i6 = $$pre$i$i$i50;
    $$pre$i3$i$i12 = $__e$sroa$0$3;
    $$pre$pre56 = $$pre$i$i$i50;
    $93 = $__e$sroa$0$3;
    $__b$sroa$0$3 = $__b$sroa$0$1;
    $__e$sroa$0$5 = $__e$sroa$0$3;
    while (1) {
     if (!$$pre$i$i$i6) {
      $$pre$pre55 = $$pre$pre56;
      $105 = 1;
      $107 = 0;
      $__b$sroa$0$4 = $__b$sroa$0$3;
     } else {
      $82 = HEAP32[$$pre$i$i$i6 + 12 >> 2] | 0;
      if (($82 | 0) == (HEAP32[$$pre$i$i$i6 + 16 >> 2] | 0)) $$0$i$i$i$i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i6 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i6) | 0; else $$0$i$i$i$i4 = HEAP32[$82 >> 2] | 0;
      $91 = ($$0$i$i$i$i4 | 0) == -1;
      $$pre$pre55 = $91 ? 0 : $$pre$pre56;
      $105 = $91 ? 1 : 0;
      $107 = $91 ? 0 : $$pre$i$i$i6;
      $__b$sroa$0$4 = $91 ? 0 : $__b$sroa$0$3;
     }
     if (!$93) {
      $$pre$i3$i$i1248 = $$pre$i3$i$i12;
      $__e$sroa$0$6 = $__e$sroa$0$5;
      label = 41;
     } else {
      $95 = HEAP32[$93 + 12 >> 2] | 0;
      if (($95 | 0) == (HEAP32[$93 + 16 >> 2] | 0)) $$0$i$i1$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$93 >> 2] | 0) + 36 >> 2] & 127]($93) | 0; else $$0$i$i1$i$i10 = HEAP32[$95 >> 2] | 0;
      if (($$0$i$i1$i$i10 | 0) == -1) {
       $$pre$i3$i$i1248 = 0;
       $__e$sroa$0$6 = 0;
       label = 41;
      } else if ($105 ^ ($$pre$i3$i$i12 | 0) == 0) {
       $$pre$i3$i$i1247 = $$pre$i3$i$i12;
       $184 = $$pre$i3$i$i12;
       $__e$sroa$0$7 = $__e$sroa$0$5;
      } else {
       $$0$ph$be = $$2$lcssa;
       $$pre$pre54 = $$pre$pre55;
       $__b$sroa$0$2 = $__b$sroa$0$4;
       $__e$sroa$0$4 = $__e$sroa$0$5;
       break L25;
      }
     }
     if ((label | 0) == 41) {
      label = 0;
      if ($105) {
       $$0$ph$be = $$2$lcssa;
       $$pre$pre54 = $$pre$pre55;
       $__b$sroa$0$2 = $__b$sroa$0$4;
       $__e$sroa$0$4 = $__e$sroa$0$6;
       break L25;
      } else {
       $$pre$i3$i$i1247 = $$pre$i3$i$i1248;
       $184 = 0;
       $__e$sroa$0$7 = $__e$sroa$0$6;
      }
     }
     $106 = $107 + 12 | 0;
     $108 = HEAP32[$106 >> 2] | 0;
     $109 = $107 + 16 | 0;
     if (($108 | 0) == (HEAP32[$109 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$107 >> 2] | 0) + 36 >> 2] & 127]($107) | 0; else $$0$i$i = HEAP32[$108 >> 2] | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] & 31]($8, 8192, $$0$i$i) | 0)) {
      $$0$ph$be = $$2$lcssa;
      $$pre$pre54 = $$pre$pre55;
      $__b$sroa$0$2 = $__b$sroa$0$4;
      $__e$sroa$0$4 = $__e$sroa$0$7;
      break L25;
     }
     $121 = HEAP32[$106 >> 2] | 0;
     if (($121 | 0) == (HEAP32[$109 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$107 >> 2] | 0) + 40 >> 2] & 127]($107) | 0;
      $$pre$i$i$i6 = $107;
      $$pre$i3$i$i12 = $$pre$i3$i$i1247;
      $$pre$pre56 = $$pre$pre55;
      $93 = $184;
      $__b$sroa$0$3 = $__b$sroa$0$4;
      $__e$sroa$0$5 = $__e$sroa$0$7;
      continue;
     } else {
      HEAP32[$106 >> 2] = $121 + 4;
      $$pre$i$i$i6 = $107;
      $$pre$i3$i$i12 = $$pre$i3$i$i1247;
      $$pre$pre56 = $$pre$pre55;
      $93 = $184;
      $__b$sroa$0$3 = $__b$sroa$0$4;
      $__e$sroa$0$5 = $__e$sroa$0$7;
      continue;
     }
    }
   } while (0);
   if (($$0$ph$be | 0) != ($__fmte | 0) & (HEAP32[$__err >> 2] | 0) == 0) {
    $$0$ph45 = $$0$ph$be;
    $__b$sroa$0$0 = $__b$sroa$0$2;
    $__e$sroa$0$0 = $__e$sroa$0$4;
   } else {
    $$pre$i$i$i21 = $$pre$pre54;
    $__e$sroa$0$8 = $__e$sroa$0$4;
    break L4;
   }
  }
  if ((label | 0) == 17) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i21 = $$pre$i$i$i50;
   $__e$sroa$0$8 = $__e$sroa$0$2;
   break;
  } else if ((label | 0) == 20) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i21 = $$pre$i$i$i50;
   $__e$sroa$0$8 = $__e$sroa$0$3;
   break;
  } else if ((label | 0) == 23) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i21 = $$pre$i$i$i50;
   $__e$sroa$0$8 = $__e$sroa$0$3;
   break;
  } else if ((label | 0) == 58) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i21 = $$pre$i$i$i50;
   $__e$sroa$0$8 = $__e$sroa$0$3;
   break;
  }
 } while (0);
 if (!$$pre$i$i$i21) {
  $182 = 0;
  $185 = 1;
 } else {
  $158 = HEAP32[$$pre$i$i$i21 + 12 >> 2] | 0;
  if (($158 | 0) == (HEAP32[$$pre$i$i$i21 + 16 >> 2] | 0)) $$0$i$i$i$i19 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i21 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i21) | 0; else $$0$i$i$i$i19 = HEAP32[$158 >> 2] | 0;
  $167 = ($$0$i$i$i$i19 | 0) == -1;
  $182 = $167 ? 0 : $$pre$i$i$i21;
  $185 = $167 ? 1 : 0;
 }
 if (!$__e$sroa$0$8) label = 69; else {
  $170 = HEAP32[$__e$sroa$0$8 + 12 >> 2] | 0;
  if (($170 | 0) == (HEAP32[$__e$sroa$0$8 + 16 >> 2] | 0)) $$0$i$i1$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$8 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$8) | 0; else $$0$i$i1$i$i25 = HEAP32[$170 >> 2] | 0;
  if (($$0$i$i1$i$i25 | 0) == -1) label = 69; else if ($185) {
   HEAP32[$agg$result >> 2] = $182;
   STACKTOP = sp;
   return;
  }
 }
 if ((label | 0) == 69) if (!$185) {
  HEAP32[$agg$result >> 2] = $182;
  STACKTOP = sp;
  return;
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $182;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i16 = 0, $$0$i$i$i8 = 0, $$02 = 0, $0 = 0, $1 = 0, $108 = 0, $110 = 0, $113 = 0, $117 = 0, $119 = 0, $120 = 0, $123 = 0, $126 = 0, $129 = 0, $130 = 0, $138 = 0, $140 = 0, $143 = 0, $15 = 0, $152 = 0, $153 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $162 = 0, $165 = 0, $166 = 0, $168 = 0, $17 = 0, $177 = 0, $179 = 0, $182 = 0, $186 = 0, $188 = 0, $189 = 0, $192 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $207 = 0, $209 = 0, $22 = 0, $27 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $4 = 0, $43 = 0, $45 = 0, $48 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $64 = 0, $65 = 0, $73 = 0, $75 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $9 = 0, $90 = 0, $92 = 0, $96 = 0, $97 = 0, $99 = 0, $__v$i$i13 = 0, $k1$021 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $__v$i$i13 = sp + 20 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 16 | 0;
 $4 = sp;
 $5 = sp + 40 | 0;
 if (($first | 0) == ($last | 0)) {
  $$02 = $first;
  STACKTOP = sp;
  return $$02 | 0;
 }
 $8 = HEAP8[$first >> 0] | 0;
 if (($8 | 0) == 84) {
  $9 = $db + 4 | 0;
  $15 = ((HEAP32[$9 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
  $16 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  $17 = HEAP32[$9 >> 2] | 0;
  $22 = ($17 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
  if (!(($16 | 0) != ($first | 0) & ($22 | 0) == ($15 + 1 | 0))) {
   if (($22 | 0) == ($15 | 0)) {
    $$02 = $first;
    STACKTOP = sp;
    return $$02 | 0;
   } else {
    $79 = $17;
    $k1$021 = $22;
   }
   do {
    $81 = $79;
    $79 = $79 + -24 | 0;
    do {
     $80 = $81 + -24 | 0;
     HEAP32[$9 >> 2] = $80;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($80);
     $81 = HEAP32[$9 >> 2] | 0;
    } while (($81 | 0) != ($79 | 0));
    $k1$021 = $k1$021 + -1 | 0;
   } while (($k1$021 | 0) != ($15 | 0));
   $$02 = $first;
   STACKTOP = sp;
   return $$02 | 0;
  }
  $27 = $db + 16 | 0;
  HEAP32[$1 >> 2] = HEAP32[$db + 12 >> 2];
  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($0, $17 + -24 | 0, $1);
  $31 = $db + 20 | 0;
  $32 = HEAP32[$31 >> 2] | 0;
  $34 = HEAP32[$db + 24 >> 2] | 0;
  if ($32 >>> 0 < $34 >>> 0) {
   if (!$32) $48 = 0; else {
    HEAP32[$32 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
    HEAP32[$32 >> 2] = HEAP32[$0 >> 2];
    $43 = $0 + 4 | 0;
    HEAP32[$32 + 4 >> 2] = HEAP32[$43 >> 2];
    $45 = $0 + 8 | 0;
    HEAP32[$32 + 8 >> 2] = HEAP32[$45 >> 2];
    HEAP32[$45 >> 2] = 0;
    HEAP32[$43 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
    $48 = HEAP32[$31 >> 2] | 0;
   }
   HEAP32[$31 >> 2] = $48 + 16;
  } else {
   $52 = HEAP32[$27 >> 2] | 0;
   $54 = $32 - $52 >> 4;
   $55 = $54 + 1 | 0;
   if (($55 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   $58 = $34 - $52 | 0;
   if ($58 >> 4 >>> 0 < 1073741823) {
    $61 = $58 >> 3;
    $$0$i$i$i = $61 >>> 0 < $55 >>> 0 ? $55 : $61;
   } else $$0$i$i$i = 2147483647;
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i13, $$0$i$i$i, $54, $db + 28 | 0);
   $64 = $__v$i$i13 + 8 | 0;
   $65 = HEAP32[$64 >> 2] | 0;
   if ($65) {
    HEAP32[$65 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
    HEAP32[$65 >> 2] = HEAP32[$0 >> 2];
    $73 = $0 + 4 | 0;
    HEAP32[$65 + 4 >> 2] = HEAP32[$73 >> 2];
    $75 = $0 + 8 | 0;
    HEAP32[$65 + 8 >> 2] = HEAP32[$75 >> 2];
    HEAP32[$75 >> 2] = 0;
    HEAP32[$73 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
   }
   HEAP32[$64 >> 2] = $65 + 16;
   __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($27, $__v$i$i13);
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i13);
  }
  __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
  $$02 = $16;
  STACKTOP = sp;
  return $$02 | 0;
 } else if (($8 | 0) == 83) {
  $143 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  if (($143 | 0) != ($first | 0)) {
   $$02 = $143;
   STACKTOP = sp;
   return $$02 | 0;
  }
  if (($last - $first | 0) <= 2) {
   $$02 = $first;
   STACKTOP = sp;
   return $$02 | 0;
  }
  if ((HEAP8[$first + 1 >> 0] | 0) != 116) {
   $$02 = $first;
   STACKTOP = sp;
   return $$02 | 0;
  }
  $152 = $first + 2 | 0;
  $153 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($152, $last, $db) | 0;
  if (($153 | 0) == ($152 | 0)) {
   $$02 = $first;
   STACKTOP = sp;
   return $$02 | 0;
  }
  $156 = $db + 4 | 0;
  $157 = HEAP32[$156 >> 2] | 0;
  if ((HEAP32[$db >> 2] | 0) == ($157 | 0)) {
   $$02 = $first;
   STACKTOP = sp;
   return $$02 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($157 + -24 | 0, 0, 59552, 5) | 0;
  $160 = $db + 16 | 0;
  $162 = (HEAP32[$156 >> 2] | 0) + -24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$db + 12 >> 2];
  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4, $162, $5);
  $165 = $db + 20 | 0;
  $166 = HEAP32[$165 >> 2] | 0;
  $168 = HEAP32[$db + 24 >> 2] | 0;
  if ($166 >>> 0 < $168 >>> 0) {
   if (!$166) $182 = 0; else {
    HEAP32[$166 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAP32[$166 >> 2] = HEAP32[$4 >> 2];
    $177 = $4 + 4 | 0;
    HEAP32[$166 + 4 >> 2] = HEAP32[$177 >> 2];
    $179 = $4 + 8 | 0;
    HEAP32[$166 + 8 >> 2] = HEAP32[$179 >> 2];
    HEAP32[$179 >> 2] = 0;
    HEAP32[$177 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    $182 = HEAP32[$165 >> 2] | 0;
   }
   HEAP32[$165 >> 2] = $182 + 16;
  } else {
   $186 = HEAP32[$160 >> 2] | 0;
   $188 = $166 - $186 >> 4;
   $189 = $188 + 1 | 0;
   if (($189 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   $192 = $168 - $186 | 0;
   if ($192 >> 4 >>> 0 < 1073741823) {
    $195 = $192 >> 3;
    $$0$i$i$i16 = $195 >>> 0 < $189 >>> 0 ? $189 : $195;
   } else $$0$i$i$i16 = 2147483647;
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i13, $$0$i$i$i16, $188, $db + 28 | 0);
   $198 = $__v$i$i13 + 8 | 0;
   $199 = HEAP32[$198 >> 2] | 0;
   if ($199) {
    HEAP32[$199 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAP32[$199 >> 2] = HEAP32[$4 >> 2];
    $207 = $4 + 4 | 0;
    HEAP32[$199 + 4 >> 2] = HEAP32[$207 >> 2];
    $209 = $4 + 8 | 0;
    HEAP32[$199 + 8 >> 2] = HEAP32[$209 >> 2];
    HEAP32[$209 >> 2] = 0;
    HEAP32[$207 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
   }
   HEAP32[$198 >> 2] = $199 + 16;
   __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($160, $__v$i$i13);
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i13);
  }
  __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
  $$02 = $153;
  STACKTOP = sp;
  return $$02 | 0;
 } else if (($8 | 0) == 68) {
  $86 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  if (($86 | 0) == ($first | 0)) {
   $$02 = $first;
   STACKTOP = sp;
   return $$02 | 0;
  }
  $90 = HEAP32[$db + 4 >> 2] | 0;
  if ((HEAP32[$db >> 2] | 0) == ($90 | 0)) {
   $$02 = $first;
   STACKTOP = sp;
   return $$02 | 0;
  }
  $92 = $db + 16 | 0;
  HEAP32[$3 >> 2] = HEAP32[$db + 12 >> 2];
  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($2, $90 + -24 | 0, $3);
  $96 = $db + 20 | 0;
  $97 = HEAP32[$96 >> 2] | 0;
  $99 = HEAP32[$db + 24 >> 2] | 0;
  if ($97 >>> 0 < $99 >>> 0) {
   if (!$97) $113 = 0; else {
    HEAP32[$97 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
    HEAP32[$97 >> 2] = HEAP32[$2 >> 2];
    $108 = $2 + 4 | 0;
    HEAP32[$97 + 4 >> 2] = HEAP32[$108 >> 2];
    $110 = $2 + 8 | 0;
    HEAP32[$97 + 8 >> 2] = HEAP32[$110 >> 2];
    HEAP32[$110 >> 2] = 0;
    HEAP32[$108 >> 2] = 0;
    HEAP32[$2 >> 2] = 0;
    $113 = HEAP32[$96 >> 2] | 0;
   }
   HEAP32[$96 >> 2] = $113 + 16;
  } else {
   $117 = HEAP32[$92 >> 2] | 0;
   $119 = $97 - $117 >> 4;
   $120 = $119 + 1 | 0;
   if (($120 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   $123 = $99 - $117 | 0;
   if ($123 >> 4 >>> 0 < 1073741823) {
    $126 = $123 >> 3;
    $$0$i$i$i8 = $126 >>> 0 < $120 >>> 0 ? $120 : $126;
   } else $$0$i$i$i8 = 2147483647;
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i13, $$0$i$i$i8, $119, $db + 28 | 0);
   $129 = $__v$i$i13 + 8 | 0;
   $130 = HEAP32[$129 >> 2] | 0;
   if ($130) {
    HEAP32[$130 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
    HEAP32[$130 >> 2] = HEAP32[$2 >> 2];
    $138 = $2 + 4 | 0;
    HEAP32[$130 + 4 >> 2] = HEAP32[$138 >> 2];
    $140 = $2 + 8 | 0;
    HEAP32[$130 + 8 >> 2] = HEAP32[$140 >> 2];
    HEAP32[$140 >> 2] = 0;
    HEAP32[$138 >> 2] = 0;
    HEAP32[$2 >> 2] = 0;
   }
   HEAP32[$129 >> 2] = $130 + 16;
   __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($92, $__v$i$i13);
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i13);
  }
  __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($2);
  $$02 = $86;
  STACKTOP = sp;
  return $$02 | 0;
 } else {
  $$02 = $first;
  STACKTOP = sp;
  return $$02 | 0;
 }
 return 0;
}

function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i16 = 0, $$01$i$i = 0, $$01$i$i14 = 0, $$012$i$i = 0, $$056 = 0, $$2 = 0, $$lcssa34 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $109 = 0, $11 = 0, $114 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $124 = 0, $127 = 0, $13 = 0, $131 = 0, $132 = 0, $136 = 0, $138 = 0, $140 = 0, $142 = 0, $144 = 0, $145 = 0, $145$phi = 0, $148 = 0, $150 = 0, $155 = 0, $160 = 0, $161 = 0, $162 = 0, $166 = 0, $167 = 0, $168 = 0, $168$phi = 0, $169 = 0, $171 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $44 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $55 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $73 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $93 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa66 = 0, $__d$036 = 0, $__d$1$lcssa78 = 0, $__d$1$lcssa79 = 0, $__d$141 = 0, $__d$2 = 0, $__d$350 = 0, $__f$0$lcssa76 = 0, $__f$0$lcssa77 = 0, $__f$042 = 0, $__f$147 = 0, $__gl$053 = 0, $__gl$1 = 0, $__ig$052 = 0, $__ig$1 = 0, $__ng$051 = 0, $__ng$1 = 0, $__p$055 = 0, $scevgep69 = 0, $scevgep6970 = 0, $scevgep71 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me >> 2] = $__mb;
 $0 = $__sn + 1 | 0;
 $1 = $__sn + 8 | 0;
 $2 = $__sn + 4 | 0;
 $4 = ($__flags & 512 | 0) == 0;
 $5 = $__sym + 1 | 0;
 $6 = $__sym + 8 | 0;
 $7 = $__sym + 4 | 0;
 $8 = ($__fd | 0) > 0;
 $9 = $__grp + 1 | 0;
 $10 = $__grp + 8 | 0;
 $11 = $__grp + 4 | 0;
 $12 = $__ct + 8 | 0;
 $13 = 0 - $__fd | 0;
 $$056 = $__db;
 $__p$055 = 0;
 while (1) {
  switch (HEAP8[$__pat + $__p$055 >> 0] | 0) {
  case 3:
   {
    $25 = HEAP8[$__sn >> 0] | 0;
    $27 = ($25 & 1) == 0;
    if ($27) $32 = ($25 & 255) >>> 1; else $32 = HEAP32[$2 >> 2] | 0;
    if (!$32) $$2 = $$056; else {
     $34 = HEAP8[($27 ? $0 : HEAP32[$1 >> 2] | 0) >> 0] | 0;
     $35 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $35 + 1;
     HEAP8[$35 >> 0] = $34;
     $$2 = $$056;
    }
    break;
   }
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $$2 = $$056;
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, 32) | 0;
    $23 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $23 + 1;
    HEAP8[$23 >> 0] = $22;
    $$2 = $$056;
    break;
   }
  case 2:
   {
    $37 = HEAP8[$__sym >> 0] | 0;
    $39 = ($37 & 1) == 0;
    if ($39) $44 = ($37 & 255) >>> 1; else $44 = HEAP32[$7 >> 2] | 0;
    if (($44 | 0) == 0 | $4) $$2 = $$056; else {
     if ($39) {
      $50 = $5;
      $51 = ($37 & 255) >>> 1;
     } else {
      $50 = HEAP32[$6 >> 2] | 0;
      $51 = HEAP32[$7 >> 2] | 0;
     }
     $49 = $50 + $51 | 0;
     $52 = HEAP32[$__me >> 2] | 0;
     if (!$51) $$0$lcssa$i$i16 = $52; else {
      $$01$i$i14 = $52;
      $55 = $50;
      while (1) {
       HEAP8[$$01$i$i14 >> 0] = HEAP8[$55 >> 0] | 0;
       $55 = $55 + 1 | 0;
       if (($55 | 0) == ($49 | 0)) break; else $$01$i$i14 = $$01$i$i14 + 1 | 0;
      }
      $$0$lcssa$i$i16 = $52 + $51 | 0;
     }
     HEAP32[$__me >> 2] = $$0$lcssa$i$i16;
     $$2 = $$056;
    }
    break;
   }
  case 4:
   {
    $59 = HEAP32[$__me >> 2] | 0;
    $$$0 = $__neg ? $$056 + 1 | 0 : $$056;
    L28 : do if ($$$0 >>> 0 < $__de >>> 0) {
     $62 = HEAP32[$12 >> 2] | 0;
     $__d$036 = $$$0;
     while (1) {
      $65 = HEAP8[$__d$036 >> 0] | 0;
      if ($65 << 24 >> 24 <= -1) {
       $__d$0$lcssa = $__d$036;
       break L28;
      }
      $64 = $__d$036 + 1 | 0;
      if (!(HEAP16[$62 + ($65 << 24 >> 24 << 1) >> 1] & 2048)) {
       $__d$0$lcssa = $__d$036;
       break L28;
      }
      if ($64 >>> 0 < $__de >>> 0) $__d$036 = $64; else {
       $__d$0$lcssa = $64;
       break;
      }
     }
    } else $__d$0$lcssa = $$$0; while (0);
    $__d$0$lcssa66 = $__d$0$lcssa;
    if ($8) {
     if ($__d$0$lcssa >>> 0 > $$$0 >>> 0) {
      $73 = $$$0 - $__d$0$lcssa66 | 0;
      $umax = $73 >>> 0 < $13 >>> 0 ? $13 : $73;
      $scevgep69 = $umax + $__fd | 0;
      $78 = $59;
      $__d$141 = $__d$0$lcssa;
      $__f$042 = $__fd;
      while (1) {
       $75 = $__d$141 + -1 | 0;
       $76 = HEAP8[$75 >> 0] | 0;
       HEAP32[$__me >> 2] = $78 + 1;
       HEAP8[$78 >> 0] = $76;
       $79 = $__f$042 + -1 | 0;
       $81 = ($79 | 0) > 0;
       if (!($75 >>> 0 > $$$0 >>> 0 & $81)) break;
       $78 = HEAP32[$__me >> 2] | 0;
       $__d$141 = $75;
       $__f$042 = $79;
      }
      $scevgep6970 = $scevgep69;
      $scevgep71 = $__d$0$lcssa + $umax | 0;
      if ($81) {
       $__d$1$lcssa79 = $scevgep71;
       $__f$0$lcssa77 = $scevgep6970;
       label = 32;
      } else {
       $89 = 0;
       $__d$1$lcssa78 = $scevgep71;
       $__f$0$lcssa76 = $scevgep6970;
      }
     } else {
      $__d$1$lcssa79 = $__d$0$lcssa;
      $__f$0$lcssa77 = $__fd;
      label = 32;
     }
     if ((label | 0) == 32) {
      label = 0;
      $89 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, 48) | 0;
      $__d$1$lcssa78 = $__d$1$lcssa79;
      $__f$0$lcssa76 = $__f$0$lcssa77;
     }
     $87 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $87 + 1;
     if (($__f$0$lcssa76 | 0) > 0) {
      $90 = $87;
      $__f$147 = $__f$0$lcssa76;
      while (1) {
       HEAP8[$90 >> 0] = $89;
       $__f$147 = $__f$147 + -1 | 0;
       $93 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $93 + 1;
       if (($__f$147 | 0) <= 0) {
        $$lcssa34 = $93;
        break;
       } else $90 = $93;
      }
     } else $$lcssa34 = $87;
     HEAP8[$$lcssa34 >> 0] = $__dp;
     $__d$2 = $__d$1$lcssa78;
    } else $__d$2 = $__d$0$lcssa;
    if (($__d$2 | 0) == ($$$0 | 0)) {
     $99 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, 48) | 0;
     $100 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $100 + 1;
     HEAP8[$100 >> 0] = $99;
    } else {
     $102 = HEAP8[$__grp >> 0] | 0;
     $104 = ($102 & 1) == 0;
     if ($104) $109 = ($102 & 255) >>> 1; else $109 = HEAP32[$11 >> 2] | 0;
     if (!$109) {
      $__d$350 = $__d$2;
      $__gl$053 = -1;
      $__ig$052 = 0;
      $__ng$051 = 0;
     } else {
      $__d$350 = $__d$2;
      $__gl$053 = HEAP8[($104 ? $9 : HEAP32[$10 >> 2] | 0) >> 0] | 0;
      $__ig$052 = 0;
      $__ng$051 = 0;
     }
     while (1) {
      if (($__ng$051 | 0) == ($__gl$053 | 0)) {
       $114 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $114 + 1;
       HEAP8[$114 >> 0] = $__ts;
       $116 = $__ig$052 + 1 | 0;
       $117 = HEAP8[$__grp >> 0] | 0;
       $119 = ($117 & 1) == 0;
       if ($119) $124 = ($117 & 255) >>> 1; else $124 = HEAP32[$11 >> 2] | 0;
       if ($116 >>> 0 < $124 >>> 0) {
        $127 = HEAP8[($119 ? $9 : HEAP32[$10 >> 2] | 0) + $116 >> 0] | 0;
        $__gl$1 = $127 << 24 >> 24 == 127 ? -1 : $127 << 24 >> 24;
        $__ig$1 = $116;
        $__ng$1 = 0;
       } else {
        $__gl$1 = $__gl$053;
        $__ig$1 = $116;
        $__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$053;
       $__ig$1 = $__ig$052;
       $__ng$1 = $__ng$051;
      }
      $__d$350 = $__d$350 + -1 | 0;
      $131 = HEAP8[$__d$350 >> 0] | 0;
      $132 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $132 + 1;
      HEAP8[$132 >> 0] = $131;
      if (($__d$350 | 0) == ($$$0 | 0)) break; else {
       $__gl$053 = $__gl$1;
       $__ig$052 = $__ig$1;
       $__ng$051 = $__ng$1 + 1 | 0;
      }
     }
    }
    $136 = HEAP32[$__me >> 2] | 0;
    if (($59 | 0) == ($136 | 0)) $$2 = $$$0; else {
     $138 = $136 + -1 | 0;
     if ($138 >>> 0 > $59 >>> 0) {
      $$012$i$i = $59;
      $142 = $138;
      $145 = $136;
      while (1) {
       $140 = HEAP8[$$012$i$i >> 0] | 0;
       HEAP8[$$012$i$i >> 0] = HEAP8[$142 >> 0] | 0;
       HEAP8[$142 >> 0] = $140;
       $$012$i$i = $$012$i$i + 1 | 0;
       $144 = $145 + -2 | 0;
       if ($$012$i$i >>> 0 >= $144 >>> 0) {
        $$2 = $$$0;
        break;
       } else {
        $145$phi = $142;
        $142 = $144;
        $145 = $145$phi;
       }
      }
     } else $$2 = $$$0;
    }
    break;
   }
  default:
   $$2 = $$056;
  }
  $__p$055 = $__p$055 + 1 | 0;
  if (($__p$055 | 0) == 4) break; else $$056 = $$2;
 }
 $148 = HEAP8[$__sn >> 0] | 0;
 $150 = ($148 & 1) == 0;
 if ($150) $155 = ($148 & 255) >>> 1; else $155 = HEAP32[$2 >> 2] | 0;
 if ($155 >>> 0 > 1) {
  if ($150) {
   $$pn = $0;
   $161 = ($148 & 255) >>> 1;
  } else {
   $$pn = HEAP32[$1 >> 2] | 0;
   $161 = HEAP32[$2 >> 2] | 0;
  }
  $160 = $$pn + $161 | 0;
  $162 = HEAP32[$__me >> 2] | 0;
  if (($161 | 0) == 1) $$0$lcssa$i$i = $162; else {
   $$01$i$i = $162;
   $166 = $$pn + 1 | 0;
   $168 = $$pn;
   while (1) {
    HEAP8[$$01$i$i >> 0] = HEAP8[$166 >> 0] | 0;
    $167 = $168 + 2 | 0;
    $169 = $$01$i$i + 1 | 0;
    if (($167 | 0) == ($160 | 0)) {
     $$0$lcssa$i$i = $169;
     break;
    } else {
     $168$phi = $166;
     $$01$i$i = $169;
     $166 = $167;
     $168 = $168$phi;
    }
   }
  }
  HEAP32[$__me >> 2] = $$0$lcssa$i$i;
 }
 $171 = $__flags & 176;
 if (($171 | 0) == 32) {
  HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
  STACKTOP = sp;
  return;
 } else if (($171 | 0) == 16) {
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$__mi >> 2] = $__mb;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i18 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$060 = 0, $$2 = 0, $$lcssa35 = 0, $$pn = 0, $0 = 0, $1 = 0, $101 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $116 = 0, $119 = 0, $123 = 0, $124 = 0, $125 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $137$phi = 0, $140 = 0, $142 = 0, $147 = 0, $152 = 0, $153 = 0, $154 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $161$phi = 0, $166 = 0, $168 = 0, $169 = 0, $18 = 0, $19 = 0, $21 = 0, $23 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $40 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $57 = 0, $6 = 0, $61 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $83$phi = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $__d$0$lcssa = 0, $__d$036 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$140 = 0, $__d$2 = 0, $__d$354 = 0, $__f$0$lcssa77 = 0, $__f$041 = 0, $__f$147 = 0, $__gl$057 = 0, $__gl$057$ph = 0, $__gl$1 = 0, $__ig$056 = 0, $__ig$1 = 0, $__ng$055 = 0, $__ng$1 = 0, $__p$059 = 0, $scevgep$i$i13$idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me >> 2] = $__mb;
 $0 = $__sn + 4 | 0;
 $1 = $__sn + 8 | 0;
 $3 = ($__flags & 512 | 0) == 0;
 $4 = $__sym + 4 | 0;
 $5 = $__sym + 8 | 0;
 $6 = ($__fd | 0) > 0;
 $7 = $__grp + 1 | 0;
 $8 = $__grp + 8 | 0;
 $9 = $__grp + 4 | 0;
 $$060 = $__db;
 $__p$059 = 0;
 while (1) {
  L3 : do switch (HEAP8[$__pat + $__p$059 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $$2 = $$060;
    break;
   }
  case 3:
   {
    $21 = HEAP8[$__sn >> 0] | 0;
    $23 = ($21 & 1) == 0;
    if ($23) $28 = ($21 & 255) >>> 1; else $28 = HEAP32[$0 >> 2] | 0;
    if (!$28) $$2 = $$060; else {
     $30 = HEAP32[($23 ? $0 : HEAP32[$1 >> 2] | 0) >> 2] | 0;
     $31 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $31 + 4;
     HEAP32[$31 >> 2] = $30;
     $$2 = $$060;
    }
    break;
   }
  case 4:
   {
    $57 = HEAP32[$__me >> 2] | 0;
    $$$0 = $__neg ? $$060 + 4 | 0 : $$060;
    L12 : do if ($$$0 >>> 0 < $__de >>> 0) {
     $__d$036 = $$$0;
     while (1) {
      $61 = $__d$036 + 4 | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, HEAP32[$__d$036 >> 2] | 0) | 0)) {
       $__d$0$lcssa = $__d$036;
       break L12;
      }
      if ($61 >>> 0 < $__de >>> 0) $__d$036 = $61; else {
       $__d$0$lcssa = $61;
       break;
      }
     }
    } else $__d$0$lcssa = $$$0; while (0);
    if ($6) {
     if ($__d$0$lcssa >>> 0 > $$$0 >>> 0) {
      $71 = HEAP32[$__me >> 2] | 0;
      $__d$140 = $__d$0$lcssa;
      $__f$041 = $__fd;
      while (1) {
       $__d$140 = $__d$140 + -4 | 0;
       $70 = $71 + 4 | 0;
       HEAP32[$71 >> 2] = HEAP32[$__d$140 >> 2];
       $__f$041 = $__f$041 + -1 | 0;
       $74 = ($__f$041 | 0) > 0;
       if (!($__d$140 >>> 0 > $$$0 >>> 0 & $74)) break; else $71 = $70;
      }
      HEAP32[$__me >> 2] = $70;
      if ($74) {
       $__d$1$lcssa79 = $__d$140;
       $__f$0$lcssa77 = $__f$041;
       label = 31;
      } else {
       HEAP32[$__me >> 2] = $71 + 8;
       $$lcssa35 = $70;
       $__d$1$lcssa7880 = $__d$140;
      }
     } else {
      $__d$1$lcssa79 = $__d$0$lcssa;
      $__f$0$lcssa77 = $__fd;
      label = 31;
     }
     if ((label | 0) == 31) {
      label = 0;
      $79 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 31]($__ct, 48) | 0;
      $81 = HEAP32[$__me >> 2] | 0;
      $82 = $81 + 4 | 0;
      HEAP32[$__me >> 2] = $82;
      if (($__f$0$lcssa77 | 0) > 0) {
       $168 = $82;
       $83 = $81;
       $__f$147 = $__f$0$lcssa77;
       while (1) {
        HEAP32[$83 >> 2] = $79;
        $__f$147 = $__f$147 + -1 | 0;
        if (($__f$147 | 0) <= 0) break; else {
         $83$phi = $168;
         $168 = $83 + 8 | 0;
         $83 = $83$phi;
        }
       }
       HEAP32[$__me >> 2] = $81 + ($__f$0$lcssa77 + 1 << 2);
       $$lcssa35 = $81 + ($__f$0$lcssa77 << 2) | 0;
       $__d$1$lcssa7880 = $__d$1$lcssa79;
      } else {
       $$lcssa35 = $81;
       $__d$1$lcssa7880 = $__d$1$lcssa79;
      }
     }
     HEAP32[$$lcssa35 >> 2] = $__dp;
     $__d$2 = $__d$1$lcssa7880;
    } else $__d$2 = $__d$0$lcssa;
    if (($__d$2 | 0) == ($$$0 | 0)) {
     $91 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 31]($__ct, 48) | 0;
     $92 = HEAP32[$__me >> 2] | 0;
     $93 = $92 + 4 | 0;
     HEAP32[$__me >> 2] = $93;
     HEAP32[$92 >> 2] = $91;
     $129 = $93;
     $131 = $92;
     $169 = $91;
    } else {
     $94 = HEAP8[$__grp >> 0] | 0;
     $96 = ($94 & 1) == 0;
     if ($96) $101 = ($94 & 255) >>> 1; else $101 = HEAP32[$9 >> 2] | 0;
     if (!$101) $__gl$057$ph = -1; else $__gl$057$ph = HEAP8[($96 ? $7 : HEAP32[$8 >> 2] | 0) >> 0] | 0;
     $107 = HEAP32[$__me >> 2] | 0;
     $__d$354 = $__d$2;
     $__gl$057 = $__gl$057$ph;
     $__ig$056 = 0;
     $__ng$055 = 0;
     while (1) {
      if (($__ng$055 | 0) == ($__gl$057 | 0)) {
       $106 = $107 + 4 | 0;
       HEAP32[$__me >> 2] = $106;
       HEAP32[$107 >> 2] = $__ts;
       $108 = $__ig$056 + 1 | 0;
       $109 = HEAP8[$__grp >> 0] | 0;
       $111 = ($109 & 1) == 0;
       if ($111) $116 = ($109 & 255) >>> 1; else $116 = HEAP32[$9 >> 2] | 0;
       if ($108 >>> 0 < $116 >>> 0) {
        $119 = HEAP8[($111 ? $7 : HEAP32[$8 >> 2] | 0) + $108 >> 0] | 0;
        $125 = $106;
        $__gl$1 = $119 << 24 >> 24 == 127 ? -1 : $119 << 24 >> 24;
        $__ig$1 = $108;
        $__ng$1 = 0;
       } else {
        $125 = $106;
        $__gl$1 = $__gl$057;
        $__ig$1 = $108;
        $__ng$1 = 0;
       }
      } else {
       $125 = $107;
       $__gl$1 = $__gl$057;
       $__ig$1 = $__ig$056;
       $__ng$1 = $__ng$055;
      }
      $__d$354 = $__d$354 + -4 | 0;
      $123 = HEAP32[$__d$354 >> 2] | 0;
      $124 = $125 + 4 | 0;
      HEAP32[$__me >> 2] = $124;
      HEAP32[$125 >> 2] = $123;
      if (($__d$354 | 0) == ($$$0 | 0)) {
       $129 = $124;
       $131 = $125;
       $169 = $123;
       break;
      } else {
       $107 = $124;
       $__gl$057 = $__gl$1;
       $__ig$056 = $__ig$1;
       $__ng$055 = $__ng$1 + 1 | 0;
      }
     }
    }
    if (($57 | 0) != ($129 | 0) & $131 >>> 0 > $57 >>> 0) {
     $$012$i$i = $57;
     $133 = $169;
     $134 = $131;
     $137 = $129;
     while (1) {
      $132 = HEAP32[$$012$i$i >> 2] | 0;
      HEAP32[$$012$i$i >> 2] = $133;
      HEAP32[$134 >> 2] = $132;
      $135 = $$012$i$i + 4 | 0;
      $136 = $137 + -8 | 0;
      if ($135 >>> 0 >= $136 >>> 0) {
       $$2 = $$$0;
       break L3;
      }
      $137$phi = $134;
      $$012$i$i = $135;
      $133 = HEAP32[$136 >> 2] | 0;
      $134 = $136;
      $137 = $137$phi;
     }
    } else $$2 = $$$0;
    break;
   }
  case 2:
   {
    $33 = HEAP8[$__sym >> 0] | 0;
    $35 = ($33 & 1) == 0;
    if ($35) $40 = ($33 & 255) >>> 1; else $40 = HEAP32[$4 >> 2] | 0;
    if (($40 | 0) == 0 | $3) $$2 = $$060; else {
     if ($35) {
      $46 = $4;
      $47 = ($33 & 255) >>> 1;
     } else {
      $46 = HEAP32[$5 >> 2] | 0;
      $47 = HEAP32[$4 >> 2] | 0;
     }
     $45 = $46 + ($47 << 2) | 0;
     $48 = HEAP32[$__me >> 2] | 0;
     if (!$47) $$0$lcssa$i$i18 = $48; else {
      $scevgep$i$i13$idx = ($47 << 2) + -4 | 0;
      $$01$i$i15 = $48;
      $51 = $46;
      while (1) {
       HEAP32[$$01$i$i15 >> 2] = HEAP32[$51 >> 2];
       $51 = $51 + 4 | 0;
       if (($51 | 0) == ($45 | 0)) break; else $$01$i$i15 = $$01$i$i15 + 4 | 0;
      }
      $$0$lcssa$i$i18 = $48 + (($scevgep$i$i13$idx >>> 2) + 1 << 2) | 0;
     }
     HEAP32[$__me >> 2] = $$0$lcssa$i$i18;
     $$2 = $$060;
    }
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $18 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 31]($__ct, 32) | 0;
    $19 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $19 + 4;
    HEAP32[$19 >> 2] = $18;
    $$2 = $$060;
    break;
   }
  default:
   $$2 = $$060;
  } while (0);
  $__p$059 = $__p$059 + 1 | 0;
  if (($__p$059 | 0) == 4) break; else $$060 = $$2;
 }
 $140 = HEAP8[$__sn >> 0] | 0;
 $142 = ($140 & 1) == 0;
 if ($142) $147 = ($140 & 255) >>> 1; else $147 = HEAP32[$0 >> 2] | 0;
 if ($147 >>> 0 > 1) {
  if ($142) {
   $$pn = $0;
   $153 = ($140 & 255) >>> 1;
  } else {
   $$pn = HEAP32[$1 >> 2] | 0;
   $153 = HEAP32[$0 >> 2] | 0;
  }
  $152 = $$pn + ($153 << 2) | 0;
  $154 = HEAP32[$__me >> 2] | 0;
  if (($153 | 0) == 1) $$0$lcssa$i$i = $154; else {
   $157 = ($153 << 2) + -8 | 0;
   $$01$i$i = $154;
   $159 = $$pn + 4 | 0;
   $161 = $$pn;
   while (1) {
    HEAP32[$$01$i$i >> 2] = HEAP32[$159 >> 2];
    $160 = $161 + 8 | 0;
    if (($160 | 0) == ($152 | 0)) break; else {
     $161$phi = $159;
     $$01$i$i = $$01$i$i + 4 | 0;
     $159 = $160;
     $161 = $161$phi;
    }
   }
   $$0$lcssa$i$i = $154 + (($157 >>> 2) + 1 << 2) | 0;
  }
  HEAP32[$__me >> 2] = $$0$lcssa$i$i;
 }
 $166 = $__flags & 176;
 if (($166 | 0) == 32) {
  HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
  STACKTOP = sp;
  return;
 } else if (($166 | 0) == 16) {
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$__mi >> 2] = $__mb;
  STACKTOP = sp;
  return;
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i10 = 0, $$02 = 0, $$03$i = 0, $$lcssa = 0, $$sroa$5 = 0, $0 = 0, $1 = 0, $10 = 0, $10$phi = 0, $101 = 0, $104 = 0, $106 = 0, $110 = 0, $112 = 0, $113 = 0, $117 = 0, $119 = 0, $122 = 0, $123 = 0, $125 = 0, $128 = 0, $13 = 0, $131 = 0, $19 = 0, $2 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $43 = 0, $44 = 0, $45 = 0, $55 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $69 = 0, $71 = 0, $75 = 0, $77 = 0, $78 = 0, $82 = 0, $84 = 0, $87 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i7 = 0, $c$0$in$lcssa = 0, $c$0$in21 = 0, $isdigittmp = 0, $isdigittmp419 = 0, $isdigittmp423 = 0, $l$04$i = 0, $n$0$lcssa = 0, $n$022 = 0, $r = 0, $r$05$i = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__v$i$i7 = sp + 72 | 0;
 $r = sp + 60 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 24 | 0;
 $2 = sp;
 $$sroa$5 = sp + 92 | 0;
 if (($first | 0) == ($last | 0)) {
  $$02 = $first;
  STACKTOP = sp;
  return $$02 | 0;
 }
 $isdigittmp = (HEAP8[$first >> 0] | 0) + -48 | 0;
 if ($isdigittmp >>> 0 >= 10) {
  $$02 = $first;
  STACKTOP = sp;
  return $$02 | 0;
 }
 $6 = $first + 1 | 0;
 if (($6 | 0) == ($last | 0)) {
  $$02 = $first;
  STACKTOP = sp;
  return $$02 | 0;
 }
 $isdigittmp419 = (HEAP8[$6 >> 0] | 0) + -48 | 0;
 L10 : do if ($isdigittmp419 >>> 0 < 10) {
  $10 = $first;
  $c$0$in21 = $6;
  $isdigittmp423 = $isdigittmp419;
  $n$022 = $isdigittmp;
  while (1) {
   $9 = $10 + 2 | 0;
   if (($9 | 0) == ($last | 0)) {
    $$02 = $first;
    break;
   }
   $13 = $isdigittmp423 + ($n$022 * 10 | 0) | 0;
   $isdigittmp423 = (HEAP8[$9 >> 0] | 0) + -48 | 0;
   if ($isdigittmp423 >>> 0 >= 10) {
    $$lcssa = $c$0$in21;
    $c$0$in$lcssa = $9;
    $n$0$lcssa = $13;
    break L10;
   } else {
    $10$phi = $c$0$in21;
    $c$0$in21 = $9;
    $n$022 = $13;
    $10 = $10$phi;
   }
  }
  STACKTOP = sp;
  return $$02 | 0;
 } else {
  $$lcssa = $first;
  $c$0$in$lcssa = $6;
  $n$0$lcssa = $isdigittmp;
 } while (0);
 if (($last - $c$0$in$lcssa | 0) >>> 0 < $n$0$lcssa >>> 0) {
  $$02 = $first;
  STACKTOP = sp;
  return $$02 | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($r, $c$0$in$lcssa, $n$0$lcssa);
 $19 = HEAP8[$r >> 0] | 0;
 if (!($19 & 1)) {
  $30 = ($19 & 255) >>> 1;
  $32 = $r + 1 | 0;
 } else {
  $30 = HEAP32[$r + 4 >> 2] | 0;
  $32 = HEAP32[$r + 8 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $32, $30 >>> 0 < 10 ? $30 : 10);
 $33 = HEAP8[$0 >> 0] | 0;
 $35 = ($33 & 1) == 0;
 if ($35) {
  $131 = $0 + 1 | 0;
  $44 = ($33 & 255) >>> 1;
 } else {
  $131 = HEAP32[$0 + 8 >> 2] | 0;
  $44 = HEAP32[$0 + 4 >> 2] | 0;
 }
 $43 = $44 >>> 0 > 10;
 $45 = $43 ? 10 : $44;
 L27 : do if (!$45) $55 = 0; else {
  $$03$i = $45;
  $l$04$i = $131;
  $r$05$i = 60984;
  while (1) {
   if ((HEAP8[$l$04$i >> 0] | 0) != (HEAP8[$r$05$i >> 0] | 0)) {
    $55 = 1;
    break L27;
   }
   $$03$i = $$03$i + -1 | 0;
   if (!$$03$i) {
    $55 = 0;
    break;
   } else {
    $l$04$i = $l$04$i + 1 | 0;
    $r$05$i = $r$05$i + 1 | 0;
   }
  }
 } while (0);
 if (!$35) _free(HEAP32[$0 + 8 >> 2] | 0);
 if ($55 | $44 >>> 0 < 10 | $43) {
  $92 = $r + 1 | 0;
  HEAP8[$$sroa$5 + 0 >> 0] = HEAP8[$92 + 0 >> 0] | 0;
  HEAP8[$$sroa$5 + 1 >> 0] = HEAP8[$92 + 1 >> 0] | 0;
  HEAP8[$$sroa$5 + 2 >> 0] = HEAP8[$92 + 2 >> 0] | 0;
  HEAP8[$$sroa$5 + 3 >> 0] = HEAP8[$92 + 3 >> 0] | 0;
  HEAP8[$$sroa$5 + 4 >> 0] = HEAP8[$92 + 4 >> 0] | 0;
  HEAP8[$$sroa$5 + 5 >> 0] = HEAP8[$92 + 5 >> 0] | 0;
  HEAP8[$$sroa$5 + 6 >> 0] = HEAP8[$92 + 6 >> 0] | 0;
  $94 = HEAP32[$r + 8 >> 2] | 0;
  HEAP32[$r + 0 >> 2] = 0;
  HEAP32[$r + 4 >> 2] = 0;
  HEAP32[$r + 8 >> 2] = 0;
  HEAP8[$2 >> 0] = $19;
  $95 = $2 + 1 | 0;
  HEAP8[$95 + 0 >> 0] = HEAP8[$$sroa$5 + 0 >> 0] | 0;
  HEAP8[$95 + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0;
  HEAP8[$95 + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0;
  HEAP8[$95 + 3 >> 0] = HEAP8[$$sroa$5 + 3 >> 0] | 0;
  HEAP8[$95 + 4 >> 0] = HEAP8[$$sroa$5 + 4 >> 0] | 0;
  HEAP8[$95 + 5 >> 0] = HEAP8[$$sroa$5 + 5 >> 0] | 0;
  HEAP8[$95 + 6 >> 0] = HEAP8[$$sroa$5 + 6 >> 0] | 0;
  HEAP32[$2 + 8 >> 2] = $94;
  HEAP8[$$sroa$5 + 0 >> 0] = 0;
  HEAP8[$$sroa$5 + 1 >> 0] = 0;
  HEAP8[$$sroa$5 + 2 >> 0] = 0;
  HEAP8[$$sroa$5 + 3 >> 0] = 0;
  HEAP8[$$sroa$5 + 4 >> 0] = 0;
  HEAP8[$$sroa$5 + 5 >> 0] = 0;
  HEAP8[$$sroa$5 + 6 >> 0] = 0;
  $97 = $2 + 12 | 0;
  HEAP32[$97 + 0 >> 2] = 0;
  HEAP32[$97 + 4 >> 2] = 0;
  HEAP32[$97 + 8 >> 2] = 0;
  $98 = $db + 4 | 0;
  $99 = HEAP32[$98 >> 2] | 0;
  $101 = HEAP32[$db + 8 >> 2] | 0;
  if ($99 >>> 0 < $101 >>> 0) {
   if (!$99) $106 = 0; else {
    HEAP32[$99 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
    HEAP32[$99 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$99 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAP32[$2 + 0 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = 0;
    $104 = $99 + 12 | 0;
    HEAP32[$104 + 0 >> 2] = HEAP32[$97 + 0 >> 2];
    HEAP32[$104 + 4 >> 2] = HEAP32[$97 + 4 >> 2];
    HEAP32[$104 + 8 >> 2] = HEAP32[$97 + 8 >> 2];
    HEAP32[$97 + 0 >> 2] = 0;
    HEAP32[$97 + 4 >> 2] = 0;
    HEAP32[$97 + 8 >> 2] = 0;
    $106 = HEAP32[$98 >> 2] | 0;
   }
   HEAP32[$98 >> 2] = $106 + 24;
  } else {
   $110 = HEAP32[$db >> 2] | 0;
   $112 = ($99 - $110 | 0) / 24 | 0;
   $113 = $112 + 1 | 0;
   if (($113 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   $117 = ($101 - $110 | 0) / 24 | 0;
   if ($117 >>> 0 < 1073741823) {
    $119 = $117 << 1;
    $$0$i$i$i10 = $119 >>> 0 < $113 >>> 0 ? $113 : $119;
   } else $$0$i$i$i10 = 2147483647;
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i7, $$0$i$i$i10, $112, $db + 12 | 0);
   $122 = $__v$i$i7 + 8 | 0;
   $123 = HEAP32[$122 >> 2] | 0;
   if ($123) {
    HEAP32[$123 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
    HEAP32[$123 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$123 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAP32[$2 + 0 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = 0;
    $125 = $123 + 12 | 0;
    HEAP32[$125 + 0 >> 2] = HEAP32[$97 + 0 >> 2];
    HEAP32[$125 + 4 >> 2] = HEAP32[$97 + 4 >> 2];
    HEAP32[$125 + 8 >> 2] = HEAP32[$97 + 8 >> 2];
    HEAP32[$97 + 0 >> 2] = 0;
    HEAP32[$97 + 4 >> 2] = 0;
    HEAP32[$97 + 8 >> 2] = 0;
   }
   HEAP32[$122 >> 2] = $123 + 24;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i7);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i7);
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
  $$02 = $$lcssa + ($n$0$lcssa + 1) | 0;
  STACKTOP = sp;
  return $$02 | 0;
 }
 $58 = _malloc(32) | 0;
 HEAP32[$1 + 8 >> 2] = $58;
 HEAP32[$1 >> 2] = 33;
 HEAP32[$1 + 4 >> 2] = 21;
 dest = $58 + 0 | 0;
 src = 61e3;
 stop = dest + 21 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$58 + 21 >> 0] = 0;
 $62 = $1 + 12 | 0;
 HEAP32[$62 + 0 >> 2] = 0;
 HEAP32[$62 + 4 >> 2] = 0;
 HEAP32[$62 + 8 >> 2] = 0;
 $63 = $db + 4 | 0;
 $64 = HEAP32[$63 >> 2] | 0;
 $66 = HEAP32[$db + 8 >> 2] | 0;
 if ($64 >>> 0 < $66 >>> 0) {
  if (!$64) $71 = 0; else {
   HEAP32[$64 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$64 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$64 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 0 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   $69 = $64 + 12 | 0;
   HEAP32[$69 + 0 >> 2] = HEAP32[$62 + 0 >> 2];
   HEAP32[$69 + 4 >> 2] = HEAP32[$62 + 4 >> 2];
   HEAP32[$69 + 8 >> 2] = HEAP32[$62 + 8 >> 2];
   HEAP32[$62 + 0 >> 2] = 0;
   HEAP32[$62 + 4 >> 2] = 0;
   HEAP32[$62 + 8 >> 2] = 0;
   $71 = HEAP32[$63 >> 2] | 0;
  }
  HEAP32[$63 >> 2] = $71 + 24;
 } else {
  $75 = HEAP32[$db >> 2] | 0;
  $77 = ($64 - $75 | 0) / 24 | 0;
  $78 = $77 + 1 | 0;
  if (($78 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
  $82 = ($66 - $75 | 0) / 24 | 0;
  if ($82 >>> 0 < 1073741823) {
   $84 = $82 << 1;
   $$0$i$i$i = $84 >>> 0 < $78 >>> 0 ? $78 : $84;
  } else $$0$i$i$i = 2147483647;
  __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i7, $$0$i$i$i, $77, $db + 12 | 0);
  $87 = $__v$i$i7 + 8 | 0;
  $88 = HEAP32[$87 >> 2] | 0;
  if ($88) {
   HEAP32[$88 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$88 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$88 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 0 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   $90 = $88 + 12 | 0;
   HEAP32[$90 + 0 >> 2] = HEAP32[$62 + 0 >> 2];
   HEAP32[$90 + 4 >> 2] = HEAP32[$62 + 4 >> 2];
   HEAP32[$90 + 8 >> 2] = HEAP32[$62 + 8 >> 2];
   HEAP32[$62 + 0 >> 2] = 0;
   HEAP32[$62 + 4 >> 2] = 0;
   HEAP32[$62 + 8 >> 2] = 0;
  }
  HEAP32[$87 >> 2] = $88 + 24;
  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i7);
  __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i7);
 }
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
 $128 = $$lcssa + ($n$0$lcssa + 1) | 0;
 if (!($19 & 1)) {
  $$02 = $128;
  STACKTOP = sp;
  return $$02 | 0;
 }
 _free(HEAP32[$r + 8 >> 2] | 0);
 $$02 = $128;
 STACKTOP = sp;
 return $$02 | 0;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$034 = 0, $$045 = 0, $$pre = 0, $$pre$i3$i$i19 = 0, $110 = 0, $118 = 0, $120 = 0, $125 = 0, $137 = 0, $157 = 0, $158 = 0, $17 = 0, $23 = 0, $24 = 0, $27 = 0, $3 = 0, $39 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $7 = 0, $75 = 0, $76 = 0, $8 = 0, $82 = 0, $9 = 0, $90 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off050 = 0, $__consume$1$off0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$1 = 0, $__e$sroa$0$2 = 0, $__indx$0 = 0, $__indx$0$ph = 0, $__kc$0 = 0, $__ky$066 = 0, $__ky1$051 = 0, $__ky2$060 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$064 = 0, $__n_does_match$1 = 0, $__n_does_match$2$ph = 0, $__n_does_match$347 = 0, $__n_does_match$4 = 0, $__n_does_match$558 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$063 = 0, $__n_might_match$1 = 0, $__n_might_match$2$ph = 0, $__n_might_match$346 = 0, $__n_might_match$4 = 0, $__st$065 = 0, $__st$148 = 0, $__st$259 = 0, $__st$344 = 0, $__statbuf = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__statbuf = sp;
 $3 = ($__ke - $__kb | 0) / 12 | 0;
 if ($3 >>> 0 > 100) {
  $5 = _malloc($3) | 0;
  if (!$5) {
   $7 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$7 >> 2] = 61776;
   ___cxa_throw($7 | 0, 61824, 94);
  } else {
   $157 = $5;
   $__status$0 = $5;
  }
 } else {
  $157 = 0;
  $__status$0 = $__statbuf;
 }
 $8 = ($__kb | 0) == ($__ke | 0);
 if ($8) {
  $__n_does_match$0$lcssa = 0;
  $__n_might_match$0$lcssa = $3;
 } else {
  $__ky$066 = $__kb;
  $__n_does_match$064 = 0;
  $__n_might_match$063 = $3;
  $__st$065 = $__status$0;
  while (1) {
   $9 = HEAP8[$__ky$066 >> 0] | 0;
   if (!($9 & 1)) $17 = ($9 & 255) >>> 1; else $17 = HEAP32[$__ky$066 + 4 >> 2] | 0;
   if (!$17) {
    HEAP8[$__st$065 >> 0] = 2;
    $__n_does_match$1 = $__n_does_match$064 + 1 | 0;
    $__n_might_match$1 = $__n_might_match$063 + -1 | 0;
   } else {
    HEAP8[$__st$065 >> 0] = 1;
    $__n_does_match$1 = $__n_does_match$064;
    $__n_might_match$1 = $__n_might_match$063;
   }
   $__ky$066 = $__ky$066 + 12 | 0;
   if (($__ky$066 | 0) == ($__ke | 0)) {
    $__n_does_match$0$lcssa = $__n_does_match$1;
    $__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__n_does_match$064 = $__n_does_match$1;
    $__n_might_match$063 = $__n_might_match$1;
    $__st$065 = $__st$065 + 1 | 0;
   }
  }
 }
 $__e$sroa$0$0 = $__e$0;
 $__indx$0$ph = 0;
 $__n_does_match$2$ph = $__n_does_match$0$lcssa;
 $__n_might_match$2$ph = $__n_might_match$0$lcssa;
 L17 : while (1) {
  $23 = ($__n_might_match$2$ph | 0) != 0;
  $__e$sroa$0$1 = $__e$sroa$0$0;
  $__indx$0 = $__indx$0$ph;
  while (1) {
   $24 = HEAP32[$__b >> 2] | 0;
   do if (!$24) $49 = 1; else {
    $27 = HEAP32[$24 + 12 >> 2] | 0;
    if (($27 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 127]($24) | 0; else $$0$i$i$i$i = HEAP32[$27 >> 2] | 0;
    if (($$0$i$i$i$i | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $49 = 1;
     break;
    } else {
     $49 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } while (0);
   if (!$__e$sroa$0$1) {
    $$pre$i3$i$i19 = 0;
    $50 = 1;
    $__e$sroa$0$2 = 0;
   } else {
    $39 = HEAP32[$__e$sroa$0$1 + 12 >> 2] | 0;
    if (($39 | 0) == (HEAP32[$__e$sroa$0$1 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$1 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$1) | 0; else $$0$i$i1$i$i = HEAP32[$39 >> 2] | 0;
    $48 = ($$0$i$i1$i$i | 0) == -1;
    $$pre$i3$i$i19 = $48 ? 0 : $__e$sroa$0$1;
    $50 = $48 ? 1 : 0;
    $__e$sroa$0$2 = $48 ? 0 : $__e$sroa$0$1;
   }
   $51 = HEAP32[$__b >> 2] | 0;
   if (!(($49 ^ $50) & $23)) break L17;
   $53 = HEAP32[$51 + 12 >> 2] | 0;
   if (($53 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 127]($51) | 0; else $$0$i$i = HEAP32[$53 >> 2] | 0;
   if ($__case_sensitive) $__c$0 = $$0$i$i; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, $$0$i$i) | 0;
   $$pre = $__indx$0 + 1 | 0;
   if ($8) {
    $__e$sroa$0$1 = $__e$sroa$0$2;
    $__indx$0 = $$pre;
   } else {
    $__consume$0$off050 = 0;
    $__ky1$051 = $__kb;
    $__n_does_match$347 = $__n_does_match$2$ph;
    $__n_might_match$346 = $__n_might_match$2$ph;
    $__st$148 = $__status$0;
    break;
   }
  }
  while (1) {
   do if ((HEAP8[$__st$148 >> 0] | 0) == 1) {
    if (!(HEAP8[$__ky1$051 >> 0] & 1)) $75 = $__ky1$051 + 4 | 0; else $75 = HEAP32[$__ky1$051 + 8 >> 2] | 0;
    $76 = HEAP32[$75 + ($__indx$0 << 2) >> 2] | 0;
    if ($__case_sensitive) $__kc$0 = $76; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, $76) | 0;
    if (($__c$0 | 0) != ($__kc$0 | 0)) {
     HEAP8[$__st$148 >> 0] = 0;
     $__consume$1$off0 = $__consume$0$off050;
     $__n_does_match$4 = $__n_does_match$347;
     $__n_might_match$4 = $__n_might_match$346 + -1 | 0;
     break;
    }
    $82 = HEAP8[$__ky1$051 >> 0] | 0;
    if (!($82 & 1)) $90 = ($82 & 255) >>> 1; else $90 = HEAP32[$__ky1$051 + 4 >> 2] | 0;
    if (($90 | 0) == ($$pre | 0)) {
     HEAP8[$__st$148 >> 0] = 2;
     $__consume$1$off0 = 1;
     $__n_does_match$4 = $__n_does_match$347 + 1 | 0;
     $__n_might_match$4 = $__n_might_match$346 + -1 | 0;
    } else {
     $__consume$1$off0 = 1;
     $__n_does_match$4 = $__n_does_match$347;
     $__n_might_match$4 = $__n_might_match$346;
    }
   } else {
    $__consume$1$off0 = $__consume$0$off050;
    $__n_does_match$4 = $__n_does_match$347;
    $__n_might_match$4 = $__n_might_match$346;
   } while (0);
   $__ky1$051 = $__ky1$051 + 12 | 0;
   if (($__ky1$051 | 0) == ($__ke | 0)) break; else {
    $__consume$0$off050 = $__consume$1$off0;
    $__n_does_match$347 = $__n_does_match$4;
    $__n_might_match$346 = $__n_might_match$4;
    $__st$148 = $__st$148 + 1 | 0;
   }
  }
  if (!$__consume$1$off0) {
   $__e$sroa$0$0 = $__e$sroa$0$2;
   $__indx$0$ph = $$pre;
   $__n_does_match$2$ph = $__n_does_match$4;
   $__n_might_match$2$ph = $__n_might_match$4;
   continue;
  }
  $97 = HEAP32[$__b >> 2] | 0;
  $98 = $97 + 12 | 0;
  $99 = HEAP32[$98 >> 2] | 0;
  if (($99 | 0) == (HEAP32[$97 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$97 >> 2] | 0) + 40 >> 2] & 127]($97) | 0; else HEAP32[$98 >> 2] = $99 + 4;
  if (($__n_does_match$4 + $__n_might_match$4 | 0) >>> 0 < 2) {
   $__e$sroa$0$0 = $__e$sroa$0$2;
   $__indx$0$ph = $$pre;
   $__n_does_match$2$ph = $__n_does_match$4;
   $__n_might_match$2$ph = $__n_might_match$4;
   continue;
  } else {
   $__ky2$060 = $__kb;
   $__n_does_match$558 = $__n_does_match$4;
   $__st$259 = $__status$0;
  }
  while (1) {
   if ((HEAP8[$__st$259 >> 0] | 0) == 2) {
    $110 = HEAP8[$__ky2$060 >> 0] | 0;
    if (!($110 & 1)) $118 = ($110 & 255) >>> 1; else $118 = HEAP32[$__ky2$060 + 4 >> 2] | 0;
    if (($118 | 0) == ($$pre | 0)) $__n_does_match$6 = $__n_does_match$558; else {
     HEAP8[$__st$259 >> 0] = 0;
     $__n_does_match$6 = $__n_does_match$558 + -1 | 0;
    }
   } else $__n_does_match$6 = $__n_does_match$558;
   $120 = $__ky2$060 + 12 | 0;
   if (($120 | 0) == ($__ke | 0)) {
    $__e$sroa$0$0 = $__e$sroa$0$2;
    $__indx$0$ph = $$pre;
    $__n_does_match$2$ph = $__n_does_match$6;
    $__n_might_match$2$ph = $__n_might_match$4;
    continue L17;
   } else {
    $__ky2$060 = $120;
    $__n_does_match$558 = $__n_does_match$6;
    $__st$259 = $__st$259 + 1 | 0;
   }
  }
 }
 do if (!$51) $158 = 1; else {
  $125 = HEAP32[$51 + 12 >> 2] | 0;
  if (($125 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) $$0$i$i$i$i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 127]($51) | 0; else $$0$i$i$i$i11 = HEAP32[$125 >> 2] | 0;
  if (($$0$i$i$i$i11 | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $158 = 1;
   break;
  } else {
   $158 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 if (!$$pre$i3$i$i19) label = 71; else {
  $137 = HEAP32[$$pre$i3$i$i19 + 12 >> 2] | 0;
  if (($137 | 0) == (HEAP32[$$pre$i3$i$i19 + 16 >> 2] | 0)) $$0$i$i1$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i19 >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i19) | 0; else $$0$i$i1$i$i17 = HEAP32[$137 >> 2] | 0;
  if (($$0$i$i1$i$i17 | 0) == -1) label = 71; else if (!$158) label = 73;
 }
 if ((label | 0) == 71) if ($158) label = 73;
 if ((label | 0) == 73) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 L105 : do if ($8) label = 77; else {
  $$045 = $__kb;
  $__st$344 = $__status$0;
  while (1) {
   if ((HEAP8[$__st$344 >> 0] | 0) == 2) {
    $$034 = $$045;
    break L105;
   }
   $$045 = $$045 + 12 | 0;
   if (($$045 | 0) == ($__ke | 0)) {
    label = 77;
    break;
   } else $__st$344 = $__st$344 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 77) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$034 = $__ke;
 }
 if (!$157) {
  STACKTOP = sp;
  return $$034 | 0;
 }
 _free($157);
 STACKTOP = sp;
 return $$034 | 0;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0$i$i = 0, $$030 = 0, $$041 = 0, $$pre = 0, $$pre$i2$i$i16 = 0, $100 = 0, $111 = 0, $119 = 0, $121 = 0, $135 = 0, $136 = 0, $157 = 0, $17 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $62 = 0, $7 = 0, $76 = 0, $77 = 0, $8 = 0, $83 = 0, $9 = 0, $91 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off046 = 0, $__consume$1$off0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$1 = 0, $__e$sroa$0$2 = 0, $__indx$0 = 0, $__indx$0$ph = 0, $__kc$0 = 0, $__ky$062 = 0, $__ky1$047 = 0, $__ky2$056 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$060 = 0, $__n_does_match$1 = 0, $__n_does_match$2$ph = 0, $__n_does_match$343 = 0, $__n_does_match$4 = 0, $__n_does_match$554 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$059 = 0, $__n_might_match$1 = 0, $__n_might_match$2$ph = 0, $__n_might_match$342 = 0, $__n_might_match$4 = 0, $__st$061 = 0, $__st$144 = 0, $__st$255 = 0, $__st$340 = 0, $__statbuf = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__statbuf = sp;
 $3 = ($__ke - $__kb | 0) / 12 | 0;
 if ($3 >>> 0 > 100) {
  $5 = _malloc($3) | 0;
  if (!$5) {
   $7 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$7 >> 2] = 61776;
   ___cxa_throw($7 | 0, 61824, 94);
  } else {
   $157 = $5;
   $__status$0 = $5;
  }
 } else {
  $157 = 0;
  $__status$0 = $__statbuf;
 }
 $8 = ($__kb | 0) == ($__ke | 0);
 if ($8) {
  $__n_does_match$0$lcssa = 0;
  $__n_might_match$0$lcssa = $3;
 } else {
  $__ky$062 = $__kb;
  $__n_does_match$060 = 0;
  $__n_might_match$059 = $3;
  $__st$061 = $__status$0;
  while (1) {
   $9 = HEAP8[$__ky$062 >> 0] | 0;
   if (!($9 & 1)) $17 = ($9 & 255) >>> 1; else $17 = HEAP32[$__ky$062 + 4 >> 2] | 0;
   if (!$17) {
    HEAP8[$__st$061 >> 0] = 2;
    $__n_does_match$1 = $__n_does_match$060 + 1 | 0;
    $__n_might_match$1 = $__n_might_match$059 + -1 | 0;
   } else {
    HEAP8[$__st$061 >> 0] = 1;
    $__n_does_match$1 = $__n_does_match$060;
    $__n_might_match$1 = $__n_might_match$059;
   }
   $__ky$062 = $__ky$062 + 12 | 0;
   if (($__ky$062 | 0) == ($__ke | 0)) {
    $__n_does_match$0$lcssa = $__n_does_match$1;
    $__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__n_does_match$060 = $__n_does_match$1;
    $__n_might_match$059 = $__n_might_match$1;
    $__st$061 = $__st$061 + 1 | 0;
   }
  }
 }
 $__e$sroa$0$0 = $__e$0;
 $__indx$0$ph = 0;
 $__n_does_match$2$ph = $__n_does_match$0$lcssa;
 $__n_might_match$2$ph = $__n_might_match$0$lcssa;
 L17 : while (1) {
  $23 = ($__n_might_match$2$ph | 0) != 0;
  $__e$sroa$0$1 = $__e$sroa$0$0;
  $__indx$0 = $__indx$0$ph;
  while (1) {
   $24 = HEAP32[$__b >> 2] | 0;
   do if (!$24) $37 = 0; else if ((HEAP32[$24 + 12 >> 2] | 0) == (HEAP32[$24 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 127]($24) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $37 = 0;
    break;
   } else {
    $37 = HEAP32[$__b >> 2] | 0;
    break;
   } else $37 = $24; while (0);
   $36 = ($37 | 0) == 0;
   if (!$__e$sroa$0$1) {
    $$pre$i2$i$i16 = 0;
    $__e$sroa$0$2 = 0;
   } else if ((HEAP32[$__e$sroa$0$1 + 12 >> 2] | 0) == (HEAP32[$__e$sroa$0$1 + 16 >> 2] | 0)) {
    $48 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$1 >> 2] | 0) + 36 >> 2] & 127]($__e$sroa$0$1) | 0) == -1;
    $$pre$i2$i$i16 = $48 ? 0 : $__e$sroa$0$1;
    $__e$sroa$0$2 = $48 ? 0 : $__e$sroa$0$1;
   } else {
    $$pre$i2$i$i16 = $__e$sroa$0$1;
    $__e$sroa$0$2 = $__e$sroa$0$1;
   }
   $49 = ($$pre$i2$i$i16 | 0) == 0;
   $50 = HEAP32[$__b >> 2] | 0;
   if (!(($36 ^ $49) & $23)) break L17;
   $52 = HEAP32[$50 + 12 >> 2] | 0;
   if (($52 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] & 127]($50) | 0; else $$0$i$i = HEAPU8[$52 >> 0] | 0;
   $62 = $$0$i$i & 255;
   if ($__case_sensitive) $__c$0 = $62; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, $62) | 0;
   $$pre = $__indx$0 + 1 | 0;
   if ($8) {
    $__e$sroa$0$1 = $__e$sroa$0$2;
    $__indx$0 = $$pre;
   } else {
    $__consume$0$off046 = 0;
    $__ky1$047 = $__kb;
    $__n_does_match$343 = $__n_does_match$2$ph;
    $__n_might_match$342 = $__n_might_match$2$ph;
    $__st$144 = $__status$0;
    break;
   }
  }
  while (1) {
   do if ((HEAP8[$__st$144 >> 0] | 0) == 1) {
    if (!(HEAP8[$__ky1$047 >> 0] & 1)) $76 = $__ky1$047 + 1 | 0; else $76 = HEAP32[$__ky1$047 + 8 >> 2] | 0;
    $77 = HEAP8[$76 + $__indx$0 >> 0] | 0;
    if ($__case_sensitive) $__kc$0 = $77; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, $77) | 0;
    if ($__c$0 << 24 >> 24 != $__kc$0 << 24 >> 24) {
     HEAP8[$__st$144 >> 0] = 0;
     $__consume$1$off0 = $__consume$0$off046;
     $__n_does_match$4 = $__n_does_match$343;
     $__n_might_match$4 = $__n_might_match$342 + -1 | 0;
     break;
    }
    $83 = HEAP8[$__ky1$047 >> 0] | 0;
    if (!($83 & 1)) $91 = ($83 & 255) >>> 1; else $91 = HEAP32[$__ky1$047 + 4 >> 2] | 0;
    if (($91 | 0) == ($$pre | 0)) {
     HEAP8[$__st$144 >> 0] = 2;
     $__consume$1$off0 = 1;
     $__n_does_match$4 = $__n_does_match$343 + 1 | 0;
     $__n_might_match$4 = $__n_might_match$342 + -1 | 0;
    } else {
     $__consume$1$off0 = 1;
     $__n_does_match$4 = $__n_does_match$343;
     $__n_might_match$4 = $__n_might_match$342;
    }
   } else {
    $__consume$1$off0 = $__consume$0$off046;
    $__n_does_match$4 = $__n_does_match$343;
    $__n_might_match$4 = $__n_might_match$342;
   } while (0);
   $__ky1$047 = $__ky1$047 + 12 | 0;
   if (($__ky1$047 | 0) == ($__ke | 0)) break; else {
    $__consume$0$off046 = $__consume$1$off0;
    $__n_does_match$343 = $__n_does_match$4;
    $__n_might_match$342 = $__n_might_match$4;
    $__st$144 = $__st$144 + 1 | 0;
   }
  }
  if (!$__consume$1$off0) {
   $__e$sroa$0$0 = $__e$sroa$0$2;
   $__indx$0$ph = $$pre;
   $__n_does_match$2$ph = $__n_does_match$4;
   $__n_might_match$2$ph = $__n_might_match$4;
   continue;
  }
  $98 = HEAP32[$__b >> 2] | 0;
  $99 = $98 + 12 | 0;
  $100 = HEAP32[$99 >> 2] | 0;
  if (($100 | 0) == (HEAP32[$98 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$98 >> 2] | 0) + 40 >> 2] & 127]($98) | 0; else HEAP32[$99 >> 2] = $100 + 1;
  if (($__n_does_match$4 + $__n_might_match$4 | 0) >>> 0 < 2) {
   $__e$sroa$0$0 = $__e$sroa$0$2;
   $__indx$0$ph = $$pre;
   $__n_does_match$2$ph = $__n_does_match$4;
   $__n_might_match$2$ph = $__n_might_match$4;
   continue;
  } else {
   $__ky2$056 = $__kb;
   $__n_does_match$554 = $__n_does_match$4;
   $__st$255 = $__status$0;
  }
  while (1) {
   if ((HEAP8[$__st$255 >> 0] | 0) == 2) {
    $111 = HEAP8[$__ky2$056 >> 0] | 0;
    if (!($111 & 1)) $119 = ($111 & 255) >>> 1; else $119 = HEAP32[$__ky2$056 + 4 >> 2] | 0;
    if (($119 | 0) == ($$pre | 0)) $__n_does_match$6 = $__n_does_match$554; else {
     HEAP8[$__st$255 >> 0] = 0;
     $__n_does_match$6 = $__n_does_match$554 + -1 | 0;
    }
   } else $__n_does_match$6 = $__n_does_match$554;
   $121 = $__ky2$056 + 12 | 0;
   if (($121 | 0) == ($__ke | 0)) {
    $__e$sroa$0$0 = $__e$sroa$0$2;
    $__indx$0$ph = $$pre;
    $__n_does_match$2$ph = $__n_does_match$6;
    $__n_might_match$2$ph = $__n_might_match$4;
    continue L17;
   } else {
    $__ky2$056 = $121;
    $__n_does_match$554 = $__n_does_match$6;
    $__st$255 = $__st$255 + 1 | 0;
   }
  }
 }
 do if (!$50) $136 = 0; else if ((HEAP32[$50 + 12 >> 2] | 0) == (HEAP32[$50 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] & 127]($50) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $136 = 0;
  break;
 } else {
  $136 = HEAP32[$__b >> 2] | 0;
  break;
 } else $136 = $50; while (0);
 $135 = ($136 | 0) == 0;
 do if ($49) label = 64; else {
  if ((HEAP32[$$pre$i2$i$i16 + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i16 + 16 >> 2] | 0)) if ($135) break; else {
   label = 66;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i16 >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i16) | 0) == -1) label = 64; else if (!$135) label = 66;
 } while (0);
 if ((label | 0) == 64) if ($135) label = 66;
 if ((label | 0) == 66) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 L95 : do if ($8) label = 70; else {
  $$041 = $__kb;
  $__st$340 = $__status$0;
  while (1) {
   if ((HEAP8[$__st$340 >> 0] | 0) == 2) {
    $$030 = $$041;
    break L95;
   }
   $$041 = $$041 + 12 | 0;
   if (($$041 | 0) == ($__ke | 0)) {
    label = 70;
    break;
   } else $__st$340 = $__st$340 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 70) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$030 = $__ke;
 }
 if (!$157) {
  STACKTOP = sp;
  return $$030 | 0;
 }
 _free($157);
 STACKTOP = sp;
 return $$030 | 0;
}

function __ZN9Annotator21annotateLocalVariableEP10LexContextRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP5TokenP9TokenInfo($this, $ctx$0$9$val, $data, $info) {
 $this = $this | 0;
 $ctx$0$9$val = $ctx$0$9$val | 0;
 $data = $data | 0;
 $info = $info | 0;
 var $$01$be$i$i$i = 0, $$01$be$i$i$i20 = 0, $$01$be$i$i$i6 = 0, $$014$i$i$i = 0, $$014$i$i$i18 = 0, $$014$i$i$i4 = 0, $$lcssa$i = 0, $$lcssa$i14 = 0, $$lcssa$i30 = 0, $$size$i = 0, $$size$i10 = 0, $$size$i26 = 0, $0 = 0, $1 = 0, $100 = 0, $102 = 0, $104 = 0, $107 = 0, $109 = 0, $114 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $150 = 0, $152 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $166 = 0, $168 = 0, $17 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $32 = 0, $34 = 0, $41 = 0, $43 = 0, $45 = 0, $48 = 0, $5 = 0, $50 = 0, $55 = 0, $7 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $91 = 0, $93 = 0, $__p$0$i = 0, $__p$0$i24 = 0, $__p$0$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 24 | 0;
 $3 = sp;
 if (($ctx$0$9$val | 0) != 62) {
  STACKTOP = sp;
  return;
 }
 $5 = HEAP8[$data >> 0] | 0;
 $7 = ($5 & 1) == 0;
 if ($7) {
  $16 = ($5 & 255) >>> 1;
  $18 = $data + 1 | 0;
 } else {
  $16 = HEAP32[$data + 4 >> 2] | 0;
  $18 = HEAP32[$data + 8 >> 2] | 0;
 }
 L8 : do if ($16) {
  $17 = $18 + $16 | 0;
  $19 = $18;
  if (($16 | 0) >= 1) {
   $$014$i$i$i = $18;
   while (1) {
    if ((HEAP8[$$014$i$i$i >> 0] | 0) == 36) break;
    $$01$be$i$i$i = $$014$i$i$i + 1 | 0;
    if (($$01$be$i$i$i | 0) == ($17 | 0)) break L8; else $$014$i$i$i = $$01$be$i$i$i;
   }
   if (($$014$i$i$i | 0) != ($17 | 0)) if (($$014$i$i$i - $19 | 0) != -1) {
    _memmove($info | 0, 44300, 20) | 0;
    if (!(HEAP8[$data >> 0] & 1)) {
     HEAP32[$1 + 0 >> 2] = HEAP32[$data + 0 >> 2];
     HEAP32[$1 + 4 >> 2] = HEAP32[$data + 4 >> 2];
     HEAP32[$1 + 8 >> 2] = HEAP32[$data + 8 >> 2];
    } else {
     $32 = HEAP32[$data + 8 >> 2] | 0;
     $34 = HEAP32[$data + 4 >> 2] | 0;
     if ($34 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
     if ($34 >>> 0 < 11) {
      HEAP8[$1 >> 0] = $34 << 1;
      $__p$0$i = $1 + 1 | 0;
     } else {
      $41 = $34 + 16 & -16;
      $$size$i = ($41 | 0) == 0 ? 1 : $41;
      $43 = _malloc($$size$i) | 0;
      L24 : do if (!$43) {
       while (1) {
        $45 = HEAP32[15470] | 0;
        HEAP32[15470] = $45 + 0;
        if (!$45) break;
        FUNCTION_TABLE_v[$45 & 3]();
        $48 = _malloc($$size$i) | 0;
        if ($48) {
         $$lcssa$i = $48;
         break L24;
        }
       }
       $50 = ___cxa_allocate_exception(4) | 0;
       HEAP32[$50 >> 2] = 61776;
       ___cxa_throw($50 | 0, 61824, 94);
      } else $$lcssa$i = $43; while (0);
      HEAP32[$1 + 8 >> 2] = $$lcssa$i;
      HEAP32[$1 >> 2] = $41 | 1;
      HEAP32[$1 + 4 >> 2] = $34;
      $__p$0$i = $$lcssa$i;
     }
     _memcpy($__p$0$i | 0, $32 | 0, $34 | 0) | 0;
     HEAP8[$__p$0$i + $34 >> 0] = 0;
    }
    $55 = $1 + 12 | 0;
    HEAP8[$55 >> 0] = 0;
    HEAP8[$55 + 1 >> 0] = 0;
    __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0, $this, $1);
    if (HEAP8[$55 >> 0] & 1) _free(HEAP32[$1 + 20 >> 2] | 0);
    if (!(HEAP8[$1 >> 0] & 1)) {
     STACKTOP = sp;
     return;
    }
    _free(HEAP32[$1 + 8 >> 2] | 0);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ($7) {
  $75 = ($5 & 255) >>> 1;
  $77 = $data + 1 | 0;
 } else {
  $75 = HEAP32[$data + 4 >> 2] | 0;
  $77 = HEAP32[$data + 8 >> 2] | 0;
 }
 L45 : do if ($75) {
  $76 = $77 + $75 | 0;
  $78 = $77;
  if (($75 | 0) >= 1) {
   $$014$i$i$i4 = $77;
   while (1) {
    if ((HEAP8[$$014$i$i$i4 >> 0] | 0) == 64) break;
    $$01$be$i$i$i6 = $$014$i$i$i4 + 1 | 0;
    if (($$01$be$i$i$i6 | 0) == ($76 | 0)) break L45; else $$014$i$i$i4 = $$01$be$i$i$i6;
   }
   if (($$014$i$i$i4 | 0) != ($76 | 0)) if (($$014$i$i$i4 - $78 | 0) != -1) {
    _memmove($info | 0, 44320, 20) | 0;
    if (!(HEAP8[$data >> 0] & 1)) {
     HEAP32[$2 + 0 >> 2] = HEAP32[$data + 0 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$data + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$data + 8 >> 2];
    } else {
     $91 = HEAP32[$data + 8 >> 2] | 0;
     $93 = HEAP32[$data + 4 >> 2] | 0;
     if ($93 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
     if ($93 >>> 0 < 11) {
      HEAP8[$2 >> 0] = $93 << 1;
      $__p$0$i8 = $2 + 1 | 0;
     } else {
      $100 = $93 + 16 & -16;
      $$size$i10 = ($100 | 0) == 0 ? 1 : $100;
      $102 = _malloc($$size$i10) | 0;
      L60 : do if (!$102) {
       while (1) {
        $104 = HEAP32[15470] | 0;
        HEAP32[15470] = $104 + 0;
        if (!$104) break;
        FUNCTION_TABLE_v[$104 & 3]();
        $107 = _malloc($$size$i10) | 0;
        if ($107) {
         $$lcssa$i14 = $107;
         break L60;
        }
       }
       $109 = ___cxa_allocate_exception(4) | 0;
       HEAP32[$109 >> 2] = 61776;
       ___cxa_throw($109 | 0, 61824, 94);
      } else $$lcssa$i14 = $102; while (0);
      HEAP32[$2 + 8 >> 2] = $$lcssa$i14;
      HEAP32[$2 >> 2] = $100 | 1;
      HEAP32[$2 + 4 >> 2] = $93;
      $__p$0$i8 = $$lcssa$i14;
     }
     _memcpy($__p$0$i8 | 0, $91 | 0, $93 | 0) | 0;
     HEAP8[$__p$0$i8 + $93 >> 0] = 0;
    }
    $114 = $2 + 12 | 0;
    HEAP8[$114 >> 0] = 0;
    HEAP8[$114 + 1 >> 0] = 0;
    __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0, $this, $2);
    if (HEAP8[$114 >> 0] & 1) _free(HEAP32[$2 + 20 >> 2] | 0);
    if (!(HEAP8[$2 >> 0] & 1)) {
     STACKTOP = sp;
     return;
    }
    _free(HEAP32[$2 + 8 >> 2] | 0);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ($7) {
  $134 = ($5 & 255) >>> 1;
  $136 = $data + 1 | 0;
 } else {
  $134 = HEAP32[$data + 4 >> 2] | 0;
  $136 = HEAP32[$data + 8 >> 2] | 0;
 }
 if (!$134) {
  STACKTOP = sp;
  return;
 }
 $135 = $136 + $134 | 0;
 $137 = $136;
 if (($134 | 0) < 1) {
  STACKTOP = sp;
  return;
 } else $$014$i$i$i18 = $136;
 while (1) {
  if ((HEAP8[$$014$i$i$i18 >> 0] | 0) == 37) break;
  $$01$be$i$i$i20 = $$014$i$i$i18 + 1 | 0;
  if (($$01$be$i$i$i20 | 0) == ($135 | 0)) {
   label = 77;
   break;
  } else $$014$i$i$i18 = $$01$be$i$i$i20;
 }
 if ((label | 0) == 77) {
  STACKTOP = sp;
  return;
 }
 if (($$014$i$i$i18 | 0) == ($135 | 0)) {
  STACKTOP = sp;
  return;
 }
 if (($$014$i$i$i18 - $137 | 0) == -1) {
  STACKTOP = sp;
  return;
 }
 _memmove($info | 0, 44340, 20) | 0;
 if (!(HEAP8[$data >> 0] & 1)) {
  HEAP32[$3 + 0 >> 2] = HEAP32[$data + 0 >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$data + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$data + 8 >> 2];
 } else {
  $150 = HEAP32[$data + 8 >> 2] | 0;
  $152 = HEAP32[$data + 4 >> 2] | 0;
  if ($152 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($152 >>> 0 < 11) {
   HEAP8[$3 >> 0] = $152 << 1;
   $__p$0$i24 = $3 + 1 | 0;
  } else {
   $159 = $152 + 16 & -16;
   $$size$i26 = ($159 | 0) == 0 ? 1 : $159;
   $161 = _malloc($$size$i26) | 0;
   L108 : do if (!$161) {
    while (1) {
     $163 = HEAP32[15470] | 0;
     HEAP32[15470] = $163 + 0;
     if (!$163) break;
     FUNCTION_TABLE_v[$163 & 3]();
     $166 = _malloc($$size$i26) | 0;
     if ($166) {
      $$lcssa$i30 = $166;
      break L108;
     }
    }
    $168 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$168 >> 2] = 61776;
    ___cxa_throw($168 | 0, 61824, 94);
   } else $$lcssa$i30 = $161; while (0);
   HEAP32[$3 + 8 >> 2] = $$lcssa$i30;
   HEAP32[$3 >> 2] = $159 | 1;
   HEAP32[$3 + 4 >> 2] = $152;
   $__p$0$i24 = $$lcssa$i30;
  }
  _memcpy($__p$0$i24 | 0, $150 | 0, $152 | 0) | 0;
  HEAP8[$__p$0$i24 + $152 >> 0] = 0;
 }
 $173 = $3 + 12 | 0;
 HEAP8[$173 >> 0] = 0;
 HEAP8[$173 + 1 >> 0] = 0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0, $this, $3);
 if (HEAP8[$173 >> 0] & 1) _free(HEAP32[$3 + 20 >> 2] | 0);
 if (!(HEAP8[$3 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$3 + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN9Annotator22annotateGlobalVariableEP10LexContextRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP5TokenP9TokenInfo($this, $data, $info) {
 $this = $this | 0;
 $data = $data | 0;
 $info = $info | 0;
 var $$01$be$i$i$i = 0, $$01$be$i$i$i20 = 0, $$01$be$i$i$i6 = 0, $$014$i$i$i = 0, $$014$i$i$i18 = 0, $$014$i$i$i4 = 0, $$lcssa$i = 0, $$lcssa$i14 = 0, $$lcssa$i30 = 0, $$size$i = 0, $$size$i10 = 0, $$size$i26 = 0, $0 = 0, $1 = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $113 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $149 = 0, $15 = 0, $151 = 0, $158 = 0, $16 = 0, $160 = 0, $162 = 0, $165 = 0, $167 = 0, $17 = 0, $172 = 0, $18 = 0, $2 = 0, $3 = 0, $31 = 0, $33 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $54 = 0, $6 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $90 = 0, $92 = 0, $99 = 0, $__p$0$i = 0, $__p$0$i24 = 0, $__p$0$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 24 | 0;
 $3 = sp;
 $4 = HEAP8[$data >> 0] | 0;
 $6 = ($4 & 1) == 0;
 if ($6) {
  $15 = ($4 & 255) >>> 1;
  $17 = $data + 1 | 0;
 } else {
  $15 = HEAP32[$data + 4 >> 2] | 0;
  $17 = HEAP32[$data + 8 >> 2] | 0;
 }
 L5 : do if ($15) {
  $16 = $17 + $15 | 0;
  $18 = $17;
  if (($15 | 0) >= 1) {
   $$014$i$i$i = $17;
   while (1) {
    if ((HEAP8[$$014$i$i$i >> 0] | 0) == 36) break;
    $$01$be$i$i$i = $$014$i$i$i + 1 | 0;
    if (($$01$be$i$i$i | 0) == ($16 | 0)) break L5; else $$014$i$i$i = $$01$be$i$i$i;
   }
   if (($$014$i$i$i | 0) != ($16 | 0)) if (($$014$i$i$i - $18 | 0) != -1) {
    _memmove($info | 0, 44360, 20) | 0;
    if (!(HEAP8[$data >> 0] & 1)) {
     HEAP32[$1 + 0 >> 2] = HEAP32[$data + 0 >> 2];
     HEAP32[$1 + 4 >> 2] = HEAP32[$data + 4 >> 2];
     HEAP32[$1 + 8 >> 2] = HEAP32[$data + 8 >> 2];
    } else {
     $31 = HEAP32[$data + 8 >> 2] | 0;
     $33 = HEAP32[$data + 4 >> 2] | 0;
     if ($33 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
     if ($33 >>> 0 < 11) {
      HEAP8[$1 >> 0] = $33 << 1;
      $__p$0$i = $1 + 1 | 0;
     } else {
      $40 = $33 + 16 & -16;
      $$size$i = ($40 | 0) == 0 ? 1 : $40;
      $42 = _malloc($$size$i) | 0;
      L21 : do if (!$42) {
       while (1) {
        $44 = HEAP32[15470] | 0;
        HEAP32[15470] = $44 + 0;
        if (!$44) break;
        FUNCTION_TABLE_v[$44 & 3]();
        $47 = _malloc($$size$i) | 0;
        if ($47) {
         $$lcssa$i = $47;
         break L21;
        }
       }
       $49 = ___cxa_allocate_exception(4) | 0;
       HEAP32[$49 >> 2] = 61776;
       ___cxa_throw($49 | 0, 61824, 94);
      } else $$lcssa$i = $42; while (0);
      HEAP32[$1 + 8 >> 2] = $$lcssa$i;
      HEAP32[$1 >> 2] = $40 | 1;
      HEAP32[$1 + 4 >> 2] = $33;
      $__p$0$i = $$lcssa$i;
     }
     _memcpy($__p$0$i | 0, $31 | 0, $33 | 0) | 0;
     HEAP8[$__p$0$i + $33 >> 0] = 0;
    }
    $54 = $1 + 12 | 0;
    HEAP8[$54 >> 0] = 0;
    HEAP8[$54 + 1 >> 0] = 0;
    __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0, $this, $1);
    if (HEAP8[$54 >> 0] & 1) _free(HEAP32[$1 + 20 >> 2] | 0);
    if (!(HEAP8[$1 >> 0] & 1)) {
     STACKTOP = sp;
     return;
    }
    _free(HEAP32[$1 + 8 >> 2] | 0);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ($6) {
  $74 = ($4 & 255) >>> 1;
  $76 = $data + 1 | 0;
 } else {
  $74 = HEAP32[$data + 4 >> 2] | 0;
  $76 = HEAP32[$data + 8 >> 2] | 0;
 }
 L42 : do if ($74) {
  $75 = $76 + $74 | 0;
  $77 = $76;
  if (($74 | 0) >= 1) {
   $$014$i$i$i4 = $76;
   while (1) {
    if ((HEAP8[$$014$i$i$i4 >> 0] | 0) == 64) break;
    $$01$be$i$i$i6 = $$014$i$i$i4 + 1 | 0;
    if (($$01$be$i$i$i6 | 0) == ($75 | 0)) break L42; else $$014$i$i$i4 = $$01$be$i$i$i6;
   }
   if (($$014$i$i$i4 | 0) != ($75 | 0)) if (($$014$i$i$i4 - $77 | 0) != -1) {
    _memmove($info | 0, 44380, 20) | 0;
    if (!(HEAP8[$data >> 0] & 1)) {
     HEAP32[$2 + 0 >> 2] = HEAP32[$data + 0 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$data + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$data + 8 >> 2];
    } else {
     $90 = HEAP32[$data + 8 >> 2] | 0;
     $92 = HEAP32[$data + 4 >> 2] | 0;
     if ($92 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
     if ($92 >>> 0 < 11) {
      HEAP8[$2 >> 0] = $92 << 1;
      $__p$0$i8 = $2 + 1 | 0;
     } else {
      $99 = $92 + 16 & -16;
      $$size$i10 = ($99 | 0) == 0 ? 1 : $99;
      $101 = _malloc($$size$i10) | 0;
      L58 : do if (!$101) {
       while (1) {
        $103 = HEAP32[15470] | 0;
        HEAP32[15470] = $103 + 0;
        if (!$103) break;
        FUNCTION_TABLE_v[$103 & 3]();
        $106 = _malloc($$size$i10) | 0;
        if ($106) {
         $$lcssa$i14 = $106;
         break L58;
        }
       }
       $108 = ___cxa_allocate_exception(4) | 0;
       HEAP32[$108 >> 2] = 61776;
       ___cxa_throw($108 | 0, 61824, 94);
      } else $$lcssa$i14 = $101; while (0);
      HEAP32[$2 + 8 >> 2] = $$lcssa$i14;
      HEAP32[$2 >> 2] = $99 | 1;
      HEAP32[$2 + 4 >> 2] = $92;
      $__p$0$i8 = $$lcssa$i14;
     }
     _memcpy($__p$0$i8 | 0, $90 | 0, $92 | 0) | 0;
     HEAP8[$__p$0$i8 + $92 >> 0] = 0;
    }
    $113 = $2 + 12 | 0;
    HEAP8[$113 >> 0] = 0;
    HEAP8[$113 + 1 >> 0] = 0;
    __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0, $this, $2);
    if (HEAP8[$113 >> 0] & 1) _free(HEAP32[$2 + 20 >> 2] | 0);
    if (!(HEAP8[$2 >> 0] & 1)) {
     STACKTOP = sp;
     return;
    }
    _free(HEAP32[$2 + 8 >> 2] | 0);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ($6) {
  $133 = ($4 & 255) >>> 1;
  $135 = $data + 1 | 0;
 } else {
  $133 = HEAP32[$data + 4 >> 2] | 0;
  $135 = HEAP32[$data + 8 >> 2] | 0;
 }
 if (!$133) {
  STACKTOP = sp;
  return;
 }
 $134 = $135 + $133 | 0;
 $136 = $135;
 if (($133 | 0) < 1) {
  STACKTOP = sp;
  return;
 } else $$014$i$i$i18 = $135;
 while (1) {
  if ((HEAP8[$$014$i$i$i18 >> 0] | 0) == 37) break;
  $$01$be$i$i$i20 = $$014$i$i$i18 + 1 | 0;
  if (($$01$be$i$i$i20 | 0) == ($134 | 0)) {
   label = 76;
   break;
  } else $$014$i$i$i18 = $$01$be$i$i$i20;
 }
 if ((label | 0) == 76) {
  STACKTOP = sp;
  return;
 }
 if (($$014$i$i$i18 | 0) == ($134 | 0)) {
  STACKTOP = sp;
  return;
 }
 if (($$014$i$i$i18 - $136 | 0) == -1) {
  STACKTOP = sp;
  return;
 }
 _memmove($info | 0, 44400, 20) | 0;
 if (!(HEAP8[$data >> 0] & 1)) {
  HEAP32[$3 + 0 >> 2] = HEAP32[$data + 0 >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$data + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$data + 8 >> 2];
 } else {
  $149 = HEAP32[$data + 8 >> 2] | 0;
  $151 = HEAP32[$data + 4 >> 2] | 0;
  if ($151 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($151 >>> 0 < 11) {
   HEAP8[$3 >> 0] = $151 << 1;
   $__p$0$i24 = $3 + 1 | 0;
  } else {
   $158 = $151 + 16 & -16;
   $$size$i26 = ($158 | 0) == 0 ? 1 : $158;
   $160 = _malloc($$size$i26) | 0;
   L105 : do if (!$160) {
    while (1) {
     $162 = HEAP32[15470] | 0;
     HEAP32[15470] = $162 + 0;
     if (!$162) break;
     FUNCTION_TABLE_v[$162 & 3]();
     $165 = _malloc($$size$i26) | 0;
     if ($165) {
      $$lcssa$i30 = $165;
      break L105;
     }
    }
    $167 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$167 >> 2] = 61776;
    ___cxa_throw($167 | 0, 61824, 94);
   } else $$lcssa$i30 = $160; while (0);
   HEAP32[$3 + 8 >> 2] = $$lcssa$i30;
   HEAP32[$3 >> 2] = $158 | 1;
   HEAP32[$3 + 4 >> 2] = $151;
   $__p$0$i24 = $$lcssa$i30;
  }
  _memcpy($__p$0$i24 | 0, $149 | 0, $151 | 0) | 0;
  HEAP8[$__p$0$i24 + $151 >> 0] = 0;
 }
 $172 = $3 + 12 | 0;
 HEAP8[$172 >> 0] = 0;
 HEAP8[$172 + 1 >> 0] = 0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIKS7_S7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0, $this, $3);
 if (HEAP8[$172 >> 0] & 1) _free(HEAP32[$3 + 20 >> 2] | 0);
 if (!(HEAP8[$3 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$3 + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var $$02$i$i = 0, $$03$i = 0, $$03$i11 = 0, $$03$i18 = 0, $$03$i4 = 0, $0 = 0, $105 = 0, $116 = 0, $117 = 0, $118 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $134 = 0, $141 = 0, $142 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $33 = 0, $44 = 0, $45 = 0, $46 = 0, $57 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $81 = 0, $92 = 0, $93 = 0, $94 = 0, $__p$0$lcssa$i$i = 0, $__p$0$ph$i$i = 0, $__p$01$i$i = 0, $c$0$ph = 0, $l$04$i = 0, $l$04$i10 = 0, $l$04$i17 = 0, $l$04$i3 = 0, $p0$0 = 0, $p0$1 = 0, $pe$0 = 0, $pe$0$ph = 0, $pe$1 = 0, $pe$1$pn = 0, $r$05$i = 0, $r$05$i16 = 0, $r$05$i2 = 0, $r$05$i9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s >> 0] | 0;
 $2 = ($0 & 1) == 0;
 if ($2) $8 = ($0 & 255) >>> 1; else $8 = HEAP32[$s + 4 >> 2] | 0;
 if (!$8) if ($2) {
  HEAP32[$agg$result + 0 >> 2] = HEAP32[$s + 0 >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$s + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$s + 8 >> 2];
  STACKTOP = sp;
  return;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result, HEAP32[$s + 8 >> 2] | 0, HEAP32[$s + 4 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 if ($2) {
  $151 = $s + 1 | 0;
  $21 = ($0 & 255) >>> 1;
 } else {
  $151 = HEAP32[$s + 8 >> 2] | 0;
  $21 = HEAP32[$s + 4 >> 2] | 0;
 }
 $20 = $21 >>> 0 > 11;
 $22 = $20 ? 11 : $21;
 L17 : do if (!$22) label = 14; else {
  $$03$i = $22;
  $l$04$i = $151;
  $r$05$i = 60304;
  while (1) {
   if ((HEAP8[$l$04$i >> 0] | 0) != (HEAP8[$r$05$i >> 0] | 0)) break L17;
   $$03$i = $$03$i + -1 | 0;
   if (!$$03$i) {
    label = 14;
    break;
   } else {
    $l$04$i = $l$04$i + 1 | 0;
    $r$05$i = $r$05$i + 1 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 14) if ($21 >>> 0 > 10 & ($20 ^ 1)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s, 60320, 70);
  $33 = _malloc(16) | 0;
  HEAP32[$agg$result + 8 >> 2] = $33;
  HEAP32[$agg$result >> 2] = 17;
  HEAP32[$agg$result + 4 >> 2] = 12;
  dest = $33 + 0 | 0;
  src = 60392;
  stop = dest + 12 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP8[$33 + 12 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 if ($2) {
  $152 = $s + 1 | 0;
  $45 = ($0 & 255) >>> 1;
 } else {
  $152 = HEAP32[$s + 8 >> 2] | 0;
  $45 = HEAP32[$s + 4 >> 2] | 0;
 }
 $44 = $45 >>> 0 > 12;
 $46 = $44 ? 12 : $45;
 L30 : do if (!$46) label = 22; else {
  $$03$i4 = $46;
  $l$04$i3 = $152;
  $r$05$i2 = 60408;
  while (1) {
   if ((HEAP8[$l$04$i3 >> 0] | 0) != (HEAP8[$r$05$i2 >> 0] | 0)) break L30;
   $$03$i4 = $$03$i4 + -1 | 0;
   if (!$$03$i4) {
    label = 22;
    break;
   } else {
    $l$04$i3 = $l$04$i3 + 1 | 0;
    $r$05$i2 = $r$05$i2 + 1 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 22) if ($45 >>> 0 > 11 & ($44 ^ 1)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s, 60424, 49);
  $57 = _malloc(16) | 0;
  HEAP32[$agg$result + 8 >> 2] = $57;
  HEAP32[$agg$result >> 2] = 17;
  HEAP32[$agg$result + 4 >> 2] = 13;
  dest = $57 + 0 | 0;
  src = 60480;
  stop = dest + 13 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP8[$57 + 13 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 if ($2) {
  $153 = $s + 1 | 0;
  $69 = ($0 & 255) >>> 1;
 } else {
  $153 = HEAP32[$s + 8 >> 2] | 0;
  $69 = HEAP32[$s + 4 >> 2] | 0;
 }
 $68 = $69 >>> 0 > 12;
 $70 = $68 ? 12 : $69;
 L43 : do if (!$70) label = 30; else {
  $$03$i11 = $70;
  $l$04$i10 = $153;
  $r$05$i9 = 60496;
  while (1) {
   if ((HEAP8[$l$04$i10 >> 0] | 0) != (HEAP8[$r$05$i9 >> 0] | 0)) break L43;
   $$03$i11 = $$03$i11 + -1 | 0;
   if (!$$03$i11) {
    label = 30;
    break;
   } else {
    $l$04$i10 = $l$04$i10 + 1 | 0;
    $r$05$i9 = $r$05$i9 + 1 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 30) if ($69 >>> 0 > 11 & ($68 ^ 1)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s, 60512, 49);
  $81 = _malloc(16) | 0;
  HEAP32[$agg$result + 8 >> 2] = $81;
  HEAP32[$agg$result >> 2] = 17;
  HEAP32[$agg$result + 4 >> 2] = 13;
  dest = $81 + 0 | 0;
  src = 60568;
  stop = dest + 13 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP8[$81 + 13 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 if ($2) {
  $154 = $s + 1 | 0;
  $93 = ($0 & 255) >>> 1;
 } else {
  $154 = HEAP32[$s + 8 >> 2] | 0;
  $93 = HEAP32[$s + 4 >> 2] | 0;
 }
 $92 = $93 >>> 0 > 13;
 $94 = $92 ? 13 : $93;
 L56 : do if (!$94) label = 38; else {
  $$03$i18 = $94;
  $l$04$i17 = $154;
  $r$05$i16 = 60584;
  while (1) {
   if ((HEAP8[$l$04$i17 >> 0] | 0) != (HEAP8[$r$05$i16 >> 0] | 0)) break L56;
   $$03$i18 = $$03$i18 + -1 | 0;
   if (!$$03$i18) {
    label = 38;
    break;
   } else {
    $l$04$i17 = $l$04$i17 + 1 | 0;
    $r$05$i16 = $r$05$i16 + 1 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 38) if ($93 >>> 0 > 12 & ($92 ^ 1)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s, 60600, 50);
  $105 = _malloc(16) | 0;
  HEAP32[$agg$result + 8 >> 2] = $105;
  HEAP32[$agg$result >> 2] = 17;
  HEAP32[$agg$result + 4 >> 2] = 14;
  dest = $105 + 0 | 0;
  src = 60656;
  stop = dest + 14 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP8[$105 + 14 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 if ($2) {
  $117 = $s + 1 | 0;
  $118 = ($0 & 255) >>> 1;
 } else {
  $117 = HEAP32[$s + 8 >> 2] | 0;
  $118 = HEAP32[$s + 4 >> 2] | 0;
 }
 $116 = $117 + $118 | 0;
 L69 : do if ((HEAP8[$117 + ($118 + -1) >> 0] | 0) == 62) {
  $c$0$ph = 1;
  $pe$0$ph = $116;
  L70 : while (1) {
   $pe$0 = $pe$0$ph;
   while (1) {
    $122 = $pe$0 + -1 | 0;
    if (($122 | 0) == ($117 | 0)) break L70;
    $124 = $pe$0 + -2 | 0;
    $125 = HEAP8[$124 >> 0] | 0;
    if ($125 << 24 >> 24 == 62) {
     label = 49;
     break;
    } else if ($125 << 24 >> 24 == 60) {
     label = 48;
     break;
    } else $pe$0 = $122;
   }
   if ((label | 0) == 48) {
    label = 0;
    $126 = $c$0$ph + -1 | 0;
    if (!$126) {
     $pe$1 = $124;
     break L69;
    } else {
     $c$0$ph = $126;
     $pe$0$ph = $122;
     continue;
    }
   } else if ((label | 0) == 49) {
    label = 0;
    $c$0$ph = $c$0$ph + 1 | 0;
    $pe$0$ph = $122;
    continue;
   }
  }
  HEAP32[$agg$result + 0 >> 2] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
  HEAP32[$agg$result + 8 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else $pe$1 = $116; while (0);
 $pe$1$pn = $pe$1;
 while (1) {
  $p0$0 = $pe$1$pn + -1 | 0;
  if (($p0$0 | 0) == ($117 | 0)) {
   $p0$1 = $117;
   break;
  }
  if ((HEAP8[$p0$0 >> 0] | 0) == 58) {
   $p0$1 = $pe$1$pn;
   break;
  } else $pe$1$pn = $p0$0;
 }
 $134 = $pe$1 - $p0$1 | 0;
 if ($134 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($134 >>> 0 < 11) {
  HEAP8[$agg$result >> 0] = $134 << 1;
  $__p$0$ph$i$i = $agg$result + 1 | 0;
 } else {
  $141 = $134 + 16 & -16;
  $142 = _malloc($141) | 0;
  HEAP32[$agg$result + 8 >> 2] = $142;
  HEAP32[$agg$result >> 2] = $141 | 1;
  HEAP32[$agg$result + 4 >> 2] = $134;
  $__p$0$ph$i$i = $142;
 }
 if (($p0$1 | 0) == ($pe$1 | 0)) $__p$0$lcssa$i$i = $__p$0$ph$i$i; else {
  $$02$i$i = $p0$1;
  $__p$01$i$i = $__p$0$ph$i$i;
  while (1) {
   HEAP8[$__p$01$i$i >> 0] = HEAP8[$$02$i$i >> 0] | 0;
   $$02$i$i = $$02$i$i + 1 | 0;
   if (($$02$i$i | 0) == ($pe$1 | 0)) break; else $__p$01$i$i = $__p$01$i$i + 1 | 0;
  }
  $__p$0$lcssa$i$i = $__p$0$ph$i$i + $134 | 0;
 }
 HEAP8[$__p$0$lcssa$i$i >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorI18CompilerLexerTokenNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$0$i10 = 0, $$0$i11 = 0, $$01$i$i = 0, $$lcssa$i = 0, $$lcssa$i23 = 0, $$lcssa$i34 = 0, $$lcssa$i8 = 0, $$pre$i = 0, $$pre9 = 0, $$size$i = 0, $$size$i19 = 0, $$size$i4 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $104 = 0, $105 = 0, $109 = 0, $11 = 0, $111 = 0, $113 = 0, $114 = 0, $120 = 0, $13 = 0, $134 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $50 = 0, $52 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $73 = 0, $74 = 0, $79 = 0, $81 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $95 = 0, $97 = 0, $__p$0$i = 0, $__p$0$i15 = 0, label = 0, sp = 0, $$01$i$i$looptemp = 0, $111$looptemp = 0, $120$looptemp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP32[$this >> 2] | 0;
 $4 = $2;
 $6 = ($1 - $4 | 0) / 24 | 0;
 $7 = $6 + 1 | 0;
 if ($7 >>> 0 > 178956970) {
  $9 = ___cxa_allocate_exception(8) | 0;
  HEAP32[$9 >> 2] = 61920;
  $10 = $9 + 4 | 0;
  $11 = _malloc(19) | 0;
  if ($11) {
   $$lcssa$i34 = $11;
   HEAP32[$$lcssa$i34 >> 2] = 6;
   $19 = $$lcssa$i34 + 4 | 0;
   HEAP32[$19 >> 2] = 6;
   $20 = $$lcssa$i34 + 8 | 0;
   HEAP32[$20 >> 2] = 0;
   $21 = $$lcssa$i34 + 12 | 0;
   HEAP8[$21 + 0 >> 0] = HEAP8[50728] | 0;
   HEAP8[$21 + 1 >> 0] = HEAP8[50729] | 0;
   HEAP8[$21 + 2 >> 0] = HEAP8[50730] | 0;
   HEAP8[$21 + 3 >> 0] = HEAP8[50731] | 0;
   HEAP8[$21 + 4 >> 0] = HEAP8[50732] | 0;
   HEAP8[$21 + 5 >> 0] = HEAP8[50733] | 0;
   HEAP8[$21 + 6 >> 0] = HEAP8[50734] | 0;
   HEAP32[$10 >> 2] = $21;
   HEAP32[$9 >> 2] = 62e3;
   ___cxa_throw($9 | 0, 62040, 96);
  }
  while (1) {
   $13 = HEAP32[15470] | 0;
   HEAP32[15470] = $13 + 0;
   if (!$13) {
    label = 5;
    break;
   }
   FUNCTION_TABLE_v[$13 & 3]();
   $16 = _malloc(19) | 0;
   if ($16) {
    $$lcssa$i34 = $16;
    label = 6;
    break;
   }
  }
  if ((label | 0) == 5) {
   $18 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$18 >> 2] = 61776;
   ___cxa_throw($18 | 0, 61824, 94);
  } else if ((label | 0) == 6) {
   HEAP32[$$lcssa$i34 >> 2] = 6;
   $19 = $$lcssa$i34 + 4 | 0;
   HEAP32[$19 >> 2] = 6;
   $20 = $$lcssa$i34 + 8 | 0;
   HEAP32[$20 >> 2] = 0;
   $21 = $$lcssa$i34 + 12 | 0;
   HEAP8[$21 + 0 >> 0] = HEAP8[50728] | 0;
   HEAP8[$21 + 1 >> 0] = HEAP8[50729] | 0;
   HEAP8[$21 + 2 >> 0] = HEAP8[50730] | 0;
   HEAP8[$21 + 3 >> 0] = HEAP8[50731] | 0;
   HEAP8[$21 + 4 >> 0] = HEAP8[50732] | 0;
   HEAP8[$21 + 5 >> 0] = HEAP8[50733] | 0;
   HEAP8[$21 + 6 >> 0] = HEAP8[50734] | 0;
   HEAP32[$10 >> 2] = $21;
   HEAP32[$9 >> 2] = 62e3;
   ___cxa_throw($9 | 0, 62040, 96);
  }
 }
 $22 = $this + 8 | 0;
 $26 = ((HEAP32[$22 >> 2] | 0) - $4 | 0) / 24 | 0;
 if ($26 >>> 0 < 89478485) {
  $28 = $26 << 1;
  $30 = $28 >>> 0 < $7 >>> 0 ? $7 : $28;
  if (!$30) {
   $$0$i11 = 0;
   $43 = 0;
  } else {
   $$0$i10 = $30;
   label = 9;
  }
 } else {
  $$0$i10 = 178956970;
  label = 9;
 }
 if ((label | 0) == 9) {
  $32 = $$0$i10 * 24 | 0;
  $$size$i = ($32 | 0) == 0 ? 1 : $32;
  $34 = _malloc($$size$i) | 0;
  L16 : do if (!$34) {
   while (1) {
    $36 = HEAP32[15470] | 0;
    HEAP32[15470] = $36 + 0;
    if (!$36) break;
    FUNCTION_TABLE_v[$36 & 3]();
    $39 = _malloc($$size$i) | 0;
    if ($39) {
     $$lcssa$i = $39;
     break L16;
    }
   }
   $41 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$41 >> 2] = 61776;
   ___cxa_throw($41 | 0, 61824, 94);
  } else $$lcssa$i = $34; while (0);
  $$0$i11 = $$0$i10;
  $43 = $$lcssa$i;
 }
 $42 = $43 + ($6 * 24 | 0) | 0;
 $44 = $43 + ($$0$i11 * 24 | 0) | 0;
 if (!$42) {
  $104 = $1;
  $105 = $2;
 } else {
  if (!(HEAP8[$__x >> 0] & 1)) {
   HEAP32[$42 + 0 >> 2] = HEAP32[$__x + 0 >> 2];
   HEAP32[$42 + 4 >> 2] = HEAP32[$__x + 4 >> 2];
   HEAP32[$42 + 8 >> 2] = HEAP32[$__x + 8 >> 2];
  } else {
   $50 = HEAP32[$__x + 8 >> 2] | 0;
   $52 = HEAP32[$__x + 4 >> 2] | 0;
   if ($52 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
   if ($52 >>> 0 < 11) {
    HEAP8[$42 >> 0] = $52 << 1;
    $__p$0$i = $42 + 1 | 0;
   } else {
    $59 = $52 + 16 & -16;
    $$size$i4 = ($59 | 0) == 0 ? 1 : $59;
    $61 = _malloc($$size$i4) | 0;
    L34 : do if (!$61) {
     while (1) {
      $63 = HEAP32[15470] | 0;
      HEAP32[15470] = $63 + 0;
      if (!$63) break;
      FUNCTION_TABLE_v[$63 & 3]();
      $66 = _malloc($$size$i4) | 0;
      if ($66) {
       $$lcssa$i8 = $66;
       break L34;
      }
     }
     $68 = ___cxa_allocate_exception(4) | 0;
     HEAP32[$68 >> 2] = 61776;
     ___cxa_throw($68 | 0, 61824, 94);
    } else $$lcssa$i8 = $61; while (0);
    HEAP32[$43 + ($6 * 24 | 0) + 8 >> 2] = $$lcssa$i8;
    HEAP32[$42 >> 2] = $59 | 1;
    HEAP32[$43 + ($6 * 24 | 0) + 4 >> 2] = $52;
    $__p$0$i = $$lcssa$i8;
   }
   _memcpy($__p$0$i | 0, $50 | 0, $52 | 0) | 0;
   HEAP8[$__p$0$i + $52 >> 0] = 0;
  }
  $73 = $43 + ($6 * 24 | 0) + 12 | 0;
  $74 = $__x + 12 | 0;
  if (!(HEAP8[$74 >> 0] & 1)) {
   HEAP32[$73 + 0 >> 2] = HEAP32[$74 + 0 >> 2];
   HEAP32[$73 + 4 >> 2] = HEAP32[$74 + 4 >> 2];
   HEAP32[$73 + 8 >> 2] = HEAP32[$74 + 8 >> 2];
  } else {
   $79 = HEAP32[$__x + 20 >> 2] | 0;
   $81 = HEAP32[$__x + 16 >> 2] | 0;
   if ($81 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
   if ($81 >>> 0 < 11) {
    HEAP8[$73 >> 0] = $81 << 1;
    $__p$0$i15 = $73 + 1 | 0;
   } else {
    $88 = $81 + 16 & -16;
    $$size$i19 = ($88 | 0) == 0 ? 1 : $88;
    $90 = _malloc($$size$i19) | 0;
    L50 : do if (!$90) {
     while (1) {
      $92 = HEAP32[15470] | 0;
      HEAP32[15470] = $92 + 0;
      if (!$92) break;
      FUNCTION_TABLE_v[$92 & 3]();
      $95 = _malloc($$size$i19) | 0;
      if ($95) {
       $$lcssa$i23 = $95;
       break L50;
      }
     }
     $97 = ___cxa_allocate_exception(4) | 0;
     HEAP32[$97 >> 2] = 61776;
     ___cxa_throw($97 | 0, 61824, 94);
    } else $$lcssa$i23 = $90; while (0);
    HEAP32[$43 + ($6 * 24 | 0) + 20 >> 2] = $$lcssa$i23;
    HEAP32[$73 >> 2] = $88 | 1;
    HEAP32[$43 + ($6 * 24 | 0) + 16 >> 2] = $81;
    $__p$0$i15 = $$lcssa$i23;
   }
   _memcpy($__p$0$i15 | 0, $79 | 0, $81 | 0) | 0;
   HEAP8[$__p$0$i15 + $81 >> 0] = 0;
  }
  $104 = HEAP32[$0 >> 2] | 0;
  $105 = HEAP32[$this >> 2] | 0;
 }
 $102 = $43 + ($7 * 24 | 0) | 0;
 if (($104 | 0) == ($105 | 0)) {
  HEAP32[$this >> 2] = $42;
  HEAP32[$0 >> 2] = $102;
  HEAP32[$22 >> 2] = $44;
  $134 = $104;
 } else {
  $109 = (($104 + -24 - $105 | 0) >>> 0) / 24 | 0;
  $$01$i$i = $104;
  $111 = $42;
  do {
   $111$looptemp = $111;
   $111 = $111 + -24 | 0;
   $$01$i$i$looptemp = $$01$i$i;
   $$01$i$i = $$01$i$i + -24 | 0;
   HEAP32[$111 + 0 >> 2] = HEAP32[$$01$i$i + 0 >> 2];
   HEAP32[$111 + 4 >> 2] = HEAP32[$$01$i$i + 4 >> 2];
   HEAP32[$111 + 8 >> 2] = HEAP32[$$01$i$i + 8 >> 2];
   HEAP32[$$01$i$i + 0 >> 2] = 0;
   HEAP32[$$01$i$i + 4 >> 2] = 0;
   HEAP32[$$01$i$i + 8 >> 2] = 0;
   $113 = $111$looptemp + -12 | 0;
   $114 = $$01$i$i$looptemp + -12 | 0;
   HEAP32[$113 + 0 >> 2] = HEAP32[$114 + 0 >> 2];
   HEAP32[$113 + 4 >> 2] = HEAP32[$114 + 4 >> 2];
   HEAP32[$113 + 8 >> 2] = HEAP32[$114 + 8 >> 2];
   HEAP32[$114 + 0 >> 2] = 0;
   HEAP32[$114 + 4 >> 2] = 0;
   HEAP32[$114 + 8 >> 2] = 0;
  } while (($$01$i$i | 0) != ($105 | 0));
  $$pre$i = HEAP32[$this >> 2] | 0;
  $$pre9 = HEAP32[$0 >> 2] | 0;
  HEAP32[$this >> 2] = $43 + (($6 + -1 - $109 | 0) * 24 | 0);
  HEAP32[$0 >> 2] = $102;
  HEAP32[$22 >> 2] = $44;
  if (($$pre9 | 0) == ($$pre$i | 0)) $134 = $$pre$i; else {
   $120 = $$pre9;
   do {
    $120$looptemp = $120;
    $120 = $120 + -24 | 0;
    if (HEAP8[$120$looptemp + -12 >> 0] & 1) _free(HEAP32[$120$looptemp + -4 >> 2] | 0);
    if (HEAP8[$120 >> 0] & 1) _free(HEAP32[$120$looptemp + -16 >> 2] | 0);
   } while (($120 | 0) != ($$pre$i | 0));
   $134 = $$pre$i;
  }
 }
 if (!$134) {
  STACKTOP = sp;
  return;
 }
 _free($134);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$014$$i = 0, $$014$lcssa$i = 0, $$01428$i = 0, $$0157 = 0, $$0256 = 0, $$031$i = 0, $$1$lcssa = 0, $$115$i = 0, $$148 = 0, $$2 = 0, $$2$i = 0, $$3$i = 0, $$pre116 = 0, $13 = 0, $14 = 0, $18 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $39 = 0, $40 = 0, $44 = 0, $47 = 0, $48 = 0, $55 = 0, $6 = 0, $63 = 0, $64 = 0, $7 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $84 = 0, $85 = 0, $88 = 0, $91 = 0, $91$phi = 0, $93 = 0, $95 = 0, $96 = 0, $98 = 0, $cnt$0$lcssa$i = 0, $cnt$029$i = 0, $cnt$2$i = 0, $cnt$3$i = 0, $fend$0$lcssa = 0, $fend$062 = 0, $fend$158 = 0, $fend$2$lcssa = 0, $fend$249 = 0, $fend$3 = 0, $s$i = 0, $save_state = 0, $storemerge47 = 0, $wbuf$i = 0, $wcs$$i = 0, $wn$$i = 0, $ws$0$lcssa$i = 0, $ws$030$i = 0, $ws$1$i = 0, $ws$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $wbuf$i = sp + 16 | 0;
 $s$i = sp + 8 | 0;
 $save_state = sp;
 L1 : do if (($frm | 0) == ($frm_end | 0)) {
  HEAP32[$to_nxt >> 2] = $to;
  HEAP32[$frm_nxt >> 2] = $frm;
  $96 = $frm;
 } else {
  $fend$062 = $frm;
  while (1) {
   if (!(HEAP8[$fend$062 >> 0] | 0)) {
    $fend$0$lcssa = $fend$062;
    break;
   }
   $fend$062 = $fend$062 + 1 | 0;
   if (($fend$062 | 0) == ($frm_end | 0)) {
    $fend$0$lcssa = $frm_end;
    break;
   }
  }
  HEAP32[$to_nxt >> 2] = $to;
  HEAP32[$frm_nxt >> 2] = $frm;
  if (($to | 0) == ($to_end | 0)) $96 = $frm; else {
   $6 = $to_end;
   $7 = $this + 8 | 0;
   $$0157 = $frm;
   $$0256 = $to;
   $fend$158 = $fend$0$lcssa;
   while (1) {
    $8 = $st;
    $13 = HEAP32[$8 + 4 >> 2] | 0;
    $14 = $save_state;
    HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$14 + 4 >> 2] = $13;
    $18 = $fend$158;
    $20 = $18 - $$0157 | 0;
    $25 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
    $26 = HEAP32[$frm_nxt >> 2] | 0;
    HEAP32[$s$i >> 2] = $26;
    $27 = ($$0256 | 0) != 0;
    $wn$$i = $27 ? $6 - $$0256 >> 2 : 256;
    $wcs$$i = $27 ? $$0256 : $wbuf$i;
    L10 : do if (($26 | 0) != 0 & ($wn$$i | 0) != 0) {
     $$01428$i = $wn$$i;
     $$031$i = $20;
     $98 = $26;
     $cnt$029$i = 0;
     $ws$030$i = $wcs$$i;
     while (1) {
      $30 = $$031$i >>> 2;
      $31 = $30 >>> 0 >= $$01428$i >>> 0;
      if (!($31 | $$031$i >>> 0 > 131)) {
       $$0$lcssa$i = $$031$i;
       $$014$lcssa$i = $$01428$i;
       $44 = $98;
       $cnt$0$lcssa$i = $cnt$029$i;
       $ws$0$lcssa$i = $ws$030$i;
       label = 13;
       break L10;
      }
      $$014$$i = $31 ? $$01428$i : $30;
      $33 = $$031$i - $$014$$i | 0;
      $34 = _mbsrtowcs($ws$030$i, $s$i, $$014$$i, $st) | 0;
      if (($34 | 0) == -1) {
       $cnt$3$i = -1;
       break L10;
      }
      if (($ws$030$i | 0) == ($wbuf$i | 0)) {
       $$115$i = $$01428$i;
       $ws$1$i = $wbuf$i;
      } else {
       $$115$i = $$01428$i - $34 | 0;
       $ws$1$i = $ws$030$i + ($34 << 2) | 0;
      }
      $39 = $34 + $cnt$029$i | 0;
      $40 = HEAP32[$s$i >> 2] | 0;
      if (($40 | 0) != 0 & ($$115$i | 0) != 0) {
       $$01428$i = $$115$i;
       $$031$i = $33;
       $98 = $40;
       $cnt$029$i = $39;
       $ws$030$i = $ws$1$i;
      } else {
       $$0$lcssa$i = $33;
       $$014$lcssa$i = $$115$i;
       $44 = $40;
       $cnt$0$lcssa$i = $39;
       $ws$0$lcssa$i = $ws$1$i;
       label = 13;
       break;
      }
     }
    } else {
     $$0$lcssa$i = $20;
     $$014$lcssa$i = $wn$$i;
     $44 = $26;
     $cnt$0$lcssa$i = 0;
     $ws$0$lcssa$i = $wcs$$i;
     label = 13;
    } while (0);
    L18 : do if ((label | 0) == 13) {
     label = 0;
     if (($44 | 0) != 0 & ($$014$lcssa$i | 0) != 0 & ($$0$lcssa$i | 0) != 0) {
      $$2$i = $$0$lcssa$i;
      $$3$i = $$014$lcssa$i;
      $47 = $44;
      $cnt$2$i = $cnt$0$lcssa$i;
      $ws$2$i = $ws$0$lcssa$i;
      while (1) {
       $48 = _mbrtowc($ws$2$i, $47, $$2$i, $st) | 0;
       if (($48 + 2 | 0) >>> 0 < 3) break;
       $47 = $47 + $48 | 0;
       HEAP32[$s$i >> 2] = $47;
       $$3$i = $$3$i + -1 | 0;
       $55 = $cnt$2$i + 1 | 0;
       if (!(($$3$i | 0) != 0 & ($$2$i | 0) != ($48 | 0))) {
        $cnt$3$i = $55;
        break L18;
       } else {
        $$2$i = $$2$i - $48 | 0;
        $cnt$2$i = $55;
        $ws$2$i = $ws$2$i + 4 | 0;
       }
      }
      if (($48 | 0) == -1) {
       $cnt$3$i = -1;
       break;
      } else if (!$48) {
       HEAP32[$s$i >> 2] = 0;
       $cnt$3$i = $cnt$2$i;
       break;
      } else {
       HEAP32[$st >> 2] = 0;
       $cnt$3$i = $cnt$2$i;
       break;
      }
     } else $cnt$3$i = $cnt$0$lcssa$i;
    } while (0);
    if ($27) HEAP32[$frm_nxt >> 2] = HEAP32[$s$i >> 2];
    if ($25) _uselocale($25 | 0) | 0;
    if (($cnt$3$i | 0) == -1) {
     label = 24;
     break;
    } else if (!$cnt$3$i) {
     $$0 = 2;
     label = 46;
     break;
    }
    $74 = (HEAP32[$to_nxt >> 2] | 0) + ($cnt$3$i << 2) | 0;
    HEAP32[$to_nxt >> 2] = $74;
    if (($74 | 0) == ($to_end | 0)) {
     label = 44;
     break;
    }
    $$pre116 = HEAP32[$frm_nxt >> 2] | 0;
    if (($fend$158 | 0) == ($frm_end | 0)) {
     $93 = $$pre116;
     $95 = $74;
     $fend$3 = $frm_end;
    } else {
     $78 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
     $79 = _mbrtowc($74, $$pre116, 1, $st) | 0;
     if ($78) _uselocale($78 | 0) | 0;
     if ($79) {
      $$0 = 2;
      label = 46;
      break;
     }
     HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4;
     $84 = HEAP32[$frm_nxt >> 2] | 0;
     $85 = $84 + 1 | 0;
     HEAP32[$frm_nxt >> 2] = $85;
     L42 : do if (($85 | 0) == ($frm_end | 0)) $fend$2$lcssa = $frm_end; else {
      $91 = $84;
      $fend$249 = $85;
      while (1) {
       $88 = $91 + 2 | 0;
       if (!(HEAP8[$fend$249 >> 0] | 0)) {
        $fend$2$lcssa = $fend$249;
        break L42;
       }
       if (($88 | 0) == ($frm_end | 0)) {
        $fend$2$lcssa = $frm_end;
        break;
       } else {
        $91$phi = $fend$249;
        $fend$249 = $88;
        $91 = $91$phi;
       }
      }
     } while (0);
     $93 = $85;
     $95 = HEAP32[$to_nxt >> 2] | 0;
     $fend$3 = $fend$2$lcssa;
    }
    if (($93 | 0) == ($frm_end | 0) | ($95 | 0) == ($to_end | 0)) {
     $96 = $93;
     break L1;
    } else {
     $$0157 = $93;
     $$0256 = $95;
     $fend$158 = $fend$3;
    }
   }
   if ((label | 0) == 24) {
    HEAP32[$to_nxt >> 2] = $$0256;
    L50 : do if (($$0157 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) $$1$lcssa = $$0157; else {
     $$148 = $$0157;
     $storemerge47 = $$0256;
     while (1) {
      $63 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
      $64 = _mbrtowc($storemerge47, $$148, $18 - $$148 | 0, $save_state) | 0;
      if ($63) _uselocale($63 | 0) | 0;
      if (($64 | 0) == -2) {
       label = 30;
       break;
      } else if (!$64) $$2 = $$148 + 1 | 0; else if (($64 | 0) == -1) {
       label = 29;
       break;
      } else $$2 = $$148 + $64 | 0;
      $storemerge47 = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0;
      HEAP32[$to_nxt >> 2] = $storemerge47;
      if (($$2 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
       $$1$lcssa = $$2;
       break L50;
      } else $$148 = $$2;
     }
     if ((label | 0) == 29) {
      HEAP32[$frm_nxt >> 2] = $$148;
      $$0 = 2;
      STACKTOP = sp;
      return $$0 | 0;
     } else if ((label | 0) == 30) {
      HEAP32[$frm_nxt >> 2] = $$148;
      $$0 = 1;
      STACKTOP = sp;
      return $$0 | 0;
     }
    } while (0);
    HEAP32[$frm_nxt >> 2] = $$1$lcssa;
    $$0 = ($$1$lcssa | 0) != ($frm_end | 0) & 1;
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 44) {
    $96 = HEAP32[$frm_nxt >> 2] | 0;
    break;
   } else if ((label | 0) == 46) {
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
 } while (0);
 $$0 = ($96 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN7Scanner10scanNumberEP10LexContext($ctx) {
 $ctx = $ctx | 0;
 var $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $135 = 0, $136 = 0, $141 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $151 = 0, $152 = 0, $153 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $7 = 0, $72 = 0, $73 = 0, $75 = 0, $8 = 0, $80 = 0, $81 = 0, $85 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $97 = 0, $98 = 0, $99 = 0, $c$1 = 0, $c$2 = 0, $c$4 = 0, $c$5$ph = 0, $isFloat$0$off0 = 0, $isFloat$1$off0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp;
 $1 = sp + 20 | 0;
 $2 = $ctx + 4 | 0;
 $3 = HEAP32[$ctx >> 2] | 0;
 $5 = HEAP32[$3 + 4 >> 2] | 0;
 $7 = HEAP32[$3 + 12 >> 2] | 0;
 $8 = $5 + $7 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 $10 = $ctx + 40 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 HEAP32[$10 >> 2] = $11 + 1;
 $13 = $ctx + 36 | 0;
 HEAP8[(HEAP32[$13 >> 2] | 0) + $11 >> 0] = $9;
 HEAP8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = 0;
 $19 = $7 + 1 | 0;
 $20 = HEAP8[$8 >> 0] | 0;
 $22 = ($20 + -48 << 24 >> 24 & 255) < 10;
 if (!($20 << 24 >> 24 == 46 | $22)) ___assert_fail(1512, 1576, 763, 1624);
 $23 = $20 << 24 >> 24;
 L4 : do if ($22) {
  $24 = $5 + $19 | 0;
  $25 = HEAP8[$24 >> 0] | 0;
  $26 = HEAP32[$10 >> 2] | 0;
  HEAP32[$10 >> 2] = $26 + 1;
  HEAP8[(HEAP32[$13 >> 2] | 0) + $26 >> 0] = $25;
  HEAP8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = 0;
  $33 = $7 + 2 | 0;
  $34 = HEAP8[$24 >> 0] | 0;
  $35 = $34 << 24 >> 24;
  if ((($35 + -48 | 0) >>> 0 < 10 | $34 << 24 >> 24 == 98 | $34 << 24 >> 24 == 120 | $34 << 24 >> 24 == 95) & $34 << 24 >> 24 != 0) {
   $41 = $5 + $33 | 0;
   $42 = HEAP8[$41 >> 0] | 0;
   $43 = HEAP32[$10 >> 2] | 0;
   HEAP32[$10 >> 2] = $43 + 1;
   HEAP8[(HEAP32[$13 >> 2] | 0) + $43 >> 0] = $42;
   HEAP8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = 0;
   $59 = $7 + 3 | 0;
   $c$1 = HEAP8[$41 >> 0] | 0;
  } else {
   $59 = $33;
   $c$1 = $35;
  }
  while (1) {
   if (($c$1 + -48 | 0) >>> 0 < 10 | ($c$1 + -97 | 0) >>> 0 < 6) {
    if (!$c$1) {
     $159 = $59;
     $isFloat$1$off0 = 0;
     break L4;
    }
   } else if (!((($c$1 + -65 | 0) >>> 0 < 6 | ($c$1 | 0) == 95) & ($c$1 | 0) != 0)) {
    $72 = $59;
    $c$2 = $c$1;
    label = 10;
    break L4;
   }
   $58 = $5 + $59 | 0;
   $60 = HEAP8[$58 >> 0] | 0;
   $61 = HEAP32[$10 >> 2] | 0;
   HEAP32[$10 >> 2] = $61 + 1;
   HEAP8[(HEAP32[$13 >> 2] | 0) + $61 >> 0] = $60;
   HEAP8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = 0;
   $59 = $59 + 1 | 0;
   $c$1 = HEAP8[$58 >> 0] | 0;
  }
 } else {
  $72 = $19;
  $c$2 = $23;
  label = 10;
 } while (0);
 L14 : do if ((label | 0) == 10) {
  L16 : do if (($c$2 | 0) == 46) {
   $73 = HEAP8[$5 + $72 >> 0] | 0;
   if ($73 << 24 >> 24 == 46) {
    $159 = $72;
    $isFloat$1$off0 = 0;
    break L14;
   }
   $75 = $73 << 24 >> 24;
   if ((($75 + -48 | 0) >>> 0 < 10 | $73 << 24 >> 24 == 95) & $73 << 24 >> 24 != 0) {
    $80 = $72;
    $85 = $73;
    while (1) {
     $81 = HEAP32[$10 >> 2] | 0;
     HEAP32[$10 >> 2] = $81 + 1;
     HEAP8[(HEAP32[$13 >> 2] | 0) + $81 >> 0] = $85;
     HEAP8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = 0;
     $89 = $80 + 1 | 0;
     $90 = HEAP8[$5 + $80 >> 0] | 0;
     $91 = $90 << 24 >> 24;
     if (!((($91 + -48 | 0) >>> 0 < 10 | $90 << 24 >> 24 == 95) & $90 << 24 >> 24 != 0)) {
      $98 = $89;
      $c$4 = $91;
      $isFloat$0$off0 = 1;
      break L16;
     }
     $80 = $89;
     $85 = HEAP8[$5 + $89 >> 0] | 0;
    }
   } else {
    $98 = $72;
    $c$4 = $75;
    $isFloat$0$off0 = 1;
   }
  } else if (($c$2 | 0) == 101 | ($c$2 | 0) == 69) {
   $98 = $72;
   $c$4 = $c$2;
   $isFloat$0$off0 = 0;
  } else {
   $159 = $72;
   $isFloat$1$off0 = 0;
   break L14;
  } while (0);
  if (($c$4 & -33 | 0) == 69) {
   $97 = $5 + $98 | 0;
   $99 = HEAP8[$97 >> 0] | 0;
   $100 = HEAP32[$10 >> 2] | 0;
   HEAP32[$10 >> 2] = $100 + 1;
   HEAP8[(HEAP32[$13 >> 2] | 0) + $100 >> 0] = $99;
   HEAP8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = 0;
   $107 = $98 + 1 | 0;
   $108 = HEAP8[$97 >> 0] | 0;
   if ($108 << 24 >> 24 == 43 | $108 << 24 >> 24 == 45) {
    $110 = $5 + $107 | 0;
    $111 = HEAP8[$110 >> 0] | 0;
    $112 = HEAP32[$10 >> 2] | 0;
    HEAP32[$10 >> 2] = $112 + 1;
    HEAP8[(HEAP32[$13 >> 2] | 0) + $112 >> 0] = $111;
    HEAP8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = 0;
    $$ph = $98 + 2 | 0;
    $c$5$ph = HEAP8[$110 >> 0] | 0;
   } else {
    $$ph = $107;
    $c$5$ph = $108 << 24 >> 24;
   }
   if ((($c$5$ph + -48 | 0) >>> 0 < 10 | ($c$5$ph | 0) == 95) & ($c$5$ph | 0) != 0) {
    $126 = $$ph;
    while (1) {
     $125 = $5 + $126 | 0;
     $127 = HEAP8[$125 >> 0] | 0;
     $128 = HEAP32[$10 >> 2] | 0;
     HEAP32[$10 >> 2] = $128 + 1;
     HEAP8[(HEAP32[$13 >> 2] | 0) + $128 >> 0] = $127;
     HEAP8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = 0;
     $135 = $126 + 1 | 0;
     $136 = HEAP8[$125 >> 0] | 0;
     if (((($136 << 24 >> 24) + -48 | 0) >>> 0 < 10 | $136 << 24 >> 24 == 95) & $136 << 24 >> 24 != 0) $126 = $135; else {
      $159 = $135;
      $isFloat$1$off0 = 1;
      break;
     }
    }
   } else {
    $159 = $$ph;
    $isFloat$1$off0 = 1;
   }
  } else {
   $159 = $98;
   $isFloat$1$off0 = $isFloat$0$off0;
  }
 } while (0);
 $141 = HEAP32[$13 >> 2] | 0;
 HEAP8[$141 + ((HEAP32[$10 >> 2] | 0) + -1) >> 0] = 0;
 $145 = HEAP32[$2 >> 2] | 0;
 $146 = $ctx + 8 | 0;
 HEAP32[$0 + 0 >> 2] = HEAP32[$146 + 0 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$146 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$146 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$146 + 12 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$146 + 16 >> 2];
 $147 = $145 + 72 | 0;
 $148 = HEAP32[$147 >> 2] | 0;
 HEAP32[$147 >> 2] = $148 + 72;
 HEAP32[$148 >> 2] = 0;
 HEAP32[$148 + 4 >> 2] = 211;
 $151 = $148 + 28 | 0;
 HEAP32[$151 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$151 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$151 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$151 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$151 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 $152 = $148 + 8 | 0;
 $153 = $145 + 48 | 0;
 HEAP32[$152 + 0 >> 2] = HEAP32[$153 + 0 >> 2];
 HEAP32[$152 + 4 >> 2] = HEAP32[$153 + 4 >> 2];
 HEAP32[$152 + 8 >> 2] = HEAP32[$153 + 8 >> 2];
 HEAP32[$152 + 12 >> 2] = HEAP32[$153 + 12 >> 2];
 HEAP32[$152 + 16 >> 2] = HEAP32[$153 + 16 >> 2];
 HEAP32[$148 + 52 >> 2] = $141;
 HEAP32[$148 + 56 >> 2] = 0;
 HEAP32[$148 + 60 >> 2] = 0;
 HEAP32[$148 + 64 >> 2] = 60816;
 if ($isFloat$1$off0) {
  HEAP32[$1 + 0 >> 2] = HEAP32[10975];
  HEAP32[$1 + 4 >> 2] = HEAP32[10976];
  HEAP32[$1 + 8 >> 2] = HEAP32[10977];
  HEAP32[$1 + 12 >> 2] = HEAP32[10978];
  HEAP32[$1 + 16 >> 2] = HEAP32[10979];
  HEAP32[$152 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$152 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$152 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$152 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$152 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
  $158 = $159 + -2 | 0;
  $160 = HEAP32[$ctx >> 2] | 0;
  $161 = $160 + 12 | 0;
  HEAP32[$161 >> 2] = $158;
  STACKTOP = sp;
  return $148 | 0;
 } else {
  HEAP32[$1 + 0 >> 2] = HEAP32[10970];
  HEAP32[$1 + 4 >> 2] = HEAP32[10971];
  HEAP32[$1 + 8 >> 2] = HEAP32[10972];
  HEAP32[$1 + 12 >> 2] = HEAP32[10973];
  HEAP32[$1 + 16 >> 2] = HEAP32[10974];
  HEAP32[$152 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$152 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$152 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$152 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$152 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
  $158 = $159 + -2 | 0;
  $160 = HEAP32[$ctx >> 2] | 0;
  $161 = $160 + 12 | 0;
  HEAP32[$161 >> 2] = $158;
  STACKTOP = sp;
  return $148 | 0;
 }
 return 0;
}

function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc$0$0$val, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc$0$0$val = $__loc$0$0$val | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $72 = 0, $8 = 0, $85 = 0, $9 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp;
 $1 = sp + 16 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 80 | 0;
 $5 = sp + 96 | 0;
 $6 = sp + 108 | 0;
 $7 = sp + 56 | 0;
 $8 = sp + 52 | 0;
 $9 = sp + 28 | 0;
 $10 = sp + 4 | 0;
 $11 = sp + 68 | 0;
 if ($__intl) {
  $12 = __ZNSt3__16locale2id5__getEv(50288) | 0;
  $13 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$__loc$0$0$val + 8 >> 2] | 0, HEAP32[$__loc$0$0$val + 12 >> 2] | 0, $12) | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$14 + 44 >> 2] & 63]($0, $13);
   $17 = HEAP32[$0 >> 2] | 0;
   HEAP8[$__pat >> 0] = $17;
   HEAP8[$__pat + 1 >> 0] = $17 >> 8;
   HEAP8[$__pat + 2 >> 0] = $17 >> 16;
   HEAP8[$__pat + 3 >> 0] = $17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 32 >> 2] & 63]($1, $13);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 0 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
  } else {
   FUNCTION_TABLE_vii[HEAP32[$14 + 40 >> 2] & 63]($2, $13);
   $30 = HEAP32[$2 >> 2] | 0;
   HEAP8[$__pat >> 0] = $30;
   HEAP8[$__pat + 1 >> 0] = $30 >> 8;
   HEAP8[$__pat + 2 >> 0] = $30 >> 16;
   HEAP8[$__pat + 3 >> 0] = $30 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 28 >> 2] & 63]($3, $13);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$3 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 0 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
  }
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 12 >> 2] & 127]($13) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 16 >> 2] & 127]($13) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 20 >> 2] & 63]($4, $13);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 63]($5, $13);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$5 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[$5 + 0 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$5 + 8 >> 2] = 0;
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 127]($13) | 0;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 } else {
  $67 = __ZNSt3__16locale2id5__getEv(50224) | 0;
  $68 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$__loc$0$0$val + 8 >> 2] | 0, HEAP32[$__loc$0$0$val + 12 >> 2] | 0, $67) | 0;
  $69 = HEAP32[$68 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$69 + 44 >> 2] & 63]($6, $68);
   $72 = HEAP32[$6 >> 2] | 0;
   HEAP8[$__pat >> 0] = $72;
   HEAP8[$__pat + 1 >> 0] = $72 >> 8;
   HEAP8[$__pat + 2 >> 0] = $72 >> 16;
   HEAP8[$__pat + 3 >> 0] = $72 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$68 >> 2] | 0) + 32 >> 2] & 63]($7, $68);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$7 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 0 >> 2] = 0;
   HEAP32[$7 + 4 >> 2] = 0;
   HEAP32[$7 + 8 >> 2] = 0;
  } else {
   FUNCTION_TABLE_vii[HEAP32[$69 + 40 >> 2] & 63]($8, $68);
   $85 = HEAP32[$8 >> 2] | 0;
   HEAP8[$__pat >> 0] = $85;
   HEAP8[$__pat + 1 >> 0] = $85 >> 8;
   HEAP8[$__pat + 2 >> 0] = $85 >> 16;
   HEAP8[$__pat + 3 >> 0] = $85 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$68 >> 2] | 0) + 28 >> 2] & 63]($9, $68);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$9 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$9 + 0 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   HEAP32[$9 + 8 >> 2] = 0;
  }
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 12 >> 2] & 127]($68) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 16 >> 2] & 127]($68) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$68 >> 2] | 0) + 20 >> 2] & 63]($10, $68);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$10 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  HEAP32[$10 + 0 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$10 + 8 >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$68 >> 2] | 0) + 24 >> 2] & 63]($11, $68);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$11 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  HEAP32[$11 + 0 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  HEAP32[$11 + 8 >> 2] = 0;
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 36 >> 2] & 127]($68) | 0;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
}

function __ZN7Scanner17scanWordDelimiterEP10LexContext($this, $ctx) {
 $this = $this | 0;
 $ctx = $ctx | 0;
 var $$lcssa$i = 0, $$lcssa$i9 = 0, $$pre$phiZ2D = 0, $$size$i = 0, $$size$i5 = 0, $0 = 0, $1 = 0, $100 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $121 = 0, $124 = 0, $126 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $46 = 0, $5 = 0, $59 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $75 = 0, $8 = 0, $81 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $93 = 0, $94 = 0, $95 = 0, $__p$0$i = 0, $__p$0$i3 = 0, $ret$0 = 0, $ret$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp;
 $1 = sp + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = $ctx + 4 | 0;
 $4 = $ctx + 36 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!(HEAP8[$5 >> 0] | 0)) {
  $ret$1 = 0;
  STACKTOP = sp;
  return $ret$1 | 0;
 }
 $8 = HEAP32[$3 >> 2] | 0;
 $12 = HEAP32[$8 + 72 >> 2] | 0;
 do if (__ZN7Scanner14isHereDocumentEP10LexContextP5Token($ctx, (HEAP32[$8 + 68 >> 2] | 0) == ($12 | 0) ? 0 : $12 + -72 | 0) | 0) {
  $16 = HEAP32[$3 >> 2] | 0;
  $17 = $ctx + 8 | 0;
  HEAP32[$0 + 0 >> 2] = HEAP32[$17 + 0 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$17 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$17 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$17 + 16 >> 2];
  $18 = $16 + 72 | 0;
  $19 = HEAP32[$18 >> 2] | 0;
  HEAP32[$18 >> 2] = $19 + 72;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$19 + 4 >> 2] = 211;
  $22 = $19 + 28 | 0;
  HEAP32[$22 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  HEAP32[$22 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$22 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$22 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$22 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
  $23 = $19 + 8 | 0;
  $24 = $16 + 48 | 0;
  HEAP32[$23 + 0 >> 2] = HEAP32[$24 + 0 >> 2];
  HEAP32[$23 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
  HEAP32[$23 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
  HEAP32[$23 + 12 >> 2] = HEAP32[$24 + 12 >> 2];
  HEAP32[$23 + 16 >> 2] = HEAP32[$24 + 16 >> 2];
  HEAP32[$19 + 52 >> 2] = $5;
  HEAP32[$19 + 56 >> 2] = 0;
  HEAP32[$19 + 60 >> 2] = 0;
  HEAP32[$19 + 64 >> 2] = 60816;
  $29 = $this + 32 | 0;
  $30 = _strlen($5 | 0) | 0;
  if ($30 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($30 >>> 0 < 11) {
   HEAP8[$1 >> 0] = $30 << 1;
   $__p$0$i = $1 + 1 | 0;
  } else {
   $37 = $30 + 16 & -16;
   $$size$i = ($37 | 0) == 0 ? 1 : $37;
   $39 = _malloc($$size$i) | 0;
   L11 : do if (!$39) {
    while (1) {
     $41 = HEAP32[15470] | 0;
     HEAP32[15470] = $41 + 0;
     if (!$41) break;
     FUNCTION_TABLE_v[$41 & 3]();
     $44 = _malloc($$size$i) | 0;
     if ($44) {
      $$lcssa$i = $44;
      break L11;
     }
    }
    $46 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$46 >> 2] = 61776;
    ___cxa_throw($46 | 0, 61824, 94);
   } else $$lcssa$i = $39; while (0);
   HEAP32[$1 + 8 >> 2] = $$lcssa$i;
   HEAP32[$1 >> 2] = $37 | 1;
   HEAP32[$1 + 4 >> 2] = $30;
   $__p$0$i = $$lcssa$i;
  }
  _memcpy($__p$0$i | 0, $5 | 0, $30 | 0) | 0;
  HEAP8[$__p$0$i + $30 >> 0] = 0;
  if (!(HEAP8[$29 >> 0] & 1)) {
   HEAP8[$29 + 1 >> 0] = 0;
   HEAP8[$29 >> 0] = 0;
  } else {
   HEAP8[HEAP32[$this + 40 >> 2] >> 0] = 0;
   HEAP32[$this + 36 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($29);
  HEAP32[$29 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$29 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$29 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 0 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$this + 28 >> 2] = $19;
  _memmove($23 | 0, 44060, 20) | 0;
  $ret$0 = $19;
 } else {
  $59 = _strlen($5 | 0) | 0;
  if ($59 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($59 >>> 0 < 11) {
   HEAP8[$2 >> 0] = $59 << 1;
   $$pre$phiZ2D = $2;
   $__p$0$i3 = $2 + 1 | 0;
  } else {
   $66 = $59 + 16 & -16;
   $$size$i5 = ($66 | 0) == 0 ? 1 : $66;
   $68 = _malloc($$size$i5) | 0;
   L30 : do if (!$68) {
    while (1) {
     $70 = HEAP32[15470] | 0;
     HEAP32[15470] = $70 + 0;
     if (!$70) break;
     FUNCTION_TABLE_v[$70 & 3]();
     $73 = _malloc($$size$i5) | 0;
     if ($73) {
      $$lcssa$i9 = $73;
      break L30;
     }
    }
    $75 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$75 >> 2] = 61776;
    ___cxa_throw($75 | 0, 61824, 94);
   } else $$lcssa$i9 = $68; while (0);
   HEAP32[$2 + 8 >> 2] = $$lcssa$i9;
   HEAP32[$2 >> 2] = $66 | 1;
   HEAP32[$2 + 4 >> 2] = $59;
   $$pre$phiZ2D = $2;
   $__p$0$i3 = $$lcssa$i9;
  }
  _memcpy($__p$0$i3 | 0, $5 | 0, $59 | 0) | 0;
  HEAP8[$__p$0$i3 + $59 >> 0] = 0;
  $81 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($2, 35952) | 0) == 0;
  if (HEAP8[$$pre$phiZ2D >> 0] & 1) _free(HEAP32[$2 + 8 >> 2] | 0);
  if ($81) {
   $87 = HEAP32[$3 >> 2] | 0;
   $88 = $ctx + 8 | 0;
   HEAP32[$0 + 0 >> 2] = HEAP32[$88 + 0 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$88 + 4 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$88 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = HEAP32[$88 + 12 >> 2];
   HEAP32[$0 + 16 >> 2] = HEAP32[$88 + 16 >> 2];
   $89 = $87 + 72 | 0;
   $90 = HEAP32[$89 >> 2] | 0;
   HEAP32[$89 >> 2] = $90 + 72;
   HEAP32[$90 >> 2] = 0;
   HEAP32[$90 + 4 >> 2] = 211;
   $93 = $90 + 28 | 0;
   HEAP32[$93 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
   HEAP32[$93 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   HEAP32[$93 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$93 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
   HEAP32[$93 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
   $94 = $90 + 8 | 0;
   $95 = $87 + 48 | 0;
   HEAP32[$94 + 0 >> 2] = HEAP32[$95 + 0 >> 2];
   HEAP32[$94 + 4 >> 2] = HEAP32[$95 + 4 >> 2];
   HEAP32[$94 + 8 >> 2] = HEAP32[$95 + 8 >> 2];
   HEAP32[$94 + 12 >> 2] = HEAP32[$95 + 12 >> 2];
   HEAP32[$94 + 16 >> 2] = HEAP32[$95 + 16 >> 2];
   HEAP32[$90 + 52 >> 2] = $5;
   HEAP32[$90 + 56 >> 2] = 0;
   HEAP32[$90 + 60 >> 2] = 0;
   HEAP32[$90 + 64 >> 2] = 60816;
   $100 = $this + 4 | 0;
   if (HEAP32[$100 >> 2] | 0) {
    $ret$0 = $90;
    break;
   }
   _memmove($94 | 0, 44140, 20) | 0;
   HEAP32[$100 >> 2] = $90;
   $ret$0 = $90;
   break;
  }
  if ((HEAP8[$5 >> 0] | 0) == 10) if (!(HEAP8[$5 + 1 >> 0] | 0)) {
   $ret$0 = 0;
   break;
  }
  $108 = HEAP32[$3 >> 2] | 0;
  $109 = $ctx + 8 | 0;
  HEAP32[$0 + 0 >> 2] = HEAP32[$109 + 0 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$109 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$109 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$109 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$109 + 16 >> 2];
  $110 = $108 + 72 | 0;
  $111 = HEAP32[$110 >> 2] | 0;
  HEAP32[$110 >> 2] = $111 + 72;
  HEAP32[$111 >> 2] = 0;
  HEAP32[$111 + 4 >> 2] = 211;
  $114 = $111 + 28 | 0;
  HEAP32[$114 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  HEAP32[$114 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$114 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$114 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$114 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
  $115 = $111 + 8 | 0;
  $116 = $108 + 48 | 0;
  HEAP32[$115 + 0 >> 2] = HEAP32[$116 + 0 >> 2];
  HEAP32[$115 + 4 >> 2] = HEAP32[$116 + 4 >> 2];
  HEAP32[$115 + 8 >> 2] = HEAP32[$116 + 8 >> 2];
  HEAP32[$115 + 12 >> 2] = HEAP32[$116 + 12 >> 2];
  HEAP32[$115 + 16 >> 2] = HEAP32[$116 + 16 >> 2];
  HEAP32[$111 + 52 >> 2] = $5;
  HEAP32[$111 + 56 >> 2] = 0;
  HEAP32[$111 + 60 >> 2] = 0;
  HEAP32[$111 + 64 >> 2] = 60816;
  $ret$0 = $111;
 } while (0);
 $121 = $ctx + 40 | 0;
 $124 = (HEAP32[$4 >> 2] | 0) + (HEAP32[$121 >> 2] | 0) | 0;
 HEAP32[$4 >> 2] = $124;
 HEAP8[$124 >> 0] = 0;
 HEAP32[$121 >> 2] = 0;
 $126 = (HEAP32[$4 >> 2] | 0) + 1 | 0;
 HEAP32[$4 >> 2] = $126;
 HEAP8[$126 >> 0] = 0;
 $ret$1 = $ret$0;
 STACKTOP = sp;
 return $ret$1 | 0;
}

function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i7 = 0, $0 = 0, $1 = 0, $106 = 0, $113 = 0, $114 = 0, $115 = 0, $122 = 0, $124 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $132$phi = 0, $135 = 0, $140 = 0, $141 = 0, $142 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $159 = 0, $17 = 0, $170 = 0, $2 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $60 = 0, $69 = 0, $71 = 0, $73 = 0, $75 = 0, $77 = 0, $78 = 0, $78$phi = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, $__dc$026 = 0, $__dc$1 = 0, $__dg$027 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$225 = 0, $__nf$3 = 0, $__ns$035 = 0, $__ns$130 = 0, $__ns$2 = 0, $__p$028 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = HEAP32[$__loc >> 2] | 0;
 $1 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $2 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0, $1) | 0;
 $3 = HEAP32[$__loc >> 2] | 0;
 $4 = __ZNSt3__16locale2id5__getEv(50992) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$3 + 8 >> 2] | 0, HEAP32[$3 + 12 >> 2] | 0, $4) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $5);
 HEAP32[$__oe >> 2] = $__ob;
 $9 = HEAP8[$__nb >> 0] | 0;
 if ($9 << 24 >> 24 == 43 | $9 << 24 >> 24 == 45) {
  $13 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] & 31]($2, $9) | 0;
  $15 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $15 + 4;
  HEAP32[$15 >> 2] = $13;
  $__nf$0 = $__nb + 1 | 0;
 } else $__nf$0 = $__nb;
 $17 = $__ne;
 L4 : do if (($17 - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
  $24 = $__nf$0 + 1 | 0;
  $25 = HEAP8[$24 >> 0] | 0;
  if ($25 << 24 >> 24 == 88 | $25 << 24 >> 24 == 120) {
   $29 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] & 31]($2, 48) | 0;
   $30 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $30 + 4;
   HEAP32[$30 >> 2] = $29;
   $32 = $__nf$0 + 2 | 0;
   $37 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] & 31]($2, HEAP8[$24 >> 0] | 0) | 0;
   $38 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $38 + 4;
   HEAP32[$38 >> 2] = $37;
   if ($32 >>> 0 < $__ne >>> 0) {
    $__ns$035 = $32;
    while (1) {
     $43 = HEAP8[$__ns$035 >> 0] | 0;
     __ZNSt3__16__clocEv() | 0;
     $44 = $43 << 24 >> 24;
     if (($44 + -48 | 0) >>> 0 >= 10) if ((($44 | 32) + -97 | 0) >>> 0 >= 6) {
      $__nf$1 = $32;
      $__ns$2 = $__ns$035;
      break L4;
     }
     $41 = $__ns$035 + 1 | 0;
     if ($41 >>> 0 < $__ne >>> 0) $__ns$035 = $41; else {
      $__nf$1 = $32;
      $__ns$2 = $41;
      break;
     }
    }
   } else {
    $__nf$1 = $32;
    $__ns$2 = $32;
   }
  } else label = 4;
 } else label = 4; else label = 4; while (0);
 L13 : do if ((label | 0) == 4) if ($__nf$0 >>> 0 < $__ne >>> 0) {
  $__ns$130 = $__nf$0;
  while (1) {
   $50 = HEAP8[$__ns$130 >> 0] | 0;
   __ZNSt3__16__clocEv() | 0;
   $49 = $__ns$130 + 1 | 0;
   if ((($50 << 24 >> 24) + -48 | 0) >>> 0 >= 10) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$130;
    break L13;
   }
   if ($49 >>> 0 < $__ne >>> 0) $__ns$130 = $49; else {
    $__nf$1 = $__nf$0;
    $__ns$2 = $49;
    break;
   }
  }
 } else {
  $__nf$1 = $__nf$0;
  $__ns$2 = $__nf$0;
 } while (0);
 $52 = HEAP8[$__grouping >> 0] | 0;
 if (!($52 & 1)) $60 = ($52 & 255) >>> 1; else $60 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!$60) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] & 7]($2, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  $69 = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1 << 2) | 0;
  HEAP32[$__oe >> 2] = $69;
  $170 = $69;
 } else {
  if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $71 = $__ns$2 + -1 | 0;
   if ($71 >>> 0 > $__nf$1 >>> 0) {
    $$012$i$i = $__nf$1;
    $75 = $71;
    $78 = $__ns$2;
    while (1) {
     $73 = HEAP8[$$012$i$i >> 0] | 0;
     HEAP8[$$012$i$i >> 0] = HEAP8[$75 >> 0] | 0;
     HEAP8[$75 >> 0] = $73;
     $$012$i$i = $$012$i$i + 1 | 0;
     $77 = $78 + -2 | 0;
     if ($$012$i$i >>> 0 >= $77 >>> 0) break; else {
      $78$phi = $75;
      $75 = $77;
      $78 = $78$phi;
     }
    }
   }
  }
  $83 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 127]($5) | 0;
  if ($__nf$1 >>> 0 < $__ns$2 >>> 0) {
   $85 = $__grouping + 1 | 0;
   $86 = $__grouping + 4 | 0;
   $87 = $__grouping + 8 | 0;
   $__dc$026 = 0;
   $__dg$027 = 0;
   $__p$028 = $__nf$1;
   while (1) {
    $93 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $85 : HEAP32[$87 >> 2] | 0) + $__dg$027 >> 0] | 0;
    if ($93 << 24 >> 24 > 0 & ($__dc$026 | 0) == ($93 << 24 >> 24 | 0)) {
     $97 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $97 + 4;
     HEAP32[$97 >> 2] = $83;
     $99 = HEAP8[$__grouping >> 0] | 0;
     if (!($99 & 1)) $106 = ($99 & 255) >>> 1; else $106 = HEAP32[$86 >> 2] | 0;
     $__dc$1 = 0;
     $__dg$1 = ($__dg$027 >>> 0 < ($106 + -1 | 0) >>> 0 & 1) + $__dg$027 | 0;
    } else {
     $__dc$1 = $__dc$026;
     $__dg$1 = $__dg$027;
    }
    $113 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] & 31]($2, HEAP8[$__p$028 >> 0] | 0) | 0;
    $114 = HEAP32[$__oe >> 2] | 0;
    $115 = $114 + 4 | 0;
    HEAP32[$__oe >> 2] = $115;
    HEAP32[$114 >> 2] = $113;
    $__p$028 = $__p$028 + 1 | 0;
    if ($__p$028 >>> 0 >= $__ns$2 >>> 0) {
     $124 = $115;
     break;
    } else {
     $__dc$026 = $__dc$1 + 1 | 0;
     $__dg$027 = $__dg$1;
    }
   }
  } else $124 = HEAP32[$__oe >> 2] | 0;
  $122 = $__ob + ($__nf$1 - $__nb << 2) | 0;
  if (($122 | 0) == ($124 | 0)) $170 = $124; else {
   $125 = $124 + -4 | 0;
   if ($125 >>> 0 > $122 >>> 0) {
    $$012$i$i7 = $122;
    $129 = $125;
    $132 = $124;
    while (1) {
     $127 = HEAP32[$$012$i$i7 >> 2] | 0;
     HEAP32[$$012$i$i7 >> 2] = HEAP32[$129 >> 2];
     HEAP32[$129 >> 2] = $127;
     $$012$i$i7 = $$012$i$i7 + 4 | 0;
     $131 = $132 + -8 | 0;
     if ($$012$i$i7 >>> 0 >= $131 >>> 0) {
      $170 = $124;
      break;
     } else {
      $132$phi = $129;
      $129 = $131;
      $132 = $132$phi;
     }
    }
   } else $170 = $124;
  }
 }
 L48 : do if ($__ns$2 >>> 0 < $__ne >>> 0) {
  $__nf$225 = $__ns$2;
  while (1) {
   $135 = HEAP8[$__nf$225 >> 0] | 0;
   if ($135 << 24 >> 24 == 46) break;
   $147 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] & 31]($2, $135) | 0;
   $148 = HEAP32[$__oe >> 2] | 0;
   $149 = $148 + 4 | 0;
   HEAP32[$__oe >> 2] = $149;
   HEAP32[$148 >> 2] = $147;
   $150 = $__nf$225 + 1 | 0;
   if ($150 >>> 0 < $__ne >>> 0) $__nf$225 = $150; else {
    $155 = $149;
    $__nf$3 = $150;
    break L48;
   }
  }
  $140 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 127]($5) | 0;
  $141 = HEAP32[$__oe >> 2] | 0;
  $142 = $141 + 4 | 0;
  HEAP32[$__oe >> 2] = $142;
  HEAP32[$141 >> 2] = $140;
  $155 = $142;
  $__nf$3 = $__nf$225 + 1 | 0;
 } else {
  $155 = $170;
  $__nf$3 = $__ns$2;
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] & 7]($2, $__nf$3, $__ne, $155) | 0;
 $159 = (HEAP32[$__oe >> 2] | 0) + ($17 - $__nf$3 << 2) | 0;
 HEAP32[$__oe >> 2] = $159;
 if (($__np | 0) == ($__ne | 0)) $storemerge = $159; else $storemerge = $__ob + ($__np - $__nb << 2) | 0;
 HEAP32[$__op >> 2] = $storemerge;
 if (!(HEAP8[$__grouping >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN43EmscriptenBindingInitializer_compiler_lexerC2Ev() {
 var $$index1 = 0, $$index11 = 0, $$index13 = 0, $$index3 = 0, $$index5 = 0, $$index7 = 0, $$index9 = 0, $$lcssa$i = 0, $$lcssa$i$i = 0, $$lcssa$i14 = 0, $$lcssa$i14$i = 0, $$lcssa$i19$i = 0, $$lcssa$i4 = 0, $$lcssa$i4$i = 0, $$lcssa$i9 = 0, $$lcssa$i9$i = 0, $0 = 0, $10 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $34 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_class(552, 920, 1016, 0, 984, 64, 864, 0, 864, 0, 8, 976, 112);
 __embind_register_class_constructor(552, 1, 968, 960, 65, 1);
 $0 = _malloc(8) | 0;
 L1 : do if (!$0) {
  while (1) {
   $2 = HEAP32[15470] | 0;
   HEAP32[15470] = $2 + 0;
   if (!$2) break;
   FUNCTION_TABLE_v[$2 & 3]();
   $5 = _malloc(8) | 0;
   if ($5) {
    $$lcssa$i = $5;
    break L1;
   }
  }
  $7 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$7 >> 2] = 61776;
  ___cxa_throw($7 | 0, 61824, 94);
 } else $$lcssa$i = $0; while (0);
 HEAP8[$$lcssa$i >> 0] = 39;
 HEAP8[$$lcssa$i + 1 >> 0] = 0;
 HEAP8[$$lcssa$i + 2 >> 0] = 0;
 HEAP8[$$lcssa$i + 3 >> 0] = 0;
 $$index1 = $$lcssa$i + 4 | 0;
 HEAP8[$$index1 >> 0] = 0;
 HEAP8[$$index1 + 1 >> 0] = 0;
 HEAP8[$$index1 + 2 >> 0] = 0;
 HEAP8[$$index1 + 3 >> 0] = 0;
 __embind_register_class_function(552, 16, 3, 944, 936, 3, $$lcssa$i | 0, 0);
 $8 = _malloc(8) | 0;
 L7 : do if (!$8) {
  while (1) {
   $10 = HEAP32[15470] | 0;
   HEAP32[15470] = $10 + 0;
   if (!$10) break;
   FUNCTION_TABLE_v[$10 & 3]();
   $13 = _malloc(8) | 0;
   if ($13) {
    $$lcssa$i4 = $13;
    break L7;
   }
  }
  $15 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$15 >> 2] = 61776;
  ___cxa_throw($15 | 0, 61824, 94);
 } else $$lcssa$i4 = $8; while (0);
 HEAP8[$$lcssa$i4 >> 0] = 66;
 HEAP8[$$lcssa$i4 + 1 >> 0] = 0;
 HEAP8[$$lcssa$i4 + 2 >> 0] = 0;
 HEAP8[$$lcssa$i4 + 3 >> 0] = 0;
 $$index3 = $$lcssa$i4 + 4 | 0;
 HEAP8[$$index3 >> 0] = 0;
 HEAP8[$$index3 + 1 >> 0] = 0;
 HEAP8[$$index3 + 2 >> 0] = 0;
 HEAP8[$$index3 + 3 >> 0] = 0;
 __embind_register_class_function(552, 24, 2, 888, 880, 15, $$lcssa$i4 | 0, 0);
 $16 = _malloc(8) | 0;
 L13 : do if (!$16) {
  while (1) {
   $18 = HEAP32[15470] | 0;
   HEAP32[15470] = $18 + 0;
   if (!$18) break;
   FUNCTION_TABLE_v[$18 & 3]();
   $21 = _malloc(8) | 0;
   if ($21) {
    $$lcssa$i9 = $21;
    break L13;
   }
  }
  $23 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$23 >> 2] = 61776;
  ___cxa_throw($23 | 0, 61824, 94);
 } else $$lcssa$i9 = $16; while (0);
 HEAP8[$$lcssa$i9 >> 0] = 40;
 HEAP8[$$lcssa$i9 + 1 >> 0] = 0;
 HEAP8[$$lcssa$i9 + 2 >> 0] = 0;
 HEAP8[$$lcssa$i9 + 3 >> 0] = 0;
 $$index5 = $$lcssa$i9 + 4 | 0;
 HEAP8[$$index5 >> 0] = 0;
 HEAP8[$$index5 + 1 >> 0] = 0;
 HEAP8[$$index5 + 2 >> 0] = 0;
 HEAP8[$$index5 + 3 >> 0] = 0;
 __embind_register_class_function(552, 32, 3, 944, 936, 3, $$lcssa$i9 | 0, 0);
 $24 = _malloc(8) | 0;
 L19 : do if (!$24) {
  while (1) {
   $26 = HEAP32[15470] | 0;
   HEAP32[15470] = $26 + 0;
   if (!$26) break;
   FUNCTION_TABLE_v[$26 & 3]();
   $29 = _malloc(8) | 0;
   if ($29) {
    $$lcssa$i14 = $29;
    break L19;
   }
  }
  $31 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$31 >> 2] = 61776;
  ___cxa_throw($31 | 0, 61824, 94);
 } else $$lcssa$i14 = $24; while (0);
 HEAP8[$$lcssa$i14 >> 0] = 67;
 HEAP8[$$lcssa$i14 + 1 >> 0] = 0;
 HEAP8[$$lcssa$i14 + 2 >> 0] = 0;
 HEAP8[$$lcssa$i14 + 3 >> 0] = 0;
 $$index7 = $$lcssa$i14 + 4 | 0;
 HEAP8[$$index7 >> 0] = 0;
 HEAP8[$$index7 + 1 >> 0] = 0;
 HEAP8[$$index7 + 2 >> 0] = 0;
 HEAP8[$$index7 + 3 >> 0] = 0;
 __embind_register_class_function(552, 40, 2, 888, 880, 15, $$lcssa$i14 | 0, 0);
 __embind_register_class(296, 800, 696, 0, 872, 68, 864, 0, 864, 0, 48, 856, 113);
 __embind_register_class_constructor(296, 1, 848, 840, 69, 2);
 $32 = _malloc(8) | 0;
 L25 : do if (!$32) {
  while (1) {
   $34 = HEAP32[15470] | 0;
   HEAP32[15470] = $34 + 0;
   if (!$34) break;
   FUNCTION_TABLE_v[$34 & 3]();
   $37 = _malloc(8) | 0;
   if ($37) {
    $$lcssa$i$i = $37;
    break L25;
   }
  }
  $39 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$39 >> 2] = 61776;
  ___cxa_throw($39 | 0, 61824, 94);
 } else $$lcssa$i$i = $32; while (0);
 HEAP8[$$lcssa$i$i >> 0] = 41;
 HEAP8[$$lcssa$i$i + 1 >> 0] = 0;
 HEAP8[$$lcssa$i$i + 2 >> 0] = 0;
 HEAP8[$$lcssa$i$i + 3 >> 0] = 0;
 $$index9 = $$lcssa$i$i + 4 | 0;
 HEAP8[$$index9 >> 0] = 0;
 HEAP8[$$index9 + 1 >> 0] = 0;
 HEAP8[$$index9 + 2 >> 0] = 0;
 HEAP8[$$index9 + 3 >> 0] = 0;
 __embind_register_class_function(296, 456, 3, 824, 816, 4, $$lcssa$i$i | 0, 0);
 $40 = _malloc(8) | 0;
 L31 : do if (!$40) {
  while (1) {
   $42 = HEAP32[15470] | 0;
   HEAP32[15470] = $42 + 0;
   if (!$42) break;
   FUNCTION_TABLE_v[$42 & 3]();
   $45 = _malloc(8) | 0;
   if ($45) {
    $$lcssa$i4$i = $45;
    break L31;
   }
  }
  $47 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$47 >> 2] = 61776;
  ___cxa_throw($47 | 0, 61824, 94);
 } else $$lcssa$i4$i = $40; while (0);
 HEAP8[$$lcssa$i4$i >> 0] = 5;
 HEAP8[$$lcssa$i4$i + 1 >> 0] = 0;
 HEAP8[$$lcssa$i4$i + 2 >> 0] = 0;
 HEAP8[$$lcssa$i4$i + 3 >> 0] = 0;
 $$index11 = $$lcssa$i4$i + 4 | 0;
 HEAP8[$$index11 >> 0] = 0;
 HEAP8[$$index11 + 1 >> 0] = 0;
 HEAP8[$$index11 + 2 >> 0] = 0;
 HEAP8[$$index11 + 3 >> 0] = 0;
 __embind_register_class_function(296, 472, 4, 720, 712, 8, $$lcssa$i4$i | 0, 0);
 $48 = _malloc(8) | 0;
 L37 : do if (!$48) {
  while (1) {
   $50 = HEAP32[15470] | 0;
   HEAP32[15470] = $50 + 0;
   if (!$50) break;
   FUNCTION_TABLE_v[$50 & 3]();
   $53 = _malloc(8) | 0;
   if ($53) {
    $$lcssa$i9$i = $53;
    break L37;
   }
  }
  $55 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$55 >> 2] = 61776;
  ___cxa_throw($55 | 0, 61824, 94);
 } else $$lcssa$i9$i = $48; while (0);
 HEAP8[$$lcssa$i9$i >> 0] = 70;
 HEAP8[$$lcssa$i9$i + 1 >> 0] = 0;
 HEAP8[$$lcssa$i9$i + 2 >> 0] = 0;
 HEAP8[$$lcssa$i9$i + 3 >> 0] = 0;
 $$index13 = $$lcssa$i9$i + 4 | 0;
 HEAP8[$$index13 >> 0] = 0;
 HEAP8[$$index13 + 1 >> 0] = 0;
 HEAP8[$$index13 + 2 >> 0] = 0;
 HEAP8[$$index13 + 3 >> 0] = 0;
 __embind_register_class_function(296, 480, 2, 624, 616, 16, $$lcssa$i9$i | 0, 0);
 $56 = _malloc(4) | 0;
 L43 : do if (!$56) {
  while (1) {
   $58 = HEAP32[15470] | 0;
   HEAP32[15470] = $58 + 0;
   if (!$58) break;
   FUNCTION_TABLE_v[$58 & 3]();
   $61 = _malloc(4) | 0;
   if ($61) {
    $$lcssa$i14$i = $61;
    break L43;
   }
  }
  $63 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$63 >> 2] = 61776;
  ___cxa_throw($63 | 0, 61824, 94);
 } else $$lcssa$i14$i = $56; while (0);
 HEAP32[$$lcssa$i14$i >> 2] = 6;
 __embind_register_class_function(296, 488, 3, 568, 560, 26, $$lcssa$i14$i | 0, 0);
 $64 = _malloc(4) | 0;
 if ($64) {
  $$lcssa$i19$i = $64;
  HEAP32[$$lcssa$i19$i >> 2] = 27;
  __embind_register_class_function(296, 496, 4, 512, 504, 6, $$lcssa$i19$i | 0, 0);
  __embind_register_function(56, 2, 80, 72, 17, 42);
  STACKTOP = sp;
  return;
 }
 while (1) {
  $66 = HEAP32[15470] | 0;
  HEAP32[15470] = $66 + 0;
  if (!$66) {
   label = 36;
   break;
  }
  FUNCTION_TABLE_v[$66 & 3]();
  $69 = _malloc(4) | 0;
  if ($69) {
   $$lcssa$i19$i = $69;
   label = 37;
   break;
  }
 }
 if ((label | 0) == 36) {
  $71 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$71 >> 2] = 61776;
  ___cxa_throw($71 | 0, 61824, 94);
 } else if ((label | 0) == 37) {
  HEAP32[$$lcssa$i19$i >> 2] = 27;
  __embind_register_class_function(296, 496, 4, 512, 504, 6, $$lcssa$i19$i | 0, 0);
  __embind_register_function(56, 2, 80, 72, 17, 42);
  STACKTOP = sp;
  return;
 }
}

function __ZN7Scanner17isRegexStartDelimEP10LexContextRKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES9_NS2_4lessIS9_EENS7_INS2_4pairIKS9_S9_EEEEEE($ctx, $map) {
 $ctx = $ctx | 0;
 $map = $map | 0;
 var $$$i1 = 0, $$$i1$i = 0, $$0 = 0, $$0$ph$lcssa$i$i = 0, $$0$ph7$i$i = 0, $$01$ph6$i$in$i = 0, $$014$i$in$i = 0, $$03$i$i = 0, $$03$i5$i = 0, $$1 = 0, $$11$i$i = 0, $$lcssa$i = 0, $$lcssa$i10 = 0, $$size$i = 0, $$size$i6 = 0, $$sroa$0$0 = 0, $1 = 0, $101 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $110 = 0, $117 = 0, $119 = 0, $121 = 0, $124 = 0, $126 = 0, $13 = 0, $136 = 0, $142 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $37 = 0, $38 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $68 = 0, $71 = 0, $72 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $9 = 0, $__p$0$i = 0, $__p$0$i3 = 0, $before_prev_data = 0, $l$04$i$i = 0, $l$04$i4$i = 0, $prev_data = 0, $r$05$i$i = 0, $r$05$i3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $prev_data = sp + 12 | 0;
 $before_prev_data = sp;
 $1 = HEAP32[$ctx + 36 >> 2] | 0;
 $2 = _strlen($1 | 0) | 0;
 if ($2 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($2 >>> 0 < 11) {
  HEAP8[$prev_data >> 0] = $2 << 1;
  $__p$0$i = $prev_data + 1 | 0;
 } else {
  $9 = $2 + 16 & -16;
  $$size$i = ($9 | 0) == 0 ? 1 : $9;
  $11 = _malloc($$size$i) | 0;
  L7 : do if (!$11) {
   while (1) {
    $13 = HEAP32[15470] | 0;
    HEAP32[15470] = $13 + 0;
    if (!$13) break;
    FUNCTION_TABLE_v[$13 & 3]();
    $16 = _malloc($$size$i) | 0;
    if ($16) {
     $$lcssa$i = $16;
     break L7;
    }
   }
   $18 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$18 >> 2] = 61776;
   ___cxa_throw($18 | 0, 61824, 94);
  } else $$lcssa$i = $11; while (0);
  HEAP32[$prev_data + 8 >> 2] = $$lcssa$i;
  HEAP32[$prev_data >> 2] = $9 | 1;
  HEAP32[$prev_data + 4 >> 2] = $2;
  $__p$0$i = $$lcssa$i;
 }
 _memcpy($__p$0$i | 0, $1 | 0, $2 | 0) | 0;
 HEAP8[$__p$0$i + $2 >> 0] = 0;
 $24 = HEAP32[$map + 4 >> 2] | 0;
 $25 = $map + 4 | 0;
 L14 : do if (!$24) $$1 = 0; else {
  $27 = HEAP8[$prev_data >> 0] | 0;
  $29 = ($27 & 1) == 0;
  $$$i1$i = $29 ? ($27 & 255) >>> 1 : HEAP32[$prev_data + 4 >> 2] | 0;
  $$11$i$i = $29 ? $prev_data + 1 | 0 : HEAP32[$prev_data + 8 >> 2] | 0;
  $$0$ph7$i$i = $25;
  $$01$ph6$i$in$i = $24;
  L16 : while (1) {
   $$014$i$in$i = $$01$ph6$i$in$i;
   L18 : while (1) {
    $37 = $$014$i$in$i + 16 | 0;
    $38 = HEAP8[$37 >> 0] | 0;
    if (!($38 & 1)) {
     $160 = $37 + 1 | 0;
     $49 = ($38 & 255) >>> 1;
    } else {
     $160 = HEAP32[$$014$i$in$i + 24 >> 2] | 0;
     $49 = HEAP32[$$014$i$in$i + 20 >> 2] | 0;
    }
    $50 = $$$i1$i >>> 0 < $49 >>> 0 ? $$$i1$i : $49;
    L24 : do if (!$50) label = 20; else {
     $$03$i$i = $50;
     $l$04$i$i = $160;
     $r$05$i$i = $$11$i$i;
     while (1) {
      $52 = HEAP8[$l$04$i$i >> 0] | 0;
      $53 = HEAP8[$r$05$i$i >> 0] | 0;
      if ($52 << 24 >> 24 != $53 << 24 >> 24) break;
      $$03$i$i = $$03$i$i + -1 | 0;
      if (!$$03$i$i) {
       label = 20;
       break L24;
      } else {
       $l$04$i$i = $l$04$i$i + 1 | 0;
       $r$05$i$i = $r$05$i$i + 1 | 0;
      }
     }
     if ($52 << 24 >> 24 == $53 << 24 >> 24) label = 20; else if ((($52 & 255) - ($53 & 255) | 0) >= 0) break L18;
    } while (0);
    if ((label | 0) == 20) {
     label = 0;
     if ($49 >>> 0 >= $$$i1$i >>> 0) break;
    }
    $68 = HEAP32[$$014$i$in$i + 4 >> 2] | 0;
    if (!$68) {
     $$0$ph$lcssa$i$i = $$0$ph7$i$i;
     break L16;
    } else $$014$i$in$i = $68;
   }
   $$01$ph6$i$in$i = HEAP32[$$014$i$in$i >> 2] | 0;
   if (!$$01$ph6$i$in$i) {
    $$0$ph$lcssa$i$i = $$014$i$in$i;
    break;
   } else $$0$ph7$i$i = $$014$i$in$i;
  }
  if (($$0$ph$lcssa$i$i | 0) == ($25 | 0)) $$1 = 0; else {
   $71 = $$0$ph$lcssa$i$i + 16 | 0;
   $72 = HEAP8[$71 >> 0] | 0;
   if (!($72 & 1)) {
    $161 = $71 + 1 | 0;
    $83 = ($72 & 255) >>> 1;
   } else {
    $161 = HEAP32[$$0$ph$lcssa$i$i + 24 >> 2] | 0;
    $83 = HEAP32[$$0$ph$lcssa$i$i + 20 >> 2] | 0;
   }
   $84 = $83 >>> 0 < $$$i1$i >>> 0 ? $83 : $$$i1$i;
   L40 : do if (!$84) label = 32; else {
    $$03$i5$i = $84;
    $l$04$i4$i = $$11$i$i;
    $r$05$i3$i = $161;
    while (1) {
     $86 = HEAP8[$l$04$i4$i >> 0] | 0;
     $87 = HEAP8[$r$05$i3$i >> 0] | 0;
     if ($86 << 24 >> 24 != $87 << 24 >> 24) break;
     $$03$i5$i = $$03$i5$i + -1 | 0;
     if (!$$03$i5$i) {
      label = 32;
      break L40;
     } else {
      $l$04$i4$i = $l$04$i4$i + 1 | 0;
      $r$05$i3$i = $r$05$i3$i + 1 | 0;
     }
    }
    if ($86 << 24 >> 24 == $87 << 24 >> 24) label = 32; else if ((($86 & 255) - ($87 & 255) | 0) < 0) {
     $$1 = 0;
     break L14;
    } else $$sroa$0$0 = $$0$ph$lcssa$i$i;
   } while (0);
   if ((label | 0) == 32) if ($$$i1$i >>> 0 < $83 >>> 0) {
    $$1 = 0;
    break;
   } else $$sroa$0$0 = $$0$ph$lcssa$i$i;
   if (($$sroa$0$0 | 0) == ($25 | 0)) $$1 = 0; else {
    $101 = HEAP32[$ctx + 4 >> 2] | 0;
    $105 = HEAP32[$101 + 72 >> 2] | 0;
    $106 = (HEAP32[$101 + 68 >> 2] | 0) == ($105 | 0);
    $$$i1 = $106 ? 0 : $105 + -72 | 0;
    if ($106) {
     HEAP8[$before_prev_data >> 0] = 0;
     HEAP8[$before_prev_data + 1 >> 0] = 0;
     $149 = 36;
     $162 = 0;
    } else {
     $109 = HEAP32[$$$i1 + 52 >> 2] | 0;
     $110 = _strlen($109 | 0) | 0;
     if ($110 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
     if ($110 >>> 0 < 11) {
      HEAP8[$before_prev_data >> 0] = $110 << 1;
      $__p$0$i3 = $before_prev_data + 1 | 0;
     } else {
      $117 = $110 + 16 & -16;
      $$size$i6 = ($117 | 0) == 0 ? 1 : $117;
      $119 = _malloc($$size$i6) | 0;
      L58 : do if (!$119) {
       while (1) {
        $121 = HEAP32[15470] | 0;
        HEAP32[15470] = $121 + 0;
        if (!$121) break;
        FUNCTION_TABLE_v[$121 & 3]();
        $124 = _malloc($$size$i6) | 0;
        if ($124) {
         $$lcssa$i10 = $124;
         break L58;
        }
       }
       $126 = ___cxa_allocate_exception(4) | 0;
       HEAP32[$126 >> 2] = 61776;
       ___cxa_throw($126 | 0, 61824, 94);
      } else $$lcssa$i10 = $119; while (0);
      HEAP32[$before_prev_data + 8 >> 2] = $$lcssa$i10;
      HEAP32[$before_prev_data >> 2] = $117 | 1;
      HEAP32[$before_prev_data + 4 >> 2] = $110;
      $__p$0$i3 = $$lcssa$i10;
     }
     _memcpy($__p$0$i3 | 0, $109 | 0, $110 | 0) | 0;
     HEAP8[$__p$0$i3 + $110 >> 0] = 0;
     $149 = HEAP32[$$$i1 + 12 >> 2] | 0;
     $162 = (HEAP32[$$$i1 + 8 >> 2] | 0) == 151;
    }
    $136 = HEAP32[$ctx >> 2] | 0;
    $142 = HEAP8[(HEAP32[$136 + 4 >> 2] | 0) + (HEAP32[$136 + 12 >> 2] | 0) >> 0] | 0;
    if ($162) $$0 = 0; else if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($before_prev_data, 58976) | 0)) $$0 = 0; else if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($before_prev_data, 58992) | 0)) $$0 = 0; else if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($before_prev_data, 59112) | 0)) $$0 = 0; else if ($142 << 24 >> 24 == 41 | $142 << 24 >> 24 == 61 | $142 << 24 >> 24 == 125) $$0 = 0; else $$0 = ($149 | 0) != 23;
    if (!(HEAP8[$before_prev_data >> 0] & 1)) $$1 = $$0; else {
     _free(HEAP32[$before_prev_data + 8 >> 2] | 0);
     $$1 = $$0;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$prev_data >> 0] & 1)) {
  STACKTOP = sp;
  return $$1 | 0;
 }
 _free(HEAP32[$prev_data + 8 >> 2] | 0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $49 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $69 = 0, $72 = 0, $79 = 0, $80 = 0, $81 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off016 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off018 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off032 = 0, $is_dst_type_derived_from_static_type$2$off033 = 0, $p$017 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   STACKTOP = sp;
   return;
  }
  $6 = $info + 28 | 0;
  if ((HEAP32[$6 >> 2] | 0) == 1) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$6 >> 2] = $path_below;
  STACKTOP = sp;
  return;
 }
 if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
  $61 = HEAP32[$this + 12 >> 2] | 0;
  $62 = $this + ($61 << 3) + 16 | 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this + 16 | 0, $info, $current_ptr, $path_below, $use_strcmp);
  $63 = $this + 24 | 0;
  if (($61 | 0) <= 1) {
   STACKTOP = sp;
   return;
  }
  $66 = HEAP32[$this + 8 >> 2] | 0;
  if (!($66 & 2)) {
   $69 = $info + 36 | 0;
   if ((HEAP32[$69 >> 2] | 0) != 1) {
    if (!($66 & 1)) {
     $81 = $info + 54 | 0;
     $p2$2 = $63;
     while (1) {
      if (HEAP8[$81 >> 0] | 0) {
       label = 43;
       break;
      }
      if ((HEAP32[$69 >> 2] | 0) == 1) {
       label = 43;
       break;
      }
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2, $info, $current_ptr, $path_below, $use_strcmp);
      $p2$2 = $p2$2 + 8 | 0;
      if ($p2$2 >>> 0 >= $62 >>> 0) {
       label = 43;
       break;
      }
     }
     if ((label | 0) == 43) {
      STACKTOP = sp;
      return;
     }
    }
    $79 = $info + 24 | 0;
    $80 = $info + 54 | 0;
    $p2$1 = $63;
    while (1) {
     if (HEAP8[$80 >> 0] | 0) {
      label = 43;
      break;
     }
     if ((HEAP32[$69 >> 2] | 0) == 1) if ((HEAP32[$79 >> 2] | 0) == 1) {
      label = 43;
      break;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1, $info, $current_ptr, $path_below, $use_strcmp);
     $p2$1 = $p2$1 + 8 | 0;
     if ($p2$1 >>> 0 >= $62 >>> 0) {
      label = 43;
      break;
     }
    }
    if ((label | 0) == 43) {
     STACKTOP = sp;
     return;
    }
   }
  }
  $72 = $info + 54 | 0;
  $p2$0 = $63;
  while (1) {
   if (HEAP8[$72 >> 0] | 0) {
    label = 43;
    break;
   }
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0, $info, $current_ptr, $path_below, $use_strcmp);
   $p2$0 = $p2$0 + 8 | 0;
   if ($p2$0 >>> 0 >= $62 >>> 0) {
    label = 43;
    break;
   }
  }
  if ((label | 0) == 43) {
   STACKTOP = sp;
   return;
  }
 }
 if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
  $14 = $info + 20 | 0;
  if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
   HEAP32[$info + 32 >> 2] = $path_below;
   $20 = $info + 44 | 0;
   if ((HEAP32[$20 >> 2] | 0) == 4) {
    STACKTOP = sp;
    return;
   }
   $24 = HEAP32[$this + 12 >> 2] | 0;
   $25 = $this + ($24 << 3) + 16 | 0;
   L54 : do if (($24 | 0) > 0) {
    $28 = $info + 52 | 0;
    $29 = $info + 53 | 0;
    $30 = $info + 54 | 0;
    $31 = $this + 8 | 0;
    $32 = $info + 24 | 0;
    $does_dst_type_point_to_our_static_type$0$off016 = 0;
    $is_dst_type_derived_from_static_type$0$off018 = 0;
    $p$017 = $this + 16 | 0;
    L56 : while (1) {
     HEAP8[$28 >> 0] = 0;
     HEAP8[$29 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$017, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
     if (HEAP8[$30 >> 0] | 0) {
      $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off016;
      $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off018;
      break;
     }
     do if (!(HEAP8[$29 >> 0] | 0)) {
      $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off016;
      $is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off018;
     } else {
      if (!(HEAP8[$28 >> 0] | 0)) if (!(HEAP32[$31 >> 2] & 1)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off016;
       $is_dst_type_derived_from_static_type$2$off0 = 1;
       break L56;
      } else {
       $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off016;
       $is_dst_type_derived_from_static_type$1$off0 = 1;
       break;
      }
      if ((HEAP32[$32 >> 2] | 0) == 1) {
       label = 25;
       break L54;
      }
      if (!(HEAP32[$31 >> 2] & 2)) {
       label = 25;
       break L54;
      } else {
       $does_dst_type_point_to_our_static_type$1$off0 = 1;
       $is_dst_type_derived_from_static_type$1$off0 = 1;
      }
     } while (0);
     $p$017 = $p$017 + 8 | 0;
     if ($p$017 >>> 0 >= $25 >>> 0) {
      $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;
      $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
      break;
     } else {
      $does_dst_type_point_to_our_static_type$0$off016 = $does_dst_type_point_to_our_static_type$1$off0;
      $is_dst_type_derived_from_static_type$0$off018 = $is_dst_type_derived_from_static_type$1$off0;
     }
    }
    if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
     $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off0;
     label = 24;
    } else {
     $is_dst_type_derived_from_static_type$2$off032 = $is_dst_type_derived_from_static_type$2$off0;
     label = 21;
    }
   } else {
    $is_dst_type_derived_from_static_type$2$off032 = 0;
    label = 21;
   } while (0);
   if ((label | 0) == 21) {
    HEAP32[$14 >> 2] = $current_ptr;
    $49 = $info + 40 | 0;
    HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
     HEAP8[$info + 54 >> 0] = 1;
     if ($is_dst_type_derived_from_static_type$2$off032) label = 25; else label = 26;
    } else {
     $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off032;
     label = 24;
    } else {
     $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off032;
     label = 24;
    }
   }
   if ((label | 0) == 24) if ($is_dst_type_derived_from_static_type$2$off033) label = 25; else label = 26;
   if ((label | 0) == 25) {
    HEAP32[$20 >> 2] = 3;
    STACKTOP = sp;
    return;
   } else if ((label | 0) == 26) {
    HEAP32[$20 >> 2] = 4;
    STACKTOP = sp;
    return;
   }
  }
 }
 if (($path_below | 0) != 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$info + 32 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first, $last, $lit, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $lit = $lit | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i6 = 0, $$02 = 0, $$1 = 0, $$sroa$5 = 0, $0 = 0, $1 = 0, $108 = 0, $109 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $30 = 0, $32 = 0, $36 = 0, $38 = 0, $39 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $51 = 0, $55 = 0, $56 = 0, $58 = 0, $62 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $73 = 0, $75 = 0, $78 = 0, $79 = 0, $84 = 0, $90 = 0, $92 = 0, $98 = 0, $__v$i$i4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $__v$i$i4 = sp + 40 | 0;
 $0 = sp + 16 | 0;
 $$sroa$5 = sp + 60 | 0;
 $1 = sp;
 $2 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first, $last) | 0;
 if (($2 | 0) == ($first | 0) | ($2 | 0) == ($last | 0)) {
  $$1 = $first;
  STACKTOP = sp;
  return $$1 | 0;
 }
 if ((HEAP8[$2 >> 0] | 0) != 69) {
  $$1 = $first;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $7 = HEAP8[$lit >> 0] | 0;
 if (!($7 & 1)) $15 = ($7 & 255) >>> 1; else $15 = HEAP32[$lit + 4 >> 2] | 0;
 do if ($15 >>> 0 > 3) {
  __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($1, 58944, $lit);
  $16 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1, 58936, 1) | 0;
  $17 = HEAP8[$16 >> 0] | 0;
  $18 = $16 + 1 | 0;
  HEAP8[$$sroa$5 + 0 >> 0] = HEAP8[$18 + 0 >> 0] | 0;
  HEAP8[$$sroa$5 + 1 >> 0] = HEAP8[$18 + 1 >> 0] | 0;
  HEAP8[$$sroa$5 + 2 >> 0] = HEAP8[$18 + 2 >> 0] | 0;
  HEAP8[$$sroa$5 + 3 >> 0] = HEAP8[$18 + 3 >> 0] | 0;
  HEAP8[$$sroa$5 + 4 >> 0] = HEAP8[$18 + 4 >> 0] | 0;
  HEAP8[$$sroa$5 + 5 >> 0] = HEAP8[$18 + 5 >> 0] | 0;
  HEAP8[$$sroa$5 + 6 >> 0] = HEAP8[$18 + 6 >> 0] | 0;
  $20 = HEAP32[$16 + 8 >> 2] | 0;
  HEAP32[$16 + 0 >> 2] = 0;
  HEAP32[$16 + 4 >> 2] = 0;
  HEAP32[$16 + 8 >> 2] = 0;
  HEAP8[$0 >> 0] = $17;
  $21 = $0 + 1 | 0;
  HEAP8[$21 + 0 >> 0] = HEAP8[$$sroa$5 + 0 >> 0] | 0;
  HEAP8[$21 + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0;
  HEAP8[$21 + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0;
  HEAP8[$21 + 3 >> 0] = HEAP8[$$sroa$5 + 3 >> 0] | 0;
  HEAP8[$21 + 4 >> 0] = HEAP8[$$sroa$5 + 4 >> 0] | 0;
  HEAP8[$21 + 5 >> 0] = HEAP8[$$sroa$5 + 5 >> 0] | 0;
  HEAP8[$21 + 6 >> 0] = HEAP8[$$sroa$5 + 6 >> 0] | 0;
  HEAP32[$0 + 8 >> 2] = $20;
  HEAP8[$$sroa$5 + 0 >> 0] = 0;
  HEAP8[$$sroa$5 + 1 >> 0] = 0;
  HEAP8[$$sroa$5 + 2 >> 0] = 0;
  HEAP8[$$sroa$5 + 3 >> 0] = 0;
  HEAP8[$$sroa$5 + 4 >> 0] = 0;
  HEAP8[$$sroa$5 + 5 >> 0] = 0;
  HEAP8[$$sroa$5 + 6 >> 0] = 0;
  $23 = $0 + 12 | 0;
  HEAP32[$23 + 0 >> 2] = 0;
  HEAP32[$23 + 4 >> 2] = 0;
  HEAP32[$23 + 8 >> 2] = 0;
  $24 = $db + 4 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  $27 = HEAP32[$db + 8 >> 2] | 0;
  if ($25 >>> 0 < $27 >>> 0) {
   if (!$25) $32 = 0; else {
    HEAP32[$25 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
    HEAP32[$25 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
    HEAP32[$25 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
    HEAP32[$0 + 0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    $30 = $25 + 12 | 0;
    HEAP32[$30 + 0 >> 2] = HEAP32[$23 + 0 >> 2];
    HEAP32[$30 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
    HEAP32[$30 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
    HEAP32[$23 + 0 >> 2] = 0;
    HEAP32[$23 + 4 >> 2] = 0;
    HEAP32[$23 + 8 >> 2] = 0;
    $32 = HEAP32[$24 >> 2] | 0;
   }
   HEAP32[$24 >> 2] = $32 + 24;
  } else {
   $36 = HEAP32[$db >> 2] | 0;
   $38 = ($25 - $36 | 0) / 24 | 0;
   $39 = $38 + 1 | 0;
   if (($39 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   $43 = ($27 - $36 | 0) / 24 | 0;
   if ($43 >>> 0 < 1073741823) {
    $45 = $43 << 1;
    $$0$i$i$i = $45 >>> 0 < $39 >>> 0 ? $39 : $45;
   } else $$0$i$i$i = 2147483647;
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i4, $$0$i$i$i, $38, $db + 12 | 0);
   $48 = $__v$i$i4 + 8 | 0;
   $49 = HEAP32[$48 >> 2] | 0;
   if ($49) {
    HEAP32[$49 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
    HEAP32[$49 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
    HEAP32[$49 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
    HEAP32[$0 + 0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    $51 = $49 + 12 | 0;
    HEAP32[$51 + 0 >> 2] = HEAP32[$23 + 0 >> 2];
    HEAP32[$51 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
    HEAP32[$51 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
    HEAP32[$23 + 0 >> 2] = 0;
    HEAP32[$23 + 4 >> 2] = 0;
    HEAP32[$23 + 8 >> 2] = 0;
   }
   HEAP32[$48 >> 2] = $49 + 24;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i4);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i4);
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
  if (HEAP8[$1 >> 0] & 1) _free(HEAP32[$1 + 8 >> 2] | 0);
 } else {
  $55 = $db + 4 | 0;
  $56 = HEAP32[$55 >> 2] | 0;
  $58 = HEAP32[$db + 8 >> 2] | 0;
  if ($56 >>> 0 < $58 >>> 0) {
   if (!$56) $62 = 0; else {
    HEAP32[$56 + 0 >> 2] = 0;
    HEAP32[$56 + 4 >> 2] = 0;
    HEAP32[$56 + 8 >> 2] = 0;
    HEAP32[$56 + 12 >> 2] = 0;
    HEAP32[$56 + 16 >> 2] = 0;
    HEAP32[$56 + 20 >> 2] = 0;
    $62 = HEAP32[$55 >> 2] | 0;
   }
   HEAP32[$55 >> 2] = $62 + 24;
   break;
  }
  $66 = HEAP32[$db >> 2] | 0;
  $68 = ($56 - $66 | 0) / 24 | 0;
  $69 = $68 + 1 | 0;
  if (($69 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
  $73 = ($58 - $66 | 0) / 24 | 0;
  if ($73 >>> 0 < 1073741823) {
   $75 = $73 << 1;
   $$0$i$i$i6 = $75 >>> 0 < $69 >>> 0 ? $69 : $75;
  } else $$0$i$i$i6 = 2147483647;
  __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i4, $$0$i$i$i6, $68, $db + 12 | 0);
  $78 = $__v$i$i4 + 8 | 0;
  $79 = HEAP32[$78 >> 2] | 0;
  if ($79) {
   HEAP32[$79 + 0 >> 2] = 0;
   HEAP32[$79 + 4 >> 2] = 0;
   HEAP32[$79 + 8 >> 2] = 0;
   HEAP32[$79 + 12 >> 2] = 0;
   HEAP32[$79 + 16 >> 2] = 0;
   HEAP32[$79 + 20 >> 2] = 0;
  }
  HEAP32[$78 >> 2] = $79 + 24;
  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i4);
  __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i4);
 } while (0);
 $84 = $db + 4 | 0;
 if ((HEAP8[$first >> 0] | 0) == 110) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$84 >> 2] | 0) + -24 | 0, 45);
  $$02 = $first + 1 | 0;
 } else $$02 = $first;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_((HEAP32[$84 >> 2] | 0) + -24 | 0, $$02, $2);
 $90 = HEAP8[$lit >> 0] | 0;
 $92 = ($90 & 1) == 0;
 if ($92) $98 = ($90 & 255) >>> 1; else $98 = HEAP32[$lit + 4 >> 2] | 0;
 if ($98 >>> 0 < 4) {
  if ($92) {
   $108 = $lit + 1 | 0;
   $109 = ($90 & 255) >>> 1;
  } else {
   $108 = HEAP32[$lit + 8 >> 2] | 0;
   $109 = HEAP32[$lit + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$84 >> 2] | 0) + -24 | 0, $108, $109) | 0;
 }
 $$1 = $2 + 1 | 0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$014$$0$i = 0, $$014$lcssa$i = 0, $$01428$i = 0, $$0150 = 0, $$0249 = 0, $$031$i = 0, $$1$lcssa = 0, $$115$i = 0, $$136 = 0, $$2$i = 0, $$3$i = 0, $11 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $22 = 0, $23 = 0, $28 = 0, $29 = 0, $33 = 0, $37 = 0, $38 = 0, $46 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $60 = 0, $64 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $81 = 0, $84 = 0, $84$phi = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $buf$i = 0, $cnt$0$lcssa$i = 0, $cnt$029$i = 0, $cnt$2$i = 0, $cnt$3$i = 0, $dst$$i = 0, $fend$0$lcssa = 0, $fend$055 = 0, $fend$151 = 0, $fend$2$lcssa = 0, $fend$242 = 0, $fend$3 = 0, $n$$i = 0, $n$038 = 0, $p$039 = 0, $s$0$lcssa$i = 0, $s$030$i = 0, $s$1$i = 0, $s$2$i = 0, $tmp = 0, $ws$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $buf$i = sp + 8 | 0;
 $ws$i = sp;
 $tmp = sp + 4 | 0;
 L1 : do if (($frm | 0) == ($frm_end | 0)) {
  HEAP32[$to_nxt >> 2] = $to;
  HEAP32[$frm_nxt >> 2] = $frm;
  $89 = $frm;
 } else {
  $fend$055 = $frm;
  while (1) {
   if (!(HEAP32[$fend$055 >> 2] | 0)) {
    $fend$0$lcssa = $fend$055;
    break;
   }
   $fend$055 = $fend$055 + 4 | 0;
   if (($fend$055 | 0) == ($frm_end | 0)) {
    $fend$0$lcssa = $frm_end;
    break;
   }
  }
  HEAP32[$to_nxt >> 2] = $to;
  HEAP32[$frm_nxt >> 2] = $frm;
  if (($to | 0) == ($to_end | 0)) $89 = $frm; else {
   $6 = $to_end;
   $7 = $this + 8 | 0;
   $$0150 = $frm;
   $$0249 = $to;
   $fend$151 = $fend$0$lcssa;
   while (1) {
    $11 = $fend$151 - $$0150 >> 2;
    $15 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
    $16 = HEAP32[$frm_nxt >> 2] | 0;
    HEAP32[$ws$i >> 2] = $16;
    $17 = ($$0249 | 0) != 0;
    $n$$i = $17 ? $6 - $$0249 | 0 : 256;
    $dst$$i = $17 ? $$0249 : $buf$i;
    L10 : do if (($16 | 0) != 0 & ($n$$i | 0) != 0) {
     $$01428$i = $n$$i;
     $$031$i = $11;
     $91 = $16;
     $cnt$029$i = 0;
     $s$030$i = $dst$$i;
     while (1) {
      $20 = $$031$i >>> 0 >= $$01428$i >>> 0;
      if (!($20 | $$031$i >>> 0 > 32)) {
       $$0$lcssa$i = $$031$i;
       $$014$lcssa$i = $$01428$i;
       $33 = $91;
       $cnt$0$lcssa$i = $cnt$029$i;
       $s$0$lcssa$i = $s$030$i;
       label = 13;
       break L10;
      }
      $$014$$0$i = $20 ? $$01428$i : $$031$i;
      $22 = $$031$i - $$014$$0$i | 0;
      $23 = _wcsrtombs($s$030$i, $ws$i, $$014$$0$i) | 0;
      if (($23 | 0) == -1) {
       $cnt$3$i = -1;
       break L10;
      }
      if (($s$030$i | 0) == ($buf$i | 0)) {
       $$115$i = $$01428$i;
       $s$1$i = $buf$i;
      } else {
       $$115$i = $$01428$i - $23 | 0;
       $s$1$i = $s$030$i + $23 | 0;
      }
      $28 = $23 + $cnt$029$i | 0;
      $29 = HEAP32[$ws$i >> 2] | 0;
      if (($29 | 0) != 0 & ($$115$i | 0) != 0) {
       $$01428$i = $$115$i;
       $$031$i = $22;
       $91 = $29;
       $cnt$029$i = $28;
       $s$030$i = $s$1$i;
      } else {
       $$0$lcssa$i = $22;
       $$014$lcssa$i = $$115$i;
       $33 = $29;
       $cnt$0$lcssa$i = $28;
       $s$0$lcssa$i = $s$1$i;
       label = 13;
       break;
      }
     }
    } else {
     $$0$lcssa$i = $11;
     $$014$lcssa$i = $n$$i;
     $33 = $16;
     $cnt$0$lcssa$i = 0;
     $s$0$lcssa$i = $dst$$i;
     label = 13;
    } while (0);
    L18 : do if ((label | 0) == 13) {
     label = 0;
     if (($33 | 0) != 0 & ($$014$lcssa$i | 0) != 0 & ($$0$lcssa$i | 0) != 0) {
      $$2$i = $$0$lcssa$i;
      $$3$i = $$014$lcssa$i;
      $37 = $33;
      $cnt$2$i = $cnt$0$lcssa$i;
      $s$2$i = $s$0$lcssa$i;
      while (1) {
       $38 = _wcrtomb($s$2$i, HEAP32[$37 >> 2] | 0) | 0;
       if (($38 + 1 | 0) >>> 0 < 2) break;
       $37 = $37 + 4 | 0;
       HEAP32[$ws$i >> 2] = $37;
       $$2$i = $$2$i + -1 | 0;
       $46 = $cnt$2$i + 1 | 0;
       if (!(($$3$i | 0) != ($38 | 0) & ($$2$i | 0) != 0)) {
        $cnt$3$i = $46;
        break L18;
       } else {
        $$3$i = $$3$i - $38 | 0;
        $cnt$2$i = $46;
        $s$2$i = $s$2$i + $38 | 0;
       }
      }
      if (!$38) {
       HEAP32[$ws$i >> 2] = 0;
       $cnt$3$i = $cnt$2$i;
      } else $cnt$3$i = -1;
     } else $cnt$3$i = $cnt$0$lcssa$i;
    } while (0);
    if ($17) HEAP32[$frm_nxt >> 2] = HEAP32[$ws$i >> 2];
    if ($15) _uselocale($15 | 0) | 0;
    if (($cnt$3$i | 0) == -1) {
     label = 23;
     break;
    } else if (!$cnt$3$i) {
     $$0 = 1;
     label = 44;
     break;
    }
    $64 = (HEAP32[$to_nxt >> 2] | 0) + $cnt$3$i | 0;
    HEAP32[$to_nxt >> 2] = $64;
    if (($64 | 0) == ($to_end | 0)) {
     label = 42;
     break;
    }
    if (($fend$151 | 0) == ($frm_end | 0)) {
     $86 = HEAP32[$frm_nxt >> 2] | 0;
     $88 = $64;
     $fend$3 = $frm_end;
    } else {
     $68 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
     HEAP8[$tmp >> 0] = 0;
     if ($68) _uselocale($68 | 0) | 0;
     $70 = HEAP32[$to_nxt >> 2] | 0;
     if (($70 | 0) == ($to_end | 0)) {
      $$0 = 1;
      label = 44;
      break;
     } else {
      $73 = $70;
      $74 = 0;
      $n$038 = 0;
      $p$039 = $tmp;
     }
     while (1) {
      HEAP32[$to_nxt >> 2] = $73 + 1;
      HEAP8[$73 >> 0] = $74;
      if (!$n$038) break;
      $76 = $p$039 + 1 | 0;
      $73 = HEAP32[$to_nxt >> 2] | 0;
      $74 = HEAP8[$76 >> 0] | 0;
      $n$038 = $n$038 + -1 | 0;
      $p$039 = $76;
     }
     $77 = HEAP32[$frm_nxt >> 2] | 0;
     $78 = $77 + 4 | 0;
     HEAP32[$frm_nxt >> 2] = $78;
     L43 : do if (($78 | 0) == ($frm_end | 0)) $fend$2$lcssa = $frm_end; else {
      $84 = $77;
      $fend$242 = $78;
      while (1) {
       $81 = $84 + 8 | 0;
       if (!(HEAP32[$fend$242 >> 2] | 0)) {
        $fend$2$lcssa = $fend$242;
        break L43;
       }
       if (($81 | 0) == ($frm_end | 0)) {
        $fend$2$lcssa = $frm_end;
        break;
       } else {
        $84$phi = $fend$242;
        $fend$242 = $81;
        $84 = $84$phi;
       }
      }
     } while (0);
     $86 = $78;
     $88 = HEAP32[$to_nxt >> 2] | 0;
     $fend$3 = $fend$2$lcssa;
    }
    if (($86 | 0) == ($frm_end | 0) | ($88 | 0) == ($to_end | 0)) {
     $89 = $86;
     break L1;
    } else {
     $$0150 = $86;
     $$0249 = $88;
     $fend$151 = $fend$3;
    }
   }
   if ((label | 0) == 23) {
    HEAP32[$to_nxt >> 2] = $$0249;
    L52 : do if (($$0150 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) $$1$lcssa = $$0150; else {
     $$136 = $$0150;
     $54 = $$0249;
     while (1) {
      $51 = HEAP32[$$136 >> 2] | 0;
      $53 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
      $55 = _wcrtomb($54, $51) | 0;
      if ($53) _uselocale($53 | 0) | 0;
      if (($55 | 0) == -1) {
       $$1$lcssa = $$136;
       break L52;
      }
      $54 = (HEAP32[$to_nxt >> 2] | 0) + $55 | 0;
      HEAP32[$to_nxt >> 2] = $54;
      $60 = $$136 + 4 | 0;
      if (($60 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
       $$1$lcssa = $60;
       break;
      } else $$136 = $60;
     }
    } while (0);
    HEAP32[$frm_nxt >> 2] = $$1$lcssa;
    $$0 = 2;
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 42) {
    $89 = HEAP32[$frm_nxt >> 2] | 0;
    break;
   } else if ((label | 0) == 44) {
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
 } while (0);
 $$0 = ($89 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc$0$0$val, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc$0$0$val = $__loc$0$0$val | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $7 = 0, $8 = 0, $81 = 0, $9 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp;
 $1 = sp + 16 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 80 | 0;
 $5 = sp + 96 | 0;
 $6 = sp + 108 | 0;
 $7 = sp + 56 | 0;
 $8 = sp + 52 | 0;
 $9 = sp + 28 | 0;
 $10 = sp + 4 | 0;
 $11 = sp + 68 | 0;
 if ($__intl) {
  $12 = __ZNSt3__16locale2id5__getEv(50416) | 0;
  $13 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$__loc$0$0$val + 8 >> 2] | 0, HEAP32[$__loc$0$0$val + 12 >> 2] | 0, $12) | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$14 + 44 >> 2] & 63]($0, $13);
   $17 = HEAP32[$0 >> 2] | 0;
   HEAP8[$__pat >> 0] = $17;
   HEAP8[$__pat + 1 >> 0] = $17 >> 8;
   HEAP8[$__pat + 2 >> 0] = $17 >> 16;
   HEAP8[$__pat + 3 >> 0] = $17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 32 >> 2] & 63]($1, $13);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 0 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
  } else {
   FUNCTION_TABLE_vii[HEAP32[$14 + 40 >> 2] & 63]($2, $13);
   $29 = HEAP32[$2 >> 2] | 0;
   HEAP8[$__pat >> 0] = $29;
   HEAP8[$__pat + 1 >> 0] = $29 >> 8;
   HEAP8[$__pat + 2 >> 0] = $29 >> 16;
   HEAP8[$__pat + 3 >> 0] = $29 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 28 >> 2] & 63]($3, $13);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$3 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 0 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
  }
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 12 >> 2] & 127]($13) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 16 >> 2] & 127]($13) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 20 >> 2] & 63]($4, $13);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 63]($5, $13);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$5 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[$5 + 0 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$5 + 8 >> 2] = 0;
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 127]($13) | 0;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 } else {
  $64 = __ZNSt3__16locale2id5__getEv(50352) | 0;
  $65 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$__loc$0$0$val + 8 >> 2] | 0, HEAP32[$__loc$0$0$val + 12 >> 2] | 0, $64) | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$66 + 44 >> 2] & 63]($6, $65);
   $69 = HEAP32[$6 >> 2] | 0;
   HEAP8[$__pat >> 0] = $69;
   HEAP8[$__pat + 1 >> 0] = $69 >> 8;
   HEAP8[$__pat + 2 >> 0] = $69 >> 16;
   HEAP8[$__pat + 3 >> 0] = $69 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$65 >> 2] | 0) + 32 >> 2] & 63]($7, $65);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$7 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 0 >> 2] = 0;
   HEAP32[$7 + 4 >> 2] = 0;
   HEAP32[$7 + 8 >> 2] = 0;
  } else {
   FUNCTION_TABLE_vii[HEAP32[$66 + 40 >> 2] & 63]($8, $65);
   $81 = HEAP32[$8 >> 2] | 0;
   HEAP8[$__pat >> 0] = $81;
   HEAP8[$__pat + 1 >> 0] = $81 >> 8;
   HEAP8[$__pat + 2 >> 0] = $81 >> 16;
   HEAP8[$__pat + 3 >> 0] = $81 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$65 >> 2] | 0) + 28 >> 2] & 63]($9, $65);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$9 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$9 + 0 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   HEAP32[$9 + 8 >> 2] = 0;
  }
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 12 >> 2] & 127]($65) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 16 >> 2] & 127]($65) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$65 >> 2] | 0) + 20 >> 2] & 63]($10, $65);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$10 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  HEAP32[$10 + 0 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$10 + 8 >> 2] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$65 >> 2] | 0) + 24 >> 2] & 63]($11, $65);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$11 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  HEAP32[$11 + 0 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  HEAP32[$11 + 8 >> 2] = 0;
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 36 >> 2] & 127]($65) | 0;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $$pre$phi$iZ2D = 0, $$sum = 0, $$sum2728$i = 0, $10 = 0, $100 = 0, $105 = 0, $107 = 0, $11 = 0, $110 = 0, $112 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $13 = 0, $133 = 0, $134 = 0, $143 = 0, $148 = 0, $15 = 0, $152 = 0, $158 = 0, $16 = 0, $168 = 0, $177 = 0, $180 = 0, $182 = 0, $187 = 0, $21 = 0, $29 = 0, $42 = 0, $44 = 0, $54 = 0, $56 = 0, $65 = 0, $71 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $R$0$i = 0, $R$1$i = 0, $RP$0$i = 0, $mem$0 = 0, $storemerge$i = 0, $storemerge21$i = 0, sp = 0;
 sp = STACKTOP;
 if (!$oldmem) {
  $mem$0 = _malloc($bytes) | 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $mem$0 = 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 if ($bytes >>> 0 < 11) $21 = 16; else $21 = $bytes + 11 & -8;
 $8 = $oldmem + -4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $9 & -8;
 $$sum = $10 + -8 | 0;
 $11 = $oldmem + $$sum | 0;
 $12 = HEAP32[15762] | 0;
 $13 = $9 & 3;
 if (!(($13 | 0) != 1 & ($oldmem + -8 | 0) >>> 0 >= $12 >>> 0 & ($$sum | 0) > -8)) _abort();
 $$sum2728$i = $10 | 4;
 $15 = $oldmem + ($$sum2728$i + -8) | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 if (!($16 & 1)) _abort();
 do if (!$13) {
  if (!($21 >>> 0 < 256 | $10 >>> 0 < ($21 | 4) >>> 0)) if (($10 - $21 | 0) >>> 0 <= HEAP32[15878] << 1 >>> 0) {
   $mem$0 = $oldmem;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
 } else {
  if ($10 >>> 0 >= $21 >>> 0) {
   $29 = $10 - $21 | 0;
   if ($29 >>> 0 <= 15) {
    $mem$0 = $oldmem;
    STACKTOP = sp;
    return $mem$0 | 0;
   }
   HEAP32[$8 >> 2] = $9 & 1 | $21 | 2;
   HEAP32[$oldmem + (($21 | 4) + -8) >> 2] = $29 | 3;
   HEAP32[$15 >> 2] = HEAP32[$15 >> 2] | 1;
   _dispose_chunk($oldmem + ($21 + -8) | 0, $29);
   $mem$0 = $oldmem;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
  if (($11 | 0) == (HEAP32[15764] | 0)) {
   $42 = (HEAP32[15761] | 0) + $10 | 0;
   if ($42 >>> 0 <= $21 >>> 0) break;
   $44 = $42 - $21 | 0;
   HEAP32[$8 >> 2] = $9 & 1 | $21 | 2;
   HEAP32[$oldmem + (($21 | 4) + -8) >> 2] = $44 | 1;
   HEAP32[15764] = $oldmem + ($21 + -8);
   HEAP32[15761] = $44;
   $mem$0 = $oldmem;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
  if (($11 | 0) == (HEAP32[15763] | 0)) {
   $54 = (HEAP32[15760] | 0) + $10 | 0;
   if ($54 >>> 0 < $21 >>> 0) break;
   $56 = $54 - $21 | 0;
   if ($56 >>> 0 > 15) {
    HEAP32[$8 >> 2] = $9 & 1 | $21 | 2;
    HEAP32[$oldmem + (($21 | 4) + -8) >> 2] = $56 | 1;
    HEAP32[$oldmem + ($54 + -8) >> 2] = $56;
    $65 = $oldmem + ($54 + -4) | 0;
    HEAP32[$65 >> 2] = HEAP32[$65 >> 2] & -2;
    $storemerge$i = $oldmem + ($21 + -8) | 0;
    $storemerge21$i = $56;
   } else {
    HEAP32[$8 >> 2] = $9 & 1 | $54 | 2;
    $71 = $oldmem + ($54 + -4) | 0;
    HEAP32[$71 >> 2] = HEAP32[$71 >> 2] | 1;
    $storemerge$i = 0;
    $storemerge21$i = 0;
   }
   HEAP32[15760] = $storemerge21$i;
   HEAP32[15763] = $storemerge$i;
   $mem$0 = $oldmem;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
  if (!($16 & 2)) {
   $77 = ($16 & -8) + $10 | 0;
   if ($77 >>> 0 >= $21 >>> 0) {
    $79 = $77 - $21 | 0;
    $80 = $16 >>> 3;
    do if ($16 >>> 0 < 256) {
     $83 = HEAP32[$oldmem + $10 >> 2] | 0;
     $85 = HEAP32[$oldmem + $$sum2728$i >> 2] | 0;
     $87 = 63072 + ($80 << 1 << 2) | 0;
     if (($83 | 0) != ($87 | 0)) {
      if ($83 >>> 0 < $12 >>> 0) _abort();
      if ((HEAP32[$83 + 12 >> 2] | 0) != ($11 | 0)) _abort();
     }
     if (($85 | 0) == ($83 | 0)) {
      HEAP32[15758] = HEAP32[15758] & ~(1 << $80);
      break;
     }
     if (($85 | 0) == ($87 | 0)) $$pre$phi$iZ2D = $85 + 8 | 0; else {
      if ($85 >>> 0 < $12 >>> 0) _abort();
      $100 = $85 + 8 | 0;
      if ((HEAP32[$100 >> 2] | 0) == ($11 | 0)) $$pre$phi$iZ2D = $100; else _abort();
     }
     HEAP32[$83 + 12 >> 2] = $85;
     HEAP32[$$pre$phi$iZ2D >> 2] = $83;
    } else {
     $105 = HEAP32[$oldmem + ($10 + 16) >> 2] | 0;
     $107 = HEAP32[$oldmem + $$sum2728$i >> 2] | 0;
     do if (($107 | 0) == ($11 | 0)) {
      $118 = $oldmem + ($10 + 12) | 0;
      $119 = HEAP32[$118 >> 2] | 0;
      if (!$119) {
       $121 = $oldmem + ($10 + 8) | 0;
       $122 = HEAP32[$121 >> 2] | 0;
       if (!$122) {
        $R$1$i = 0;
        break;
       } else {
        $R$0$i = $122;
        $RP$0$i = $121;
       }
      } else {
       $R$0$i = $119;
       $RP$0$i = $118;
      }
      while (1) {
       $124 = $R$0$i + 20 | 0;
       $125 = HEAP32[$124 >> 2] | 0;
       if ($125) {
        $R$0$i = $125;
        $RP$0$i = $124;
        continue;
       }
       $127 = $R$0$i + 16 | 0;
       $128 = HEAP32[$127 >> 2] | 0;
       if (!$128) break; else {
        $R$0$i = $128;
        $RP$0$i = $127;
       }
      }
      if ($RP$0$i >>> 0 < $12 >>> 0) _abort(); else {
       HEAP32[$RP$0$i >> 2] = 0;
       $R$1$i = $R$0$i;
       break;
      }
     } else {
      $110 = HEAP32[$oldmem + $10 >> 2] | 0;
      if ($110 >>> 0 < $12 >>> 0) _abort();
      $112 = $110 + 12 | 0;
      if ((HEAP32[$112 >> 2] | 0) != ($11 | 0)) _abort();
      $115 = $107 + 8 | 0;
      if ((HEAP32[$115 >> 2] | 0) == ($11 | 0)) {
       HEAP32[$112 >> 2] = $107;
       HEAP32[$115 >> 2] = $110;
       $R$1$i = $107;
       break;
      } else _abort();
     } while (0);
     if ($105) {
      $133 = HEAP32[$oldmem + ($10 + 20) >> 2] | 0;
      $134 = 63336 + ($133 << 2) | 0;
      if (($11 | 0) == (HEAP32[$134 >> 2] | 0)) {
       HEAP32[$134 >> 2] = $R$1$i;
       if (!$R$1$i) {
        HEAP32[15759] = HEAP32[15759] & ~(1 << $133);
        break;
       }
      } else {
       if ($105 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort();
       $143 = $105 + 16 | 0;
       if ((HEAP32[$143 >> 2] | 0) == ($11 | 0)) HEAP32[$143 >> 2] = $R$1$i; else HEAP32[$105 + 20 >> 2] = $R$1$i;
       if (!$R$1$i) break;
      }
      $148 = HEAP32[15762] | 0;
      if ($R$1$i >>> 0 < $148 >>> 0) _abort();
      HEAP32[$R$1$i + 24 >> 2] = $105;
      $152 = HEAP32[$oldmem + ($10 + 8) >> 2] | 0;
      do if ($152) if ($152 >>> 0 < $148 >>> 0) _abort(); else {
       HEAP32[$R$1$i + 16 >> 2] = $152;
       HEAP32[$152 + 24 >> 2] = $R$1$i;
       break;
      } while (0);
      $158 = HEAP32[$oldmem + ($10 + 12) >> 2] | 0;
      if ($158) if ($158 >>> 0 < (HEAP32[15762] | 0) >>> 0) _abort(); else {
       HEAP32[$R$1$i + 20 >> 2] = $158;
       HEAP32[$158 + 24 >> 2] = $R$1$i;
       break;
      }
     }
    } while (0);
    if ($79 >>> 0 < 16) {
     HEAP32[$8 >> 2] = $77 | $9 & 1 | 2;
     $168 = $oldmem + (($77 | 4) + -8) | 0;
     HEAP32[$168 >> 2] = HEAP32[$168 >> 2] | 1;
     $mem$0 = $oldmem;
     STACKTOP = sp;
     return $mem$0 | 0;
    } else {
     HEAP32[$8 >> 2] = $9 & 1 | $21 | 2;
     HEAP32[$oldmem + (($21 | 4) + -8) >> 2] = $79 | 3;
     $177 = $oldmem + (($77 | 4) + -8) | 0;
     HEAP32[$177 >> 2] = HEAP32[$177 >> 2] | 1;
     _dispose_chunk($oldmem + ($21 + -8) | 0, $79);
     $mem$0 = $oldmem;
     STACKTOP = sp;
     return $mem$0 | 0;
    }
   }
  }
 } while (0);
 $180 = _malloc($bytes) | 0;
 if (!$180) {
  $mem$0 = 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 $182 = HEAP32[$8 >> 2] | 0;
 $187 = ($182 & -8) - (($182 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($180 | 0, $oldmem | 0, ($187 >>> 0 < $bytes >>> 0 ? $187 : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$0 = $180;
 STACKTOP = sp;
 return $mem$0 | 0;
}

function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i7 = 0, $0 = 0, $1 = 0, $106 = 0, $113 = 0, $114 = 0, $122 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $132$phi = 0, $135 = 0, $140 = 0, $141 = 0, $147 = 0, $148 = 0, $15 = 0, $150 = 0, $159 = 0, $17 = 0, $2 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $60 = 0, $71 = 0, $73 = 0, $75 = 0, $77 = 0, $78 = 0, $78$phi = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, $__dc$027 = 0, $__dc$1 = 0, $__dg$028 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$226 = 0, $__nf$3 = 0, $__ns$036 = 0, $__ns$131 = 0, $__ns$2 = 0, $__p$029 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = HEAP32[$__loc >> 2] | 0;
 $1 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $2 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0, $1) | 0;
 $3 = HEAP32[$__loc >> 2] | 0;
 $4 = __ZNSt3__16locale2id5__getEv(50984) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$3 + 8 >> 2] | 0, HEAP32[$3 + 12 >> 2] | 0, $4) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $5);
 HEAP32[$__oe >> 2] = $__ob;
 $9 = HEAP8[$__nb >> 0] | 0;
 if ($9 << 24 >> 24 == 43 | $9 << 24 >> 24 == 45) {
  $13 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 31]($2, $9) | 0;
  $15 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $15 + 1;
  HEAP8[$15 >> 0] = $13;
  $__nf$0 = $__nb + 1 | 0;
 } else $__nf$0 = $__nb;
 $17 = $__ne;
 L4 : do if (($17 - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
  $24 = $__nf$0 + 1 | 0;
  $25 = HEAP8[$24 >> 0] | 0;
  if ($25 << 24 >> 24 == 88 | $25 << 24 >> 24 == 120) {
   $29 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 31]($2, 48) | 0;
   $30 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $30 + 1;
   HEAP8[$30 >> 0] = $29;
   $32 = $__nf$0 + 2 | 0;
   $37 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 31]($2, HEAP8[$24 >> 0] | 0) | 0;
   $38 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $38 + 1;
   HEAP8[$38 >> 0] = $37;
   if ($32 >>> 0 < $__ne >>> 0) {
    $__ns$036 = $32;
    while (1) {
     $43 = HEAP8[$__ns$036 >> 0] | 0;
     __ZNSt3__16__clocEv() | 0;
     $44 = $43 << 24 >> 24;
     if (($44 + -48 | 0) >>> 0 >= 10) if ((($44 | 32) + -97 | 0) >>> 0 >= 6) {
      $__nf$1 = $32;
      $__ns$2 = $__ns$036;
      break L4;
     }
     $41 = $__ns$036 + 1 | 0;
     if ($41 >>> 0 < $__ne >>> 0) $__ns$036 = $41; else {
      $__nf$1 = $32;
      $__ns$2 = $41;
      break;
     }
    }
   } else {
    $__nf$1 = $32;
    $__ns$2 = $32;
   }
  } else label = 4;
 } else label = 4; else label = 4; while (0);
 L13 : do if ((label | 0) == 4) if ($__nf$0 >>> 0 < $__ne >>> 0) {
  $__ns$131 = $__nf$0;
  while (1) {
   $50 = HEAP8[$__ns$131 >> 0] | 0;
   __ZNSt3__16__clocEv() | 0;
   $49 = $__ns$131 + 1 | 0;
   if ((($50 << 24 >> 24) + -48 | 0) >>> 0 >= 10) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$131;
    break L13;
   }
   if ($49 >>> 0 < $__ne >>> 0) $__ns$131 = $49; else {
    $__nf$1 = $__nf$0;
    $__ns$2 = $49;
    break;
   }
  }
 } else {
  $__nf$1 = $__nf$0;
  $__ns$2 = $__nf$0;
 } while (0);
 $52 = HEAP8[$__grouping >> 0] | 0;
 if (!($52 & 1)) $60 = ($52 & 255) >>> 1; else $60 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!$60) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] & 7]($2, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  HEAP32[$__oe >> 2] = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1);
 } else {
  if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $71 = $__ns$2 + -1 | 0;
   if ($71 >>> 0 > $__nf$1 >>> 0) {
    $$012$i$i = $__nf$1;
    $75 = $71;
    $78 = $__ns$2;
    while (1) {
     $73 = HEAP8[$$012$i$i >> 0] | 0;
     HEAP8[$$012$i$i >> 0] = HEAP8[$75 >> 0] | 0;
     HEAP8[$75 >> 0] = $73;
     $$012$i$i = $$012$i$i + 1 | 0;
     $77 = $78 + -2 | 0;
     if ($$012$i$i >>> 0 >= $77 >>> 0) break; else {
      $78$phi = $75;
      $75 = $77;
      $78 = $78$phi;
     }
    }
   }
  }
  $83 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 127]($5) | 0;
  if ($__nf$1 >>> 0 < $__ns$2 >>> 0) {
   $85 = $__grouping + 1 | 0;
   $86 = $__grouping + 4 | 0;
   $87 = $__grouping + 8 | 0;
   $__dc$027 = 0;
   $__dg$028 = 0;
   $__p$029 = $__nf$1;
   while (1) {
    $93 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $85 : HEAP32[$87 >> 2] | 0) + $__dg$028 >> 0] | 0;
    if ($93 << 24 >> 24 > 0 & ($__dc$027 | 0) == ($93 << 24 >> 24 | 0)) {
     $97 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $97 + 1;
     HEAP8[$97 >> 0] = $83;
     $99 = HEAP8[$__grouping >> 0] | 0;
     if (!($99 & 1)) $106 = ($99 & 255) >>> 1; else $106 = HEAP32[$86 >> 2] | 0;
     $__dc$1 = 0;
     $__dg$1 = ($__dg$028 >>> 0 < ($106 + -1 | 0) >>> 0 & 1) + $__dg$028 | 0;
    } else {
     $__dc$1 = $__dc$027;
     $__dg$1 = $__dg$028;
    }
    $113 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 31]($2, HEAP8[$__p$029 >> 0] | 0) | 0;
    $114 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $114 + 1;
    HEAP8[$114 >> 0] = $113;
    $__p$029 = $__p$029 + 1 | 0;
    if ($__p$029 >>> 0 >= $__ns$2 >>> 0) break; else {
     $__dc$027 = $__dc$1 + 1 | 0;
     $__dg$028 = $__dg$1;
    }
   }
  }
  $122 = $__ob + ($__nf$1 - $__nb) | 0;
  $123 = HEAP32[$__oe >> 2] | 0;
  if (($122 | 0) != ($123 | 0)) {
   $125 = $123 + -1 | 0;
   if ($125 >>> 0 > $122 >>> 0) {
    $$012$i$i7 = $122;
    $129 = $125;
    $132 = $123;
    while (1) {
     $127 = HEAP8[$$012$i$i7 >> 0] | 0;
     HEAP8[$$012$i$i7 >> 0] = HEAP8[$129 >> 0] | 0;
     HEAP8[$129 >> 0] = $127;
     $$012$i$i7 = $$012$i$i7 + 1 | 0;
     $131 = $132 + -2 | 0;
     if ($$012$i$i7 >>> 0 >= $131 >>> 0) break; else {
      $132$phi = $129;
      $129 = $131;
      $132 = $132$phi;
     }
    }
   }
  }
 }
 L47 : do if ($__ns$2 >>> 0 < $__ne >>> 0) {
  $__nf$226 = $__ns$2;
  while (1) {
   $135 = HEAP8[$__nf$226 >> 0] | 0;
   if ($135 << 24 >> 24 == 46) break;
   $147 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 31]($2, $135) | 0;
   $148 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $148 + 1;
   HEAP8[$148 >> 0] = $147;
   $150 = $__nf$226 + 1 | 0;
   if ($150 >>> 0 < $__ne >>> 0) $__nf$226 = $150; else {
    $__nf$3 = $150;
    break L47;
   }
  }
  $140 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 127]($5) | 0;
  $141 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $141 + 1;
  HEAP8[$141 >> 0] = $140;
  $__nf$3 = $__nf$226 + 1 | 0;
 } else $__nf$3 = $__ns$2; while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] & 7]($2, $__nf$3, $__ne, HEAP32[$__oe >> 2] | 0) | 0;
 $159 = (HEAP32[$__oe >> 2] | 0) + ($17 - $__nf$3) | 0;
 HEAP32[$__oe >> 2] = $159;
 if (($__np | 0) == ($__ne | 0)) $storemerge = $159; else $storemerge = $__ob + ($__np - $__nb) | 0;
 HEAP32[$__op >> 2] = $storemerge;
 if (!(HEAP8[$__grouping >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _mbsrtowcs($ws, $src, $wn, $st) {
 $ws = $ws | 0;
 $src = $src | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$0 = 0, $$02$ph = 0, $$0217 = 0, $$03 = 0, $$1 = 0, $$14$lcssa = 0, $$1413 = 0, $$2 = 0, $$25 = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$431 = 0, $$432 = 0, $$47$ph = 0, $$4716 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$830 = 0, $$in39 = 0, $0 = 0, $102 = 0, $108 = 0, $109 = 0, $117 = 0, $119 = 0, $122 = 0, $127 = 0, $129 = 0, $132 = 0, $14 = 0, $144 = 0, $149 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $28 = 0, $29 = 0, $34 = 0, $41 = 0, $48 = 0, $55 = 0, $64 = 0, $7 = 0, $72 = 0, $94 = 0, $95 = 0, $98 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1033 = 0, $s$1034 = 0, $s$114 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$518 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0, $$1$looptemp = 0, $s$6$looptemp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src >> 2] | 0;
 if (!$st) label = 5; else {
  $2 = HEAP32[$st >> 2] | 0;
  if (!$2) label = 5; else if (!$ws) {
   $$36 = $wn;
   $c$2 = $2;
   $s$3 = $0;
   label = 16;
  } else {
   HEAP32[$st >> 2] = 0;
   $$3 = $ws;
   $$7 = $wn;
   $c$4 = $2;
   $s$8 = $0;
   label = 36;
  }
 }
 if ((label | 0) == 5) if (!$ws) {
  $$03 = $wn;
  $s$0 = $0;
  label = 7;
 } else {
  $$02$ph = $ws;
  $$47$ph = $wn;
  $s$5$ph = $0;
  label = 6;
 }
 L7 : while (1) if ((label | 0) == 6) {
  label = 0;
  if (!$$47$ph) {
   $s$5$lcssa = $s$5$ph;
   label = 26;
   break;
  } else {
   $$0217 = $$02$ph;
   $$4716 = $$47$ph;
   $s$518 = $s$5$ph;
  }
  while (1) {
   $64 = HEAP8[$s$518 >> 0] | 0;
   L25 : do if ((($64 & 255) + -1 | 0) >>> 0 < 127) if (($s$518 & 3 | 0) == 0 & $$4716 >>> 0 > 4) {
    $$1 = $$0217;
    $$5 = $$4716;
    $s$6 = $s$518;
    do {
     $72 = HEAP32[$s$6 >> 2] | 0;
     if (($72 + -16843009 | $72) & -2139062144) {
      $$2 = $$1;
      $$6 = $$5;
      $95 = $72 & 255;
      $s$7 = $s$6;
      break L25;
     }
     HEAP32[$$1 >> 2] = $72 & 255;
     HEAP32[$$1 + 4 >> 2] = HEAPU8[$s$6 + 1 >> 0];
     HEAP32[$$1 + 8 >> 2] = HEAPU8[$s$6 + 2 >> 0];
     $s$6$looptemp = $s$6;
     $s$6 = $s$6 + 4 | 0;
     $$1$looptemp = $$1;
     $$1 = $$1 + 16 | 0;
     HEAP32[$$1$looptemp + 12 >> 2] = HEAPU8[$s$6$looptemp + 3 >> 0];
     $$5 = $$5 + -4 | 0;
    } while ($$5 >>> 0 > 4);
    $$2 = $$1;
    $$6 = $$5;
    $95 = HEAP8[$s$6 >> 0] | 0;
    $s$7 = $s$6;
   } else {
    $$2 = $$0217;
    $$6 = $$4716;
    $95 = $64;
    $s$7 = $s$518;
   } else {
    $$2 = $$0217;
    $$6 = $$4716;
    $95 = $64;
    $s$7 = $s$518;
   } while (0);
   $94 = $95 & 255;
   if (($94 + -1 | 0) >>> 0 >= 127) break;
   $98 = $s$7 + 1 | 0;
   HEAP32[$$2 >> 2] = $94;
   $$4716 = $$6 + -1 | 0;
   if (!$$4716) {
    $s$5$lcssa = $98;
    label = 26;
    break L7;
   } else {
    $$0217 = $$2 + 4 | 0;
    $s$518 = $98;
   }
  }
  $102 = $94 + -194 | 0;
  if ($102 >>> 0 > 50) {
   $$432 = $$2;
   $$830 = $$6;
   $144 = $95;
   $s$1034 = $s$7;
   label = 48;
   break;
  }
  $$3 = $$2;
  $$7 = $$6;
  $c$4 = HEAP32[58456 + ($102 << 2) >> 2] | 0;
  $s$8 = $s$7 + 1 | 0;
  label = 36;
  continue;
 } else if ((label | 0) == 7) {
  label = 0;
  $7 = HEAP8[$s$0 >> 0] | 0;
  if ((($7 & 255) + -1 | 0) >>> 0 < 127) if (!($s$0 & 3)) {
   $14 = HEAP32[$s$0 >> 2] | 0;
   if (!(($14 + -16843009 | $14) & -2139062144)) {
    $$1413 = $$03;
    $s$114 = $s$0;
    while (1) {
     $19 = $s$114 + 4 | 0;
     $20 = $$1413 + -4 | 0;
     $21 = HEAP32[$19 >> 2] | 0;
     if (!(($21 + -16843009 | $21) & -2139062144)) {
      $$1413 = $20;
      $s$114 = $19;
     } else {
      $$14$lcssa = $20;
      $$in39 = $21;
      $s$1$lcssa = $19;
      break;
     }
    }
   } else {
    $$14$lcssa = $$03;
    $$in39 = $14;
    $s$1$lcssa = $s$0;
   }
   $$25 = $$14$lcssa;
   $149 = $$in39 & 255;
   $29 = $$in39 & 255;
   $s$2 = $s$1$lcssa;
  } else {
   $$25 = $$03;
   $149 = $7;
   $29 = $7;
   $s$2 = $s$0;
  } else {
   $$25 = $$03;
   $149 = $7;
   $29 = $7;
   $s$2 = $s$0;
  }
  $28 = $29 & 255;
  if (($28 + -1 | 0) >>> 0 < 127) {
   $$03 = $$25 + -1 | 0;
   $s$0 = $s$2 + 1 | 0;
   label = 7;
   continue;
  }
  $34 = $28 + -194 | 0;
  if ($34 >>> 0 > 50) {
   $$432 = $ws;
   $$830 = $$25;
   $144 = $149;
   $s$1034 = $s$2;
   label = 48;
   break;
  }
  $$36 = $$25;
  $c$2 = HEAP32[58456 + ($34 << 2) >> 2] | 0;
  $s$3 = $s$2 + 1 | 0;
  label = 16;
  continue;
 } else if ((label | 0) == 16) {
  label = 0;
  $41 = (HEAPU8[$s$3 >> 0] | 0) >>> 3;
  if (($41 + -16 | $41 + ($c$2 >> 26)) >>> 0 > 7) {
   label = 17;
   break;
  }
  $48 = $s$3 + 1 | 0;
  if (!($c$2 & 33554432)) $s$4 = $48; else {
   if ((HEAP8[$48 >> 0] & -64) << 24 >> 24 != -128) {
    label = 20;
    break;
   }
   $55 = $s$3 + 2 | 0;
   if (!($c$2 & 524288)) $s$4 = $55; else {
    if ((HEAP8[$55 >> 0] & -64) << 24 >> 24 != -128) {
     label = 23;
     break;
    }
    $s$4 = $s$3 + 3 | 0;
   }
  }
  $$03 = $$36 + -1 | 0;
  $s$0 = $s$4;
  label = 7;
  continue;
 } else if ((label | 0) == 36) {
  label = 0;
  $108 = HEAPU8[$s$8 >> 0] | 0;
  $109 = $108 >>> 3;
  if (($109 + -16 | $109 + ($c$4 >> 26)) >>> 0 > 7) {
   label = 37;
   break;
  }
  $117 = $s$8 + 1 | 0;
  $119 = $108 + -128 | $c$4 << 6;
  if (($119 | 0) < 0) {
   $122 = HEAPU8[$117 >> 0] | 0;
   if (($122 & 192 | 0) != 128) {
    label = 40;
    break;
   }
   $127 = $s$8 + 2 | 0;
   $129 = $122 + -128 | $119 << 6;
   if (($129 | 0) < 0) {
    $132 = HEAPU8[$127 >> 0] | 0;
    if (($132 & 192 | 0) != 128) {
     label = 43;
     break;
    }
    $c$5 = $132 + -128 | $129 << 6;
    $s$9 = $s$8 + 3 | 0;
   } else {
    $c$5 = $129;
    $s$9 = $127;
   }
  } else {
   $c$5 = $119;
   $s$9 = $117;
  }
  HEAP32[$$3 >> 2] = $c$5;
  $$02$ph = $$3 + 4 | 0;
  $$47$ph = $$7 + -1 | 0;
  $s$5$ph = $s$9;
  label = 6;
  continue;
 }
 if ((label | 0) == 17) {
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 46;
 } else if ((label | 0) == 20) {
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 46;
 } else if ((label | 0) == 23) {
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 46;
 } else if ((label | 0) == 26) {
  HEAP32[$src >> 2] = $s$5$lcssa;
  $$0 = $wn;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 37) {
  $$4 = $$3;
  $$8 = $$7;
  $c$6 = $c$4;
  $s$10 = $s$8 + -1 | 0;
  label = 46;
 } else if ((label | 0) == 40) {
  $$4 = $$3;
  $$8 = $$7;
  $c$6 = $119;
  $s$10 = $s$8 + -1 | 0;
  label = 46;
 } else if ((label | 0) == 43) {
  $$4 = $$3;
  $$8 = $$7;
  $c$6 = $129;
  $s$10 = $s$8 + -1 | 0;
  label = 46;
 }
 if ((label | 0) == 46) if (!$c$6) {
  $$432 = $$4;
  $$830 = $$8;
  $144 = HEAP8[$s$10 >> 0] | 0;
  $s$1034 = $s$10;
  label = 48;
 } else {
  $$431 = $$4;
  $s$1033 = $s$10;
 }
 if ((label | 0) == 48) if (!($144 << 24 >> 24)) {
  if ($$432) {
   HEAP32[$$432 >> 2] = 0;
   HEAP32[$src >> 2] = 0;
  }
  $$0 = $wn - $$830 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$431 = $$432;
  $s$1033 = $s$1034;
 }
 HEAP32[(___errno_location() | 0) >> 2] = 84;
 if (!$$431) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$src >> 2] = $s$1033;
 $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first, $last, $op, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $op = $op | 0;
 $db = $db | 0;
 var $$0 = 0, $$03$i = 0, $$03$i11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $126 = 0, $136 = 0, $137 = 0, $138 = 0, $156 = 0, $157 = 0, $158 = 0, $161 = 0, $162 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $3 = 0, $35 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $58 = 0, $59 = 0, $6 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $97 = 0, $98 = 0, $l$04$i = 0, $l$04$i10 = 0, $op1 = 0, $op2 = 0, $r$05$i = 0, $r$05$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $op2 = sp + 12 | 0;
 $op1 = sp + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 60 | 0;
 $2 = sp + 84 | 0;
 $3 = sp;
 $4 = sp + 36 | 0;
 $5 = sp + 72 | 0;
 $6 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 if (($6 | 0) == ($first | 0)) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $8 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($6, $last, $db) | 0;
 $10 = $db + 4 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if (($8 | 0) == ($6 | 0)) {
  $156 = $11 + -24 | 0;
  $158 = $11;
  do {
   $157 = $158 + -24 | 0;
   HEAP32[$10 >> 2] = $157;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($157);
   $158 = HEAP32[$10 >> 2] | 0;
  } while (($158 | 0) != ($156 | 0));
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((($11 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op2, $11 + -24 | 0);
 $19 = HEAP32[$10 >> 2] | 0;
 $20 = $19 + -24 | 0;
 $22 = $19;
 do {
  $21 = $22 + -24 | 0;
  HEAP32[$10 >> 2] = $21;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
  $22 = HEAP32[$10 >> 2] | 0;
 } while (($22 | 0) != ($20 | 0));
 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op1, $19 + -48 | 0);
 $26 = HEAP32[$10 >> 2] | 0;
 $27 = $26 + -24 | 0;
 if (!(HEAP8[$27 >> 0] & 1)) {
  HEAP8[$27 + 1 >> 0] = 0;
  HEAP8[$27 >> 0] = 0;
 } else {
  HEAP8[HEAP32[$26 + -16 >> 2] >> 0] = 0;
  HEAP32[$26 + -20 >> 2] = 0;
 }
 $35 = HEAP8[$op >> 0] | 0;
 if (!($35 & 1)) {
  $161 = $op + 1 | 0;
  $46 = ($35 & 255) >>> 1;
 } else {
  $161 = HEAP32[$op + 8 >> 2] | 0;
  $46 = HEAP32[$op + 4 >> 2] | 0;
 }
 $45 = $46 >>> 0 > 1;
 $47 = $45 ? 1 : $46;
 L24 : do if (!$47) label = 15; else {
  $$03$i = $47;
  $l$04$i = $161;
  $r$05$i = 59032;
  while (1) {
   if ((HEAP8[$l$04$i >> 0] | 0) != (HEAP8[$r$05$i >> 0] | 0)) break L24;
   $$03$i = $$03$i + -1 | 0;
   if (!$$03$i) {
    label = 15;
    break;
   } else {
    $l$04$i = $l$04$i + 1 | 0;
    $r$05$i = $r$05$i + 1 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 15) if (($46 | 0) != 0 & ($45 ^ 1)) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($27, 40);
 __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 58944, $op1);
 $58 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5, 59536, 2) | 0;
 HEAP32[$4 + 0 >> 2] = HEAP32[$58 + 0 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$58 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$58 + 8 >> 2];
 HEAP32[$58 + 0 >> 2] = 0;
 HEAP32[$58 + 4 >> 2] = 0;
 HEAP32[$58 + 8 >> 2] = 0;
 $59 = HEAP8[$op >> 0] | 0;
 if (!($59 & 1)) {
  $69 = $op + 1 | 0;
  $70 = ($59 & 255) >>> 1;
 } else {
  $69 = HEAP32[$op + 8 >> 2] | 0;
  $70 = HEAP32[$op + 4 >> 2] | 0;
 }
 $71 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4, $69, $70) | 0;
 HEAP32[$3 + 0 >> 2] = HEAP32[$71 + 0 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$71 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$71 + 8 >> 2];
 HEAP32[$71 + 0 >> 2] = 0;
 HEAP32[$71 + 4 >> 2] = 0;
 HEAP32[$71 + 8 >> 2] = 0;
 $72 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, 58928, 2) | 0;
 HEAP32[$2 + 0 >> 2] = HEAP32[$72 + 0 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$72 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$72 + 8 >> 2];
 HEAP32[$72 + 0 >> 2] = 0;
 HEAP32[$72 + 4 >> 2] = 0;
 HEAP32[$72 + 8 >> 2] = 0;
 $73 = HEAP8[$op2 >> 0] | 0;
 $75 = ($73 & 1) == 0;
 if ($75) {
  $83 = $op2 + 1 | 0;
  $84 = ($73 & 255) >>> 1;
 } else {
  $83 = HEAP32[$op2 + 8 >> 2] | 0;
  $84 = HEAP32[$op2 + 4 >> 2] | 0;
 }
 $85 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2, $83, $84) | 0;
 HEAP32[$1 + 0 >> 2] = HEAP32[$85 + 0 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$85 + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$85 + 8 >> 2];
 HEAP32[$85 + 0 >> 2] = 0;
 HEAP32[$85 + 4 >> 2] = 0;
 HEAP32[$85 + 8 >> 2] = 0;
 $86 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1, 58936, 1) | 0;
 HEAP32[$0 + 0 >> 2] = HEAP32[$86 + 0 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$86 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$86 + 8 >> 2];
 HEAP32[$86 + 0 >> 2] = 0;
 HEAP32[$86 + 4 >> 2] = 0;
 HEAP32[$86 + 8 >> 2] = 0;
 $87 = HEAP8[$0 >> 0] | 0;
 $89 = ($87 & 1) == 0;
 if ($89) {
  $97 = $0 + 1 | 0;
  $98 = ($87 & 255) >>> 1;
 } else {
  $97 = HEAP32[$0 + 8 >> 2] | 0;
  $98 = HEAP32[$0 + 4 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($27, $97, $98) | 0;
 if (!$89) _free(HEAP32[$0 + 8 >> 2] | 0);
 if (HEAP8[$1 >> 0] & 1) _free(HEAP32[$1 + 8 >> 2] | 0);
 if (HEAP8[$2 >> 0] & 1) _free(HEAP32[$2 + 8 >> 2] | 0);
 if (HEAP8[$3 >> 0] & 1) _free(HEAP32[$3 + 8 >> 2] | 0);
 if (HEAP8[$4 >> 0] & 1) _free(HEAP32[$4 + 8 >> 2] | 0);
 if (HEAP8[$5 >> 0] & 1) _free(HEAP32[$5 + 8 >> 2] | 0);
 $126 = HEAP8[$op >> 0] | 0;
 if (!($126 & 1)) {
  $137 = ($126 & 255) >>> 1;
  $162 = $op + 1 | 0;
 } else {
  $137 = HEAP32[$op + 4 >> 2] | 0;
  $162 = HEAP32[$op + 8 >> 2] | 0;
 }
 $136 = $137 >>> 0 > 1;
 $138 = $136 ? 1 : $137;
 L66 : do if (!$138) label = 44; else {
  $$03$i11 = $138;
  $l$04$i10 = $162;
  $r$05$i9 = 59032;
  while (1) {
   if ((HEAP8[$l$04$i10 >> 0] | 0) != (HEAP8[$r$05$i9 >> 0] | 0)) break L66;
   $$03$i11 = $$03$i11 + -1 | 0;
   if (!$$03$i11) {
    label = 44;
    break;
   } else {
    $l$04$i10 = $l$04$i10 + 1 | 0;
    $r$05$i9 = $r$05$i9 + 1 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 44) if (($137 | 0) != 0 & ($136 ^ 1)) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($27, 41);
 if (HEAP8[$op1 >> 0] & 1) _free(HEAP32[$op1 + 8 >> 2] | 0);
 if ($75) {
  $$0 = $8;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _free(HEAP32[$op2 + 8 >> 2] | 0);
 $$0 = $8;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i4$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i10$i = 0, $$pre$i$i$i6$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $106 = 0, $11 = 0, $115 = 0, $118 = 0, $130 = 0, $14 = 0, $141 = 0, $142 = 0, $23 = 0, $26 = 0, $37 = 0, $39 = 0, $44 = 0, $5 = 0, $50 = 0, $56 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $76 = 0, $8 = 0, $83 = 0, $9 = 0, $91 = 0, $94 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms$i = sp + 208 | 0;
 $__decimal_point$i = sp + 184 | 0;
 $__thousands_sep$i = sp + 4 | 0;
 $__grouping$i = sp + 8 | 0;
 $__buf$i = sp + 196 | 0;
 $__a_end$i = sp;
 $__g$i = sp + 24 | 0;
 $__g_end$i = sp + 192 | 0;
 $__dc$i = sp + 188 | 0;
 $__in_units$i = sp + 337 | 0;
 $__exp$i = sp + 336 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping$i, $__iob, $__atoms$i, $__decimal_point$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $7 = $__buf$i + 1 | 0;
  $$pre$phi34$iZ2D = $7;
  $$pre$phi36$iZ2D = $__buf$i + 8 | 0;
  $8 = $7;
 } else {
  $5 = $__buf$i + 8 | 0;
  $$pre$phi34$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi36$iZ2D = $5;
  $8 = HEAP32[$5 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $8;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 HEAP8[$__in_units$i >> 0] = 1;
 HEAP8[$__exp$i >> 0] = 69;
 $9 = $__buf$i + 4 | 0;
 $10 = HEAP32[$__decimal_point$i >> 2] | 0;
 $11 = HEAP32[$__thousands_sep$i >> 2] | 0;
 $$pre$i$i$i6$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $8;
 while (1) {
  if (!$$pre$i$i$i6$i) {
   $141 = 1;
   $64 = 0;
  } else {
   $14 = HEAP32[$$pre$i$i$i6$i + 12 >> 2] | 0;
   if (($14 | 0) == (HEAP32[$$pre$i$i$i6$i + 16 >> 2] | 0)) $$0$i$i$i$i4$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i6$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i6$i) | 0; else $$0$i$i$i$i4$i = HEAP32[$14 >> 2] | 0;
   $23 = ($$0$i$i$i$i4$i | 0) == -1;
   $141 = $23 ? 1 : 0;
   $64 = $23 ? 0 : $$pre$i$i$i6$i;
  }
  if (!$$sroa$06$0) label = 15; else {
   $26 = HEAP32[$$sroa$06$0 + 12 >> 2] | 0;
   if (($26 | 0) == (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) $$0$i$i1$i$i10$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0; else $$0$i$i1$i$i10$i = HEAP32[$26 >> 2] | 0;
   if (($$0$i$i1$i$i10$i | 0) == -1) label = 15; else if ($141) $$sroa$06$2 = $$sroa$06$0; else {
    $$pre$i3$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break;
   }
  }
  if ((label | 0) == 15) {
   label = 0;
   if ($141) {
    $$pre$i3$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $37 = HEAP8[$__buf$i >> 0] | 0;
  $39 = ($37 & 1) == 0;
  if ($39) $44 = ($37 & 255) >>> 1; else $44 = HEAP32[$9 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $44 | 0)) {
   if ($39) $50 = ($37 & 255) >>> 1; else $50 = HEAP32[$9 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $50 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $56 = 10; else $56 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $56);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $62 = $$pre$phi34$iZ2D; else $62 = HEAP32[$$pre$phi36$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $62 + $50;
   $__a$1$i = $62;
  } else $__a$1$i = $__a$0$i;
  $63 = $64 + 12 | 0;
  $65 = HEAP32[$63 >> 2] | 0;
  $66 = $64 + 16 | 0;
  if (($65 | 0) == (HEAP32[$66 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 127]($64) | 0; else $$0$i$i$i = HEAP32[$65 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i$i, $__in_units$i, $__exp$i, $__a$1$i, $__a_end$i, $10, $11, $__grouping$i, $__g$i, $__g_end$i, $__dc$i, $__atoms$i) | 0) {
   $$pre$i3$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $76 = HEAP32[$63 >> 2] | 0;
  if (($76 | 0) == (HEAP32[$66 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 40 >> 2] & 127]($64) | 0;
   $$pre$i$i$i6$i = $64;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$63 >> 2] = $76 + 4;
   $$pre$i$i$i6$i = $64;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $83 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($83 & 1)) $91 = ($83 & 255) >>> 1; else $91 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if (!(($91 | 0) == 0 | (HEAP8[$__in_units$i >> 0] | 0) == 0)) {
  $94 = HEAP32[$__g_end$i >> 2] | 0;
  if (($94 - $__g$i | 0) < 160) {
   $99 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 HEAPF32[$__v >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$64) {
  $130 = 0;
  $142 = 1;
 } else {
  $106 = HEAP32[$64 + 12 >> 2] | 0;
  if (($106 | 0) == (HEAP32[$64 + 16 >> 2] | 0)) $$0$i$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 127]($64) | 0; else $$0$i$i$i$i$i = HEAP32[$106 >> 2] | 0;
  $115 = ($$0$i$i$i$i$i | 0) == -1;
  $130 = $115 ? 0 : $64;
  $142 = $115 ? 1 : 0;
 }
 if (!$$pre$i3$i$i$i) label = 52; else {
  $118 = HEAP32[$$pre$i3$i$i$i + 12 >> 2] | 0;
  if (($118 | 0) == (HEAP32[$$pre$i3$i$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i$i) | 0; else $$0$i$i1$i$i$i = HEAP32[$118 >> 2] | 0;
  if (($$0$i$i1$i$i$i | 0) == -1) label = 52; else if (!$142) label = 54;
 }
 if ((label | 0) == 52) if ($142) label = 54;
 if ((label | 0) == 54) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $130;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i4$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i10$i = 0, $$pre$i$i$i6$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $106 = 0, $11 = 0, $115 = 0, $118 = 0, $130 = 0, $14 = 0, $141 = 0, $142 = 0, $23 = 0, $26 = 0, $37 = 0, $39 = 0, $44 = 0, $5 = 0, $50 = 0, $56 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $76 = 0, $8 = 0, $83 = 0, $9 = 0, $91 = 0, $94 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms$i = sp + 208 | 0;
 $__decimal_point$i = sp + 184 | 0;
 $__thousands_sep$i = sp + 4 | 0;
 $__grouping$i = sp + 8 | 0;
 $__buf$i = sp + 196 | 0;
 $__a_end$i = sp;
 $__g$i = sp + 24 | 0;
 $__g_end$i = sp + 192 | 0;
 $__dc$i = sp + 188 | 0;
 $__in_units$i = sp + 337 | 0;
 $__exp$i = sp + 336 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping$i, $__iob, $__atoms$i, $__decimal_point$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $7 = $__buf$i + 1 | 0;
  $$pre$phi34$iZ2D = $7;
  $$pre$phi36$iZ2D = $__buf$i + 8 | 0;
  $8 = $7;
 } else {
  $5 = $__buf$i + 8 | 0;
  $$pre$phi34$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi36$iZ2D = $5;
  $8 = HEAP32[$5 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $8;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 HEAP8[$__in_units$i >> 0] = 1;
 HEAP8[$__exp$i >> 0] = 69;
 $9 = $__buf$i + 4 | 0;
 $10 = HEAP32[$__decimal_point$i >> 2] | 0;
 $11 = HEAP32[$__thousands_sep$i >> 2] | 0;
 $$pre$i$i$i6$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $8;
 while (1) {
  if (!$$pre$i$i$i6$i) {
   $141 = 1;
   $64 = 0;
  } else {
   $14 = HEAP32[$$pre$i$i$i6$i + 12 >> 2] | 0;
   if (($14 | 0) == (HEAP32[$$pre$i$i$i6$i + 16 >> 2] | 0)) $$0$i$i$i$i4$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i6$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i6$i) | 0; else $$0$i$i$i$i4$i = HEAP32[$14 >> 2] | 0;
   $23 = ($$0$i$i$i$i4$i | 0) == -1;
   $141 = $23 ? 1 : 0;
   $64 = $23 ? 0 : $$pre$i$i$i6$i;
  }
  if (!$$sroa$06$0) label = 15; else {
   $26 = HEAP32[$$sroa$06$0 + 12 >> 2] | 0;
   if (($26 | 0) == (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) $$0$i$i1$i$i10$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0; else $$0$i$i1$i$i10$i = HEAP32[$26 >> 2] | 0;
   if (($$0$i$i1$i$i10$i | 0) == -1) label = 15; else if ($141) $$sroa$06$2 = $$sroa$06$0; else {
    $$pre$i3$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break;
   }
  }
  if ((label | 0) == 15) {
   label = 0;
   if ($141) {
    $$pre$i3$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $37 = HEAP8[$__buf$i >> 0] | 0;
  $39 = ($37 & 1) == 0;
  if ($39) $44 = ($37 & 255) >>> 1; else $44 = HEAP32[$9 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $44 | 0)) {
   if ($39) $50 = ($37 & 255) >>> 1; else $50 = HEAP32[$9 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $50 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $56 = 10; else $56 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $56);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $62 = $$pre$phi34$iZ2D; else $62 = HEAP32[$$pre$phi36$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $62 + $50;
   $__a$1$i = $62;
  } else $__a$1$i = $__a$0$i;
  $63 = $64 + 12 | 0;
  $65 = HEAP32[$63 >> 2] | 0;
  $66 = $64 + 16 | 0;
  if (($65 | 0) == (HEAP32[$66 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 127]($64) | 0; else $$0$i$i$i = HEAP32[$65 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i$i, $__in_units$i, $__exp$i, $__a$1$i, $__a_end$i, $10, $11, $__grouping$i, $__g$i, $__g_end$i, $__dc$i, $__atoms$i) | 0) {
   $$pre$i3$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $76 = HEAP32[$63 >> 2] | 0;
  if (($76 | 0) == (HEAP32[$66 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 40 >> 2] & 127]($64) | 0;
   $$pre$i$i$i6$i = $64;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$63 >> 2] = $76 + 4;
   $$pre$i$i$i6$i = $64;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $83 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($83 & 1)) $91 = ($83 & 255) >>> 1; else $91 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if (!(($91 | 0) == 0 | (HEAP8[$__in_units$i >> 0] | 0) == 0)) {
  $94 = HEAP32[$__g_end$i >> 2] | 0;
  if (($94 - $__g$i | 0) < 160) {
   $99 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$64) {
  $130 = 0;
  $142 = 1;
 } else {
  $106 = HEAP32[$64 + 12 >> 2] | 0;
  if (($106 | 0) == (HEAP32[$64 + 16 >> 2] | 0)) $$0$i$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 127]($64) | 0; else $$0$i$i$i$i$i = HEAP32[$106 >> 2] | 0;
  $115 = ($$0$i$i$i$i$i | 0) == -1;
  $130 = $115 ? 0 : $64;
  $142 = $115 ? 1 : 0;
 }
 if (!$$pre$i3$i$i$i) label = 52; else {
  $118 = HEAP32[$$pre$i3$i$i$i + 12 >> 2] | 0;
  if (($118 | 0) == (HEAP32[$$pre$i3$i$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i$i) | 0; else $$0$i$i1$i$i$i = HEAP32[$118 >> 2] | 0;
  if (($$0$i$i1$i$i$i | 0) == -1) label = 52; else if (!$142) label = 54;
 }
 if ((label | 0) == 52) if ($142) label = 54;
 if ((label | 0) == 54) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $130;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i4$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i10$i = 0, $$pre$i$i$i6$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $106 = 0, $11 = 0, $115 = 0, $118 = 0, $130 = 0, $14 = 0, $141 = 0, $142 = 0, $23 = 0, $26 = 0, $37 = 0, $39 = 0, $44 = 0, $5 = 0, $50 = 0, $56 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $76 = 0, $8 = 0, $83 = 0, $9 = 0, $91 = 0, $94 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms$i = sp + 208 | 0;
 $__decimal_point$i = sp + 184 | 0;
 $__thousands_sep$i = sp + 4 | 0;
 $__grouping$i = sp + 8 | 0;
 $__buf$i = sp + 196 | 0;
 $__a_end$i = sp;
 $__g$i = sp + 24 | 0;
 $__g_end$i = sp + 192 | 0;
 $__dc$i = sp + 188 | 0;
 $__in_units$i = sp + 337 | 0;
 $__exp$i = sp + 336 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping$i, $__iob, $__atoms$i, $__decimal_point$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $7 = $__buf$i + 1 | 0;
  $$pre$phi34$iZ2D = $7;
  $$pre$phi36$iZ2D = $__buf$i + 8 | 0;
  $8 = $7;
 } else {
  $5 = $__buf$i + 8 | 0;
  $$pre$phi34$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi36$iZ2D = $5;
  $8 = HEAP32[$5 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $8;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 HEAP8[$__in_units$i >> 0] = 1;
 HEAP8[$__exp$i >> 0] = 69;
 $9 = $__buf$i + 4 | 0;
 $10 = HEAP32[$__decimal_point$i >> 2] | 0;
 $11 = HEAP32[$__thousands_sep$i >> 2] | 0;
 $$pre$i$i$i6$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $8;
 while (1) {
  if (!$$pre$i$i$i6$i) {
   $141 = 1;
   $64 = 0;
  } else {
   $14 = HEAP32[$$pre$i$i$i6$i + 12 >> 2] | 0;
   if (($14 | 0) == (HEAP32[$$pre$i$i$i6$i + 16 >> 2] | 0)) $$0$i$i$i$i4$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i6$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i6$i) | 0; else $$0$i$i$i$i4$i = HEAP32[$14 >> 2] | 0;
   $23 = ($$0$i$i$i$i4$i | 0) == -1;
   $141 = $23 ? 1 : 0;
   $64 = $23 ? 0 : $$pre$i$i$i6$i;
  }
  if (!$$sroa$06$0) label = 15; else {
   $26 = HEAP32[$$sroa$06$0 + 12 >> 2] | 0;
   if (($26 | 0) == (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) $$0$i$i1$i$i10$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0; else $$0$i$i1$i$i10$i = HEAP32[$26 >> 2] | 0;
   if (($$0$i$i1$i$i10$i | 0) == -1) label = 15; else if ($141) $$sroa$06$2 = $$sroa$06$0; else {
    $$pre$i3$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break;
   }
  }
  if ((label | 0) == 15) {
   label = 0;
   if ($141) {
    $$pre$i3$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $37 = HEAP8[$__buf$i >> 0] | 0;
  $39 = ($37 & 1) == 0;
  if ($39) $44 = ($37 & 255) >>> 1; else $44 = HEAP32[$9 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $44 | 0)) {
   if ($39) $50 = ($37 & 255) >>> 1; else $50 = HEAP32[$9 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $50 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $56 = 10; else $56 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $56);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $62 = $$pre$phi34$iZ2D; else $62 = HEAP32[$$pre$phi36$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $62 + $50;
   $__a$1$i = $62;
  } else $__a$1$i = $__a$0$i;
  $63 = $64 + 12 | 0;
  $65 = HEAP32[$63 >> 2] | 0;
  $66 = $64 + 16 | 0;
  if (($65 | 0) == (HEAP32[$66 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 127]($64) | 0; else $$0$i$i$i = HEAP32[$65 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i$i, $__in_units$i, $__exp$i, $__a$1$i, $__a_end$i, $10, $11, $__grouping$i, $__g$i, $__g_end$i, $__dc$i, $__atoms$i) | 0) {
   $$pre$i3$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $76 = HEAP32[$63 >> 2] | 0;
  if (($76 | 0) == (HEAP32[$66 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 40 >> 2] & 127]($64) | 0;
   $$pre$i$i$i6$i = $64;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$63 >> 2] = $76 + 4;
   $$pre$i$i$i6$i = $64;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $83 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($83 & 1)) $91 = ($83 & 255) >>> 1; else $91 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if (!(($91 | 0) == 0 | (HEAP8[$__in_units$i >> 0] | 0) == 0)) {
  $94 = HEAP32[$__g_end$i >> 2] | 0;
  if (($94 - $__g$i | 0) < 160) {
   $99 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$64) {
  $130 = 0;
  $142 = 1;
 } else {
  $106 = HEAP32[$64 + 12 >> 2] | 0;
  if (($106 | 0) == (HEAP32[$64 + 16 >> 2] | 0)) $$0$i$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 127]($64) | 0; else $$0$i$i$i$i$i = HEAP32[$106 >> 2] | 0;
  $115 = ($$0$i$i$i$i$i | 0) == -1;
  $130 = $115 ? 0 : $64;
  $142 = $115 ? 1 : 0;
 }
 if (!$$pre$i3$i$i$i) label = 52; else {
  $118 = HEAP32[$$pre$i3$i$i$i + 12 >> 2] | 0;
  if (($118 | 0) == (HEAP32[$$pre$i3$i$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i$i) | 0; else $$0$i$i1$i$i$i = HEAP32[$118 >> 2] | 0;
  if (($$0$i$i1$i$i$i | 0) == -1) label = 52; else if (!$142) label = 54;
 }
 if ((label | 0) == 52) if ($142) label = 54;
 if ((label | 0) == 54) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $130;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $104 = 0, $11 = 0, $111 = 0, $12 = 0, $120 = 0, $123 = 0, $13 = 0, $135 = 0, $146 = 0, $147 = 0, $16 = 0, $25 = 0, $28 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $52 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $93 = 0, $94 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms$i = sp + 160 | 0;
 $__thousands_sep$i = sp + 280 | 0;
 $__grouping$i = sp + 264 | 0;
 $__buf$i = sp + 284 | 0;
 $__a_end$i = sp + 300 | 0;
 $__g$i = sp;
 $__g_end$i = sp + 276 | 0;
 $__dc$i = sp + 296 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 8) $$0$i$i = 16; else if (!$4) $$0$i$i = 0; else if (($4 | 0) == 64) $$0$i$i = 8; else $$0$i$i = 10;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i, $__iob, $__atoms$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $10 = $__buf$i + 1 | 0;
  $$pre$phi33$iZ2D = $10;
  $$pre$phi35$iZ2D = $__buf$i + 8 | 0;
  $11 = $10;
 } else {
  $8 = $__buf$i + 8 | 0;
  $$pre$phi33$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi35$iZ2D = $8;
  $11 = HEAP32[$8 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $11;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 $12 = $__buf$i + 4 | 0;
 $13 = HEAP32[$__thousands_sep$i >> 2] | 0;
 $$pre$i$i$i5$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $11;
 while (1) {
  if (!$$pre$i$i$i5$i) {
   $146 = 1;
   $66 = 0;
  } else {
   $16 = HEAP32[$$pre$i$i$i5$i + 12 >> 2] | 0;
   if (($16 | 0) == (HEAP32[$$pre$i$i$i5$i + 16 >> 2] | 0)) $$0$i$i$i$i3$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5$i) | 0; else $$0$i$i$i$i3$i = HEAP32[$16 >> 2] | 0;
   $25 = ($$0$i$i$i$i3$i | 0) == -1;
   $146 = $25 ? 1 : 0;
   $66 = $25 ? 0 : $$pre$i$i$i5$i;
  }
  if (!$$sroa$06$0) label = 19; else {
   $28 = HEAP32[$$sroa$06$0 + 12 >> 2] | 0;
   if (($28 | 0) == (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) $$0$i$i1$i$i9$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0; else $$0$i$i1$i$i9$i = HEAP32[$28 >> 2] | 0;
   if (($$0$i$i1$i$i9$i | 0) == -1) label = 19; else if ($146) $$sroa$06$2 = $$sroa$06$0; else {
    $$pre$i3$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break;
   }
  }
  if ((label | 0) == 19) {
   label = 0;
   if ($146) {
    $$pre$i3$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $39 = HEAP8[$__buf$i >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) $46 = ($39 & 255) >>> 1; else $46 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $46 | 0)) {
   if ($41) $52 = ($39 & 255) >>> 1; else $52 = HEAP32[$12 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $52 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $58);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $64 = $$pre$phi33$iZ2D; else $64 = HEAP32[$$pre$phi35$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $64 + $52;
   $__a$1$i = $64;
  } else $__a$1$i = $__a$0$i;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $$0$i$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i, $$0$i$i, $__a$1$i, $__a_end$i, $__dc$i, $13, $__grouping$i, $__g$i, $__g_end$i, $__atoms$i) | 0) {
   $$pre$i3$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 127]($66) | 0;
   $$pre$i$i$i5$i = $66;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i5$i = $66;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $85 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($85 & 1)) $93 = ($85 & 255) >>> 1; else $93 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if ($93) {
  $94 = HEAP32[$__g_end$i >> 2] | 0;
  if (($94 - $__g$i | 0) < 160) {
   $99 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 $102 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err, $$0$i$i) | 0;
 $104 = $__v;
 HEAP32[$104 >> 2] = $102;
 HEAP32[$104 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$66) {
  $135 = 0;
  $147 = 1;
 } else {
  $111 = HEAP32[$66 + 12 >> 2] | 0;
  if (($111 | 0) == (HEAP32[$66 + 16 >> 2] | 0)) $$0$i$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $$0$i$i$i$i$i = HEAP32[$111 >> 2] | 0;
  $120 = ($$0$i$i$i$i$i | 0) == -1;
  $135 = $120 ? 0 : $66;
  $147 = $120 ? 1 : 0;
 }
 if (!$$pre$i3$i$i$i) label = 56; else {
  $123 = HEAP32[$$pre$i3$i$i$i + 12 >> 2] | 0;
  if (($123 | 0) == (HEAP32[$$pre$i3$i$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i$i) | 0; else $$0$i$i1$i$i$i = HEAP32[$123 >> 2] | 0;
  if (($$0$i$i1$i$i$i | 0) == -1) label = 56; else if (!$147) label = 58;
 }
 if ((label | 0) == 56) if ($147) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $135;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $104 = 0, $11 = 0, $111 = 0, $12 = 0, $120 = 0, $123 = 0, $13 = 0, $135 = 0, $146 = 0, $147 = 0, $16 = 0, $25 = 0, $28 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $52 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $93 = 0, $94 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms$i = sp + 160 | 0;
 $__thousands_sep$i = sp + 280 | 0;
 $__grouping$i = sp + 264 | 0;
 $__buf$i = sp + 284 | 0;
 $__a_end$i = sp + 300 | 0;
 $__g$i = sp;
 $__g_end$i = sp + 276 | 0;
 $__dc$i = sp + 296 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (!$4) $$0$i$i = 0; else if (($4 | 0) == 8) $$0$i$i = 16; else if (($4 | 0) == 64) $$0$i$i = 8; else $$0$i$i = 10;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i, $__iob, $__atoms$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $10 = $__buf$i + 1 | 0;
  $$pre$phi33$iZ2D = $10;
  $$pre$phi35$iZ2D = $__buf$i + 8 | 0;
  $11 = $10;
 } else {
  $8 = $__buf$i + 8 | 0;
  $$pre$phi33$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi35$iZ2D = $8;
  $11 = HEAP32[$8 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $11;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 $12 = $__buf$i + 4 | 0;
 $13 = HEAP32[$__thousands_sep$i >> 2] | 0;
 $$pre$i$i$i5$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $11;
 while (1) {
  if (!$$pre$i$i$i5$i) {
   $146 = 1;
   $66 = 0;
  } else {
   $16 = HEAP32[$$pre$i$i$i5$i + 12 >> 2] | 0;
   if (($16 | 0) == (HEAP32[$$pre$i$i$i5$i + 16 >> 2] | 0)) $$0$i$i$i$i3$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5$i) | 0; else $$0$i$i$i$i3$i = HEAP32[$16 >> 2] | 0;
   $25 = ($$0$i$i$i$i3$i | 0) == -1;
   $146 = $25 ? 1 : 0;
   $66 = $25 ? 0 : $$pre$i$i$i5$i;
  }
  if (!$$sroa$06$0) label = 19; else {
   $28 = HEAP32[$$sroa$06$0 + 12 >> 2] | 0;
   if (($28 | 0) == (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) $$0$i$i1$i$i9$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0; else $$0$i$i1$i$i9$i = HEAP32[$28 >> 2] | 0;
   if (($$0$i$i1$i$i9$i | 0) == -1) label = 19; else if ($146) $$sroa$06$2 = $$sroa$06$0; else {
    $$pre$i3$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break;
   }
  }
  if ((label | 0) == 19) {
   label = 0;
   if ($146) {
    $$pre$i3$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $39 = HEAP8[$__buf$i >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) $46 = ($39 & 255) >>> 1; else $46 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $46 | 0)) {
   if ($41) $52 = ($39 & 255) >>> 1; else $52 = HEAP32[$12 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $52 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $58);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $64 = $$pre$phi33$iZ2D; else $64 = HEAP32[$$pre$phi35$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $64 + $52;
   $__a$1$i = $64;
  } else $__a$1$i = $__a$0$i;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $$0$i$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i, $$0$i$i, $__a$1$i, $__a_end$i, $__dc$i, $13, $__grouping$i, $__g$i, $__g_end$i, $__atoms$i) | 0) {
   $$pre$i3$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 127]($66) | 0;
   $$pre$i$i$i5$i = $66;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i5$i = $66;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $85 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($85 & 1)) $93 = ($85 & 255) >>> 1; else $93 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if ($93) {
  $94 = HEAP32[$__g_end$i >> 2] | 0;
  if (($94 - $__g$i | 0) < 160) {
   $99 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 $102 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err, $$0$i$i) | 0;
 $104 = $__v;
 HEAP32[$104 >> 2] = $102;
 HEAP32[$104 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$66) {
  $135 = 0;
  $147 = 1;
 } else {
  $111 = HEAP32[$66 + 12 >> 2] | 0;
  if (($111 | 0) == (HEAP32[$66 + 16 >> 2] | 0)) $$0$i$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $$0$i$i$i$i$i = HEAP32[$111 >> 2] | 0;
  $120 = ($$0$i$i$i$i$i | 0) == -1;
  $135 = $120 ? 0 : $66;
  $147 = $120 ? 1 : 0;
 }
 if (!$$pre$i3$i$i$i) label = 56; else {
  $123 = HEAP32[$$pre$i3$i$i$i + 12 >> 2] | 0;
  if (($123 | 0) == (HEAP32[$$pre$i3$i$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i$i) | 0; else $$0$i$i1$i$i$i = HEAP32[$123 >> 2] | 0;
  if (($$0$i$i1$i$i$i | 0) == -1) label = 56; else if (!$147) label = 58;
 }
 if ((label | 0) == 56) if ($147) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $135;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $106 = 0, $11 = 0, $115 = 0, $118 = 0, $12 = 0, $13 = 0, $130 = 0, $141 = 0, $142 = 0, $16 = 0, $25 = 0, $28 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $52 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $93 = 0, $94 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms$i = sp + 160 | 0;
 $__thousands_sep$i = sp + 280 | 0;
 $__grouping$i = sp + 264 | 0;
 $__buf$i = sp + 284 | 0;
 $__a_end$i = sp + 300 | 0;
 $__g$i = sp;
 $__g_end$i = sp + 276 | 0;
 $__dc$i = sp + 296 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 8) $$0$i$i = 16; else if (!$4) $$0$i$i = 0; else if (($4 | 0) == 64) $$0$i$i = 8; else $$0$i$i = 10;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i, $__iob, $__atoms$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $10 = $__buf$i + 1 | 0;
  $$pre$phi33$iZ2D = $10;
  $$pre$phi35$iZ2D = $__buf$i + 8 | 0;
  $11 = $10;
 } else {
  $8 = $__buf$i + 8 | 0;
  $$pre$phi33$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi35$iZ2D = $8;
  $11 = HEAP32[$8 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $11;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 $12 = $__buf$i + 4 | 0;
 $13 = HEAP32[$__thousands_sep$i >> 2] | 0;
 $$pre$i$i$i5$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $11;
 while (1) {
  if (!$$pre$i$i$i5$i) {
   $141 = 1;
   $66 = 0;
  } else {
   $16 = HEAP32[$$pre$i$i$i5$i + 12 >> 2] | 0;
   if (($16 | 0) == (HEAP32[$$pre$i$i$i5$i + 16 >> 2] | 0)) $$0$i$i$i$i3$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5$i) | 0; else $$0$i$i$i$i3$i = HEAP32[$16 >> 2] | 0;
   $25 = ($$0$i$i$i$i3$i | 0) == -1;
   $141 = $25 ? 1 : 0;
   $66 = $25 ? 0 : $$pre$i$i$i5$i;
  }
  if (!$$sroa$06$0) label = 19; else {
   $28 = HEAP32[$$sroa$06$0 + 12 >> 2] | 0;
   if (($28 | 0) == (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) $$0$i$i1$i$i9$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0; else $$0$i$i1$i$i9$i = HEAP32[$28 >> 2] | 0;
   if (($$0$i$i1$i$i9$i | 0) == -1) label = 19; else if ($141) $$sroa$06$2 = $$sroa$06$0; else {
    $$pre$i3$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break;
   }
  }
  if ((label | 0) == 19) {
   label = 0;
   if ($141) {
    $$pre$i3$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $39 = HEAP8[$__buf$i >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) $46 = ($39 & 255) >>> 1; else $46 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $46 | 0)) {
   if ($41) $52 = ($39 & 255) >>> 1; else $52 = HEAP32[$12 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $52 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $58);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $64 = $$pre$phi33$iZ2D; else $64 = HEAP32[$$pre$phi35$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $64 + $52;
   $__a$1$i = $64;
  } else $__a$1$i = $__a$0$i;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $$0$i$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i, $$0$i$i, $__a$1$i, $__a_end$i, $__dc$i, $13, $__grouping$i, $__g$i, $__g_end$i, $__atoms$i) | 0) {
   $$pre$i3$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 127]($66) | 0;
   $$pre$i$i$i5$i = $66;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i5$i = $66;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $85 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($85 & 1)) $93 = ($85 & 255) >>> 1; else $93 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if ($93) {
  $94 = HEAP32[$__g_end$i >> 2] | 0;
  if (($94 - $__g$i | 0) < 160) {
   $99 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err, $$0$i$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$66) {
  $130 = 0;
  $142 = 1;
 } else {
  $106 = HEAP32[$66 + 12 >> 2] | 0;
  if (($106 | 0) == (HEAP32[$66 + 16 >> 2] | 0)) $$0$i$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $$0$i$i$i$i$i = HEAP32[$106 >> 2] | 0;
  $115 = ($$0$i$i$i$i$i | 0) == -1;
  $130 = $115 ? 0 : $66;
  $142 = $115 ? 1 : 0;
 }
 if (!$$pre$i3$i$i$i) label = 56; else {
  $118 = HEAP32[$$pre$i3$i$i$i + 12 >> 2] | 0;
  if (($118 | 0) == (HEAP32[$$pre$i3$i$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i$i) | 0; else $$0$i$i1$i$i$i = HEAP32[$118 >> 2] | 0;
  if (($$0$i$i1$i$i$i | 0) == -1) label = 56; else if (!$142) label = 58;
 }
 if ((label | 0) == 56) if ($142) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $130;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $106 = 0, $11 = 0, $115 = 0, $118 = 0, $12 = 0, $13 = 0, $130 = 0, $141 = 0, $142 = 0, $16 = 0, $25 = 0, $28 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $52 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $93 = 0, $94 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms$i = sp + 160 | 0;
 $__thousands_sep$i = sp + 280 | 0;
 $__grouping$i = sp + 264 | 0;
 $__buf$i = sp + 284 | 0;
 $__a_end$i = sp + 300 | 0;
 $__g$i = sp;
 $__g_end$i = sp + 276 | 0;
 $__dc$i = sp + 296 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (!$4) $$0$i$i = 0; else if (($4 | 0) == 64) $$0$i$i = 8; else if (($4 | 0) == 8) $$0$i$i = 16; else $$0$i$i = 10;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i, $__iob, $__atoms$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $10 = $__buf$i + 1 | 0;
  $$pre$phi33$iZ2D = $10;
  $$pre$phi35$iZ2D = $__buf$i + 8 | 0;
  $11 = $10;
 } else {
  $8 = $__buf$i + 8 | 0;
  $$pre$phi33$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi35$iZ2D = $8;
  $11 = HEAP32[$8 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $11;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 $12 = $__buf$i + 4 | 0;
 $13 = HEAP32[$__thousands_sep$i >> 2] | 0;
 $$pre$i$i$i5$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $11;
 while (1) {
  if (!$$pre$i$i$i5$i) {
   $141 = 1;
   $66 = 0;
  } else {
   $16 = HEAP32[$$pre$i$i$i5$i + 12 >> 2] | 0;
   if (($16 | 0) == (HEAP32[$$pre$i$i$i5$i + 16 >> 2] | 0)) $$0$i$i$i$i3$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5$i) | 0; else $$0$i$i$i$i3$i = HEAP32[$16 >> 2] | 0;
   $25 = ($$0$i$i$i$i3$i | 0) == -1;
   $141 = $25 ? 1 : 0;
   $66 = $25 ? 0 : $$pre$i$i$i5$i;
  }
  if (!$$sroa$06$0) label = 19; else {
   $28 = HEAP32[$$sroa$06$0 + 12 >> 2] | 0;
   if (($28 | 0) == (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) $$0$i$i1$i$i9$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0; else $$0$i$i1$i$i9$i = HEAP32[$28 >> 2] | 0;
   if (($$0$i$i1$i$i9$i | 0) == -1) label = 19; else if ($141) $$sroa$06$2 = $$sroa$06$0; else {
    $$pre$i3$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break;
   }
  }
  if ((label | 0) == 19) {
   label = 0;
   if ($141) {
    $$pre$i3$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $39 = HEAP8[$__buf$i >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) $46 = ($39 & 255) >>> 1; else $46 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $46 | 0)) {
   if ($41) $52 = ($39 & 255) >>> 1; else $52 = HEAP32[$12 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $52 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $58);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $64 = $$pre$phi33$iZ2D; else $64 = HEAP32[$$pre$phi35$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $64 + $52;
   $__a$1$i = $64;
  } else $__a$1$i = $__a$0$i;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $$0$i$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i, $$0$i$i, $__a$1$i, $__a_end$i, $__dc$i, $13, $__grouping$i, $__g$i, $__g_end$i, $__atoms$i) | 0) {
   $$pre$i3$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 127]($66) | 0;
   $$pre$i$i$i5$i = $66;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i5$i = $66;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $85 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($85 & 1)) $93 = ($85 & 255) >>> 1; else $93 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if ($93) {
  $94 = HEAP32[$__g_end$i >> 2] | 0;
  if (($94 - $__g$i | 0) < 160) {
   $99 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 HEAP16[$__v >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err, $$0$i$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$66) {
  $130 = 0;
  $142 = 1;
 } else {
  $106 = HEAP32[$66 + 12 >> 2] | 0;
  if (($106 | 0) == (HEAP32[$66 + 16 >> 2] | 0)) $$0$i$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $$0$i$i$i$i$i = HEAP32[$106 >> 2] | 0;
  $115 = ($$0$i$i$i$i$i | 0) == -1;
  $130 = $115 ? 0 : $66;
  $142 = $115 ? 1 : 0;
 }
 if (!$$pre$i3$i$i$i) label = 56; else {
  $118 = HEAP32[$$pre$i3$i$i$i + 12 >> 2] | 0;
  if (($118 | 0) == (HEAP32[$$pre$i3$i$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i$i) | 0; else $$0$i$i1$i$i$i = HEAP32[$118 >> 2] | 0;
  if (($$0$i$i1$i$i$i | 0) == -1) label = 56; else if (!$142) label = 58;
 }
 if ((label | 0) == 56) if ($142) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $130;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $106 = 0, $11 = 0, $115 = 0, $118 = 0, $12 = 0, $13 = 0, $130 = 0, $141 = 0, $142 = 0, $16 = 0, $25 = 0, $28 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $52 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $93 = 0, $94 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms$i = sp + 160 | 0;
 $__thousands_sep$i = sp + 280 | 0;
 $__grouping$i = sp + 264 | 0;
 $__buf$i = sp + 284 | 0;
 $__a_end$i = sp + 300 | 0;
 $__g$i = sp;
 $__g_end$i = sp + 276 | 0;
 $__dc$i = sp + 296 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 8) $$0$i$i = 16; else if (!$4) $$0$i$i = 0; else if (($4 | 0) == 64) $$0$i$i = 8; else $$0$i$i = 10;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i, $__iob, $__atoms$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $10 = $__buf$i + 1 | 0;
  $$pre$phi33$iZ2D = $10;
  $$pre$phi35$iZ2D = $__buf$i + 8 | 0;
  $11 = $10;
 } else {
  $8 = $__buf$i + 8 | 0;
  $$pre$phi33$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi35$iZ2D = $8;
  $11 = HEAP32[$8 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $11;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 $12 = $__buf$i + 4 | 0;
 $13 = HEAP32[$__thousands_sep$i >> 2] | 0;
 $$pre$i$i$i5$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $11;
 while (1) {
  if (!$$pre$i$i$i5$i) {
   $141 = 1;
   $66 = 0;
  } else {
   $16 = HEAP32[$$pre$i$i$i5$i + 12 >> 2] | 0;
   if (($16 | 0) == (HEAP32[$$pre$i$i$i5$i + 16 >> 2] | 0)) $$0$i$i$i$i3$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5$i) | 0; else $$0$i$i$i$i3$i = HEAP32[$16 >> 2] | 0;
   $25 = ($$0$i$i$i$i3$i | 0) == -1;
   $141 = $25 ? 1 : 0;
   $66 = $25 ? 0 : $$pre$i$i$i5$i;
  }
  if (!$$sroa$06$0) label = 19; else {
   $28 = HEAP32[$$sroa$06$0 + 12 >> 2] | 0;
   if (($28 | 0) == (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) $$0$i$i1$i$i9$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0; else $$0$i$i1$i$i9$i = HEAP32[$28 >> 2] | 0;
   if (($$0$i$i1$i$i9$i | 0) == -1) label = 19; else if ($141) $$sroa$06$2 = $$sroa$06$0; else {
    $$pre$i3$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break;
   }
  }
  if ((label | 0) == 19) {
   label = 0;
   if ($141) {
    $$pre$i3$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $39 = HEAP8[$__buf$i >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) $46 = ($39 & 255) >>> 1; else $46 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $46 | 0)) {
   if ($41) $52 = ($39 & 255) >>> 1; else $52 = HEAP32[$12 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $52 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $58);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $64 = $$pre$phi33$iZ2D; else $64 = HEAP32[$$pre$phi35$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $64 + $52;
   $__a$1$i = $64;
  } else $__a$1$i = $__a$0$i;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $$0$i$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i, $$0$i$i, $__a$1$i, $__a_end$i, $__dc$i, $13, $__grouping$i, $__g$i, $__g_end$i, $__atoms$i) | 0) {
   $$pre$i3$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 127]($66) | 0;
   $$pre$i$i$i5$i = $66;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i5$i = $66;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $85 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($85 & 1)) $93 = ($85 & 255) >>> 1; else $93 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if ($93) {
  $94 = HEAP32[$__g_end$i >> 2] | 0;
  if (($94 - $__g$i | 0) < 160) {
   $99 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err, $$0$i$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$66) {
  $130 = 0;
  $142 = 1;
 } else {
  $106 = HEAP32[$66 + 12 >> 2] | 0;
  if (($106 | 0) == (HEAP32[$66 + 16 >> 2] | 0)) $$0$i$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $$0$i$i$i$i$i = HEAP32[$106 >> 2] | 0;
  $115 = ($$0$i$i$i$i$i | 0) == -1;
  $130 = $115 ? 0 : $66;
  $142 = $115 ? 1 : 0;
 }
 if (!$$pre$i3$i$i$i) label = 56; else {
  $118 = HEAP32[$$pre$i3$i$i$i + 12 >> 2] | 0;
  if (($118 | 0) == (HEAP32[$$pre$i3$i$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i$i) | 0; else $$0$i$i1$i$i$i = HEAP32[$118 >> 2] | 0;
  if (($$0$i$i1$i$i$i | 0) == -1) label = 56; else if (!$142) label = 58;
 }
 if ((label | 0) == 56) if ($142) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $130;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $106 = 0, $11 = 0, $115 = 0, $118 = 0, $12 = 0, $13 = 0, $130 = 0, $141 = 0, $142 = 0, $16 = 0, $25 = 0, $28 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $52 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $93 = 0, $94 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms$i = sp + 160 | 0;
 $__thousands_sep$i = sp + 280 | 0;
 $__grouping$i = sp + 264 | 0;
 $__buf$i = sp + 284 | 0;
 $__a_end$i = sp + 300 | 0;
 $__g$i = sp;
 $__g_end$i = sp + 276 | 0;
 $__dc$i = sp + 296 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (!$4) $$0$i$i = 0; else if (($4 | 0) == 8) $$0$i$i = 16; else if (($4 | 0) == 64) $$0$i$i = 8; else $$0$i$i = 10;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i, $__iob, $__atoms$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $10 = $__buf$i + 1 | 0;
  $$pre$phi33$iZ2D = $10;
  $$pre$phi35$iZ2D = $__buf$i + 8 | 0;
  $11 = $10;
 } else {
  $8 = $__buf$i + 8 | 0;
  $$pre$phi33$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi35$iZ2D = $8;
  $11 = HEAP32[$8 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $11;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 $12 = $__buf$i + 4 | 0;
 $13 = HEAP32[$__thousands_sep$i >> 2] | 0;
 $$pre$i$i$i5$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $11;
 while (1) {
  if (!$$pre$i$i$i5$i) {
   $141 = 1;
   $66 = 0;
  } else {
   $16 = HEAP32[$$pre$i$i$i5$i + 12 >> 2] | 0;
   if (($16 | 0) == (HEAP32[$$pre$i$i$i5$i + 16 >> 2] | 0)) $$0$i$i$i$i3$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5$i) | 0; else $$0$i$i$i$i3$i = HEAP32[$16 >> 2] | 0;
   $25 = ($$0$i$i$i$i3$i | 0) == -1;
   $141 = $25 ? 1 : 0;
   $66 = $25 ? 0 : $$pre$i$i$i5$i;
  }
  if (!$$sroa$06$0) label = 19; else {
   $28 = HEAP32[$$sroa$06$0 + 12 >> 2] | 0;
   if (($28 | 0) == (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) $$0$i$i1$i$i9$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0; else $$0$i$i1$i$i9$i = HEAP32[$28 >> 2] | 0;
   if (($$0$i$i1$i$i9$i | 0) == -1) label = 19; else if ($141) $$sroa$06$2 = $$sroa$06$0; else {
    $$pre$i3$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break;
   }
  }
  if ((label | 0) == 19) {
   label = 0;
   if ($141) {
    $$pre$i3$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $39 = HEAP8[$__buf$i >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) $46 = ($39 & 255) >>> 1; else $46 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $46 | 0)) {
   if ($41) $52 = ($39 & 255) >>> 1; else $52 = HEAP32[$12 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $52 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $58);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $64 = $$pre$phi33$iZ2D; else $64 = HEAP32[$$pre$phi35$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $64 + $52;
   $__a$1$i = $64;
  } else $__a$1$i = $__a$0$i;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $$0$i$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i, $$0$i$i, $__a$1$i, $__a_end$i, $__dc$i, $13, $__grouping$i, $__g$i, $__g_end$i, $__atoms$i) | 0) {
   $$pre$i3$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 127]($66) | 0;
   $$pre$i$i$i5$i = $66;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i5$i = $66;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $85 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($85 & 1)) $93 = ($85 & 255) >>> 1; else $93 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if ($93) {
  $94 = HEAP32[$__g_end$i >> 2] | 0;
  if (($94 - $__g$i | 0) < 160) {
   $99 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err, $$0$i$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$66) {
  $130 = 0;
  $142 = 1;
 } else {
  $106 = HEAP32[$66 + 12 >> 2] | 0;
  if (($106 | 0) == (HEAP32[$66 + 16 >> 2] | 0)) $$0$i$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $$0$i$i$i$i$i = HEAP32[$106 >> 2] | 0;
  $115 = ($$0$i$i$i$i$i | 0) == -1;
  $130 = $115 ? 0 : $66;
  $142 = $115 ? 1 : 0;
 }
 if (!$$pre$i3$i$i$i) label = 56; else {
  $118 = HEAP32[$$pre$i3$i$i$i + 12 >> 2] | 0;
  if (($118 | 0) == (HEAP32[$$pre$i3$i$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i$i) | 0; else $$0$i$i1$i$i$i = HEAP32[$118 >> 2] | 0;
  if (($$0$i$i1$i$i$i | 0) == -1) label = 56; else if (!$142) label = 58;
 }
 if ((label | 0) == 56) if ($142) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $130;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i = 0, $$lcssa = 0, $$pre$i$i$i5$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi31$iZ2D = 0, $$pre$phi33$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $115 = 0, $116 = 0, $117 = 0, $22 = 0, $23 = 0, $24 = 0, $37 = 0, $39 = 0, $44 = 0, $5 = 0, $50 = 0, $56 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $77 = 0, $8 = 0, $84 = 0, $9 = 0, $92 = 0, $95 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $__atoms$i = sp + 208 | 0;
 $__decimal_point$i = sp + 200 | 0;
 $__thousands_sep$i = sp + 240 | 0;
 $__grouping$i = sp;
 $__buf$i = sp + 188 | 0;
 $__a_end$i = sp + 184 | 0;
 $__g$i = sp + 16 | 0;
 $__g_end$i = sp + 176 | 0;
 $__dc$i = sp + 180 | 0;
 $__in_units$i = sp + 241 | 0;
 $__exp$i = sp + 242 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping$i, $__iob, $__atoms$i, $__decimal_point$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $7 = $__buf$i + 1 | 0;
  $$pre$phi31$iZ2D = $7;
  $$pre$phi33$iZ2D = $__buf$i + 8 | 0;
  $8 = $7;
 } else {
  $5 = $__buf$i + 8 | 0;
  $$pre$phi31$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi33$iZ2D = $5;
  $8 = HEAP32[$5 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $8;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 HEAP8[$__in_units$i >> 0] = 1;
 HEAP8[$__exp$i >> 0] = 69;
 $9 = $__buf$i + 4 | 0;
 $10 = HEAP8[$__decimal_point$i >> 0] | 0;
 $11 = HEAP8[$__thousands_sep$i >> 0] | 0;
 $$pre$i$i$i5$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $8;
 L5 : while (1) {
  if (!$$pre$i$i$i5$i) $24 = 0; else if ((HEAP32[$$pre$i$i$i5$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i5$i + 16 >> 2] | 0)) {
   $22 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5$i) | 0) == -1;
   $24 = $22 ? 0 : $$pre$i$i$i5$i;
  } else $24 = $$pre$i$i$i5$i;
  $23 = ($24 | 0) == 0;
  do if (!$$sroa$06$0) label = 12; else {
   if ((HEAP32[$$sroa$06$0 + 12 >> 2] | 0) != (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) if ($23) {
    $$sroa$06$2 = $$sroa$06$0;
    break;
   } else {
    $$lcssa = $24;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0) == -1) label = 12; else if ($23) $$sroa$06$2 = $$sroa$06$0; else {
    $$lcssa = $24;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L5;
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0;
   if ($23) {
    $$lcssa = 0;
    $$pre$i2$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $37 = HEAP8[$__buf$i >> 0] | 0;
  $39 = ($37 & 1) == 0;
  if ($39) $44 = ($37 & 255) >>> 1; else $44 = HEAP32[$9 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $44 | 0)) {
   if ($39) $50 = ($37 & 255) >>> 1; else $50 = HEAP32[$9 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $50 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $56 = 10; else $56 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $56);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $62 = $$pre$phi31$iZ2D; else $62 = HEAP32[$$pre$phi33$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $62 + $50;
   $__a$1$i = $62;
  } else $__a$1$i = $__a$0$i;
  $63 = $24 + 12 | 0;
  $64 = HEAP32[$63 >> 2] | 0;
  $65 = $24 + 16 | 0;
  if (($64 | 0) == (HEAP32[$65 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 127]($24) | 0; else $$0$i$i$i = HEAPU8[$64 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i$i & 255, $__in_units$i, $__exp$i, $__a$1$i, $__a_end$i, $10, $11, $__grouping$i, $__g$i, $__g_end$i, $__dc$i, $__atoms$i) | 0) {
   $$lcssa = $24;
   $$pre$i2$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $77 = HEAP32[$63 >> 2] | 0;
  if (($77 | 0) == (HEAP32[$65 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] & 127]($24) | 0;
   $$pre$i$i$i5$i = $24;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$63 >> 2] = $77 + 1;
   $$pre$i$i$i5$i = $24;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $84 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($84 & 1)) $92 = ($84 & 255) >>> 1; else $92 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if (!(($92 | 0) == 0 | (HEAP8[$__in_units$i >> 0] | 0) == 0)) {
  $95 = HEAP32[$__g_end$i >> 2] | 0;
  if (($95 - $__g$i | 0) < 160) {
   $100 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 HEAPF32[$__v >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$$lcssa) $117 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) {
  $115 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0) == -1;
  $117 = $115 ? 0 : $$lcssa;
 } else $117 = $$lcssa;
 $116 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i$i) label = 46; else {
  if ((HEAP32[$$pre$i2$i$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i$i + 16 >> 2] | 0)) if ($116) break; else {
   label = 48;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i$i) | 0) == -1) label = 46; else if (!$116) label = 48;
 } while (0);
 if ((label | 0) == 46) if ($116) label = 48;
 if ((label | 0) == 48) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $117;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i = 0, $$lcssa = 0, $$pre$i$i$i5$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi31$iZ2D = 0, $$pre$phi33$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $115 = 0, $116 = 0, $117 = 0, $22 = 0, $23 = 0, $24 = 0, $37 = 0, $39 = 0, $44 = 0, $5 = 0, $50 = 0, $56 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $77 = 0, $8 = 0, $84 = 0, $9 = 0, $92 = 0, $95 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $__atoms$i = sp + 208 | 0;
 $__decimal_point$i = sp + 200 | 0;
 $__thousands_sep$i = sp + 240 | 0;
 $__grouping$i = sp;
 $__buf$i = sp + 188 | 0;
 $__a_end$i = sp + 184 | 0;
 $__g$i = sp + 16 | 0;
 $__g_end$i = sp + 176 | 0;
 $__dc$i = sp + 180 | 0;
 $__in_units$i = sp + 241 | 0;
 $__exp$i = sp + 242 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping$i, $__iob, $__atoms$i, $__decimal_point$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $7 = $__buf$i + 1 | 0;
  $$pre$phi31$iZ2D = $7;
  $$pre$phi33$iZ2D = $__buf$i + 8 | 0;
  $8 = $7;
 } else {
  $5 = $__buf$i + 8 | 0;
  $$pre$phi31$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi33$iZ2D = $5;
  $8 = HEAP32[$5 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $8;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 HEAP8[$__in_units$i >> 0] = 1;
 HEAP8[$__exp$i >> 0] = 69;
 $9 = $__buf$i + 4 | 0;
 $10 = HEAP8[$__decimal_point$i >> 0] | 0;
 $11 = HEAP8[$__thousands_sep$i >> 0] | 0;
 $$pre$i$i$i5$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $8;
 L5 : while (1) {
  if (!$$pre$i$i$i5$i) $24 = 0; else if ((HEAP32[$$pre$i$i$i5$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i5$i + 16 >> 2] | 0)) {
   $22 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5$i) | 0) == -1;
   $24 = $22 ? 0 : $$pre$i$i$i5$i;
  } else $24 = $$pre$i$i$i5$i;
  $23 = ($24 | 0) == 0;
  do if (!$$sroa$06$0) label = 12; else {
   if ((HEAP32[$$sroa$06$0 + 12 >> 2] | 0) != (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) if ($23) {
    $$sroa$06$2 = $$sroa$06$0;
    break;
   } else {
    $$lcssa = $24;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0) == -1) label = 12; else if ($23) $$sroa$06$2 = $$sroa$06$0; else {
    $$lcssa = $24;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L5;
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0;
   if ($23) {
    $$lcssa = 0;
    $$pre$i2$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $37 = HEAP8[$__buf$i >> 0] | 0;
  $39 = ($37 & 1) == 0;
  if ($39) $44 = ($37 & 255) >>> 1; else $44 = HEAP32[$9 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $44 | 0)) {
   if ($39) $50 = ($37 & 255) >>> 1; else $50 = HEAP32[$9 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $50 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $56 = 10; else $56 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $56);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $62 = $$pre$phi31$iZ2D; else $62 = HEAP32[$$pre$phi33$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $62 + $50;
   $__a$1$i = $62;
  } else $__a$1$i = $__a$0$i;
  $63 = $24 + 12 | 0;
  $64 = HEAP32[$63 >> 2] | 0;
  $65 = $24 + 16 | 0;
  if (($64 | 0) == (HEAP32[$65 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 127]($24) | 0; else $$0$i$i$i = HEAPU8[$64 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i$i & 255, $__in_units$i, $__exp$i, $__a$1$i, $__a_end$i, $10, $11, $__grouping$i, $__g$i, $__g_end$i, $__dc$i, $__atoms$i) | 0) {
   $$lcssa = $24;
   $$pre$i2$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $77 = HEAP32[$63 >> 2] | 0;
  if (($77 | 0) == (HEAP32[$65 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] & 127]($24) | 0;
   $$pre$i$i$i5$i = $24;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$63 >> 2] = $77 + 1;
   $$pre$i$i$i5$i = $24;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $84 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($84 & 1)) $92 = ($84 & 255) >>> 1; else $92 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if (!(($92 | 0) == 0 | (HEAP8[$__in_units$i >> 0] | 0) == 0)) {
  $95 = HEAP32[$__g_end$i >> 2] | 0;
  if (($95 - $__g$i | 0) < 160) {
   $100 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$$lcssa) $117 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) {
  $115 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0) == -1;
  $117 = $115 ? 0 : $$lcssa;
 } else $117 = $$lcssa;
 $116 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i$i) label = 46; else {
  if ((HEAP32[$$pre$i2$i$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i$i + 16 >> 2] | 0)) if ($116) break; else {
   label = 48;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i$i) | 0) == -1) label = 46; else if (!$116) label = 48;
 } while (0);
 if ((label | 0) == 46) if ($116) label = 48;
 if ((label | 0) == 48) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $117;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i = 0, $$lcssa = 0, $$pre$i$i$i5$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi31$iZ2D = 0, $$pre$phi33$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $115 = 0, $116 = 0, $117 = 0, $22 = 0, $23 = 0, $24 = 0, $37 = 0, $39 = 0, $44 = 0, $5 = 0, $50 = 0, $56 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $77 = 0, $8 = 0, $84 = 0, $9 = 0, $92 = 0, $95 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $__atoms$i = sp + 208 | 0;
 $__decimal_point$i = sp + 200 | 0;
 $__thousands_sep$i = sp + 240 | 0;
 $__grouping$i = sp;
 $__buf$i = sp + 188 | 0;
 $__a_end$i = sp + 184 | 0;
 $__g$i = sp + 16 | 0;
 $__g_end$i = sp + 176 | 0;
 $__dc$i = sp + 180 | 0;
 $__in_units$i = sp + 241 | 0;
 $__exp$i = sp + 242 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping$i, $__iob, $__atoms$i, $__decimal_point$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $7 = $__buf$i + 1 | 0;
  $$pre$phi31$iZ2D = $7;
  $$pre$phi33$iZ2D = $__buf$i + 8 | 0;
  $8 = $7;
 } else {
  $5 = $__buf$i + 8 | 0;
  $$pre$phi31$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi33$iZ2D = $5;
  $8 = HEAP32[$5 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $8;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 HEAP8[$__in_units$i >> 0] = 1;
 HEAP8[$__exp$i >> 0] = 69;
 $9 = $__buf$i + 4 | 0;
 $10 = HEAP8[$__decimal_point$i >> 0] | 0;
 $11 = HEAP8[$__thousands_sep$i >> 0] | 0;
 $$pre$i$i$i5$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $8;
 L5 : while (1) {
  if (!$$pre$i$i$i5$i) $24 = 0; else if ((HEAP32[$$pre$i$i$i5$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i5$i + 16 >> 2] | 0)) {
   $22 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5$i) | 0) == -1;
   $24 = $22 ? 0 : $$pre$i$i$i5$i;
  } else $24 = $$pre$i$i$i5$i;
  $23 = ($24 | 0) == 0;
  do if (!$$sroa$06$0) label = 12; else {
   if ((HEAP32[$$sroa$06$0 + 12 >> 2] | 0) != (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) if ($23) {
    $$sroa$06$2 = $$sroa$06$0;
    break;
   } else {
    $$lcssa = $24;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0) == -1) label = 12; else if ($23) $$sroa$06$2 = $$sroa$06$0; else {
    $$lcssa = $24;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L5;
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0;
   if ($23) {
    $$lcssa = 0;
    $$pre$i2$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $37 = HEAP8[$__buf$i >> 0] | 0;
  $39 = ($37 & 1) == 0;
  if ($39) $44 = ($37 & 255) >>> 1; else $44 = HEAP32[$9 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $44 | 0)) {
   if ($39) $50 = ($37 & 255) >>> 1; else $50 = HEAP32[$9 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $50 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $56 = 10; else $56 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $56);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $62 = $$pre$phi31$iZ2D; else $62 = HEAP32[$$pre$phi33$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $62 + $50;
   $__a$1$i = $62;
  } else $__a$1$i = $__a$0$i;
  $63 = $24 + 12 | 0;
  $64 = HEAP32[$63 >> 2] | 0;
  $65 = $24 + 16 | 0;
  if (($64 | 0) == (HEAP32[$65 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 127]($24) | 0; else $$0$i$i$i = HEAPU8[$64 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i$i & 255, $__in_units$i, $__exp$i, $__a$1$i, $__a_end$i, $10, $11, $__grouping$i, $__g$i, $__g_end$i, $__dc$i, $__atoms$i) | 0) {
   $$lcssa = $24;
   $$pre$i2$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $77 = HEAP32[$63 >> 2] | 0;
  if (($77 | 0) == (HEAP32[$65 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] & 127]($24) | 0;
   $$pre$i$i$i5$i = $24;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$63 >> 2] = $77 + 1;
   $$pre$i$i$i5$i = $24;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $84 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($84 & 1)) $92 = ($84 & 255) >>> 1; else $92 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if (!(($92 | 0) == 0 | (HEAP8[$__in_units$i >> 0] | 0) == 0)) {
  $95 = HEAP32[$__g_end$i >> 2] | 0;
  if (($95 - $__g$i | 0) < 160) {
   $100 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$$lcssa) $117 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) {
  $115 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0) == -1;
  $117 = $115 ? 0 : $$lcssa;
 } else $117 = $$lcssa;
 $116 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i$i) label = 46; else {
  if ((HEAP32[$$pre$i2$i$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i$i + 16 >> 2] | 0)) if ($116) break; else {
   label = 48;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i$i) | 0) == -1) label = 46; else if (!$116) label = 48;
 } while (0);
 if ((label | 0) == 46) if ($116) label = 48;
 if ((label | 0) == 48) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $117;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i13 = 0, $$pre$i$i$i9 = 0, $$pre$i3$i$i = 0, $$pre$phi38Z2D = 0, $$pre$phi40Z2D = 0, $1 = 0, $10 = 0, $103 = 0, $104 = 0, $109 = 0, $121 = 0, $133 = 0, $144 = 0, $145 = 0, $146 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $35 = 0, $38 = 0, $4 = 0, $49 = 0, $5 = 0, $51 = 0, $56 = 0, $62 = 0, $68 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $88 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $vararg_buffer = sp;
 $__atoms = sp + 168 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 300 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 272 | 0;
 $__dc = sp + 304 | 0;
 HEAP32[$__grouping + 0 >> 2] = 0;
 HEAP32[$__grouping + 4 >> 2] = 0;
 HEAP32[$__grouping + 8 >> 2] = 0;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$1 + 8 >> 2] | 0, HEAP32[$1 + 12 >> 2] | 0, $4) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] & 7]($5, 49384, 49410 | 0, $__atoms) | 0;
 $9 = $1 + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 HEAP32[$9 >> 2] = $10 + -1;
 if (!$10) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $20 = $__buf + 1 | 0;
  $$pre$phi38Z2D = $20;
  $$pre$phi40Z2D = $__buf + 8 | 0;
  $21 = $20;
 } else {
  $18 = $__buf + 8 | 0;
  $$pre$phi38Z2D = $__buf + 1 | 0;
  $$pre$phi40Z2D = $18;
  $21 = HEAP32[$18 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $21;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $22 = $__buf + 4 | 0;
 $$pre$i$i$i9 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $21;
 L8 : while (1) {
  if (!$$pre$i$i$i9) {
   $144 = 1;
   $76 = 0;
  } else {
   $25 = HEAP32[$$pre$i$i$i9 + 12 >> 2] | 0;
   if (($25 | 0) == (HEAP32[$$pre$i$i$i9 + 16 >> 2] | 0)) $$0$i$i$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i9 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i9) | 0; else $$0$i$i$i$i7 = HEAP32[$25 >> 2] | 0;
   if (($$0$i$i$i$i7 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $144 = 1;
    $76 = 0;
   } else {
    $144 = 0;
    $76 = $$pre$i$i$i9;
   }
  }
  $35 = HEAP32[$__e >> 2] | 0;
  do if (!$35) label = 19; else {
   $38 = HEAP32[$35 + 12 >> 2] | 0;
   if (($38 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) $$0$i$i1$i$i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 127]($35) | 0; else $$0$i$i1$i$i13 = HEAP32[$38 >> 2] | 0;
   if (($$0$i$i1$i$i13 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($144) {
    $145 = $35;
    break;
   } else {
    $$pre$i3$i$i = $35;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($144) {
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $145 = 0;
  }
  $49 = HEAP8[$__buf >> 0] | 0;
  $51 = ($49 & 1) == 0;
  if ($51) $56 = ($49 & 255) >>> 1; else $56 = HEAP32[$22 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $56 | 0)) {
   if ($51) $62 = ($49 & 255) >>> 1; else $62 = HEAP32[$22 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $62 << 1);
   if (!(HEAP8[$__buf >> 0] & 1)) $68 = 10; else $68 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $68);
   if (!(HEAP8[$__buf >> 0] & 1)) $74 = $$pre$phi38Z2D; else $74 = HEAP32[$$pre$phi40Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $74 + $62;
   $__a$1 = $74;
  } else $__a$1 = $__a$0;
  $75 = $76 + 12 | 0;
  $77 = HEAP32[$75 >> 2] | 0;
  $78 = $76 + 16 | 0;
  if (($77 | 0) == (HEAP32[$78 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 36 >> 2] & 127]($76) | 0; else $$0$i$i = HEAP32[$77 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i3$i$i = $145;
   $__a$2 = $__a$1;
   break;
  }
  $88 = HEAP32[$75 >> 2] | 0;
  if (($88 | 0) == (HEAP32[$78 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 40 >> 2] & 127]($76) | 0;
   $$pre$i$i$i9 = $76;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$75 >> 2] = $88 + 4;
   $$pre$i$i$i9 = $76;
   $__a$0 = $__a$1;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0);
 if (!(HEAP8[$__buf >> 0] & 1)) $104 = $$pre$phi38Z2D; else $104 = HEAP32[$$pre$phi40Z2D >> 2] | 0;
 $103 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($104, $103, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if (!$76) {
  $133 = 0;
  $146 = 1;
 } else {
  $109 = HEAP32[$76 + 12 >> 2] | 0;
  if (($109 | 0) == (HEAP32[$76 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 36 >> 2] & 127]($76) | 0; else $$0$i$i$i$i = HEAP32[$109 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $133 = 0;
   $146 = 1;
  } else {
   $133 = $76;
   $146 = 0;
  }
 }
 do if (!$$pre$i3$i$i) label = 56; else {
  $121 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($121 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$121 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 56;
   break;
  } else if ($146) break; else {
   label = 58;
   break;
  }
 } while (0);
 if ((label | 0) == 56) if ($146) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $133;
 if (HEAP8[$__buf >> 0] & 1) _free(HEAP32[$__buf + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$lcssa = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi30$iZ2D = 0, $$pre$phi32$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $11 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $24 = 0, $25 = 0, $26 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $52 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $94 = 0, $95 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms$i = sp + 198 | 0;
 $__thousands_sep$i = sp + 196 | 0;
 $__grouping$i = sp + 16 | 0;
 $__buf$i = sp + 4 | 0;
 $__a_end$i = sp + 192 | 0;
 $__g$i = sp + 32 | 0;
 $__g_end$i = sp;
 $__dc$i = sp + 28 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (!$4) $$0$i$i = 0; else if (($4 | 0) == 64) $$0$i$i = 8; else if (($4 | 0) == 8) $$0$i$i = 16; else $$0$i$i = 10;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i, $__iob, $__atoms$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $10 = $__buf$i + 1 | 0;
  $$pre$phi30$iZ2D = $10;
  $$pre$phi32$iZ2D = $__buf$i + 8 | 0;
  $11 = $10;
 } else {
  $8 = $__buf$i + 8 | 0;
  $$pre$phi30$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi32$iZ2D = $8;
  $11 = HEAP32[$8 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $11;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 $12 = $__buf$i + 4 | 0;
 $13 = HEAP8[$__thousands_sep$i >> 0] | 0;
 $$pre$i$i$i4$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $11;
 L10 : while (1) {
  if (!$$pre$i$i$i4$i) $26 = 0; else if ((HEAP32[$$pre$i$i$i4$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4$i + 16 >> 2] | 0)) {
   $24 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4$i) | 0) == -1;
   $26 = $24 ? 0 : $$pre$i$i$i4$i;
  } else $26 = $$pre$i$i$i4$i;
  $25 = ($26 | 0) == 0;
  do if (!$$sroa$06$0) label = 16; else {
   if ((HEAP32[$$sroa$06$0 + 12 >> 2] | 0) != (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) if ($25) {
    $$sroa$06$2 = $$sroa$06$0;
    break;
   } else {
    $$lcssa = $26;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L10;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0) == -1) label = 16; else if ($25) $$sroa$06$2 = $$sroa$06$0; else {
    $$lcssa = $26;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L10;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($25) {
    $$lcssa = 0;
    $$pre$i2$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $39 = HEAP8[$__buf$i >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) $46 = ($39 & 255) >>> 1; else $46 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $46 | 0)) {
   if ($41) $52 = ($39 & 255) >>> 1; else $52 = HEAP32[$12 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $52 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $58);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $64 = $$pre$phi30$iZ2D; else $64 = HEAP32[$$pre$phi32$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $64 + $52;
   $__a$1$i = $64;
  } else $__a$1$i = $__a$0$i;
  $65 = $26 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $26 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 127]($26) | 0; else $$0$i$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i$i & 255, $$0$i$i, $__a$1$i, $__a_end$i, $__dc$i, $13, $__grouping$i, $__g$i, $__g_end$i, $__atoms$i) | 0) {
   $$lcssa = $26;
   $$pre$i2$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 40 >> 2] & 127]($26) | 0;
   $$pre$i$i$i4$i = $26;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i4$i = $26;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $86 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($86 & 1)) $94 = ($86 & 255) >>> 1; else $94 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if ($94) {
  $95 = HEAP32[$__g_end$i >> 2] | 0;
  if (($95 - $__g$i | 0) < 160) {
   $100 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 $103 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err, $$0$i$i) | 0;
 $105 = $__v;
 HEAP32[$105 >> 2] = $103;
 HEAP32[$105 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$$lcssa) $122 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) {
  $120 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0) == -1;
  $122 = $120 ? 0 : $$lcssa;
 } else $122 = $$lcssa;
 $121 = ($122 | 0) == 0;
 do if (!$$pre$i2$i$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i$i + 16 >> 2] | 0)) if ($121) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i$i) | 0) == -1) label = 50; else if (!$121) label = 52;
 } while (0);
 if ((label | 0) == 50) if ($121) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $122;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$lcssa = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi30$iZ2D = 0, $$pre$phi32$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $11 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $24 = 0, $25 = 0, $26 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $52 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $94 = 0, $95 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms$i = sp + 198 | 0;
 $__thousands_sep$i = sp + 196 | 0;
 $__grouping$i = sp + 16 | 0;
 $__buf$i = sp + 4 | 0;
 $__a_end$i = sp + 192 | 0;
 $__g$i = sp + 32 | 0;
 $__g_end$i = sp;
 $__dc$i = sp + 28 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (!$4) $$0$i$i = 0; else if (($4 | 0) == 8) $$0$i$i = 16; else if (($4 | 0) == 64) $$0$i$i = 8; else $$0$i$i = 10;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i, $__iob, $__atoms$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $10 = $__buf$i + 1 | 0;
  $$pre$phi30$iZ2D = $10;
  $$pre$phi32$iZ2D = $__buf$i + 8 | 0;
  $11 = $10;
 } else {
  $8 = $__buf$i + 8 | 0;
  $$pre$phi30$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi32$iZ2D = $8;
  $11 = HEAP32[$8 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $11;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 $12 = $__buf$i + 4 | 0;
 $13 = HEAP8[$__thousands_sep$i >> 0] | 0;
 $$pre$i$i$i4$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $11;
 L10 : while (1) {
  if (!$$pre$i$i$i4$i) $26 = 0; else if ((HEAP32[$$pre$i$i$i4$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4$i + 16 >> 2] | 0)) {
   $24 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4$i) | 0) == -1;
   $26 = $24 ? 0 : $$pre$i$i$i4$i;
  } else $26 = $$pre$i$i$i4$i;
  $25 = ($26 | 0) == 0;
  do if (!$$sroa$06$0) label = 16; else {
   if ((HEAP32[$$sroa$06$0 + 12 >> 2] | 0) != (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) if ($25) {
    $$sroa$06$2 = $$sroa$06$0;
    break;
   } else {
    $$lcssa = $26;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L10;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0) == -1) label = 16; else if ($25) $$sroa$06$2 = $$sroa$06$0; else {
    $$lcssa = $26;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L10;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($25) {
    $$lcssa = 0;
    $$pre$i2$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $39 = HEAP8[$__buf$i >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) $46 = ($39 & 255) >>> 1; else $46 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $46 | 0)) {
   if ($41) $52 = ($39 & 255) >>> 1; else $52 = HEAP32[$12 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $52 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $58);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $64 = $$pre$phi30$iZ2D; else $64 = HEAP32[$$pre$phi32$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $64 + $52;
   $__a$1$i = $64;
  } else $__a$1$i = $__a$0$i;
  $65 = $26 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $26 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 127]($26) | 0; else $$0$i$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i$i & 255, $$0$i$i, $__a$1$i, $__a_end$i, $__dc$i, $13, $__grouping$i, $__g$i, $__g_end$i, $__atoms$i) | 0) {
   $$lcssa = $26;
   $$pre$i2$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 40 >> 2] & 127]($26) | 0;
   $$pre$i$i$i4$i = $26;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i4$i = $26;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $86 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($86 & 1)) $94 = ($86 & 255) >>> 1; else $94 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if ($94) {
  $95 = HEAP32[$__g_end$i >> 2] | 0;
  if (($95 - $__g$i | 0) < 160) {
   $100 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 $103 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err, $$0$i$i) | 0;
 $105 = $__v;
 HEAP32[$105 >> 2] = $103;
 HEAP32[$105 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$$lcssa) $122 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) {
  $120 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0) == -1;
  $122 = $120 ? 0 : $$lcssa;
 } else $122 = $$lcssa;
 $121 = ($122 | 0) == 0;
 do if (!$$pre$i2$i$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i$i + 16 >> 2] | 0)) if ($121) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i$i) | 0) == -1) label = 50; else if (!$121) label = 52;
 } while (0);
 if ((label | 0) == 50) if ($121) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $122;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$lcssa = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi30$iZ2D = 0, $$pre$phi32$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $24 = 0, $25 = 0, $26 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $52 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $94 = 0, $95 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms$i = sp + 198 | 0;
 $__thousands_sep$i = sp + 196 | 0;
 $__grouping$i = sp + 16 | 0;
 $__buf$i = sp + 4 | 0;
 $__a_end$i = sp + 192 | 0;
 $__g$i = sp + 32 | 0;
 $__g_end$i = sp;
 $__dc$i = sp + 28 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 64) $$0$i$i = 8; else if (!$4) $$0$i$i = 0; else if (($4 | 0) == 8) $$0$i$i = 16; else $$0$i$i = 10;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i, $__iob, $__atoms$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $10 = $__buf$i + 1 | 0;
  $$pre$phi30$iZ2D = $10;
  $$pre$phi32$iZ2D = $__buf$i + 8 | 0;
  $11 = $10;
 } else {
  $8 = $__buf$i + 8 | 0;
  $$pre$phi30$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi32$iZ2D = $8;
  $11 = HEAP32[$8 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $11;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 $12 = $__buf$i + 4 | 0;
 $13 = HEAP8[$__thousands_sep$i >> 0] | 0;
 $$pre$i$i$i4$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $11;
 L10 : while (1) {
  if (!$$pre$i$i$i4$i) $26 = 0; else if ((HEAP32[$$pre$i$i$i4$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4$i + 16 >> 2] | 0)) {
   $24 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4$i) | 0) == -1;
   $26 = $24 ? 0 : $$pre$i$i$i4$i;
  } else $26 = $$pre$i$i$i4$i;
  $25 = ($26 | 0) == 0;
  do if (!$$sroa$06$0) label = 16; else {
   if ((HEAP32[$$sroa$06$0 + 12 >> 2] | 0) != (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) if ($25) {
    $$sroa$06$2 = $$sroa$06$0;
    break;
   } else {
    $$lcssa = $26;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L10;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0) == -1) label = 16; else if ($25) $$sroa$06$2 = $$sroa$06$0; else {
    $$lcssa = $26;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L10;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($25) {
    $$lcssa = 0;
    $$pre$i2$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $39 = HEAP8[$__buf$i >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) $46 = ($39 & 255) >>> 1; else $46 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $46 | 0)) {
   if ($41) $52 = ($39 & 255) >>> 1; else $52 = HEAP32[$12 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $52 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $58);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $64 = $$pre$phi30$iZ2D; else $64 = HEAP32[$$pre$phi32$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $64 + $52;
   $__a$1$i = $64;
  } else $__a$1$i = $__a$0$i;
  $65 = $26 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $26 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 127]($26) | 0; else $$0$i$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i$i & 255, $$0$i$i, $__a$1$i, $__a_end$i, $__dc$i, $13, $__grouping$i, $__g$i, $__g_end$i, $__atoms$i) | 0) {
   $$lcssa = $26;
   $$pre$i2$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 40 >> 2] & 127]($26) | 0;
   $$pre$i$i$i4$i = $26;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i4$i = $26;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $86 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($86 & 1)) $94 = ($86 & 255) >>> 1; else $94 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if ($94) {
  $95 = HEAP32[$__g_end$i >> 2] | 0;
  if (($95 - $__g$i | 0) < 160) {
   $100 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err, $$0$i$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$$lcssa) $117 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) {
  $115 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0) == -1;
  $117 = $115 ? 0 : $$lcssa;
 } else $117 = $$lcssa;
 $116 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i$i + 16 >> 2] | 0)) if ($116) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i$i) | 0) == -1) label = 50; else if (!$116) label = 52;
 } while (0);
 if ((label | 0) == 50) if ($116) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $117;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$lcssa = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi30$iZ2D = 0, $$pre$phi32$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $24 = 0, $25 = 0, $26 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $52 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $94 = 0, $95 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms$i = sp + 198 | 0;
 $__thousands_sep$i = sp + 196 | 0;
 $__grouping$i = sp + 16 | 0;
 $__buf$i = sp + 4 | 0;
 $__a_end$i = sp + 192 | 0;
 $__g$i = sp + 32 | 0;
 $__g_end$i = sp;
 $__dc$i = sp + 28 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (!$4) $$0$i$i = 0; else if (($4 | 0) == 64) $$0$i$i = 8; else if (($4 | 0) == 8) $$0$i$i = 16; else $$0$i$i = 10;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i, $__iob, $__atoms$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $10 = $__buf$i + 1 | 0;
  $$pre$phi30$iZ2D = $10;
  $$pre$phi32$iZ2D = $__buf$i + 8 | 0;
  $11 = $10;
 } else {
  $8 = $__buf$i + 8 | 0;
  $$pre$phi30$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi32$iZ2D = $8;
  $11 = HEAP32[$8 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $11;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 $12 = $__buf$i + 4 | 0;
 $13 = HEAP8[$__thousands_sep$i >> 0] | 0;
 $$pre$i$i$i4$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $11;
 L10 : while (1) {
  if (!$$pre$i$i$i4$i) $26 = 0; else if ((HEAP32[$$pre$i$i$i4$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4$i + 16 >> 2] | 0)) {
   $24 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4$i) | 0) == -1;
   $26 = $24 ? 0 : $$pre$i$i$i4$i;
  } else $26 = $$pre$i$i$i4$i;
  $25 = ($26 | 0) == 0;
  do if (!$$sroa$06$0) label = 16; else {
   if ((HEAP32[$$sroa$06$0 + 12 >> 2] | 0) != (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) if ($25) {
    $$sroa$06$2 = $$sroa$06$0;
    break;
   } else {
    $$lcssa = $26;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L10;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0) == -1) label = 16; else if ($25) $$sroa$06$2 = $$sroa$06$0; else {
    $$lcssa = $26;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L10;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($25) {
    $$lcssa = 0;
    $$pre$i2$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $39 = HEAP8[$__buf$i >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) $46 = ($39 & 255) >>> 1; else $46 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $46 | 0)) {
   if ($41) $52 = ($39 & 255) >>> 1; else $52 = HEAP32[$12 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $52 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $58);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $64 = $$pre$phi30$iZ2D; else $64 = HEAP32[$$pre$phi32$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $64 + $52;
   $__a$1$i = $64;
  } else $__a$1$i = $__a$0$i;
  $65 = $26 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $26 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 127]($26) | 0; else $$0$i$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i$i & 255, $$0$i$i, $__a$1$i, $__a_end$i, $__dc$i, $13, $__grouping$i, $__g$i, $__g_end$i, $__atoms$i) | 0) {
   $$lcssa = $26;
   $$pre$i2$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 40 >> 2] & 127]($26) | 0;
   $$pre$i$i$i4$i = $26;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i4$i = $26;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $86 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($86 & 1)) $94 = ($86 & 255) >>> 1; else $94 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if ($94) {
  $95 = HEAP32[$__g_end$i >> 2] | 0;
  if (($95 - $__g$i | 0) < 160) {
   $100 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 HEAP16[$__v >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err, $$0$i$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$$lcssa) $117 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) {
  $115 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0) == -1;
  $117 = $115 ? 0 : $$lcssa;
 } else $117 = $$lcssa;
 $116 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i$i + 16 >> 2] | 0)) if ($116) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i$i) | 0) == -1) label = 50; else if (!$116) label = 52;
 } while (0);
 if ((label | 0) == 50) if ($116) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $117;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$lcssa = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi30$iZ2D = 0, $$pre$phi32$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $24 = 0, $25 = 0, $26 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $52 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $94 = 0, $95 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms$i = sp + 198 | 0;
 $__thousands_sep$i = sp + 196 | 0;
 $__grouping$i = sp + 16 | 0;
 $__buf$i = sp + 4 | 0;
 $__a_end$i = sp + 192 | 0;
 $__g$i = sp + 32 | 0;
 $__g_end$i = sp;
 $__dc$i = sp + 28 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 64) $$0$i$i = 8; else if (!$4) $$0$i$i = 0; else if (($4 | 0) == 8) $$0$i$i = 16; else $$0$i$i = 10;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i, $__iob, $__atoms$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $10 = $__buf$i + 1 | 0;
  $$pre$phi30$iZ2D = $10;
  $$pre$phi32$iZ2D = $__buf$i + 8 | 0;
  $11 = $10;
 } else {
  $8 = $__buf$i + 8 | 0;
  $$pre$phi30$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi32$iZ2D = $8;
  $11 = HEAP32[$8 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $11;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 $12 = $__buf$i + 4 | 0;
 $13 = HEAP8[$__thousands_sep$i >> 0] | 0;
 $$pre$i$i$i4$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $11;
 L10 : while (1) {
  if (!$$pre$i$i$i4$i) $26 = 0; else if ((HEAP32[$$pre$i$i$i4$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4$i + 16 >> 2] | 0)) {
   $24 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4$i) | 0) == -1;
   $26 = $24 ? 0 : $$pre$i$i$i4$i;
  } else $26 = $$pre$i$i$i4$i;
  $25 = ($26 | 0) == 0;
  do if (!$$sroa$06$0) label = 16; else {
   if ((HEAP32[$$sroa$06$0 + 12 >> 2] | 0) != (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) if ($25) {
    $$sroa$06$2 = $$sroa$06$0;
    break;
   } else {
    $$lcssa = $26;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L10;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0) == -1) label = 16; else if ($25) $$sroa$06$2 = $$sroa$06$0; else {
    $$lcssa = $26;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L10;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($25) {
    $$lcssa = 0;
    $$pre$i2$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $39 = HEAP8[$__buf$i >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) $46 = ($39 & 255) >>> 1; else $46 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $46 | 0)) {
   if ($41) $52 = ($39 & 255) >>> 1; else $52 = HEAP32[$12 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $52 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $58);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $64 = $$pre$phi30$iZ2D; else $64 = HEAP32[$$pre$phi32$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $64 + $52;
   $__a$1$i = $64;
  } else $__a$1$i = $__a$0$i;
  $65 = $26 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $26 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 127]($26) | 0; else $$0$i$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i$i & 255, $$0$i$i, $__a$1$i, $__a_end$i, $__dc$i, $13, $__grouping$i, $__g$i, $__g_end$i, $__atoms$i) | 0) {
   $$lcssa = $26;
   $$pre$i2$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 40 >> 2] & 127]($26) | 0;
   $$pre$i$i$i4$i = $26;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i4$i = $26;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $86 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($86 & 1)) $94 = ($86 & 255) >>> 1; else $94 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if ($94) {
  $95 = HEAP32[$__g_end$i >> 2] | 0;
  if (($95 - $__g$i | 0) < 160) {
   $100 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err, $$0$i$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$$lcssa) $117 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) {
  $115 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0) == -1;
  $117 = $115 ? 0 : $$lcssa;
 } else $117 = $$lcssa;
 $116 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i$i + 16 >> 2] | 0)) if ($116) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i$i) | 0) == -1) label = 50; else if (!$116) label = 52;
 } while (0);
 if ((label | 0) == 50) if ($116) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $117;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$lcssa = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi30$iZ2D = 0, $$pre$phi32$iZ2D = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $24 = 0, $25 = 0, $26 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $52 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $94 = 0, $95 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms$i = sp + 198 | 0;
 $__thousands_sep$i = sp + 196 | 0;
 $__grouping$i = sp + 16 | 0;
 $__buf$i = sp + 4 | 0;
 $__a_end$i = sp + 192 | 0;
 $__g$i = sp + 32 | 0;
 $__g_end$i = sp;
 $__dc$i = sp + 28 | 0;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (!$4) $$0$i$i = 0; else if (($4 | 0) == 64) $$0$i$i = 8; else if (($4 | 0) == 8) $$0$i$i = 16; else $$0$i$i = 10;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i, $__iob, $__atoms$i, $__thousands_sep$i);
 HEAP32[$__buf$i + 0 >> 2] = 0;
 HEAP32[$__buf$i + 4 >> 2] = 0;
 HEAP32[$__buf$i + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, 10);
 if (!(HEAP8[$__buf$i >> 0] & 1)) {
  $10 = $__buf$i + 1 | 0;
  $$pre$phi30$iZ2D = $10;
  $$pre$phi32$iZ2D = $__buf$i + 8 | 0;
  $11 = $10;
 } else {
  $8 = $__buf$i + 8 | 0;
  $$pre$phi30$iZ2D = $__buf$i + 1 | 0;
  $$pre$phi32$iZ2D = $8;
  $11 = HEAP32[$8 >> 2] | 0;
 }
 HEAP32[$__a_end$i >> 2] = $11;
 HEAP32[$__g_end$i >> 2] = $__g$i;
 HEAP32[$__dc$i >> 2] = 0;
 $12 = $__buf$i + 4 | 0;
 $13 = HEAP8[$__thousands_sep$i >> 0] | 0;
 $$pre$i$i$i4$i = $0;
 $$sroa$06$0 = $1;
 $__a$0$i = $11;
 L10 : while (1) {
  if (!$$pre$i$i$i4$i) $26 = 0; else if ((HEAP32[$$pre$i$i$i4$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4$i + 16 >> 2] | 0)) {
   $24 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4$i) | 0) == -1;
   $26 = $24 ? 0 : $$pre$i$i$i4$i;
  } else $26 = $$pre$i$i$i4$i;
  $25 = ($26 | 0) == 0;
  do if (!$$sroa$06$0) label = 16; else {
   if ((HEAP32[$$sroa$06$0 + 12 >> 2] | 0) != (HEAP32[$$sroa$06$0 + 16 >> 2] | 0)) if ($25) {
    $$sroa$06$2 = $$sroa$06$0;
    break;
   } else {
    $$lcssa = $26;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L10;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$06$0 >> 2] | 0) + 36 >> 2] & 127]($$sroa$06$0) | 0) == -1) label = 16; else if ($25) $$sroa$06$2 = $$sroa$06$0; else {
    $$lcssa = $26;
    $$pre$i2$i$i$i = $$sroa$06$0;
    $__a$2$i = $__a$0$i;
    break L10;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($25) {
    $$lcssa = 0;
    $$pre$i2$i$i$i = 0;
    $__a$2$i = $__a$0$i;
    break;
   } else $$sroa$06$2 = 0;
  }
  $39 = HEAP8[$__buf$i >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) $46 = ($39 & 255) >>> 1; else $46 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$__a_end$i >> 2] | 0) == ($__a$0$i + $46 | 0)) {
   if ($41) $52 = ($39 & 255) >>> 1; else $52 = HEAP32[$12 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $52 << 1);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf$i >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf$i, $58);
   if (!(HEAP8[$__buf$i >> 0] & 1)) $64 = $$pre$phi30$iZ2D; else $64 = HEAP32[$$pre$phi32$iZ2D >> 2] | 0;
   HEAP32[$__a_end$i >> 2] = $64 + $52;
   $__a$1$i = $64;
  } else $__a$1$i = $__a$0$i;
  $65 = $26 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $26 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 127]($26) | 0; else $$0$i$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i$i & 255, $$0$i$i, $__a$1$i, $__a_end$i, $__dc$i, $13, $__grouping$i, $__g$i, $__g_end$i, $__atoms$i) | 0) {
   $$lcssa = $26;
   $$pre$i2$i$i$i = $$sroa$06$2;
   $__a$2$i = $__a$1$i;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 40 >> 2] & 127]($26) | 0;
   $$pre$i$i$i4$i = $26;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i4$i = $26;
   $$sroa$06$0 = $$sroa$06$2;
   $__a$0$i = $__a$1$i;
   continue;
  }
 }
 $86 = HEAP8[$__grouping$i >> 0] | 0;
 if (!($86 & 1)) $94 = ($86 & 255) >>> 1; else $94 = HEAP32[$__grouping$i + 4 >> 2] | 0;
 if ($94) {
  $95 = HEAP32[$__g_end$i >> 2] | 0;
  if (($95 - $__g$i | 0) < 160) {
   $100 = HEAP32[$__dc$i >> 2] | 0;
   HEAP32[$__g_end$i >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2$i, HEAP32[$__a_end$i >> 2] | 0, $__err, $$0$i$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i, $__g$i, HEAP32[$__g_end$i >> 2] | 0, $__err);
 if (!$$lcssa) $117 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) {
  $115 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0) == -1;
  $117 = $115 ? 0 : $$lcssa;
 } else $117 = $$lcssa;
 $116 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i$i + 16 >> 2] | 0)) if ($116) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i$i) | 0) == -1) label = 50; else if (!$116) label = 52;
 } while (0);
 if ((label | 0) == 50) if ($116) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $117;
 if (HEAP8[$__buf$i >> 0] & 1) _free(HEAP32[$__buf$i + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping$i >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping$i + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $1 = 0, $10 = 0, $104 = 0, $105 = 0, $119 = 0, $120 = 0, $144 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $49 = 0, $5 = 0, $51 = 0, $56 = 0, $62 = 0, $68 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $89 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $vararg_buffer = sp;
 $__atoms = sp + 204 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 196 | 0;
 $__dc = sp + 200 | 0;
 HEAP32[$__grouping + 0 >> 2] = 0;
 HEAP32[$__grouping + 4 >> 2] = 0;
 HEAP32[$__grouping + 8 >> 2] = 0;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$1 + 8 >> 2] | 0, HEAP32[$1 + 12 >> 2] | 0, $4) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] & 7]($5, 49384, 49410 | 0, $__atoms) | 0;
 $9 = $1 + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 HEAP32[$9 >> 2] = $10 + -1;
 if (!$10) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $20 = $__buf + 1 | 0;
  $$pre$phi35Z2D = $20;
  $$pre$phi37Z2D = $__buf + 8 | 0;
  $21 = $20;
 } else {
  $18 = $__buf + 8 | 0;
  $$pre$phi35Z2D = $__buf + 1 | 0;
  $$pre$phi37Z2D = $18;
  $21 = HEAP32[$18 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $21;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $22 = $__buf + 4 | 0;
 $$pre$i$i$i8 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $21;
 L8 : while (1) {
  if (!$$pre$i$i$i8) $35 = 0; else if ((HEAP32[$$pre$i$i$i8 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i8 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i8 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i8) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $35 = 0;
  } else $35 = $$pre$i$i$i8; else $35 = $$pre$i$i$i8;
  $34 = ($35 | 0) == 0;
  $36 = HEAP32[$__e >> 2] | 0;
  do if (!$36) label = 16; else {
   if ((HEAP32[$36 + 12 >> 2] | 0) != (HEAP32[$36 + 16 >> 2] | 0)) if ($34) {
    $144 = $36;
    break;
   } else {
    $$lcssa = $35;
    $$pre$i2$i$i = $36;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($36) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($34) {
    $144 = $36;
    break;
   } else {
    $$lcssa = $35;
    $$pre$i2$i$i = $36;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($34) {
    $$lcssa = 0;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $144 = 0;
  }
  $49 = HEAP8[$__buf >> 0] | 0;
  $51 = ($49 & 1) == 0;
  if ($51) $56 = ($49 & 255) >>> 1; else $56 = HEAP32[$22 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $56 | 0)) {
   if ($51) $62 = ($49 & 255) >>> 1; else $62 = HEAP32[$22 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $62 << 1);
   if (!(HEAP8[$__buf >> 0] & 1)) $68 = 10; else $68 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $68);
   if (!(HEAP8[$__buf >> 0] & 1)) $74 = $$pre$phi35Z2D; else $74 = HEAP32[$$pre$phi37Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $74 + $62;
   $__a$1 = $74;
  } else $__a$1 = $__a$0;
  $75 = $35 + 12 | 0;
  $76 = HEAP32[$75 >> 2] | 0;
  $77 = $35 + 16 | 0;
  if (($76 | 0) == (HEAP32[$77 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 127]($35) | 0; else $$0$i$i = HEAPU8[$76 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $35;
   $$pre$i2$i$i = $144;
   $__a$2 = $__a$1;
   break;
  }
  $89 = HEAP32[$75 >> 2] | 0;
  if (($89 | 0) == (HEAP32[$77 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 40 >> 2] & 127]($35) | 0;
   $$pre$i$i$i8 = $35;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$75 >> 2] = $89 + 1;
   $$pre$i$i$i8 = $35;
   $__a$0 = $__a$1;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0);
 if (!(HEAP8[$__buf >> 0] & 1)) $105 = $$pre$phi35Z2D; else $105 = HEAP32[$$pre$phi37Z2D >> 2] | 0;
 $104 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($105, $104, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if (!$$lcssa) $120 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $120 = 0;
 } else $120 = $$lcssa; else $120 = $$lcssa;
 $119 = ($120 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ($119) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($119) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($119) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $120;
 if (HEAP8[$__buf >> 0] & 1) _free(HEAP32[$__buf + 8 >> 2] | 0);
 if (!(HEAP8[$__grouping >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($first, $last, $db, $status) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 $status = $status | 0;
 var $$0$i2 = 0, $0 = 0, $1 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $32 = 0, $36 = 0, $39 = 0, $40 = 0, $41 = 0, $41$phi = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $55 = 0, $56 = 0, $6 = 0, $75 = 0, $76 = 0, $87 = 0, $92 = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i4 = 0, $i$010$i = 0, $t$09$i = 0, $t$1$ph$i = 0, $t$16$i = 0, $t$2$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 if ($first >>> 0 >= $last >>> 0) {
  HEAP32[$status >> 2] = -2;
  STACKTOP = sp;
  return;
 }
 do if ((HEAP8[$first >> 0] | 0) == 95) {
  $6 = $last;
  if (($6 - $first | 0) <= 3) {
   HEAP32[$status >> 2] = -2;
   STACKTOP = sp;
   return;
  }
  $11 = HEAP8[$first + 1 >> 0] | 0;
  if ($11 << 24 >> 24 == 90) {
   $12 = $first + 2 | 0;
   $13 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($12, $last, $db) | 0;
   $15 = ($13 | 0) == ($last | 0);
   if (!(($13 | 0) == ($12 | 0) | $15)) if ((HEAP8[$13 >> 0] | 0) == 46) {
    $20 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) != ($20 | 0)) {
     $22 = $20 + -24 | 0;
     $24 = $6 - $13 | 0;
     if ($24 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
     if ($24 >>> 0 < 11) {
      HEAP8[$2 >> 0] = $24 << 1;
      $__p$0$ph$i$i$i = $2 + 1 | 0;
     } else {
      $31 = $24 + 16 & -16;
      $32 = _malloc($31) | 0;
      HEAP32[$2 + 8 >> 2] = $32;
      HEAP32[$2 >> 2] = $31 | 1;
      HEAP32[$2 + 4 >> 2] = $24;
      $__p$0$ph$i$i$i = $32;
     }
     HEAP8[$__p$0$ph$i$i$i >> 0] = 46;
     $36 = $13 + 1 | 0;
     if (($36 | 0) != ($last | 0)) {
      $39 = $36;
      $41 = $13;
      $__p$01$i$i$i4 = $__p$0$ph$i$i$i;
      while (1) {
       $__p$01$i$i$i4 = $__p$01$i$i$i4 + 1 | 0;
       HEAP8[$__p$01$i$i$i4 >> 0] = HEAP8[$39 >> 0] | 0;
       $40 = $41 + 2 | 0;
       if (($40 | 0) == ($last | 0)) break; else {
        $41$phi = $39;
        $39 = $40;
        $41 = $41$phi;
       }
      }
     }
     HEAP8[$__p$0$ph$i$i$i + $24 >> 0] = 0;
     $43 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($2, 0, 58928, 2) | 0;
     HEAP32[$1 + 0 >> 2] = HEAP32[$43 + 0 >> 2];
     HEAP32[$1 + 4 >> 2] = HEAP32[$43 + 4 >> 2];
     HEAP32[$1 + 8 >> 2] = HEAP32[$43 + 8 >> 2];
     HEAP32[$43 + 0 >> 2] = 0;
     HEAP32[$43 + 4 >> 2] = 0;
     HEAP32[$43 + 8 >> 2] = 0;
     $44 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1, 58936, 1) | 0;
     HEAP32[$0 + 0 >> 2] = HEAP32[$44 + 0 >> 2];
     HEAP32[$0 + 4 >> 2] = HEAP32[$44 + 4 >> 2];
     HEAP32[$0 + 8 >> 2] = HEAP32[$44 + 8 >> 2];
     HEAP32[$44 + 0 >> 2] = 0;
     HEAP32[$44 + 4 >> 2] = 0;
     HEAP32[$44 + 8 >> 2] = 0;
     $45 = HEAP8[$0 >> 0] | 0;
     $47 = ($45 & 1) == 0;
     if ($47) {
      $55 = $0 + 1 | 0;
      $56 = ($45 & 255) >>> 1;
     } else {
      $55 = HEAP32[$0 + 8 >> 2] | 0;
      $56 = HEAP32[$0 + 4 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($22, $55, $56) | 0;
     if (!$47) _free(HEAP32[$0 + 8 >> 2] | 0);
     if (HEAP8[$1 >> 0] & 1) _free(HEAP32[$1 + 8 >> 2] | 0);
     if (!(HEAP8[$2 >> 0] & 1)) break;
     _free(HEAP32[$2 + 8 >> 2] | 0);
     break;
    }
   }
   if ($15) break;
   HEAP32[$status >> 2] = -2;
   STACKTOP = sp;
   return;
  } else if ($11 << 24 >> 24 == 95) if ((HEAP8[$first + 2 >> 0] | 0) == 95) if ((HEAP8[$first + 3 >> 0] | 0) == 90) {
   $75 = $first + 4 | 0;
   $76 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($75, $last, $db) | 0;
   if (($76 | 0) == ($75 | 0) | ($76 | 0) == ($last | 0)) {
    HEAP32[$status >> 2] = -2;
    STACKTOP = sp;
    return;
   }
   L52 : do if (($6 - $76 | 0) > 12) {
    $i$010$i = 0;
    $t$09$i = $76;
    while (1) {
     if ((HEAP8[$t$09$i >> 0] | 0) != (HEAP8[61280 + $i$010$i >> 0] | 0)) {
      $$0$i2 = $76;
      break L52;
     }
     $i$010$i = $i$010$i + 1 | 0;
     $87 = $t$09$i + 1 | 0;
     if (($i$010$i | 0) >= 13) break; else $t$09$i = $87;
    }
    L57 : do if (($87 | 0) == ($last | 0)) $t$2$i = $last; else {
     if ((HEAP8[$87 >> 0] | 0) == 95) {
      $92 = $t$09$i + 2 | 0;
      if (($92 | 0) == ($last | 0)) {
       $$0$i2 = $76;
       break L52;
      }
      if (((HEAP8[$92 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
       $$0$i2 = $76;
       break L52;
      }
      $t$1$ph$i = $t$09$i + 3 | 0;
     } else $t$1$ph$i = $87;
     if (($t$1$ph$i | 0) == ($last | 0)) $t$2$i = $last; else {
      $t$16$i = $t$1$ph$i;
      while (1) {
       if (((HEAP8[$t$16$i >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
        $t$2$i = $t$16$i;
        break L57;
       }
       $t$16$i = $t$16$i + 1 | 0;
       if (($t$16$i | 0) == ($last | 0)) {
        $t$2$i = $last;
        break;
       }
      }
     }
    } while (0);
    $104 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($104 | 0)) $$0$i2 = $76; else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($104 + -24 | 0, 0, 61296, 33) | 0;
     $$0$i2 = $t$2$i;
    }
   } else $$0$i2 = $76; while (0);
   if (($$0$i2 | 0) == ($last | 0)) break;
   HEAP32[$status >> 2] = -2;
   STACKTOP = sp;
   return;
  }
  HEAP32[$status >> 2] = -2;
  STACKTOP = sp;
  return;
 } else if ((__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0) != ($last | 0)) {
  HEAP32[$status >> 2] = -2;
  STACKTOP = sp;
  return;
 } while (0);
 if (HEAP32[$status >> 2] | 0) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$db >> 2] | 0) != (HEAP32[$db + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$status >> 2] = -2;
 STACKTOP = sp;
 return;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0$i = 0.0, $$lcssa7$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $146 = 0, $149 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $2 = 0, $23 = 0.0, $25 = 0, $26 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $78 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $95 = 0, $97 = 0, $ex$0$lcssa$i = 0, $ex$026$i = 0, $ex$1$i = 0, $ex$2$lcssa$i = 0, $ex$212$i = 0, $ex$3$lcssa$i = 0, $ex$39$i = 0, $ey$0$lcssa$i = 0, $ey$020$i = 0, $ey$1$ph$i = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $6 = $4 & 2047;
 $7 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $12 = tempRet0;
 if (!(($11 | 0) == 0 & ($12 | 0) == 0)) {
  $16 = $3 & 2147483647;
  if (!($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $2 >>> 0 > 0 | ($6 | 0) == 2047)) {
   $25 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $26 = tempRet0;
   if (!($26 >>> 0 > $12 >>> 0 | ($26 | 0) == ($12 | 0) & $25 >>> 0 > $11 >>> 0)) {
    if (!(($25 | 0) == ($11 | 0) & ($26 | 0) == ($12 | 0))) {
     $$0$i = $x;
     STACKTOP = sp;
     return +$$0$i;
    }
    $$0$i = $x * 0.0;
    STACKTOP = sp;
    return +$$0$i;
   }
   if (!$6) {
    $37 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $38 = tempRet0;
    if (($38 | 0) > -1 | ($38 | 0) == -1 & $37 >>> 0 > 4294967295) {
     $45 = $37;
     $46 = $38;
     $ex$026$i = 0;
     while (1) {
      $44 = $ex$026$i + -1 | 0;
      $45 = _bitshift64Shl($45 | 0, $46 | 0, 1) | 0;
      $46 = tempRet0;
      if (!(($46 | 0) > -1 | ($46 | 0) == -1 & $45 >>> 0 > 4294967295)) {
       $ex$0$lcssa$i = $44;
       break;
      } else $ex$026$i = $44;
     }
    } else $ex$0$lcssa$i = 0;
    $55 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa$i | 0) | 0;
    $83 = $55;
    $84 = tempRet0;
    $ex$1$i = $ex$0$lcssa$i;
   } else {
    $83 = $0;
    $84 = $1 & 1048575 | 1048576;
    $ex$1$i = $6;
   }
   if (!$9) {
    $60 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $61 = tempRet0;
    if (($61 | 0) > -1 | ($61 | 0) == -1 & $60 >>> 0 > 4294967295) {
     $68 = $60;
     $69 = $61;
     $ey$020$i = 0;
     while (1) {
      $67 = $ey$020$i + -1 | 0;
      $68 = _bitshift64Shl($68 | 0, $69 | 0, 1) | 0;
      $69 = tempRet0;
      if (!(($69 | 0) > -1 | ($69 | 0) == -1 & $68 >>> 0 > 4294967295)) {
       $ey$0$lcssa$i = $67;
       break;
      } else $ey$020$i = $67;
     }
    } else $ey$0$lcssa$i = 0;
    $78 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa$i | 0) | 0;
    $85 = $78;
    $86 = tempRet0;
    $ey$1$ph$i = $ey$0$lcssa$i;
   } else {
    $85 = $2;
    $86 = $3 & 1048575 | 1048576;
    $ey$1$ph$i = $9;
   }
   $87 = _i64Subtract($83 | 0, $84 | 0, $85 | 0, $86 | 0) | 0;
   $88 = tempRet0;
   $93 = ($88 | 0) > -1 | ($88 | 0) == -1 & $87 >>> 0 > 4294967295;
   L27 : do if (($ex$1$i | 0) > ($ey$1$ph$i | 0)) {
    $152 = $93;
    $153 = $87;
    $154 = $88;
    $95 = $83;
    $97 = $84;
    $ex$212$i = $ex$1$i;
    while (1) {
     if ($152) if (($95 | 0) == ($85 | 0) & ($97 | 0) == ($86 | 0)) break; else {
      $100 = $153;
      $101 = $154;
     } else {
      $100 = $95;
      $101 = $97;
     }
     $102 = _bitshift64Shl($100 | 0, $101 | 0, 1) | 0;
     $103 = tempRet0;
     $104 = $ex$212$i + -1 | 0;
     $106 = _i64Subtract($102 | 0, $103 | 0, $85 | 0, $86 | 0) | 0;
     $107 = tempRet0;
     $112 = ($107 | 0) > -1 | ($107 | 0) == -1 & $106 >>> 0 > 4294967295;
     if (($104 | 0) > ($ey$1$ph$i | 0)) {
      $152 = $112;
      $153 = $106;
      $154 = $107;
      $95 = $102;
      $97 = $103;
      $ex$212$i = $104;
     } else {
      $$lcssa7$i = $112;
      $114 = $102;
      $116 = $103;
      $155 = $106;
      $156 = $107;
      $ex$2$lcssa$i = $104;
      break L27;
     }
    }
    $$0$i = $x * 0.0;
    STACKTOP = sp;
    return +$$0$i;
   } else {
    $$lcssa7$i = $93;
    $114 = $83;
    $116 = $84;
    $155 = $87;
    $156 = $88;
    $ex$2$lcssa$i = $ex$1$i;
   } while (0);
   if ($$lcssa7$i) if (($114 | 0) == ($85 | 0) & ($116 | 0) == ($86 | 0)) {
    $$0$i = $x * 0.0;
    STACKTOP = sp;
    return +$$0$i;
   } else {
    $119 = $156;
    $121 = $155;
   } else {
    $119 = $116;
    $121 = $114;
   }
   if ($119 >>> 0 < 1048576 | ($119 | 0) == 1048576 & $121 >>> 0 < 0) {
    $126 = $121;
    $127 = $119;
    $ex$39$i = $ex$2$lcssa$i;
    while (1) {
     $128 = _bitshift64Shl($126 | 0, $127 | 0, 1) | 0;
     $129 = tempRet0;
     $130 = $ex$39$i + -1 | 0;
     if ($129 >>> 0 < 1048576 | ($129 | 0) == 1048576 & $128 >>> 0 < 0) {
      $126 = $128;
      $127 = $129;
      $ex$39$i = $130;
     } else {
      $137 = $128;
      $138 = $129;
      $ex$3$lcssa$i = $130;
      break;
     }
    }
   } else {
    $137 = $121;
    $138 = $119;
    $ex$3$lcssa$i = $ex$2$lcssa$i;
   }
   if (($ex$3$lcssa$i | 0) > 0) {
    $139 = _i64Add($137 | 0, $138 | 0, 0, -1048576) | 0;
    $140 = tempRet0;
    $141 = _bitshift64Shl($ex$3$lcssa$i | 0, 0, 52) | 0;
    $149 = $140 | tempRet0;
    $150 = $139 | $141;
   } else {
    $146 = _bitshift64Lshr($137 | 0, $138 | 0, 1 - $ex$3$lcssa$i | 0) | 0;
    $149 = tempRet0;
    $150 = $146;
   }
   HEAP32[tempDoublePtr >> 2] = $150;
   HEAP32[tempDoublePtr + 4 >> 2] = $149 | $10;
   $$0$i = +HEAPF64[tempDoublePtr >> 3];
   STACKTOP = sp;
   return +$$0$i;
  }
 }
 $23 = $x * $y;
 $$0$i = $23 / $23;
 STACKTOP = sp;
 return +$$0$i;
}

function ___cxa_demangle($mangled_name, $buf, $n, $status) {
 $mangled_name = $mangled_name | 0;
 $buf = $buf | 0;
 $n = $n | 0;
 $status = $status | 0;
 var $$0 = 0, $$02 = 0, $$0210 = 0, $$1 = 0, $1 = 0, $10 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $112 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $30 = 0, $33 = 0, $34 = 0, $38 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $73 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $__v$i$i = 0, $a = 0, $db = 0, $internal_status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4208 | 0;
 $__v$i$i = sp + 4184 | 0;
 $a = sp;
 $db = sp + 4120 | 0;
 $internal_status = sp + 4112 | 0;
 if ($mangled_name) {
  $1 = ($buf | 0) != 0;
  $2 = ($n | 0) == 0;
  if (!($1 & $2)) {
   if ($1) $85 = HEAP32[$n >> 2] | 0; else $85 = 0;
   $5 = $a + 4096 | 0;
   HEAP32[$5 >> 2] = $a;
   HEAP32[$db >> 2] = 0;
   $6 = $db + 4 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$db + 8 >> 2] = 0;
   HEAP32[$db + 12 >> 2] = $a;
   $9 = $db + 16 | 0;
   HEAP32[$9 >> 2] = 0;
   $10 = $db + 20 | 0;
   HEAP32[$10 >> 2] = 0;
   HEAP32[$db + 24 >> 2] = 0;
   HEAP32[$db + 28 >> 2] = $a;
   HEAP32[$db + 32 >> 2] = 0;
   $14 = $db + 36 | 0;
   HEAP32[$14 >> 2] = 0;
   HEAP32[$db + 40 >> 2] = 0;
   HEAP32[$db + 44 >> 2] = $a;
   $17 = $db + 48 | 0;
   $18 = $db + 61 | 0;
   HEAP32[$17 + 0 >> 2] = 0;
   HEAP32[$17 + 4 >> 2] = 0;
   HEAP32[$17 + 8 >> 2] = 0;
   HEAP8[$17 + 12 >> 0] = 0;
   HEAP8[$18 >> 0] = 1;
   $19 = $db + 32 | 0;
   $21 = $__v$i$i + 12 | 0;
   HEAP32[$21 >> 2] = 0;
   HEAP32[$__v$i$i + 16 >> 2] = $db + 44;
   $23 = $a + 16 | 0;
   HEAP32[$5 >> 2] = $23;
   HEAP32[$__v$i$i >> 2] = $a;
   $24 = $__v$i$i + 8 | 0;
   HEAP32[$24 >> 2] = $a;
   HEAP32[$__v$i$i + 4 >> 2] = $a;
   HEAP32[$21 >> 2] = $23;
   HEAP32[$a >> 2] = 0;
   HEAP32[$a + 4 >> 2] = 0;
   HEAP32[$a + 8 >> 2] = 0;
   HEAP32[$a + 12 >> 2] = $a;
   HEAP32[$24 >> 2] = $a + 16;
   __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($19, $__v$i$i);
   __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v$i$i);
   $30 = $db + 62 | 0;
   HEAP8[$30 >> 0] = 0;
   HEAP8[$db + 63 >> 0] = 1;
   HEAP32[$internal_status >> 2] = 0;
   $33 = $mangled_name + (_strlen($mangled_name | 0) | 0) | 0;
   __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($mangled_name, $33, $db, $internal_status);
   $34 = HEAP32[$internal_status >> 2] | 0;
   do if (($34 | 0) != 0 | (HEAP8[$30 >> 0] | 0) == 0) {
    $62 = $34;
    label = 17;
   } else {
    $38 = HEAP32[$19 >> 2] | 0;
    if (($38 | 0) == (HEAP32[$14 >> 2] | 0)) label = 18; else if ((HEAP32[$38 >> 2] | 0) == (HEAP32[$38 + 4 >> 2] | 0)) label = 18; else {
     HEAP8[$30 >> 0] = 0;
     HEAP8[$18 >> 0] = 0;
     $45 = HEAP32[$db >> 2] | 0;
     $46 = HEAP32[$6 >> 2] | 0;
     if (($46 | 0) != ($45 | 0)) {
      $49 = $46;
      do {
       $48 = $49 + -24 | 0;
       HEAP32[$6 >> 2] = $48;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($48);
       $49 = HEAP32[$6 >> 2] | 0;
      } while (($49 | 0) != ($45 | 0));
     }
     $52 = HEAP32[$9 >> 2] | 0;
     $53 = HEAP32[$10 >> 2] | 0;
     if (($53 | 0) != ($52 | 0)) {
      $56 = $53;
      do {
       $55 = $56 + -16 | 0;
       HEAP32[$10 >> 2] = $55;
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($55);
       $56 = HEAP32[$10 >> 2] | 0;
      } while (($56 | 0) != ($52 | 0));
     }
     __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($mangled_name, $33, $db, $internal_status);
     if (!(HEAP8[$30 >> 0] | 0)) {
      $62 = HEAP32[$internal_status >> 2] | 0;
      label = 17;
      break;
     } else {
      HEAP32[$internal_status >> 2] = -2;
      $$1 = 0;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 17) if (!$62) label = 18; else $$1 = 0;
   do if ((label | 0) == 18) {
    $63 = HEAP32[$6 >> 2] | 0;
    $65 = HEAP8[$63 + -24 >> 0] | 0;
    if (!($65 & 1)) $82 = ($65 & 255) >>> 1; else $82 = HEAP32[$63 + -20 >> 2] | 0;
    $73 = HEAP8[$63 + -12 >> 0] | 0;
    if (!($73 & 1)) $81 = ($73 & 255) >>> 1; else $81 = HEAP32[$63 + -8 >> 2] | 0;
    $80 = $81 + $82 | 0;
    $83 = $80 + 1 | 0;
    if ($83 >>> 0 > $85 >>> 0) {
     $86 = _realloc($buf, $83) | 0;
     if (!$86) {
      HEAP32[$internal_status >> 2] = -1;
      $$1 = 0;
      break;
     }
     if ($2) $$0210 = $86; else {
      HEAP32[$n >> 2] = $83;
      $$02 = $86;
      label = 29;
     }
    } else {
     $$02 = $buf;
     label = 29;
    }
    if ((label | 0) == 29) if (!$$02) {
     $$1 = 0;
     break;
    } else $$0210 = $$02;
    $89 = HEAP32[$6 >> 2] | 0;
    $91 = $89 + -12 | 0;
    $92 = HEAP8[$91 >> 0] | 0;
    if (!($92 & 1)) {
     $102 = $91 + 1 | 0;
     $103 = ($92 & 255) >>> 1;
    } else {
     $102 = HEAP32[$89 + -4 >> 2] | 0;
     $103 = HEAP32[$89 + -8 >> 2] | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($89 + -24 | 0, $102, $103) | 0;
    $104 = HEAP32[$6 >> 2] | 0;
    $105 = $104 + -24 | 0;
    if (!(HEAP8[$105 >> 0] & 1)) $112 = $105 + 1 | 0; else $112 = HEAP32[$104 + -16 >> 2] | 0;
    _memcpy($$0210 | 0, $112 | 0, $80 | 0) | 0;
    HEAP8[$$0210 + $80 >> 0] = 0;
    $$1 = $$0210;
   } while (0);
   if ($status) HEAP32[$status >> 2] = HEAP32[$internal_status >> 2];
   __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($db);
   $$0 = $$1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 if (!$status) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$status >> 2] = -3;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $0 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $122 = 0, $134 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $27 = 0, $29 = 0, $3 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $59 = 0, $62 = 0, $73 = 0, $75 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $90 = 0, $__r$0 = 0, $__r$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $146 = 1; else {
  $3 = HEAP32[$0 + 12 >> 2] | 0;
  if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $146 = 1;
   break;
  } else {
   $146 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 if (!$__e$0) label = 13; else {
  $15 = HEAP32[$__e$0 + 12 >> 2] | 0;
  if (($15 | 0) == (HEAP32[$__e$0 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$0 >> 2] | 0) + 36 >> 2] & 127]($__e$0) | 0; else $$0$i$i1$i$i = HEAP32[$15 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) label = 13; else if ($146) $147 = $__e$0; else label = 15;
 }
 if ((label | 0) == 13) if ($146) label = 15; else $147 = 0;
 if ((label | 0) == 15) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $$01 = 0;
  STACKTOP = sp;
  return $$01 | 0;
 }
 $27 = HEAP32[$__b >> 2] | 0;
 $29 = HEAP32[$27 + 12 >> 2] | 0;
 if (($29 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 127]($27) | 0; else $$0$i$i = HEAP32[$29 >> 2] | 0;
 if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i) | 0)) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$01 = 0;
  STACKTOP = sp;
  return $$01 | 0;
 }
 $48 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i, 0) | 0) << 24 >> 24;
 $49 = HEAP32[$__b >> 2] | 0;
 $50 = $49 + 12 | 0;
 $51 = HEAP32[$50 >> 2] | 0;
 if (($51 | 0) == (HEAP32[$49 + 16 >> 2] | 0)) {
  FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 40 >> 2] & 127]($49) | 0;
  $$0$in = $__n;
  $$pre$i3$i$i10 = $147;
  $73 = $147;
  $__r$0$in = $48;
 } else {
  HEAP32[$50 >> 2] = $51 + 4;
  $$0$in = $__n;
  $$pre$i3$i$i10 = $147;
  $73 = $147;
  $__r$0$in = $48;
 }
 while (1) {
  $__r$0 = $__r$0$in + -48 | 0;
  $$0 = $$0$in + -1 | 0;
  $59 = HEAP32[$__b >> 2] | 0;
  do if (!$59) $85 = 1; else {
   $62 = HEAP32[$59 + 12 >> 2] | 0;
   if (($62 | 0) == (HEAP32[$59 + 16 >> 2] | 0)) $$0$i$i$i$i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$59 >> 2] | 0) + 36 >> 2] & 127]($59) | 0; else $$0$i$i$i$i2 = HEAP32[$62 >> 2] | 0;
   if (($$0$i$i$i$i2 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $85 = 1;
    break;
   } else {
    $85 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  if (!$73) {
   $$pre$i3$i$i25 = $$pre$i3$i$i10;
   $148 = 0;
   $86 = 1;
  } else {
   $75 = HEAP32[$73 + 12 >> 2] | 0;
   if (($75 | 0) == (HEAP32[$73 + 16 >> 2] | 0)) $$0$i$i1$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 36 >> 2] & 127]($73) | 0; else $$0$i$i1$i$i8 = HEAP32[$75 >> 2] | 0;
   $84 = ($$0$i$i1$i$i8 | 0) == -1;
   $$pre$i3$i$i25 = $84 ? 0 : $$pre$i3$i$i10;
   $148 = $84 ? 0 : $$pre$i3$i$i10;
   $86 = $84 ? 1 : ($$pre$i3$i$i10 | 0) == 0;
  }
  $88 = HEAP32[$__b >> 2] | 0;
  if (!(($85 ^ $86) & ($$0 | 0) > 0)) break;
  $90 = HEAP32[$88 + 12 >> 2] | 0;
  if (($90 | 0) == (HEAP32[$88 + 16 >> 2] | 0)) $$0$i$i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 36 >> 2] & 127]($88) | 0; else $$0$i$i14 = HEAP32[$90 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i14) | 0)) {
   $$01 = $__r$0;
   label = 59;
   break;
  }
  $109 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i14, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0;
  $110 = HEAP32[$__b >> 2] | 0;
  $111 = $110 + 12 | 0;
  $112 = HEAP32[$111 >> 2] | 0;
  if (($112 | 0) == (HEAP32[$110 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$110 >> 2] | 0) + 40 >> 2] & 127]($110) | 0;
   $$0$in = $$0;
   $$pre$i3$i$i10 = $$pre$i3$i$i25;
   $73 = $148;
   $__r$0$in = $109;
   continue;
  } else {
   HEAP32[$111 >> 2] = $112 + 4;
   $$0$in = $$0;
   $$pre$i3$i$i10 = $$pre$i3$i$i25;
   $73 = $148;
   $__r$0$in = $109;
   continue;
  }
 }
 if ((label | 0) == 59) {
  STACKTOP = sp;
  return $$01 | 0;
 }
 do if (!$88) $149 = 1; else {
  $122 = HEAP32[$88 + 12 >> 2] | 0;
  if (($122 | 0) == (HEAP32[$88 + 16 >> 2] | 0)) $$0$i$i$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 36 >> 2] & 127]($88) | 0; else $$0$i$i$i$i17 = HEAP32[$122 >> 2] | 0;
  if (($$0$i$i$i$i17 | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $149 = 1;
   break;
  } else {
   $149 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 if (!$$pre$i3$i$i25) label = 56; else {
  $134 = HEAP32[$$pre$i3$i$i25 + 12 >> 2] | 0;
  if (($134 | 0) == (HEAP32[$$pre$i3$i$i25 + 16 >> 2] | 0)) $$0$i$i1$i$i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i25 >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i25) | 0; else $$0$i$i1$i$i23 = HEAP32[$134 >> 2] | 0;
  if (($$0$i$i1$i$i23 | 0) == -1) label = 56; else if ($149) {
   $$01 = $__r$0;
   STACKTOP = sp;
   return $$01 | 0;
  }
 }
 if ((label | 0) == 56) if (!$149) {
  $$01 = $__r$0;
  STACKTOP = sp;
  return $$01 | 0;
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $$01 = $__r$0;
 STACKTOP = sp;
 return $$01 | 0;
}

function __ZNSt3__18ios_base4InitC2Ev() {
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $18 = 0, $2 = 0, $27 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $48 = 0, $5 = 0, $57 = 0, $6 = 0, $7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = HEAP32[_stdin >> 2] | 0;
 HEAP32[11752] = 48112;
 __ZNSt3__16localeC2Ev(47012 | 0);
 HEAP32[11754] = 0;
 HEAP32[11755] = 0;
 HEAP32[11756] = 0;
 HEAP32[11757] = 0;
 HEAP32[11758] = 0;
 HEAP32[11759] = 0;
 HEAP32[11752] = 47736;
 HEAP32[11760] = $1;
 HEAP32[11762] = 47064;
 HEAP32[11764] = -1;
 HEAP8[47060] = 0;
 $2 = HEAP32[11753] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = $2 + 4 | 0;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE(47008, $0);
 $5 = HEAP32[$0 >> 2] | 0;
 $6 = $5 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $7 + -1;
 if (!$7) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] & 127]($5);
 HEAP32[11574] = 48244;
 HEAP32[11576] = 48264;
 HEAP32[11575] = 0;
 HEAP32[11582] = 47008;
 HEAP32[11580] = 0;
 HEAP32[11581] = 0;
 HEAP32[11577] = 4098;
 HEAP32[11579] = 0;
 HEAP32[11578] = 6;
 dest = 46336 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev(46332 | 0);
 HEAP32[11594] = 0;
 HEAP32[11595] = -1;
 $12 = HEAP32[_stdout >> 2] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(47112, $12, 47072 | 0);
 HEAP32[11596] = 48324;
 HEAP32[11597] = 48344;
 HEAP32[11603] = 47112;
 HEAP32[11601] = 0;
 HEAP32[11602] = 0;
 HEAP32[11598] = 4098;
 HEAP32[11600] = 0;
 HEAP32[11599] = 6;
 dest = 46420 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev(46416 | 0);
 HEAP32[11615] = 0;
 HEAP32[11616] = -1;
 $13 = HEAP32[_stderr >> 2] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(47160, $13, 47080 | 0);
 HEAP32[11618] = 48324;
 HEAP32[11619] = 48344;
 HEAP32[11625] = 47160;
 HEAP32[11623] = 0;
 HEAP32[11624] = 0;
 HEAP32[11620] = 4098;
 HEAP32[11622] = 0;
 HEAP32[11621] = 6;
 dest = 46508 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev(46504 | 0);
 HEAP32[11637] = 0;
 HEAP32[11638] = -1;
 $18 = HEAP32[(HEAP32[(HEAP32[11618] | 0) + -12 >> 2] | 0) + 46496 >> 2] | 0;
 HEAP32[11640] = 48324;
 HEAP32[11641] = 48344;
 HEAP32[11647] = $18;
 HEAP32[11645] = ($18 | 0) == 0 & 1;
 HEAP32[11646] = 0;
 HEAP32[11642] = 4098;
 HEAP32[11644] = 0;
 HEAP32[11643] = 6;
 dest = 46596 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev(46592 | 0);
 HEAP32[11659] = 0;
 HEAP32[11660] = -1;
 HEAP32[(HEAP32[(HEAP32[11574] | 0) + -12 >> 2] | 0) + 46368 >> 2] = 46384;
 $27 = (HEAP32[(HEAP32[11618] | 0) + -12 >> 2] | 0) + 46476 | 0;
 HEAP32[$27 >> 2] = HEAP32[$27 >> 2] | 8192;
 HEAP32[(HEAP32[(HEAP32[11618] | 0) + -12 >> 2] | 0) + 46544 >> 2] = 46384;
 HEAP32[11802] = 48176;
 __ZNSt3__16localeC2Ev(47212 | 0);
 HEAP32[11804] = 0;
 HEAP32[11805] = 0;
 HEAP32[11806] = 0;
 HEAP32[11807] = 0;
 HEAP32[11808] = 0;
 HEAP32[11809] = 0;
 HEAP32[11802] = 47480;
 HEAP32[11810] = $1;
 HEAP32[11812] = 47088;
 HEAP32[11814] = -1;
 HEAP8[47260] = 0;
 $34 = HEAP32[11803] | 0;
 HEAP32[$0 >> 2] = $34;
 $35 = $34 + 4 | 0;
 HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + 1;
 __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE(47208, $0);
 $37 = HEAP32[$0 >> 2] | 0;
 $38 = $37 + 4 | 0;
 $39 = HEAP32[$38 >> 2] | 0;
 HEAP32[$38 >> 2] = $39 + -1;
 if (!$39) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$37 >> 2] | 0) + 8 >> 2] & 127]($37);
 HEAP32[11662] = 48284;
 HEAP32[11664] = 48304;
 HEAP32[11663] = 0;
 HEAP32[11670] = 47208;
 HEAP32[11668] = 0;
 HEAP32[11669] = 0;
 HEAP32[11665] = 4098;
 HEAP32[11667] = 0;
 HEAP32[11666] = 6;
 dest = 46688 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev(46684 | 0);
 HEAP32[11682] = 0;
 HEAP32[11683] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(47264, $12, 47096 | 0);
 HEAP32[11684] = 48364;
 HEAP32[11685] = 48384;
 HEAP32[11691] = 47264;
 HEAP32[11689] = 0;
 HEAP32[11690] = 0;
 HEAP32[11686] = 4098;
 HEAP32[11688] = 0;
 HEAP32[11687] = 6;
 dest = 46772 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev(46768 | 0);
 HEAP32[11703] = 0;
 HEAP32[11704] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(47312, $13, 47104 | 0);
 HEAP32[11706] = 48364;
 HEAP32[11707] = 48384;
 HEAP32[11713] = 47312;
 HEAP32[11711] = 0;
 HEAP32[11712] = 0;
 HEAP32[11708] = 4098;
 HEAP32[11710] = 0;
 HEAP32[11709] = 6;
 dest = 46860 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev(46856 | 0);
 HEAP32[11725] = 0;
 HEAP32[11726] = -1;
 $48 = HEAP32[(HEAP32[(HEAP32[11706] | 0) + -12 >> 2] | 0) + 46848 >> 2] | 0;
 HEAP32[11728] = 48364;
 HEAP32[11729] = 48384;
 HEAP32[11735] = $48;
 HEAP32[11733] = ($48 | 0) == 0 & 1;
 HEAP32[11734] = 0;
 HEAP32[11730] = 4098;
 HEAP32[11732] = 0;
 HEAP32[11731] = 6;
 dest = 46948 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev(46944 | 0);
 HEAP32[11747] = 0;
 HEAP32[11748] = -1;
 HEAP32[(HEAP32[(HEAP32[11662] | 0) + -12 >> 2] | 0) + 46720 >> 2] = 46736;
 $57 = (HEAP32[(HEAP32[11706] | 0) + -12 >> 2] | 0) + 46828 | 0;
 HEAP32[$57 >> 2] = HEAP32[$57 >> 2] | 8192;
 HEAP32[(HEAP32[(HEAP32[11706] | 0) + -12 >> 2] | 0) + 46896 >> 2] = 46736;
 STACKTOP = sp;
 return;
}

function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i7 = 0, $0 = 0, $105 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $140 = 0, $141 = 0, $155 = 0, $27 = 0, $29 = 0, $39 = 0, $41 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $64 = 0, $76 = 0, $77 = 0, $79 = 0, $89 = 0, $91 = 0, $93 = 0, $95 = 0, $__r$0 = 0, $__r$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $13 = 0; else if ((HEAP32[$0 + 12 >> 2] | 0) == (HEAP32[$0 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $13 = 0;
  break;
 } else {
  $13 = HEAP32[$__b >> 2] | 0;
  break;
 } else $13 = $0; while (0);
 $12 = ($13 | 0) == 0;
 do if (!$__e$0) label = 10; else {
  if ((HEAP32[$__e$0 + 12 >> 2] | 0) == (HEAP32[$__e$0 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$0 >> 2] | 0) + 36 >> 2] & 127]($__e$0) | 0) == -1) {
   label = 10;
   break;
  }
  if ($12) $155 = $__e$0; else label = 11;
 } while (0);
 if ((label | 0) == 10) if ($12) label = 11; else $155 = 0;
 if ((label | 0) == 11) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $$01 = 0;
  STACKTOP = sp;
  return $$01 | 0;
 }
 $27 = HEAP32[$__b >> 2] | 0;
 $29 = HEAP32[$27 + 12 >> 2] | 0;
 if (($29 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 127]($27) | 0; else $$0$i$i = HEAPU8[$29 >> 0] | 0;
 $39 = $$0$i$i & 255;
 if ($39 << 24 >> 24 > -1) {
  $41 = $__ct + 8 | 0;
  if (HEAP16[(HEAP32[$41 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 2048) {
   $53 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $39, 0) | 0) << 24 >> 24;
   $54 = HEAP32[$__b >> 2] | 0;
   $55 = $54 + 12 | 0;
   $56 = HEAP32[$55 >> 2] | 0;
   if (($56 | 0) == (HEAP32[$54 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 40 >> 2] & 127]($54) | 0;
    $$0$in = $__n;
    $$pre$i2$i$i7 = $155;
    $79 = $155;
    $__r$0$in = $53;
   } else {
    HEAP32[$55 >> 2] = $56 + 1;
    $$0$in = $__n;
    $$pre$i2$i$i7 = $155;
    $79 = $155;
    $__r$0$in = $53;
   }
   while (1) {
    $__r$0 = $__r$0$in + -48 | 0;
    $$0 = $$0$in + -1 | 0;
    $64 = HEAP32[$__b >> 2] | 0;
    do if (!$64) $77 = 0; else if ((HEAP32[$64 + 12 >> 2] | 0) == (HEAP32[$64 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 127]($64) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $77 = 0;
     break;
    } else {
     $77 = HEAP32[$__b >> 2] | 0;
     break;
    } else $77 = $64; while (0);
    $76 = ($77 | 0) == 0;
    if (!$79) {
     $$pre$i2$i$i20 = $$pre$i2$i$i7;
     $91 = 0;
    } else if ((HEAP32[$79 + 12 >> 2] | 0) == (HEAP32[$79 + 16 >> 2] | 0)) {
     $89 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$79 >> 2] | 0) + 36 >> 2] & 127]($79) | 0) == -1;
     $$pre$i2$i$i20 = $89 ? 0 : $$pre$i2$i$i7;
     $91 = $89 ? 0 : $$pre$i2$i$i7;
    } else {
     $$pre$i2$i$i20 = $$pre$i2$i$i7;
     $91 = $79;
    }
    $93 = HEAP32[$__b >> 2] | 0;
    if (!(($76 ^ ($91 | 0) == 0) & ($$0 | 0) > 0)) {
     label = 38;
     break;
    }
    $95 = HEAP32[$93 + 12 >> 2] | 0;
    if (($95 | 0) == (HEAP32[$93 + 16 >> 2] | 0)) $$0$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$93 >> 2] | 0) + 36 >> 2] & 127]($93) | 0; else $$0$i$i10 = HEAPU8[$95 >> 0] | 0;
    $105 = $$0$i$i10 & 255;
    if ($105 << 24 >> 24 <= -1) {
     $$01 = $__r$0;
     label = 49;
     break;
    }
    if (!(HEAP16[(HEAP32[$41 >> 2] | 0) + ($$0$i$i10 << 24 >> 24 << 1) >> 1] & 2048)) {
     $$01 = $__r$0;
     label = 49;
     break;
    }
    $118 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $105, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0;
    $119 = HEAP32[$__b >> 2] | 0;
    $120 = $119 + 12 | 0;
    $121 = HEAP32[$120 >> 2] | 0;
    if (($121 | 0) == (HEAP32[$119 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$119 >> 2] | 0) + 40 >> 2] & 127]($119) | 0;
     $$0$in = $$0;
     $$pre$i2$i$i7 = $$pre$i2$i$i20;
     $79 = $91;
     $__r$0$in = $118;
     continue;
    } else {
     HEAP32[$120 >> 2] = $121 + 1;
     $$0$in = $$0;
     $$pre$i2$i$i7 = $$pre$i2$i$i20;
     $79 = $91;
     $__r$0$in = $118;
     continue;
    }
   }
   if ((label | 0) == 38) {
    do if (!$93) $141 = 0; else if ((HEAP32[$93 + 12 >> 2] | 0) == (HEAP32[$93 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$93 >> 2] | 0) + 36 >> 2] & 127]($93) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $141 = 0;
     break;
    } else {
     $141 = HEAP32[$__b >> 2] | 0;
     break;
    } else $141 = $93; while (0);
    $140 = ($141 | 0) == 0;
    do if (!$$pre$i2$i$i20) label = 47; else {
     if ((HEAP32[$$pre$i2$i$i20 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i20 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i20 >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i20) | 0) == -1) {
      label = 47;
      break;
     }
     if ($140) {
      $$01 = $__r$0;
      STACKTOP = sp;
      return $$01 | 0;
     }
    } while (0);
    if ((label | 0) == 47) if (!$140) {
     $$01 = $__r$0;
     STACKTOP = sp;
     return $$01 | 0;
    }
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
    $$01 = $__r$0;
    STACKTOP = sp;
    return $$01 | 0;
   } else if ((label | 0) == 49) {
    STACKTOP = sp;
    return $$01 | 0;
   }
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
 $$01 = 0;
 STACKTOP = sp;
 return $$01 | 0;
}

function __ZN7Scanner14isHereDocumentEP10LexContextP5Token($ctx, $tk) {
 $ctx = $ctx | 0;
 $tk = $tk | 0;
 var $$lcssa$i = 0, $$lcssa$i11 = 0, $$lcssa$i25 = 0, $$ph = 0, $$size$i = 0, $$size$i21 = 0, $$size$i7 = 0, $0 = 0, $100 = 0, $107 = 0, $127 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $27 = 0, $29 = 0, $32 = 0, $34 = 0, $4 = 0, $42 = 0, $43 = 0, $50 = 0, $52 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $66 = 0, $84 = 0, $91 = 0, $93 = 0, $95 = 0, $98 = 0, $__p$0$i = 0, $__p$0$i17 = 0, $__p$0$i4 = 0, $f$i$i = 0, $prev_tk_data = 0, $tk_data = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $f$i$i = sp + 40 | 0;
 $prev_tk_data = sp + 24 | 0;
 $tk_data = sp + 12 | 0;
 $0 = sp;
 $2 = HEAP32[$ctx + 4 >> 2] | 0;
 $4 = HEAP32[$2 + 72 >> 2] | 0;
 $6 = HEAP32[$2 + 68 >> 2] | 0;
 if (((($4 - $6 | 0) / 72 | 0) + -2 | 0) > -1) {
  $17 = HEAP32[(($6 + 144 | 0) >>> 0 > $4 >>> 0 ? 0 : $4 + -144 | 0) + 52 >> 2] | 0;
  $18 = _strlen($17 | 0) | 0;
  if ($18 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($18 >>> 0 < 11) {
   HEAP8[$prev_tk_data >> 0] = $18 << 1;
   $__p$0$i = $prev_tk_data + 1 | 0;
  } else {
   $25 = $18 + 16 & -16;
   $$size$i = ($25 | 0) == 0 ? 1 : $25;
   $27 = _malloc($$size$i) | 0;
   L9 : do if (!$27) {
    while (1) {
     $29 = HEAP32[15470] | 0;
     HEAP32[15470] = $29 + 0;
     if (!$29) break;
     FUNCTION_TABLE_v[$29 & 3]();
     $32 = _malloc($$size$i) | 0;
     if ($32) {
      $$lcssa$i = $32;
      break L9;
     }
    }
    $34 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$34 >> 2] = 61776;
    ___cxa_throw($34 | 0, 61824, 94);
   } else $$lcssa$i = $27; while (0);
   HEAP32[$prev_tk_data + 8 >> 2] = $$lcssa$i;
   HEAP32[$prev_tk_data >> 2] = $25 | 1;
   HEAP32[$prev_tk_data + 4 >> 2] = $18;
   $__p$0$i = $$lcssa$i;
  }
  _memcpy($__p$0$i | 0, $17 | 0, $18 | 0) | 0;
  HEAP8[$__p$0$i + $18 >> 0] = 0;
 } else {
  HEAP8[$prev_tk_data >> 0] = 0;
  HEAP8[$prev_tk_data + 1 >> 0] = 0;
 }
 if (!$tk) {
  HEAP8[$tk_data >> 0] = 0;
  HEAP8[$tk_data + 1 >> 0] = 0;
 } else {
  $42 = HEAP32[$tk + 52 >> 2] | 0;
  $43 = _strlen($42 | 0) | 0;
  if ($43 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($43 >>> 0 < 11) {
   HEAP8[$tk_data >> 0] = $43 << 1;
   $__p$0$i4 = $tk_data + 1 | 0;
  } else {
   $50 = $43 + 16 & -16;
   $$size$i7 = ($50 | 0) == 0 ? 1 : $50;
   $52 = _malloc($$size$i7) | 0;
   L25 : do if (!$52) {
    while (1) {
     $54 = HEAP32[15470] | 0;
     HEAP32[15470] = $54 + 0;
     if (!$54) break;
     FUNCTION_TABLE_v[$54 & 3]();
     $57 = _malloc($$size$i7) | 0;
     if ($57) {
      $$lcssa$i11 = $57;
      break L25;
     }
    }
    $59 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$59 >> 2] = 61776;
    ___cxa_throw($59 | 0, 61824, 94);
   } else $$lcssa$i11 = $52; while (0);
   HEAP32[$tk_data + 8 >> 2] = $$lcssa$i11;
   HEAP32[$tk_data >> 2] = $50 | 1;
   HEAP32[$tk_data + 4 >> 2] = $43;
   $__p$0$i4 = $$lcssa$i11;
  }
  _memcpy($__p$0$i4 | 0, $42 | 0, $43 | 0) | 0;
  HEAP8[$__p$0$i4 + $43 >> 0] = 0;
 }
 $66 = HEAP32[$ctx + 36 >> 2] | 0;
 if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tk_data, 59208) | 0)) label = 28; else if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_tk_data, 59208) | 0)) if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tk_data, 36768) | 0)) label = 28; else $127 = 0; else $127 = 0;
 if ((label | 0) == 28) {
  dest = $f$i$i + 0 | 0;
  stop = dest + 108 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$f$i$i + 4 >> 2] = $66;
  HEAP32[$f$i$i + 8 >> 2] = -1;
  HEAP32[$f$i$i + 44 >> 2] = $66;
  HEAP32[$f$i$i + 76 >> 2] = -1;
  HEAP32[$f$i$i + 104 >> 2] = 0;
  HEAP32[$f$i$i + 108 >> 2] = ~$66;
  HEAP32[$f$i$i + 100 >> 2] = -1;
  if (+___floatscan($f$i$i, 1, 1) == 0.0) {
   $84 = _strlen($66 | 0) | 0;
   if ($84 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
   if ($84 >>> 0 < 11) {
    HEAP8[$0 >> 0] = $84 << 1;
    $__p$0$i17 = $0 + 1 | 0;
   } else {
    $91 = $84 + 16 & -16;
    $$size$i21 = ($91 | 0) == 0 ? 1 : $91;
    $93 = _malloc($$size$i21) | 0;
    L47 : do if (!$93) {
     while (1) {
      $95 = HEAP32[15470] | 0;
      HEAP32[15470] = $95 + 0;
      if (!$95) break;
      FUNCTION_TABLE_v[$95 & 3]();
      $98 = _malloc($$size$i21) | 0;
      if ($98) {
       $$lcssa$i25 = $98;
       break L47;
      }
     }
     $100 = ___cxa_allocate_exception(4) | 0;
     HEAP32[$100 >> 2] = 61776;
     ___cxa_throw($100 | 0, 61824, 94);
    } else $$lcssa$i25 = $93; while (0);
    HEAP32[$0 + 8 >> 2] = $$lcssa$i25;
    HEAP32[$0 >> 2] = $91 | 1;
    HEAP32[$0 + 4 >> 2] = $84;
    $__p$0$i17 = $$lcssa$i25;
   }
   _memcpy($__p$0$i17 | 0, $66 | 0, $84 | 0) | 0;
   HEAP8[$__p$0$i17 + $84 >> 0] = 0;
   if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($0, 1496) | 0)) $$ph = 0; else {
    $107 = HEAP8[$66 >> 0] | 0;
    $$ph = (($107 << 24 >> 24) + -65 | 0) >>> 0 < 26 ? 1 : $107 << 24 >> 24 == 95;
   }
   if (!(HEAP8[$0 >> 0] & 1)) $127 = $$ph; else {
    _free(HEAP32[$0 + 8 >> 2] | 0);
    $127 = $$ph;
   }
  } else $127 = 0;
 }
 if (HEAP8[$tk_data >> 0] & 1) _free(HEAP32[$tk_data + 8 >> 2] | 0);
 if (!(HEAP8[$prev_tk_data >> 0] & 1)) {
  STACKTOP = sp;
  return $127 | 0;
 }
 _free(HEAP32[$prev_tk_data + 8 >> 2] | 0);
 STACKTOP = sp;
 return $127 | 0;
}

function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i5 = 0, $0 = 0, $1 = 0, $100 = 0, $107 = 0, $109 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $117$phi = 0, $129 = 0, $17 = 0, $2 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $31 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $5 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $60 = 0, $62 = 0, $63 = 0, $63$phi = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $78 = 0, $82 = 0, $84 = 0, $9 = 0, $91 = 0, $98 = 0, $99 = 0, $__dc$08 = 0, $__dc$1 = 0, $__dg$09 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$010 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = HEAP32[$__loc >> 2] | 0;
 $1 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $2 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0, $1) | 0;
 $3 = HEAP32[$__loc >> 2] | 0;
 $4 = __ZNSt3__16locale2id5__getEv(50992) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$3 + 8 >> 2] | 0, HEAP32[$3 + 12 >> 2] | 0, $4) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $5);
 $9 = HEAP8[$__grouping >> 0] | 0;
 if (!($9 & 1)) $17 = ($9 & 255) >>> 1; else $17 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!$17) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] & 7]($2, $__nb, $__ne, $__ob) | 0;
  $24 = $__ob + ($__ne - $__nb << 2) | 0;
  HEAP32[$__oe >> 2] = $24;
  $129 = $24;
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $25 = HEAP8[$__nb >> 0] | 0;
  if ($25 << 24 >> 24 == 43 | $25 << 24 >> 24 == 45) {
   $29 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] & 31]($2, $25) | 0;
   $31 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $31 + 4;
   HEAP32[$31 >> 2] = $29;
   $__nf$0 = $__nb + 1 | 0;
  } else $__nf$0 = $__nb;
  if (($__ne - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
   $39 = $__nf$0 + 1 | 0;
   $40 = HEAP8[$39 >> 0] | 0;
   if ($40 << 24 >> 24 == 88 | $40 << 24 >> 24 == 120) {
    $44 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] & 31]($2, 48) | 0;
    $45 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $45 + 4;
    HEAP32[$45 >> 2] = $44;
    $51 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] & 31]($2, HEAP8[$39 >> 0] | 0) | 0;
    $53 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $53 + 4;
    HEAP32[$53 >> 2] = $51;
    $__nf$1 = $__nf$0 + 2 | 0;
   } else $__nf$1 = $__nf$0;
  } else $__nf$1 = $__nf$0; else $__nf$1 = $__nf$0;
  if (($__nf$1 | 0) != ($__ne | 0)) {
   $56 = $__ne + -1 | 0;
   if ($56 >>> 0 > $__nf$1 >>> 0) {
    $$012$i$i5 = $__nf$1;
    $60 = $56;
    $63 = $__ne;
    while (1) {
     $58 = HEAP8[$$012$i$i5 >> 0] | 0;
     HEAP8[$$012$i$i5 >> 0] = HEAP8[$60 >> 0] | 0;
     HEAP8[$60 >> 0] = $58;
     $$012$i$i5 = $$012$i$i5 + 1 | 0;
     $62 = $63 + -2 | 0;
     if ($$012$i$i5 >>> 0 >= $62 >>> 0) break; else {
      $63$phi = $60;
      $60 = $62;
      $63 = $63$phi;
     }
    }
   }
  }
  $68 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 127]($5) | 0;
  if ($__nf$1 >>> 0 < $__ne >>> 0) {
   $70 = $__grouping + 1 | 0;
   $71 = $__grouping + 4 | 0;
   $72 = $__grouping + 8 | 0;
   $__dc$08 = 0;
   $__dg$09 = 0;
   $__p$010 = $__nf$1;
   while (1) {
    $78 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $70 : HEAP32[$72 >> 2] | 0) + $__dg$09 >> 0] | 0;
    if ($78 << 24 >> 24 != 0 & ($__dc$08 | 0) == ($78 << 24 >> 24 | 0)) {
     $82 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $82 + 4;
     HEAP32[$82 >> 2] = $68;
     $84 = HEAP8[$__grouping >> 0] | 0;
     if (!($84 & 1)) $91 = ($84 & 255) >>> 1; else $91 = HEAP32[$71 >> 2] | 0;
     $__dc$1 = 0;
     $__dg$1 = ($__dg$09 >>> 0 < ($91 + -1 | 0) >>> 0 & 1) + $__dg$09 | 0;
    } else {
     $__dc$1 = $__dc$08;
     $__dg$1 = $__dg$09;
    }
    $98 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] & 31]($2, HEAP8[$__p$010 >> 0] | 0) | 0;
    $99 = HEAP32[$__oe >> 2] | 0;
    $100 = $99 + 4 | 0;
    HEAP32[$__oe >> 2] = $100;
    HEAP32[$99 >> 2] = $98;
    $__p$010 = $__p$010 + 1 | 0;
    if ($__p$010 >>> 0 >= $__ne >>> 0) {
     $109 = $100;
     break;
    } else {
     $__dc$08 = $__dc$1 + 1 | 0;
     $__dg$09 = $__dg$1;
    }
   }
  } else $109 = HEAP32[$__oe >> 2] | 0;
  $107 = $__ob + ($__nf$1 - $__nb << 2) | 0;
  if (($107 | 0) == ($109 | 0)) $129 = $109; else {
   $110 = $109 + -4 | 0;
   if ($110 >>> 0 > $107 >>> 0) {
    $$012$i$i = $107;
    $114 = $110;
    $117 = $109;
    while (1) {
     $112 = HEAP32[$$012$i$i >> 2] | 0;
     HEAP32[$$012$i$i >> 2] = HEAP32[$114 >> 2];
     HEAP32[$114 >> 2] = $112;
     $$012$i$i = $$012$i$i + 4 | 0;
     $116 = $117 + -8 | 0;
     if ($$012$i$i >>> 0 >= $116 >>> 0) {
      $129 = $109;
      break;
     } else {
      $117$phi = $114;
      $114 = $116;
      $117 = $117$phi;
     }
    }
   } else $129 = $109;
  }
 }
 if (($__np | 0) == ($__ne | 0)) $storemerge = $129; else $storemerge = $__ob + ($__np - $__nb << 2) | 0;
 HEAP32[$__op >> 2] = $storemerge;
 if (!(HEAP8[$__grouping >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $17 = 0, $2 = 0, $3 = 0, $31 = 0, $33 = 0, $40 = 0, $5 = 0, $57 = 0, $59 = 0, $6 = 0, $61 = 0, $67 = 0, $70 = 0, $76 = 0, $78 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_frm_nxt$2 = 0, $_frm_nxt$3 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, $_to_nxt$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1 : do if ($frm >>> 0 < $frm_end >>> 0) {
  $2 = $frm_end;
  $3 = $to_end;
  $_frm_nxt$0 = $frm;
  $_to_nxt$0 = $to;
  while (1) {
   if ($_to_nxt$0 >>> 0 >= $to_end >>> 0) {
    $_frm_nxt$2 = $_frm_nxt$0;
    $_to_nxt$2 = $_to_nxt$0;
    label = 31;
    break L1;
   }
   $5 = HEAP8[$_frm_nxt$0 >> 0] | 0;
   $6 = $5 & 255;
   do if ($5 << 24 >> 24 > -1) {
    HEAP16[$_to_nxt$0 >> 1] = $5 & 255;
    $_frm_nxt$1 = $_frm_nxt$0 + 1 | 0;
    $_to_nxt$1 = $_to_nxt$0;
   } else {
    if (($5 & 255) < 194) {
     $$0$i = 2;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$3 = $_to_nxt$0;
     break L1;
    }
    if (($5 & 255) < 224) {
     if (($2 - $_frm_nxt$0 | 0) < 2) {
      $$0$i = 1;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$3 = $_to_nxt$0;
      break L1;
     }
     $17 = HEAPU8[$_frm_nxt$0 + 1 >> 0] | 0;
     if (($17 & 192 | 0) != 128) {
      $$0$i = 2;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$3 = $_to_nxt$0;
      break L1;
     }
     HEAP16[$_to_nxt$0 >> 1] = $17 & 63 | $6 << 6 & 1984;
     $_frm_nxt$1 = $_frm_nxt$0 + 2 | 0;
     $_to_nxt$1 = $_to_nxt$0;
     break;
    }
    if (($5 & 255) < 240) {
     if (($2 - $_frm_nxt$0 | 0) < 3) {
      $$0$i = 1;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$3 = $_to_nxt$0;
      break L1;
     }
     $31 = HEAP8[$_frm_nxt$0 + 1 >> 0] | 0;
     $33 = HEAP8[$_frm_nxt$0 + 2 >> 0] | 0;
     if (($6 | 0) == 224) {
      if (($31 & -32) << 24 >> 24 != -96) {
       $$0$i = 2;
       $_frm_nxt$3 = $_frm_nxt$0;
       $_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
     } else if (($6 | 0) == 237) {
      if (($31 & -32) << 24 >> 24 != -128) {
       $$0$i = 2;
       $_frm_nxt$3 = $_frm_nxt$0;
       $_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
     } else if (($31 & -64) << 24 >> 24 != -128) {
      $$0$i = 2;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$3 = $_to_nxt$0;
      break L1;
     }
     $40 = $33 & 255;
     if (($40 & 192 | 0) != 128) {
      $$0$i = 2;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$3 = $_to_nxt$0;
      break L1;
     }
     HEAP16[$_to_nxt$0 >> 1] = ($31 & 255) << 6 & 4032 | $6 << 12 | $40 & 63;
     $_frm_nxt$1 = $_frm_nxt$0 + 3 | 0;
     $_to_nxt$1 = $_to_nxt$0;
     break;
    }
    if (($5 & 255) >= 245) {
     $$0$i = 2;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$3 = $_to_nxt$0;
     break L1;
    }
    if (($2 - $_frm_nxt$0 | 0) < 4) {
     $$0$i = 1;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$3 = $_to_nxt$0;
     break L1;
    }
    $57 = HEAP8[$_frm_nxt$0 + 1 >> 0] | 0;
    $59 = HEAP8[$_frm_nxt$0 + 2 >> 0] | 0;
    $61 = HEAP8[$_frm_nxt$0 + 3 >> 0] | 0;
    if (($6 | 0) == 244) {
     if (($57 & -16) << 24 >> 24 != -128) {
      $$0$i = 2;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$3 = $_to_nxt$0;
      break L1;
     }
    } else if (($6 | 0) == 240) {
     if (($57 + 112 << 24 >> 24 & 255) >= 48) {
      $$0$i = 2;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$3 = $_to_nxt$0;
      break L1;
     }
    } else if (($57 & -64) << 24 >> 24 != -128) {
     $$0$i = 2;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$3 = $_to_nxt$0;
     break L1;
    }
    $67 = $59 & 255;
    if (($67 & 192 | 0) != 128) {
     $$0$i = 2;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$3 = $_to_nxt$0;
     break L1;
    }
    $70 = $61 & 255;
    if (($70 & 192 | 0) != 128) {
     $$0$i = 2;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$3 = $_to_nxt$0;
     break L1;
    }
    if (($3 - $_to_nxt$0 | 0) < 4) {
     $$0$i = 1;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$3 = $_to_nxt$0;
     break L1;
    }
    $76 = $6 & 7;
    $78 = $57 & 255;
    if (($78 << 12 & 196608 | $76 << 18) >>> 0 > 1114111) {
     $$0$i = 2;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$3 = $_to_nxt$0;
     break L1;
    }
    HEAP16[$_to_nxt$0 >> 1] = $78 << 2 & 60 | $67 >>> 4 & 3 | (($78 >>> 4 & 3 | $76 << 2) << 6) + 16320 | 55296;
    $103 = $_to_nxt$0 + 2 | 0;
    HEAP16[$103 >> 1] = $70 & 63 | $67 << 6 & 960 | 56320;
    $_frm_nxt$1 = $_frm_nxt$0 + 4 | 0;
    $_to_nxt$1 = $103;
   } while (0);
   $105 = $_to_nxt$1 + 2 | 0;
   if ($_frm_nxt$1 >>> 0 < $frm_end >>> 0) {
    $_frm_nxt$0 = $_frm_nxt$1;
    $_to_nxt$0 = $105;
   } else {
    $_frm_nxt$2 = $_frm_nxt$1;
    $_to_nxt$2 = $105;
    label = 31;
    break;
   }
  }
 } else {
  $_frm_nxt$2 = $frm;
  $_to_nxt$2 = $to;
  label = 31;
 } while (0);
 if ((label | 0) == 31) {
  $$0$i = $_frm_nxt$2 >>> 0 < $frm_end >>> 0 & 1;
  $_frm_nxt$3 = $_frm_nxt$2;
  $_to_nxt$3 = $_to_nxt$2;
 }
 HEAP32[$frm_nxt >> 2] = $frm + ($_frm_nxt$3 - $frm);
 HEAP32[$to_nxt >> 2] = $to + ($_to_nxt$3 - $to >> 1 << 1);
 STACKTOP = sp;
 return $$0$i | 0;
}

function __ZNSt3__16locale5__impC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 50768;
 $2 = $this + 8 | 0;
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($2, 28);
 $3 = $this + 144 | 0;
 HEAP8[$3 >> 0] = 2;
 HEAP8[$3 + 1 >> 0] = 67;
 HEAP8[$3 + 2 >> 0] = 0;
 $6 = HEAP32[$2 >> 2] | 0;
 $7 = $this + 12 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (($8 | 0) != ($6 | 0)) HEAP32[$7 >> 2] = $8 + (~(($8 + -4 - $6 | 0) >>> 2) << 2);
 HEAP32[13901] = 0;
 HEAP32[13900] = 49240;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55600, __ZNSt3__16locale2id5__getEv(49264) | 0);
 HEAP32[13899] = 0;
 HEAP32[13898] = 49280;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55592, __ZNSt3__16locale2id5__getEv(49304) | 0);
 HEAP32[13895] = 0;
 HEAP32[13894] = 50856;
 HEAP32[13896] = 0;
 HEAP8[55588] = 0;
 HEAP32[13896] = __ZNSt3__15ctypeIcE13classic_tableEv() | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55576, __ZNSt3__16locale2id5__getEv(50840) | 0);
 HEAP32[13893] = 0;
 HEAP32[13892] = 51768;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55568, __ZNSt3__16locale2id5__getEv(50832) | 0);
 HEAP32[13891] = 0;
 HEAP32[13890] = 51984;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55560, __ZNSt3__16locale2id5__getEv(50904) | 0);
 HEAP32[13887] = 0;
 HEAP32[13886] = 50928;
 HEAP32[13888] = __ZNSt3__16__clocEv() | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55544, __ZNSt3__16locale2id5__getEv(50912) | 0);
 HEAP32[13885] = 0;
 HEAP32[13884] = 52208;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55536, __ZNSt3__16locale2id5__getEv(50968) | 0);
 HEAP32[13883] = 0;
 HEAP32[13882] = 52328;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55528, __ZNSt3__16locale2id5__getEv(50976) | 0);
 HEAP32[13877] = 0;
 HEAP32[13876] = 51008;
 HEAP8[55512] = 46;
 HEAP8[55513] = 44;
 HEAP32[13879] = 0;
 HEAP32[13880] = 0;
 HEAP32[13881] = 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55504, __ZNSt3__16locale2id5__getEv(50984) | 0);
 HEAP32[13869] = 0;
 HEAP32[13868] = 51048;
 HEAP32[13870] = 46;
 HEAP32[13871] = 44;
 HEAP32[13872] = 0;
 HEAP32[13873] = 0;
 HEAP32[13874] = 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55472, __ZNSt3__16locale2id5__getEv(50992) | 0);
 HEAP32[13867] = 0;
 HEAP32[13866] = 49320;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55464, __ZNSt3__16locale2id5__getEv(49376) | 0);
 HEAP32[13865] = 0;
 HEAP32[13864] = 49440;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55456, __ZNSt3__16locale2id5__getEv(49496) | 0);
 HEAP32[13863] = 0;
 HEAP32[13862] = 49512;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55448, __ZNSt3__16locale2id5__getEv(49560) | 0);
 HEAP32[13861] = 0;
 HEAP32[13860] = 49584;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55440, __ZNSt3__16locale2id5__getEv(49632) | 0);
 HEAP32[13859] = 0;
 HEAP32[13858] = 50176;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55432, __ZNSt3__16locale2id5__getEv(50224) | 0);
 HEAP32[13857] = 0;
 HEAP32[13856] = 50240;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55424, __ZNSt3__16locale2id5__getEv(50288) | 0);
 HEAP32[13855] = 0;
 HEAP32[13854] = 50304;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55416, __ZNSt3__16locale2id5__getEv(50352) | 0);
 HEAP32[13853] = 0;
 HEAP32[13852] = 50368;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55408, __ZNSt3__16locale2id5__getEv(50416) | 0);
 HEAP32[13851] = 0;
 HEAP32[13850] = 50432;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55400, __ZNSt3__16locale2id5__getEv(50456) | 0);
 HEAP32[13849] = 0;
 HEAP32[13848] = 50512;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55392, __ZNSt3__16locale2id5__getEv(50536) | 0);
 HEAP32[13847] = 0;
 HEAP32[13846] = 50568;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55384, __ZNSt3__16locale2id5__getEv(50592) | 0);
 HEAP32[13845] = 0;
 HEAP32[13844] = 50616;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55376, __ZNSt3__16locale2id5__getEv(50640) | 0);
 HEAP32[13841] = 0;
 HEAP32[13840] = 49664;
 HEAP32[13842] = 49712;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55360, __ZNSt3__16locale2id5__getEv(49744) | 0);
 HEAP32[13837] = 0;
 HEAP32[13836] = 49816;
 HEAP32[13838] = 49864;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55344, __ZNSt3__16locale2id5__getEv(49896) | 0);
 HEAP32[13833] = 0;
 HEAP32[13832] = 51704;
 HEAP32[13834] = __ZNSt3__16__clocEv() | 0;
 HEAP32[13832] = 50112;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55328, __ZNSt3__16locale2id5__getEv(50128) | 0);
 HEAP32[13829] = 0;
 HEAP32[13828] = 51704;
 HEAP32[13830] = __ZNSt3__16__clocEv() | 0;
 HEAP32[13828] = 50144;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55312, __ZNSt3__16locale2id5__getEv(50160) | 0);
 HEAP32[13827] = 0;
 HEAP32[13826] = 50656;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55304, __ZNSt3__16locale2id5__getEv(50680) | 0);
 HEAP32[13825] = 0;
 HEAP32[13824] = 50696;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 55296, __ZNSt3__16locale2id5__getEv(50720) | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i5 = 0, $0 = 0, $1 = 0, $107 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $117$phi = 0, $17 = 0, $2 = 0, $25 = 0, $29 = 0, $3 = 0, $31 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $5 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $60 = 0, $62 = 0, $63 = 0, $63$phi = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $78 = 0, $82 = 0, $84 = 0, $9 = 0, $91 = 0, $98 = 0, $99 = 0, $__dc$09 = 0, $__dc$1 = 0, $__dg$010 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$011 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = HEAP32[$__loc >> 2] | 0;
 $1 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $2 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0, $1) | 0;
 $3 = HEAP32[$__loc >> 2] | 0;
 $4 = __ZNSt3__16locale2id5__getEv(50984) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$3 + 8 >> 2] | 0, HEAP32[$3 + 12 >> 2] | 0, $4) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $5);
 $9 = HEAP8[$__grouping >> 0] | 0;
 if (!($9 & 1)) $17 = ($9 & 255) >>> 1; else $17 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!$17) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] & 7]($2, $__nb, $__ne, $__ob) | 0;
  HEAP32[$__oe >> 2] = $__ob + ($__ne - $__nb);
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $25 = HEAP8[$__nb >> 0] | 0;
  if ($25 << 24 >> 24 == 43 | $25 << 24 >> 24 == 45) {
   $29 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 31]($2, $25) | 0;
   $31 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $31 + 1;
   HEAP8[$31 >> 0] = $29;
   $__nf$0 = $__nb + 1 | 0;
  } else $__nf$0 = $__nb;
  if (($__ne - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
   $39 = $__nf$0 + 1 | 0;
   $40 = HEAP8[$39 >> 0] | 0;
   if ($40 << 24 >> 24 == 88 | $40 << 24 >> 24 == 120) {
    $44 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 31]($2, 48) | 0;
    $45 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $45 + 1;
    HEAP8[$45 >> 0] = $44;
    $51 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 31]($2, HEAP8[$39 >> 0] | 0) | 0;
    $53 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $53 + 1;
    HEAP8[$53 >> 0] = $51;
    $__nf$1 = $__nf$0 + 2 | 0;
   } else $__nf$1 = $__nf$0;
  } else $__nf$1 = $__nf$0; else $__nf$1 = $__nf$0;
  if (($__nf$1 | 0) != ($__ne | 0)) {
   $56 = $__ne + -1 | 0;
   if ($56 >>> 0 > $__nf$1 >>> 0) {
    $$012$i$i5 = $__nf$1;
    $60 = $56;
    $63 = $__ne;
    while (1) {
     $58 = HEAP8[$$012$i$i5 >> 0] | 0;
     HEAP8[$$012$i$i5 >> 0] = HEAP8[$60 >> 0] | 0;
     HEAP8[$60 >> 0] = $58;
     $$012$i$i5 = $$012$i$i5 + 1 | 0;
     $62 = $63 + -2 | 0;
     if ($$012$i$i5 >>> 0 >= $62 >>> 0) break; else {
      $63$phi = $60;
      $60 = $62;
      $63 = $63$phi;
     }
    }
   }
  }
  $68 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 127]($5) | 0;
  if ($__nf$1 >>> 0 < $__ne >>> 0) {
   $70 = $__grouping + 1 | 0;
   $71 = $__grouping + 4 | 0;
   $72 = $__grouping + 8 | 0;
   $__dc$09 = 0;
   $__dg$010 = 0;
   $__p$011 = $__nf$1;
   while (1) {
    $78 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $70 : HEAP32[$72 >> 2] | 0) + $__dg$010 >> 0] | 0;
    if ($78 << 24 >> 24 != 0 & ($__dc$09 | 0) == ($78 << 24 >> 24 | 0)) {
     $82 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $82 + 1;
     HEAP8[$82 >> 0] = $68;
     $84 = HEAP8[$__grouping >> 0] | 0;
     if (!($84 & 1)) $91 = ($84 & 255) >>> 1; else $91 = HEAP32[$71 >> 2] | 0;
     $__dc$1 = 0;
     $__dg$1 = ($__dg$010 >>> 0 < ($91 + -1 | 0) >>> 0 & 1) + $__dg$010 | 0;
    } else {
     $__dc$1 = $__dc$09;
     $__dg$1 = $__dg$010;
    }
    $98 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 31]($2, HEAP8[$__p$011 >> 0] | 0) | 0;
    $99 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $99 + 1;
    HEAP8[$99 >> 0] = $98;
    $__p$011 = $__p$011 + 1 | 0;
    if ($__p$011 >>> 0 >= $__ne >>> 0) break; else {
     $__dc$09 = $__dc$1 + 1 | 0;
     $__dg$010 = $__dg$1;
    }
   }
  }
  $107 = $__ob + ($__nf$1 - $__nb) | 0;
  $108 = HEAP32[$__oe >> 2] | 0;
  if (($107 | 0) != ($108 | 0)) {
   $110 = $108 + -1 | 0;
   if ($110 >>> 0 > $107 >>> 0) {
    $$012$i$i = $107;
    $114 = $110;
    $117 = $108;
    while (1) {
     $112 = HEAP8[$$012$i$i >> 0] | 0;
     HEAP8[$$012$i$i >> 0] = HEAP8[$114 >> 0] | 0;
     HEAP8[$114 >> 0] = $112;
     $$012$i$i = $$012$i$i + 1 | 0;
     $116 = $117 + -2 | 0;
     if ($$012$i$i >>> 0 >= $116 >>> 0) break; else {
      $117$phi = $114;
      $114 = $116;
      $117 = $117$phi;
     }
    }
   }
  }
 }
 if (($__np | 0) == ($__ne | 0)) $storemerge = HEAP32[$__oe >> 2] | 0; else $storemerge = $__ob + ($__np - $__nb) | 0;
 HEAP32[$__op >> 2] = $storemerge;
 if (!(HEAP8[$__grouping >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__grouping + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$pn = 0, $0 = 0, $10 = 0, $105 = 0, $106 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $56 = 0, $6 = 0, $64 = 0, $66 = 0, $67 = 0, $70 = 0, $72 = 0, $8 = 0, $82 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__mb$0 = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976 | 0;
 $vararg_buffer1 = sp;
 $__buf = sp + 864 | 0;
 $__bb = sp + 424 | 0;
 $__digits = sp + 432 | 0;
 $__pat = sp + 964 | 0;
 $__dp = sp + 856 | 0;
 $__ts = sp + 416 | 0;
 $__grp = sp + 832 | 0;
 $__sym = sp + 844 | 0;
 $__sn = sp + 404 | 0;
 $__fd = sp + 400 | 0;
 $__mi = sp + 420 | 0;
 $__me = sp + 860 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[tempDoublePtr >> 3] = $__units;
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $0 = _snprintf($__buf, 100, 50600, $vararg_buffer1) | 0;
 if ($0 >>> 0 > 99) {
  $2 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[tempDoublePtr >> 3] = $__units;
  HEAP32[$vararg_buffer1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $3 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $2, 50600, $vararg_buffer1) | 0;
  $4 = HEAP32[$__bb >> 2] | 0;
  if (!$4) {
   $6 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$6 >> 2] = 61776;
   ___cxa_throw($6 | 0, 61824, 94);
  }
  $8 = _malloc($3 << 2) | 0;
  if (!$8) {
   $10 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$10 >> 2] = 61776;
   ___cxa_throw($10 | 0, 61824, 94);
  } else {
   $105 = $8;
   $106 = $4;
   $__db$0 = $8;
   $__n$0 = $3;
  }
 } else {
  $105 = 0;
  $106 = 0;
  $__db$0 = $__digits;
  $__n$0 = $0;
 }
 $12 = HEAP32[$__iob + 28 >> 2] | 0;
 $13 = $12 + 4 | 0;
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
 $15 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $16 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$12 + 8 >> 2] | 0, HEAP32[$12 + 12 >> 2] | 0, $15) | 0;
 $17 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$16 >> 2] | 0) + 48 >> 2] & 7]($16, $17, $17 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $25 = 0; else $25 = (HEAP8[$17 >> 0] | 0) == 45;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__sn + 0 >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $25, $12, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $26 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($26 | 0)) {
  $30 = HEAP8[$__sn >> 0] | 0;
  if (!($30 & 1)) $46 = ($30 & 255) >>> 1; else $46 = HEAP32[$__sn + 4 >> 2] | 0;
  $37 = HEAP8[$__sym >> 0] | 0;
  if (!($37 & 1)) $48 = ($37 & 255) >>> 1; else $48 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $46 + ($__n$0 - $26 << 1 | 1) + $48 | 0;
 } else {
  $49 = HEAP8[$__sn >> 0] | 0;
  if (!($49 & 1)) $64 = ($49 & 255) >>> 1; else $64 = HEAP32[$__sn + 4 >> 2] | 0;
  $56 = HEAP8[$__sym >> 0] | 0;
  if (!($56 & 1)) $66 = ($56 & 255) >>> 1; else $66 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $64 + 2 + $66 | 0;
 }
 $67 = $$pn + $26 | 0;
 if ($67 >>> 0 > 100) {
  $70 = _malloc($67 << 2) | 0;
  if (!$70) {
   $72 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$72 >> 2] = 61776;
   ___cxa_throw($72 | 0, 61824, 94);
  } else {
   $82 = $70;
   $__mb$0 = $70;
  }
 } else {
  $82 = 0;
  $__mb$0 = $vararg_buffer1;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + ($__n$0 << 2) | 0, $16, $25, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $26);
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, HEAP32[$__s >> 2] | 0, $__mb$0, HEAP32[$__mi >> 2] | 0, HEAP32[$__me >> 2] | 0, $__iob, $__fl);
 if ($82) _free($82);
 if (HEAP8[$__sn >> 0] & 1) _free(HEAP32[$__sn + 8 >> 2] | 0);
 if (HEAP8[$__sym >> 0] & 1) _free(HEAP32[$__sym + 8 >> 2] | 0);
 if (HEAP8[$__grp >> 0] & 1) _free(HEAP32[$__grp + 8 >> 2] | 0);
 $98 = $12 + 4 | 0;
 $99 = HEAP32[$98 >> 2] | 0;
 HEAP32[$98 >> 2] = $99 + -1;
 if (!$99) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] & 127]($12);
 if (!$105) {
  _free($106);
  STACKTOP = sp;
  return;
 }
 _free($105);
 _free($106);
 STACKTOP = sp;
 return;
}

function __ZN7Scanner13scanPostDerefEP10LexContext($ctx) {
 $ctx = $ctx | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $105 = 0, $107 = 0, $11 = 0, $13 = 0, $20 = 0, $21 = 0, $23 = 0, $3 = 0, $32 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $56 = 0, $58 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $79 = 0, $82 = 0, $83 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp;
 if (!(__ZN7Scanner11isPostDerefEP10LexContext($ctx) | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = HEAP32[$ctx >> 2] | 0;
 $9 = HEAP8[(HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$3 + 12 >> 2] | 0) >> 0] | 0;
 $10 = $ctx + 40 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 HEAP32[$10 >> 2] = $11 + 1;
 $13 = $ctx + 36 | 0;
 HEAP8[(HEAP32[$13 >> 2] | 0) + $11 >> 0] = $9;
 HEAP8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = 0;
 if ($9 << 24 >> 24 == 36) {
  $20 = HEAP32[$ctx >> 2] | 0;
  $21 = $20 + 12 | 0;
  $23 = (HEAP32[$21 >> 2] | 0) + 1 | 0;
  if ($23 >>> 0 < (HEAP32[$20 + 8 >> 2] | 0) >>> 0) if ((HEAP8[(HEAP32[$20 + 4 >> 2] | 0) + $23 >> 0] | 0) == 35) {
   HEAP32[$21 >> 2] = $23;
   $32 = HEAP32[$10 >> 2] | 0;
   HEAP32[$10 >> 2] = $32 + 1;
   HEAP8[(HEAP32[$13 >> 2] | 0) + $32 >> 0] = 35;
   HEAP8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = 0;
  }
 }
 $39 = $ctx + 4 | 0;
 $40 = HEAP32[$39 >> 2] | 0;
 $41 = HEAP32[$13 >> 2] | 0;
 $42 = $ctx + 8 | 0;
 HEAP32[$0 + 0 >> 2] = HEAP32[$42 + 0 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$42 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$42 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$42 + 12 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$42 + 16 >> 2];
 $43 = $40 + 72 | 0;
 $44 = HEAP32[$43 >> 2] | 0;
 HEAP32[$43 >> 2] = $44 + 72;
 HEAP32[$44 >> 2] = 0;
 HEAP32[$44 + 4 >> 2] = 211;
 $47 = $44 + 28 | 0;
 HEAP32[$47 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$47 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$47 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$47 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$47 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 $48 = $44 + 8 | 0;
 $49 = $40 + 48 | 0;
 HEAP32[$48 + 0 >> 2] = HEAP32[$49 + 0 >> 2];
 HEAP32[$48 + 4 >> 2] = HEAP32[$49 + 4 >> 2];
 HEAP32[$48 + 8 >> 2] = HEAP32[$49 + 8 >> 2];
 HEAP32[$48 + 12 >> 2] = HEAP32[$49 + 12 >> 2];
 HEAP32[$48 + 16 >> 2] = HEAP32[$49 + 16 >> 2];
 HEAP32[$44 + 52 >> 2] = $41;
 HEAP32[$44 + 56 >> 2] = 0;
 HEAP32[$44 + 60 >> 2] = 0;
 HEAP32[$44 + 64 >> 2] = 60816;
 _memmove($48 | 0, 44720, 20) | 0;
 $56 = (HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) | 0;
 HEAP32[$13 >> 2] = $56;
 HEAP8[$56 >> 0] = 0;
 HEAP32[$10 >> 2] = 0;
 $58 = (HEAP32[$13 >> 2] | 0) + 1 | 0;
 HEAP32[$13 >> 2] = $58;
 HEAP8[$58 >> 0] = 0;
 do if ($44) {
  $61 = HEAP32[HEAP32[$39 >> 2] >> 2] | 0;
  HEAP32[$0 >> 2] = $44;
  $62 = $61 + 4 | 0;
  $63 = HEAP32[$62 >> 2] | 0;
  if (($63 | 0) == (HEAP32[$61 + 8 >> 2] | 0)) {
   __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($61, $0);
   break;
  }
  if (!$63) $69 = 0; else {
   HEAP32[$63 >> 2] = $44;
   $69 = HEAP32[$62 >> 2] | 0;
  }
  HEAP32[$62 >> 2] = $69 + 4;
 } while (0);
 $70 = HEAP32[$ctx >> 2] | 0;
 $71 = $70 + 12 | 0;
 $73 = (HEAP32[$71 >> 2] | 0) + 1 | 0;
 if ($73 >>> 0 >= (HEAP32[$70 + 8 >> 2] | 0) >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $79 = (HEAP32[$70 + 4 >> 2] | 0) + $73 | 0;
 if ((HEAP8[$79 >> 0] | 0) != 42) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$71 >> 2] = $73;
 $82 = HEAP8[$79 >> 0] | 0;
 $83 = HEAP32[$10 >> 2] | 0;
 HEAP32[$10 >> 2] = $83 + 1;
 HEAP8[(HEAP32[$13 >> 2] | 0) + $83 >> 0] = $82;
 HEAP8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = 0;
 $90 = HEAP32[$39 >> 2] | 0;
 $91 = HEAP32[$13 >> 2] | 0;
 HEAP32[$1 + 0 >> 2] = HEAP32[$42 + 0 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$42 + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$42 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$42 + 12 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$42 + 16 >> 2];
 $92 = $90 + 72 | 0;
 $93 = HEAP32[$92 >> 2] | 0;
 HEAP32[$92 >> 2] = $93 + 72;
 HEAP32[$93 >> 2] = 0;
 HEAP32[$93 + 4 >> 2] = 211;
 $96 = $93 + 28 | 0;
 HEAP32[$96 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 HEAP32[$96 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$96 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$96 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$96 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
 $97 = $93 + 8 | 0;
 $98 = $90 + 48 | 0;
 HEAP32[$97 + 0 >> 2] = HEAP32[$98 + 0 >> 2];
 HEAP32[$97 + 4 >> 2] = HEAP32[$98 + 4 >> 2];
 HEAP32[$97 + 8 >> 2] = HEAP32[$98 + 8 >> 2];
 HEAP32[$97 + 12 >> 2] = HEAP32[$98 + 12 >> 2];
 HEAP32[$97 + 16 >> 2] = HEAP32[$98 + 16 >> 2];
 HEAP32[$93 + 52 >> 2] = $91;
 HEAP32[$93 + 56 >> 2] = 0;
 HEAP32[$93 + 60 >> 2] = 0;
 HEAP32[$93 + 64 >> 2] = 60816;
 $105 = (HEAP32[$13 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) | 0;
 HEAP32[$13 >> 2] = $105;
 HEAP8[$105 >> 0] = 0;
 HEAP32[$10 >> 2] = 0;
 $107 = (HEAP32[$13 >> 2] | 0) + 1 | 0;
 HEAP32[$13 >> 2] = $107;
 HEAP8[$107 >> 0] = 0;
 _memmove($97 | 0, 44740, 20) | 0;
 $$0 = $93;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$pn = 0, $0 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $36 = 0, $4 = 0, $45 = 0, $47 = 0, $48 = 0, $55 = 0, $6 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $79 = 0, $9 = 0, $95 = 0, $96 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__mb$0 = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 $vararg_buffer1 = sp;
 $__buf = sp + 152 | 0;
 $__bb = sp + 140 | 0;
 $__digits = sp + 252 | 0;
 $__pat = sp + 352 | 0;
 $__dp = sp + 356 | 0;
 $__ts = sp + 357 | 0;
 $__grp = sp + 128 | 0;
 $__sym = sp + 116 | 0;
 $__sn = sp + 100 | 0;
 $__fd = sp + 112 | 0;
 $__mi = sp + 144 | 0;
 $__me = sp + 148 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[tempDoublePtr >> 3] = $__units;
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $0 = _snprintf($__buf, 100, 50600, $vararg_buffer1) | 0;
 if ($0 >>> 0 > 99) {
  $2 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[tempDoublePtr >> 3] = $__units;
  HEAP32[$vararg_buffer1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $3 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $2, 50600, $vararg_buffer1) | 0;
  $4 = HEAP32[$__bb >> 2] | 0;
  if (!$4) {
   $6 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$6 >> 2] = 61776;
   ___cxa_throw($6 | 0, 61824, 94);
  }
  $7 = _malloc($3) | 0;
  if (!$7) {
   $9 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$9 >> 2] = 61776;
   ___cxa_throw($9 | 0, 61824, 94);
  } else {
   $101 = $7;
   $102 = $4;
   $__db$0 = $7;
   $__n$0 = $3;
  }
 } else {
  $101 = 0;
  $102 = 0;
  $__db$0 = $__digits;
  $__n$0 = $0;
 }
 $11 = HEAP32[$__iob + 28 >> 2] | 0;
 $12 = $11 + 4 | 0;
 HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 $14 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $15 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$11 + 8 >> 2] | 0, HEAP32[$11 + 12 >> 2] | 0, $14) | 0;
 $16 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 32 >> 2] & 7]($15, $16, $16 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $24 = 0; else $24 = (HEAP8[$16 >> 0] | 0) == 45;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__sn + 0 >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $24, $11, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $25 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($25 | 0)) {
  $29 = HEAP8[$__sn >> 0] | 0;
  if (!($29 & 1)) $45 = ($29 & 255) >>> 1; else $45 = HEAP32[$__sn + 4 >> 2] | 0;
  $36 = HEAP8[$__sym >> 0] | 0;
  if (!($36 & 1)) $47 = ($36 & 255) >>> 1; else $47 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $45 + ($__n$0 - $25 << 1 | 1) + $47 | 0;
 } else {
  $48 = HEAP8[$__sn >> 0] | 0;
  if (!($48 & 1)) $63 = ($48 & 255) >>> 1; else $63 = HEAP32[$__sn + 4 >> 2] | 0;
  $55 = HEAP8[$__sym >> 0] | 0;
  if (!($55 & 1)) $65 = ($55 & 255) >>> 1; else $65 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $63 + 2 + $65 | 0;
 }
 $66 = $$pn + $25 | 0;
 if ($66 >>> 0 > 100) {
  $68 = _malloc($66) | 0;
  if (!$68) {
   $70 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$70 >> 2] = 61776;
   ___cxa_throw($70 | 0, 61824, 94);
  } else {
   $79 = $68;
   $__mb$0 = $68;
  }
 } else {
  $79 = 0;
  $__mb$0 = $vararg_buffer1;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + $__n$0 | 0, $15, $24, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $25);
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, HEAP32[$__s >> 2] | 0, $__mb$0, HEAP32[$__mi >> 2] | 0, HEAP32[$__me >> 2] | 0, $__iob, $__fl);
 _free($79);
 if (HEAP8[$__sn >> 0] & 1) _free(HEAP32[$__sn + 8 >> 2] | 0);
 if (HEAP8[$__sym >> 0] & 1) _free(HEAP32[$__sym + 8 >> 2] | 0);
 if (HEAP8[$__grp >> 0] & 1) _free(HEAP32[$__grp + 8 >> 2] | 0);
 $95 = $11 + 4 | 0;
 $96 = HEAP32[$95 >> 2] | 0;
 HEAP32[$95 >> 2] = $96 + -1;
 if ($96) {
  _free($101);
  _free($102);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] & 127]($11);
 _free($101);
 _free($102);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$01$i = 0, $0 = 0, $107 = 0, $108 = 0, $113 = 0, $116 = 0, $117 = 0, $17 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $43 = 0, $48 = 0, $51 = 0, $52 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $67 = 0, $7 = 0, $73 = 0, $79 = 0, $8 = 0, $82 = 0, $94 = 0, $__neg = 0, $__p$0$lcssa$i = 0, $__p$02$i = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 $__wbuf = sp + 16 | 0;
 $__wb = sp + 8 | 0;
 $__wn = sp;
 $__neg = sp + 416 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $0 = $__wb + 4 | 0;
 HEAP32[$0 >> 2] = 114;
 $3 = HEAP32[$__iob + 28 >> 2] | 0;
 $4 = $3 + 4 | 0;
 HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 $6 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $7 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$3 + 8 >> 2] | 0, HEAP32[$3 + 12 >> 2] | 0, $6) | 0;
 HEAP8[$__neg >> 0] = 0;
 $8 = HEAP32[$__e >> 2] | 0;
 do if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $8, $__intl, $3, HEAP32[$__iob + 4 >> 2] | 0, $__err, $__neg, $7, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  if (!(HEAP8[$__v >> 0] & 1)) HEAP8[$__v >> 0] = 0; else HEAP32[HEAP32[$__v + 8 >> 2] >> 2] = 0;
  $17 = $__v + 4 | 0;
  HEAP32[$17 >> 2] = 0;
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] & 31]($7, 45) | 0);
  $27 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] & 31]($7, 48) | 0;
  $28 = HEAP32[$__wb >> 2] | 0;
  $29 = HEAP32[$__wn >> 2] | 0;
  $30 = $29 + -4 | 0;
  L10 : do if ($28 >>> 0 < $30 >>> 0) {
   $__w$05 = $28;
   while (1) {
    $33 = $__w$05 + 4 | 0;
    if ((HEAP32[$__w$05 >> 2] | 0) != ($27 | 0)) {
     $__w$0$lcssa = $__w$05;
     break L10;
    }
    if ($33 >>> 0 < $30 >>> 0) $__w$05 = $33; else {
     $__w$0$lcssa = $33;
     break;
    }
   }
  } else $__w$0$lcssa = $28; while (0);
  $36 = $__w$0$lcssa;
  $37 = HEAP8[$__v >> 0] | 0;
  if (!($37 & 1)) {
   $116 = $37;
   $51 = 1;
   $52 = ($37 & 255) >>> 1;
  } else {
   $43 = HEAP32[$__v >> 2] | 0;
   $116 = $43 & 255;
   $51 = ($43 & -2) + -1 | 0;
   $52 = HEAP32[$17 >> 2] | 0;
  }
  $48 = $29 - $36 >> 2;
  if ($48) {
   if (($51 - $52 | 0) >>> 0 < $48 >>> 0) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__v, $51, $52 + $48 - $51 | 0, $52, $52, 0, 0);
    $57 = HEAP8[$__v >> 0] | 0;
   } else $57 = $116;
   if (!($57 & 1)) $62 = $17; else $62 = HEAP32[$__v + 8 >> 2] | 0;
   $61 = $62 + ($52 << 2) | 0;
   if (($__w$0$lcssa | 0) == ($29 | 0)) $__p$0$lcssa$i = $61; else {
    $67 = $52 + (($30 - $36 | 0) >>> 2) | 0;
    $$01$i = $__w$0$lcssa;
    $__p$02$i = $61;
    while (1) {
     HEAP32[$__p$02$i >> 2] = HEAP32[$$01$i >> 2];
     $$01$i = $$01$i + 4 | 0;
     if (($$01$i | 0) == ($29 | 0)) break; else $__p$02$i = $__p$02$i + 4 | 0;
    }
    $__p$0$lcssa$i = $62 + ($67 + 1 << 2) | 0;
   }
   HEAP32[$__p$0$lcssa$i >> 2] = 0;
   $73 = $52 + $48 | 0;
   if (!(HEAP8[$__v >> 0] & 1)) {
    HEAP8[$__v >> 0] = $73 << 1;
    break;
   } else {
    HEAP32[$17 >> 2] = $73;
    break;
   }
  }
 } while (0);
 $79 = HEAP32[$__b >> 2] | 0;
 do if (!$79) $117 = 1; else {
  $82 = HEAP32[$79 + 12 >> 2] | 0;
  if (($82 | 0) == (HEAP32[$79 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$79 >> 2] | 0) + 36 >> 2] & 127]($79) | 0; else $$0$i$i$i$i = HEAP32[$82 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $117 = 1;
   break;
  } else {
   $117 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$8) label = 38; else {
  $94 = HEAP32[$8 + 12 >> 2] | 0;
  if (($94 | 0) == (HEAP32[$8 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 127]($8) | 0; else $$0$i$i1$i$i = HEAP32[$94 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 38;
   break;
  } else if ($117) break; else {
   label = 40;
   break;
  }
 } while (0);
 if ((label | 0) == 38) if ($117) label = 40;
 if ((label | 0) == 40) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 $107 = $3 + 4 | 0;
 $108 = HEAP32[$107 >> 2] | 0;
 HEAP32[$107 >> 2] = $108 + -1;
 if (!$108) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] & 127]($3);
 $113 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if (!$113) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($113);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $33 = 0, $37 = 0, $39 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $7 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer9 = sp;
 $__fmt = sp + 64 | 0;
 $__nar = sp + 92 | 0;
 $__nb = sp + 80 | 0;
 $__op = sp + 76 | 0;
 $__oe = sp + 72 | 0;
 $0 = sp + 84 | 0;
 $1 = sp + 88 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $__iob + 4 | 0;
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 49568, HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = __ZNSt3__16__clocEv() | 0;
 if ($9) {
  HEAP32[$vararg_buffer9 >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr1 = $vararg_buffer9 + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer9) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer9) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0;
  if ($9) {
   HEAP32[$vararg_buffer9 >> 2] = HEAP32[$__iob + 8 >> 2];
   $vararg_ptr8 = $vararg_buffer9 + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer9) | 0;
  } else {
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer9) | 0;
  }
  $21 = HEAP32[$__nb >> 2] | 0;
  if (!$21) {
   $23 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$23 >> 2] = 61776;
   ___cxa_throw($23 | 0, 61824, 94);
  } else {
   $25 = $21;
   $57 = $21;
   $__nc$2 = $__nc$1;
  }
 } else {
  $25 = $__nar;
  $57 = 0;
  $__nc$2 = $__nc$0;
 }
 $24 = $25 + $__nc$2 | 0;
 $27 = HEAP32[$7 >> 2] & 176;
 do if (($27 | 0) == 16) {
  $28 = HEAP8[$25 >> 0] | 0;
  if ($28 << 24 >> 24 == 43 | $28 << 24 >> 24 == 45) {
   $$0$i = $25 + 1 | 0;
   break;
  }
  if (($__nc$2 | 0) > 1 & $28 << 24 >> 24 == 48) {
   $33 = HEAP8[$25 + 1 >> 0] | 0;
   if ($33 << 24 >> 24 == 88 | $33 << 24 >> 24 == 120) $$0$i = $25 + 2 | 0; else label = 16;
  } else label = 16;
 } else if (($27 | 0) == 32) $$0$i = $24; else label = 16; while (0);
 if ((label | 0) == 16) $$0$i = $25;
 if (($25 | 0) == ($__nar | 0)) {
  $44 = $__nar;
  $56 = 0;
  $__ob$0 = $vararg_buffer9;
 } else {
  $37 = _malloc($__nc$2 << 1) | 0;
  if (!$37) {
   $39 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$39 >> 2] = 61776;
   ___cxa_throw($39 | 0, 61824, 94);
  } else {
   $44 = $25;
   $56 = $37;
   $__ob$0 = $37;
  }
 }
 $41 = HEAP32[$__iob + 28 >> 2] | 0;
 HEAP32[$0 >> 2] = $41;
 $42 = $41 + 4 | 0;
 HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($44, $$0$i, $24, $__ob$0, $__op, $__oe, $0);
 $45 = HEAP32[$0 >> 2] | 0;
 $46 = $45 + 4 | 0;
 $47 = HEAP32[$46 >> 2] | 0;
 HEAP32[$46 >> 2] = $47 + -1;
 if ($47) {
  $52 = HEAP32[$__s >> 2] | 0;
  $53 = HEAP32[$__op >> 2] | 0;
  $54 = HEAP32[$__oe >> 2] | 0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, $52, $__ob$0, $53, $54, $__iob, $__fl);
  $55 = HEAP32[$1 >> 2] | 0;
  HEAP32[$agg$result >> 2] = $55;
  _free($56);
  _free($57);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$45 >> 2] | 0) + 8 >> 2] & 127]($45);
 $52 = HEAP32[$__s >> 2] | 0;
 $53 = HEAP32[$__op >> 2] | 0;
 $54 = HEAP32[$__oe >> 2] | 0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, $52, $__ob$0, $53, $54, $__iob, $__fl);
 $55 = HEAP32[$1 >> 2] | 0;
 HEAP32[$agg$result >> 2] = $55;
 _free($56);
 _free($57);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $32 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $51 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $77 = 0, $79 = 0, $87 = 0, $88 = 0, $9 = 0, $args = 0, $args3 = 0, $first$ = 0, $t$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $args = sp + 12 | 0;
 $args3 = sp;
 if (($last - $first | 0) <= 1) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = HEAP8[$first >> 0] | 0;
 if ($4 << 24 >> 24 == 100 | $4 << 24 >> 24 == 111) if ((HEAP8[$first + 1 >> 0] | 0) == 110) {
  $9 = $first + 2 | 0;
  if ($4 << 24 >> 24 != 111) {
   if (($9 | 0) == ($last | 0)) {
    $$0$i = $last;
    $54 = ($$0$i | 0) == ($9 | 0);
    $first$ = $54 ? $first : $$0$i;
    STACKTOP = sp;
    return $first$ | 0;
   }
   $45 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($9, $last, $db) | 0;
   if (($45 | 0) == ($9 | 0)) $t$0$i = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($9, $last, $db) | 0; else $t$0$i = $45;
   if (($t$0$i | 0) == ($9 | 0)) {
    $$0$i = $9;
    $54 = ($$0$i | 0) == ($9 | 0);
    $first$ = $54 ? $first : $$0$i;
    STACKTOP = sp;
    return $first$ | 0;
   }
   $51 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($51 | 0)) {
    $$0$i = $9;
    $54 = ($$0$i | 0) == ($9 | 0);
    $first$ = $54 ? $first : $$0$i;
    STACKTOP = sp;
    return $first$ | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($51 + -24 | 0, 0, 59104, 1) | 0;
   $$0$i = $t$0$i;
   $54 = ($$0$i | 0) == ($9 | 0);
   $first$ = $54 ? $first : $$0$i;
   STACKTOP = sp;
   return $first$ | 0;
  }
  $10 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($9, $last, $db) | 0;
  if (($10 | 0) == ($9 | 0)) {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $12 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($10, $last, $db) | 0;
  if (($12 | 0) == ($10 | 0)) {
   $$0 = $10;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $14 = $db + 4 | 0;
  $15 = HEAP32[$14 >> 2] | 0;
  if ((($15 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
   $$0 = $12;
   STACKTOP = sp;
   return $$0 | 0;
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $15 + -24 | 0);
  $23 = HEAP32[$14 >> 2] | 0;
  $24 = $23 + -24 | 0;
  $26 = $23;
  do {
   $25 = $26 + -24 | 0;
   HEAP32[$14 >> 2] = $25;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
   $26 = HEAP32[$14 >> 2] | 0;
  } while (($26 | 0) != ($24 | 0));
  $30 = HEAP8[$args >> 0] | 0;
  $32 = ($30 & 1) == 0;
  if ($32) {
   $40 = $args + 1 | 0;
   $41 = ($30 & 255) >>> 1;
  } else {
   $40 = HEAP32[$args + 8 >> 2] | 0;
   $41 = HEAP32[$args + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($23 + -48 | 0, $40, $41) | 0;
  if ($32) {
   $$0 = $12;
   STACKTOP = sp;
   return $$0 | 0;
  }
  _free(HEAP32[$args + 8 >> 2] | 0);
  $$0 = $12;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $55 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 if (($55 | 0) != ($first | 0)) {
  $$0 = $55;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $57 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 if (($57 | 0) == ($first | 0)) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $59 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($57, $last, $db) | 0;
 if (($59 | 0) == ($57 | 0)) {
  $$0 = $57;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $61 = $db + 4 | 0;
 $62 = HEAP32[$61 >> 2] | 0;
 if ((($62 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
  $$0 = $59;
  STACKTOP = sp;
  return $$0 | 0;
 }
 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args3, $62 + -24 | 0);
 $70 = HEAP32[$61 >> 2] | 0;
 $71 = $70 + -24 | 0;
 $73 = $70;
 do {
  $72 = $73 + -24 | 0;
  HEAP32[$61 >> 2] = $72;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($72);
  $73 = HEAP32[$61 >> 2] | 0;
 } while (($73 | 0) != ($71 | 0));
 $77 = HEAP8[$args3 >> 0] | 0;
 $79 = ($77 & 1) == 0;
 if ($79) {
  $87 = $args3 + 1 | 0;
  $88 = ($77 & 255) >>> 1;
 } else {
  $87 = HEAP32[$args3 + 8 >> 2] | 0;
  $88 = HEAP32[$args3 + 4 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($70 + -48 | 0, $87, $88) | 0;
 if ($79) {
  $$0 = $59;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _free(HEAP32[$args3 + 8 >> 2] | 0);
 $$0 = $59;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0$i = 0, $15 = 0, $2 = 0, $28 = 0, $30 = 0, $37 = 0, $4 = 0, $5 = 0, $54 = 0, $56 = 0, $58 = 0, $64 = 0, $67 = 0, $80 = 0, $83 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_frm_nxt$2 = 0, $_frm_nxt$3 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1 : do if ($frm >>> 0 < $frm_end >>> 0) {
  $2 = $frm_end;
  $_frm_nxt$0 = $frm;
  $_to_nxt$0 = $to;
  while (1) {
   if ($_to_nxt$0 >>> 0 >= $to_end >>> 0) {
    $_frm_nxt$2 = $_frm_nxt$0;
    $_to_nxt$1 = $_to_nxt$0;
    label = 30;
    break L1;
   }
   $4 = HEAP8[$_frm_nxt$0 >> 0] | 0;
   $5 = $4 & 255;
   do if ($4 << 24 >> 24 > -1) {
    HEAP32[$_to_nxt$0 >> 2] = $5;
    $_frm_nxt$1 = $_frm_nxt$0 + 1 | 0;
   } else {
    if (($4 & 255) < 194) {
     $$0$i = 2;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    if (($4 & 255) < 224) {
     if (($2 - $_frm_nxt$0 | 0) < 2) {
      $$0$i = 1;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
     $15 = HEAPU8[$_frm_nxt$0 + 1 >> 0] | 0;
     if (($15 & 192 | 0) != 128) {
      $$0$i = 2;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
     HEAP32[$_to_nxt$0 >> 2] = $15 & 63 | $5 << 6 & 1984;
     $_frm_nxt$1 = $_frm_nxt$0 + 2 | 0;
     break;
    }
    if (($4 & 255) < 240) {
     if (($2 - $_frm_nxt$0 | 0) < 3) {
      $$0$i = 1;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
     $28 = HEAP8[$_frm_nxt$0 + 1 >> 0] | 0;
     $30 = HEAP8[$_frm_nxt$0 + 2 >> 0] | 0;
     if (($5 | 0) == 237) {
      if (($28 & -32) << 24 >> 24 != -128) {
       $$0$i = 2;
       $_frm_nxt$3 = $_frm_nxt$0;
       $_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
     } else if (($5 | 0) == 224) {
      if (($28 & -32) << 24 >> 24 != -96) {
       $$0$i = 2;
       $_frm_nxt$3 = $_frm_nxt$0;
       $_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
     } else if (($28 & -64) << 24 >> 24 != -128) {
      $$0$i = 2;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
     $37 = $30 & 255;
     if (($37 & 192 | 0) != 128) {
      $$0$i = 2;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
     HEAP32[$_to_nxt$0 >> 2] = ($28 & 255) << 6 & 4032 | $5 << 12 & 61440 | $37 & 63;
     $_frm_nxt$1 = $_frm_nxt$0 + 3 | 0;
     break;
    }
    if (($4 & 255) >= 245) {
     $$0$i = 2;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    if (($2 - $_frm_nxt$0 | 0) < 4) {
     $$0$i = 1;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    $54 = HEAP8[$_frm_nxt$0 + 1 >> 0] | 0;
    $56 = HEAP8[$_frm_nxt$0 + 2 >> 0] | 0;
    $58 = HEAP8[$_frm_nxt$0 + 3 >> 0] | 0;
    if (($5 | 0) == 244) {
     if (($54 & -16) << 24 >> 24 != -128) {
      $$0$i = 2;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
    } else if (($5 | 0) == 240) {
     if (($54 + 112 << 24 >> 24 & 255) >= 48) {
      $$0$i = 2;
      $_frm_nxt$3 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
    } else if (($54 & -64) << 24 >> 24 != -128) {
     $$0$i = 2;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    $64 = $56 & 255;
    if (($64 & 192 | 0) != 128) {
     $$0$i = 2;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    $67 = $58 & 255;
    if (($67 & 192 | 0) != 128) {
     $$0$i = 2;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    $80 = ($54 & 255) << 12 & 258048 | $5 << 18 & 1835008 | $64 << 6 & 4032 | $67 & 63;
    if ($80 >>> 0 > 1114111) {
     $$0$i = 2;
     $_frm_nxt$3 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    HEAP32[$_to_nxt$0 >> 2] = $80;
    $_frm_nxt$1 = $_frm_nxt$0 + 4 | 0;
   } while (0);
   $83 = $_to_nxt$0 + 4 | 0;
   if ($_frm_nxt$1 >>> 0 < $frm_end >>> 0) {
    $_frm_nxt$0 = $_frm_nxt$1;
    $_to_nxt$0 = $83;
   } else {
    $_frm_nxt$2 = $_frm_nxt$1;
    $_to_nxt$1 = $83;
    label = 30;
    break;
   }
  }
 } else {
  $_frm_nxt$2 = $frm;
  $_to_nxt$1 = $to;
  label = 30;
 } while (0);
 if ((label | 0) == 30) {
  $$0$i = $_frm_nxt$2 >>> 0 < $frm_end >>> 0 & 1;
  $_frm_nxt$3 = $_frm_nxt$2;
  $_to_nxt$2 = $_to_nxt$1;
 }
 HEAP32[$frm_nxt >> 2] = $frm + ($_frm_nxt$3 - $frm);
 HEAP32[$to_nxt >> 2] = $to + ($_to_nxt$2 - $to >> 2 << 2);
 STACKTOP = sp;
 return $$0$i | 0;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$01$i = 0, $0 = 0, $105 = 0, $106 = 0, $111 = 0, $114 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $45 = 0, $49 = 0, $52 = 0, $53 = 0, $58 = 0, $6 = 0, $64 = 0, $7 = 0, $70 = 0, $77 = 0, $8 = 0, $89 = 0, $90 = 0, $__neg = 0, $__p$02$i = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $__wbuf = sp + 20 | 0;
 $__wb = sp + 8 | 0;
 $__wn = sp;
 $__neg = sp + 16 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $0 = $__wb + 4 | 0;
 HEAP32[$0 >> 2] = 114;
 $3 = HEAP32[$__iob + 28 >> 2] | 0;
 $4 = $3 + 4 | 0;
 HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 $6 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $7 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$3 + 8 >> 2] | 0, HEAP32[$3 + 12 >> 2] | 0, $6) | 0;
 HEAP8[$__neg >> 0] = 0;
 $8 = HEAP32[$__e >> 2] | 0;
 do if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $8, $__intl, $3, HEAP32[$__iob + 4 >> 2] | 0, $__err, $__neg, $7, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  if (!(HEAP8[$__v >> 0] & 1)) {
   HEAP8[$__v + 1 >> 0] = 0;
   HEAP8[$__v >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__v + 8 >> 2] >> 0] = 0;
   HEAP32[$__v + 4 >> 2] = 0;
  }
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 31]($7, 45) | 0);
  $28 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 31]($7, 48) | 0;
  $29 = HEAP32[$__wb >> 2] | 0;
  $30 = HEAP32[$__wn >> 2] | 0;
  $31 = $30 + -1 | 0;
  L10 : do if ($29 >>> 0 < $31 >>> 0) {
   $__w$05 = $29;
   while (1) {
    $34 = $__w$05 + 1 | 0;
    if ((HEAP8[$__w$05 >> 0] | 0) != $28 << 24 >> 24) {
     $__w$0$lcssa = $__w$05;
     break L10;
    }
    if ($34 >>> 0 < $31 >>> 0) $__w$05 = $34; else {
     $__w$0$lcssa = $34;
     break;
    }
   }
  } else $__w$0$lcssa = $29; while (0);
  $37 = $__w$0$lcssa;
  $38 = HEAP8[$__v >> 0] | 0;
  if (!($38 & 1)) {
   $114 = $38;
   $52 = 10;
   $53 = ($38 & 255) >>> 1;
  } else {
   $45 = HEAP32[$__v >> 2] | 0;
   $114 = $45 & 255;
   $52 = ($45 & -2) + -1 | 0;
   $53 = HEAP32[$__v + 4 >> 2] | 0;
  }
  $49 = $30 - $37 | 0;
  if (($30 | 0) != ($__w$0$lcssa | 0)) {
   if (($52 - $53 | 0) >>> 0 < $49 >>> 0) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__v, $52, $53 + $49 - $52 | 0, $53, $53, 0);
    $58 = HEAP8[$__v >> 0] | 0;
   } else $58 = $114;
   if (!($58 & 1)) $64 = $__v + 1 | 0; else $64 = HEAP32[$__v + 8 >> 2] | 0;
   $scevgep$i = $30 + ($53 - $37) | 0;
   $$01$i = $__w$0$lcssa;
   $__p$02$i = $64 + $53 | 0;
   while (1) {
    HEAP8[$__p$02$i >> 0] = HEAP8[$$01$i >> 0] | 0;
    $$01$i = $$01$i + 1 | 0;
    if (($$01$i | 0) == ($30 | 0)) break; else $__p$02$i = $__p$02$i + 1 | 0;
   }
   HEAP8[$64 + $scevgep$i >> 0] = 0;
   $70 = $53 + $49 | 0;
   if (!(HEAP8[$__v >> 0] & 1)) {
    HEAP8[$__v >> 0] = $70 << 1;
    break;
   } else {
    HEAP32[$__v + 4 >> 2] = $70;
    break;
   }
  }
 } while (0);
 $77 = HEAP32[$__b >> 2] | 0;
 do if (!$77) $90 = 0; else if ((HEAP32[$77 + 12 >> 2] | 0) == (HEAP32[$77 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 36 >> 2] & 127]($77) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $90 = 0;
  break;
 } else {
  $90 = HEAP32[$__b >> 2] | 0;
  break;
 } else $90 = $77; while (0);
 $89 = ($90 | 0) == 0;
 do if (!$8) label = 34; else {
  if ((HEAP32[$8 + 12 >> 2] | 0) != (HEAP32[$8 + 16 >> 2] | 0)) if ($89) break; else {
   label = 36;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 127]($8) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 34;
   break;
  } else if ($89) break; else {
   label = 36;
   break;
  }
 } while (0);
 if ((label | 0) == 34) if ($89) label = 36;
 if ((label | 0) == 36) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 $105 = $3 + 4 | 0;
 $106 = HEAP32[$105 >> 2] | 0;
 HEAP32[$105 >> 2] = $106 + -1;
 if (!$106) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] & 127]($3);
 $111 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if (!$111) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($111);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first, $last, $op, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $op = $op | 0;
 $db = $db | 0;
 var $$04 = 0, $$pre$i$i$i = 0, $$sroa$4 = 0, $0 = 0, $1 = 0, $12 = 0, $14 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $34 = 0, $36 = 0, $39 = 0, $43 = 0, $46 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $68 = 0, $7 = 0, $71 = 0, $75 = 0, $86 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $$sroa$4 = sp + 36 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 $3 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 if (($3 | 0) == ($first | 0)) {
  $$04 = $first;
  STACKTOP = sp;
  return $$04 | 0;
 }
 $6 = $db + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 if ((HEAP32[$db >> 2] | 0) == ($7 | 0)) {
  $$04 = $first;
  STACKTOP = sp;
  return $$04 | 0;
 }
 $9 = $7 + -24 | 0;
 __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($1, $op, 58944);
 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2, (HEAP32[$6 >> 2] | 0) + -24 | 0);
 $12 = HEAP8[$2 >> 0] | 0;
 $14 = ($12 & 1) == 0;
 if ($14) {
  $22 = $2 + 1 | 0;
  $23 = ($12 & 255) >>> 1;
 } else {
  $22 = HEAP32[$2 + 8 >> 2] | 0;
  $23 = HEAP32[$2 + 4 >> 2] | 0;
 }
 $24 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1, $22, $23) | 0;
 HEAP32[$0 + 0 >> 2] = HEAP32[$24 + 0 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
 HEAP32[$24 + 0 >> 2] = 0;
 HEAP32[$24 + 4 >> 2] = 0;
 HEAP32[$24 + 8 >> 2] = 0;
 $25 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, 58936, 1) | 0;
 $26 = HEAP8[$25 >> 0] | 0;
 $27 = $25 + 1 | 0;
 HEAP8[$$sroa$4 + 0 >> 0] = HEAP8[$27 + 0 >> 0] | 0;
 HEAP8[$$sroa$4 + 1 >> 0] = HEAP8[$27 + 1 >> 0] | 0;
 HEAP8[$$sroa$4 + 2 >> 0] = HEAP8[$27 + 2 >> 0] | 0;
 HEAP8[$$sroa$4 + 3 >> 0] = HEAP8[$27 + 3 >> 0] | 0;
 HEAP8[$$sroa$4 + 4 >> 0] = HEAP8[$27 + 4 >> 0] | 0;
 HEAP8[$$sroa$4 + 5 >> 0] = HEAP8[$27 + 5 >> 0] | 0;
 HEAP8[$$sroa$4 + 6 >> 0] = HEAP8[$27 + 6 >> 0] | 0;
 $29 = HEAP32[$25 + 8 >> 2] | 0;
 HEAP32[$25 + 0 >> 2] = 0;
 HEAP32[$25 + 4 >> 2] = 0;
 HEAP32[$25 + 8 >> 2] = 0;
 do if (!(HEAP8[$9 >> 0] & 1)) {
  HEAP8[$9 + 1 >> 0] = 0;
  HEAP8[$9 >> 0] = 0;
 } else {
  $34 = $7 + -16 | 0;
  HEAP8[HEAP32[$34 >> 2] >> 0] = 0;
  $36 = $7 + -20 | 0;
  HEAP32[$36 >> 2] = 0;
  $$pre$i$i$i = HEAP8[$9 >> 0] | 0;
  if (!($$pre$i$i$i & 1)) {
   $43 = $$pre$i$i$i;
   $52 = 10;
  } else {
   $39 = HEAP32[$9 >> 2] | 0;
   $43 = $39 & 255;
   $52 = ($39 & -2) + -1 | 0;
  }
  if (!($43 & 1)) {
   $46 = ($43 & 255) >>> 1;
   if (($43 & 255) < 22) {
    $51 = 10;
    $71 = $46;
    $86 = 1;
   } else {
    $51 = ($46 + 16 & 240) + -1 | 0;
    $71 = $46;
    $86 = 1;
   }
  } else {
   $51 = 10;
   $71 = 0;
   $86 = 0;
  }
  if (($51 | 0) != ($52 | 0)) {
   if (($51 | 0) == 10) {
    $58 = $9 + 1 | 0;
    $59 = HEAP32[$34 >> 2] | 0;
    if ($86) {
     _memcpy($58 | 0, $59 | 0, (($43 & 255) >>> 1) + 1 | 0) | 0;
     _free($59);
    } else {
     HEAP8[$58 >> 0] = HEAP8[$59 >> 0] | 0;
     _free($59);
    }
    HEAP8[$9 >> 0] = $71 << 1;
    break;
   }
   $55 = $51 + 1 | 0;
   $56 = _malloc($55) | 0;
   if (!($51 >>> 0 <= $52 >>> 0 & ($56 | 0) == 0)) {
    if ($86) _memcpy($56 | 0, $9 + 1 | 0, (($43 & 255) >>> 1) + 1 | 0) | 0; else {
     $68 = HEAP32[$34 >> 2] | 0;
     HEAP8[$56 >> 0] = HEAP8[$68 >> 0] | 0;
     _free($68);
    }
    HEAP32[$9 >> 2] = $55 | 1;
    HEAP32[$36 >> 2] = $71;
    HEAP32[$34 >> 2] = $56;
   }
  }
 } while (0);
 HEAP8[$7 + -24 >> 0] = $26;
 $75 = $7 + -23 | 0;
 HEAP8[$75 + 0 >> 0] = HEAP8[$$sroa$4 + 0 >> 0] | 0;
 HEAP8[$75 + 1 >> 0] = HEAP8[$$sroa$4 + 1 >> 0] | 0;
 HEAP8[$75 + 2 >> 0] = HEAP8[$$sroa$4 + 2 >> 0] | 0;
 HEAP8[$75 + 3 >> 0] = HEAP8[$$sroa$4 + 3 >> 0] | 0;
 HEAP8[$75 + 4 >> 0] = HEAP8[$$sroa$4 + 4 >> 0] | 0;
 HEAP8[$75 + 5 >> 0] = HEAP8[$$sroa$4 + 5 >> 0] | 0;
 HEAP8[$75 + 6 >> 0] = HEAP8[$$sroa$4 + 6 >> 0] | 0;
 HEAP32[$7 + -16 >> 2] = $29;
 HEAP8[$$sroa$4 + 0 >> 0] = 0;
 HEAP8[$$sroa$4 + 1 >> 0] = 0;
 HEAP8[$$sroa$4 + 2 >> 0] = 0;
 HEAP8[$$sroa$4 + 3 >> 0] = 0;
 HEAP8[$$sroa$4 + 4 >> 0] = 0;
 HEAP8[$$sroa$4 + 5 >> 0] = 0;
 HEAP8[$$sroa$4 + 6 >> 0] = 0;
 if (HEAP8[$0 >> 0] & 1) _free(HEAP32[$0 + 8 >> 2] | 0);
 if (!$14) _free(HEAP32[$2 + 8 >> 2] | 0);
 if (!(HEAP8[$1 >> 0] & 1)) {
  $$04 = $3;
  STACKTOP = sp;
  return $$04 | 0;
 }
 _free(HEAP32[$1 + 8 >> 2] | 0);
 $$04 = $3;
 STACKTOP = sp;
 return $$04 | 0;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $15 = 0, $16 = 0, $19 = 0, $23 = 0, $25 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $43 = 0, $48 = 0, $49 = 0, $52 = 0, $6 = 0, $62 = 0, $65 = 0, $7 = 0, $78 = 0, $79 = 0, $84 = 0, $87 = 0, $__atoms = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$26 = 0, $__neg = 0, $__w$07 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 $vararg_buffer = sp;
 $__wbuf = sp + 16 | 0;
 $__wb = sp + 8 | 0;
 $__wn = sp + 456 | 0;
 $__neg = sp + 560 | 0;
 $__atoms = sp + 416 | 0;
 $__nbuf = sp + 460 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $0 = $__wb + 4 | 0;
 HEAP32[$0 >> 2] = 114;
 $3 = HEAP32[$__iob + 28 >> 2] | 0;
 $4 = $3 + 4 | 0;
 HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 $6 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $7 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$3 + 8 >> 2] | 0, HEAP32[$3 + 12 >> 2] | 0, $6) | 0;
 HEAP8[$__neg >> 0] = 0;
 do if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, HEAP32[$__e >> 2] | 0, $__intl, $3, HEAP32[$__iob + 4 >> 2] | 0, $__err, $__neg, $7, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 7]($7, 50544, 50554, $__atoms) | 0;
  $15 = HEAP32[$__wn >> 2] | 0;
  $16 = HEAP32[$__wb >> 2] | 0;
  $19 = $15 - $16 | 0;
  if (($19 | 0) > 392) {
   $23 = _malloc(($19 >> 2) + 2 | 0) | 0;
   if (!$23) {
    $25 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$25 >> 2] = 61776;
    ___cxa_throw($25 | 0, 61824, 94);
   } else {
    $48 = $23;
    $__nc$0 = $23;
   }
  } else {
   $48 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  if ($16 >>> 0 < $15 >>> 0) {
   $30 = $__atoms + 40 | 0;
   $31 = $__atoms;
   $__nc$26 = $__nc$1;
   $__w$07 = $16;
   while (1) {
    $32 = HEAP32[$__w$07 >> 2] | 0;
    $$01$i = $__atoms;
    while (1) {
     if ((HEAP32[$$01$i >> 2] | 0) == ($32 | 0)) {
      $$0$lcssa$i = $$01$i;
      break;
     }
     $$01$i = $$01$i + 4 | 0;
     if (($$01$i | 0) == ($30 | 0)) {
      $$0$lcssa$i = $30;
      break;
     }
    }
    HEAP8[$__nc$26 >> 0] = HEAP8[50544 + ($$0$lcssa$i - $31 >> 2) >> 0] | 0;
    $__w$07 = $__w$07 + 4 | 0;
    $43 = $__nc$26 + 1 | 0;
    if ($__w$07 >>> 0 >= (HEAP32[$__wn >> 2] | 0) >>> 0) {
     $__nc$2$lcssa = $43;
     break;
    } else $__nc$26 = $43;
   }
  } else $__nc$2$lcssa = $__nc$1;
  HEAP8[$__nc$2$lcssa >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $__v;
  if ((_sscanf($__nbuf, 50480, $vararg_buffer) | 0) == 1) {
   _free($48);
   break;
  } else __ZNSt3__121__throw_runtime_errorEPKc(50488);
 } while (0);
 $49 = HEAP32[$__b >> 2] | 0;
 do if (!$49) $87 = 1; else {
  $52 = HEAP32[$49 + 12 >> 2] | 0;
  if (($52 | 0) == (HEAP32[$49 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 36 >> 2] & 127]($49) | 0; else $$0$i$i$i$i = HEAP32[$52 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $87 = 1;
   break;
  } else {
   $87 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $62 = HEAP32[$__e >> 2] | 0;
 do if (!$62) label = 29; else {
  $65 = HEAP32[$62 + 12 >> 2] | 0;
  if (($65 | 0) == (HEAP32[$62 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$62 >> 2] | 0) + 36 >> 2] & 127]($62) | 0; else $$0$i$i1$i$i = HEAP32[$65 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 29;
   break;
  } else if ($87) break; else {
   label = 31;
   break;
  }
 } while (0);
 if ((label | 0) == 29) if ($87) label = 31;
 if ((label | 0) == 31) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 $78 = $3 + 4 | 0;
 $79 = HEAP32[$78 >> 2] | 0;
 HEAP32[$78 >> 2] = $79 + -1;
 if (!$79) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] & 127]($3);
 $84 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if (!$84) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($84);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $33 = 0, $37 = 0, $39 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $55 = 0, $57 = 0, $58 = 0, $7 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $vararg_buffer9 = sp;
 $__fmt = sp + 232 | 0;
 $__nar = sp + 260 | 0;
 $__nb = sp + 248 | 0;
 $__op = sp + 244 | 0;
 $__oe = sp + 240 | 0;
 $0 = sp + 252 | 0;
 $1 = sp + 256 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $__iob + 4 | 0;
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 49568, HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = __ZNSt3__16__clocEv() | 0;
 if ($9) {
  HEAP32[$vararg_buffer9 >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr1 = $vararg_buffer9 + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer9) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer9) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0;
  if ($9) {
   HEAP32[$vararg_buffer9 >> 2] = HEAP32[$__iob + 8 >> 2];
   $vararg_ptr8 = $vararg_buffer9 + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer9) | 0;
  } else {
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer9) | 0;
  }
  $21 = HEAP32[$__nb >> 2] | 0;
  if (!$21) {
   $23 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$23 >> 2] = 61776;
   ___cxa_throw($23 | 0, 61824, 94);
  } else {
   $25 = $21;
   $58 = $21;
   $__nc$2 = $__nc$1;
  }
 } else {
  $25 = $__nar;
  $58 = 0;
  $__nc$2 = $__nc$0;
 }
 $24 = $25 + $__nc$2 | 0;
 $27 = HEAP32[$7 >> 2] & 176;
 do if (($27 | 0) == 32) $$0$i = $24; else if (($27 | 0) == 16) {
  $28 = HEAP8[$25 >> 0] | 0;
  if ($28 << 24 >> 24 == 43 | $28 << 24 >> 24 == 45) {
   $$0$i = $25 + 1 | 0;
   break;
  }
  if (($__nc$2 | 0) > 1 & $28 << 24 >> 24 == 48) {
   $33 = HEAP8[$25 + 1 >> 0] | 0;
   if ($33 << 24 >> 24 == 88 | $33 << 24 >> 24 == 120) $$0$i = $25 + 2 | 0; else label = 16;
  } else label = 16;
 } else label = 16; while (0);
 if ((label | 0) == 16) $$0$i = $25;
 if (($25 | 0) == ($__nar | 0)) {
  $44 = $__nar;
  $57 = 0;
  $__ob$0 = $vararg_buffer9;
 } else {
  $37 = _malloc($__nc$2 << 3) | 0;
  if (!$37) {
   $39 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$39 >> 2] = 61776;
   ___cxa_throw($39 | 0, 61824, 94);
  } else {
   $44 = $25;
   $57 = $37;
   $__ob$0 = $37;
  }
 }
 $41 = HEAP32[$__iob + 28 >> 2] | 0;
 HEAP32[$0 >> 2] = $41;
 $42 = $41 + 4 | 0;
 HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($44, $$0$i, $24, $__ob$0, $__op, $__oe, $0);
 $45 = HEAP32[$0 >> 2] | 0;
 $46 = $45 + 4 | 0;
 $47 = HEAP32[$46 >> 2] | 0;
 HEAP32[$46 >> 2] = $47 + -1;
 if (!$47) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$45 >> 2] | 0) + 8 >> 2] & 127]($45);
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, HEAP32[$__s >> 2] | 0, $__ob$0, HEAP32[$__op >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl);
 $55 = HEAP32[$1 >> 2] | 0;
 HEAP32[$__s >> 2] = $55;
 HEAP32[$agg$result >> 2] = $55;
 if (!$57) {
  _free($58);
  STACKTOP = sp;
  return;
 }
 _free($57);
 _free($58);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$pn = 0, $1 = 0, $104 = 0, $120 = 0, $121 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $25 = 0, $26 = 0, $28 = 0, $33 = 0, $35 = 0, $4 = 0, $41 = 0, $43 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $69 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $83 = 0, $85 = 0, $96 = 0, $97 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464 | 0;
 $__pat = sp + 456 | 0;
 $__dp = sp + 16 | 0;
 $__ts = sp + 8 | 0;
 $__grp = sp + 20 | 0;
 $__sym = sp + 432 | 0;
 $__sn = sp + 444 | 0;
 $__fd = sp + 12 | 0;
 $__mbuf = sp + 32 | 0;
 $__mi = sp + 4 | 0;
 $__me = sp;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$1 + 8 >> 2] | 0, HEAP32[$1 + 12 >> 2] | 0, $4) | 0;
 $6 = HEAP8[$__digits >> 0] | 0;
 $8 = ($6 & 1) == 0;
 if ($8) $14 = ($6 & 255) >>> 1; else $14 = HEAP32[$__digits + 4 >> 2] | 0;
 if (!$14) $25 = 0; else {
  if ($8) $19 = $__digits + 4 | 0; else $19 = HEAP32[$__digits + 8 >> 2] | 0;
  $18 = HEAP32[$19 >> 2] | 0;
  $25 = ($18 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 44 >> 2] & 31]($5, 45) | 0);
 };
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__sn + 0 >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $25, $1, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $26 = HEAP8[$__digits >> 0] | 0;
 $28 = ($26 & 1) == 0;
 if ($28) $35 = ($26 & 255) >>> 1; else $35 = HEAP32[$__digits + 4 >> 2] | 0;
 $33 = HEAP32[$__fd >> 2] | 0;
 if (($35 | 0) > ($33 | 0)) {
  if ($28) $41 = ($26 & 255) >>> 1; else $41 = HEAP32[$__digits + 4 >> 2] | 0;
  $43 = HEAP8[$__sn >> 0] | 0;
  if (!($43 & 1)) $59 = ($43 & 255) >>> 1; else $59 = HEAP32[$__sn + 4 >> 2] | 0;
  $50 = HEAP8[$__sym >> 0] | 0;
  if (!($50 & 1)) $61 = ($50 & 255) >>> 1; else $61 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $59 + ($41 - $33 << 1 | 1) + $61 | 0;
 } else {
  $62 = HEAP8[$__sn >> 0] | 0;
  if (!($62 & 1)) $77 = ($62 & 255) >>> 1; else $77 = HEAP32[$__sn + 4 >> 2] | 0;
  $69 = HEAP8[$__sym >> 0] | 0;
  if (!($69 & 1)) $79 = ($69 & 255) >>> 1; else $79 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $77 + 2 + $79 | 0;
 }
 $80 = $$pn + $33 | 0;
 if ($80 >>> 0 > 100) {
  $83 = _malloc($80 << 2) | 0;
  if (!$83) {
   $85 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$85 >> 2] = 61776;
   ___cxa_throw($85 | 0, 61824, 94);
  } else {
   $104 = $83;
   $__mb$0 = $83;
  }
 } else {
  $104 = 0;
  $__mb$0 = $__mbuf;
 }
 if ($28) {
  $96 = $__digits + 4 | 0;
  $97 = ($26 & 255) >>> 1;
 } else {
  $96 = HEAP32[$__digits + 8 >> 2] | 0;
  $97 = HEAP32[$__digits + 4 >> 2] | 0;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $96, $96 + ($97 << 2) | 0, $5, $25, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $33);
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, HEAP32[$__s >> 2] | 0, $__mb$0, HEAP32[$__mi >> 2] | 0, HEAP32[$__me >> 2] | 0, $__iob, $__fl);
 if ($104) _free($104);
 if (HEAP8[$__sn >> 0] & 1) _free(HEAP32[$__sn + 8 >> 2] | 0);
 if (HEAP8[$__sym >> 0] & 1) _free(HEAP32[$__sym + 8 >> 2] | 0);
 if (HEAP8[$__grp >> 0] & 1) _free(HEAP32[$__grp + 8 >> 2] | 0);
 $120 = $1 + 4 | 0;
 $121 = HEAP32[$120 >> 2] | 0;
 HEAP32[$120 >> 2] = $121 + -1;
 if ($121) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$pn = 0, $1 = 0, $102 = 0, $118 = 0, $119 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $25 = 0, $26 = 0, $28 = 0, $33 = 0, $35 = 0, $4 = 0, $41 = 0, $43 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $69 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $95 = 0, $96 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $__pat = sp + 152 | 0;
 $__dp = sp + 48 | 0;
 $__ts = sp + 49 | 0;
 $__grp = sp + 12 | 0;
 $__sym = sp;
 $__sn = sp + 36 | 0;
 $__fd = sp + 32 | 0;
 $__mbuf = sp + 52 | 0;
 $__mi = sp + 24 | 0;
 $__me = sp + 28 | 0;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$1 + 8 >> 2] | 0, HEAP32[$1 + 12 >> 2] | 0, $4) | 0;
 $6 = HEAP8[$__digits >> 0] | 0;
 $8 = ($6 & 1) == 0;
 if ($8) $14 = ($6 & 255) >>> 1; else $14 = HEAP32[$__digits + 4 >> 2] | 0;
 if (!$14) $25 = 0; else {
  if ($8) $19 = $__digits + 1 | 0; else $19 = HEAP32[$__digits + 8 >> 2] | 0;
  $18 = HEAP8[$19 >> 0] | 0;
  $25 = $18 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 31]($5, 45) | 0) << 24 >> 24;
 };
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__sn + 0 >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $25, $1, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $26 = HEAP8[$__digits >> 0] | 0;
 $28 = ($26 & 1) == 0;
 if ($28) $35 = ($26 & 255) >>> 1; else $35 = HEAP32[$__digits + 4 >> 2] | 0;
 $33 = HEAP32[$__fd >> 2] | 0;
 if (($35 | 0) > ($33 | 0)) {
  if ($28) $41 = ($26 & 255) >>> 1; else $41 = HEAP32[$__digits + 4 >> 2] | 0;
  $43 = HEAP8[$__sn >> 0] | 0;
  if (!($43 & 1)) $59 = ($43 & 255) >>> 1; else $59 = HEAP32[$__sn + 4 >> 2] | 0;
  $50 = HEAP8[$__sym >> 0] | 0;
  if (!($50 & 1)) $61 = ($50 & 255) >>> 1; else $61 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $59 + ($41 - $33 << 1 | 1) + $61 | 0;
 } else {
  $62 = HEAP8[$__sn >> 0] | 0;
  if (!($62 & 1)) $77 = ($62 & 255) >>> 1; else $77 = HEAP32[$__sn + 4 >> 2] | 0;
  $69 = HEAP8[$__sym >> 0] | 0;
  if (!($69 & 1)) $79 = ($69 & 255) >>> 1; else $79 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $77 + 2 + $79 | 0;
 }
 $80 = $$pn + $33 | 0;
 if ($80 >>> 0 > 100) {
  $82 = _malloc($80) | 0;
  if (!$82) {
   $84 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$84 >> 2] = 61776;
   ___cxa_throw($84 | 0, 61824, 94);
  } else {
   $102 = $82;
   $__mb$0 = $82;
  }
 } else {
  $102 = 0;
  $__mb$0 = $__mbuf;
 }
 if ($28) {
  $95 = $__digits + 1 | 0;
  $96 = ($26 & 255) >>> 1;
 } else {
  $95 = HEAP32[$__digits + 8 >> 2] | 0;
  $96 = HEAP32[$__digits + 4 >> 2] | 0;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $95, $95 + $96 | 0, $5, $25, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $33);
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, HEAP32[$__s >> 2] | 0, $__mb$0, HEAP32[$__mi >> 2] | 0, HEAP32[$__me >> 2] | 0, $__iob, $__fl);
 _free($102);
 if (HEAP8[$__sn >> 0] & 1) _free(HEAP32[$__sn + 8 >> 2] | 0);
 if (HEAP8[$__sym >> 0] & 1) _free(HEAP32[$__sym + 8 >> 2] | 0);
 if (HEAP8[$__grp >> 0] & 1) _free(HEAP32[$__grp + 8 >> 2] | 0);
 $118 = $1 + 4 | 0;
 $119 = HEAP32[$118 >> 2] | 0;
 HEAP32[$118 >> 2] = $119 + -1;
 if ($119) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $15 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $41 = 0, $46 = 0, $47 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $76 = 0, $77 = 0, $82 = 0, $__atoms = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$27 = 0, $__neg = 0, $__w$08 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $vararg_buffer = sp;
 $__wbuf = sp + 132 | 0;
 $__wb = sp + 8 | 0;
 $__wn = sp + 16 | 0;
 $__neg = sp + 130 | 0;
 $__atoms = sp + 120 | 0;
 $__nbuf = sp + 20 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $0 = $__wb + 4 | 0;
 HEAP32[$0 >> 2] = 114;
 $3 = HEAP32[$__iob + 28 >> 2] | 0;
 $4 = $3 + 4 | 0;
 HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 $6 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $7 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$3 + 8 >> 2] | 0, HEAP32[$3 + 12 >> 2] | 0, $6) | 0;
 HEAP8[$__neg >> 0] = 0;
 do if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, HEAP32[$__e >> 2] | 0, $__intl, $3, HEAP32[$__iob + 4 >> 2] | 0, $__err, $__neg, $7, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 32 >> 2] & 7]($7, 50464, 50474, $__atoms) | 0;
  $15 = HEAP32[$__wn >> 2] | 0;
  $16 = HEAP32[$__wb >> 2] | 0;
  $19 = $15 - $16 | 0;
  if (($19 | 0) > 98) {
   $22 = _malloc($19 + 2 | 0) | 0;
   if (!$22) {
    $24 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$24 >> 2] = 61776;
    ___cxa_throw($24 | 0, 61824, 94);
   } else {
    $46 = $22;
    $__nc$0 = $22;
   }
  } else {
   $46 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  if ($16 >>> 0 < $15 >>> 0) {
   $29 = $__atoms + 10 | 0;
   $30 = $__atoms;
   $__nc$27 = $__nc$1;
   $__w$08 = $16;
   while (1) {
    $31 = HEAP8[$__w$08 >> 0] | 0;
    $$01$i = $__atoms;
    while (1) {
     if ((HEAP8[$$01$i >> 0] | 0) == $31 << 24 >> 24) {
      $$0$lcssa$i = $$01$i;
      break;
     }
     $$01$i = $$01$i + 1 | 0;
     if (($$01$i | 0) == ($29 | 0)) {
      $$0$lcssa$i = $29;
      break;
     }
    }
    HEAP8[$__nc$27 >> 0] = HEAP8[50464 + ($$0$lcssa$i - $30) >> 0] | 0;
    $__w$08 = $__w$08 + 1 | 0;
    $41 = $__nc$27 + 1 | 0;
    if ($__w$08 >>> 0 >= (HEAP32[$__wn >> 2] | 0) >>> 0) {
     $__nc$2$lcssa = $41;
     break;
    } else $__nc$27 = $41;
   }
  } else $__nc$2$lcssa = $__nc$1;
  HEAP8[$__nc$2$lcssa >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $__v;
  if ((_sscanf($__nbuf, 50480, $vararg_buffer) | 0) == 1) {
   _free($46);
   break;
  } else __ZNSt3__121__throw_runtime_errorEPKc(50488);
 } while (0);
 $47 = HEAP32[$__b >> 2] | 0;
 do if (!$47) $60 = 0; else if ((HEAP32[$47 + 12 >> 2] | 0) == (HEAP32[$47 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$47 >> 2] | 0) + 36 >> 2] & 127]($47) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $60 = 0;
  break;
 } else {
  $60 = HEAP32[$__b >> 2] | 0;
  break;
 } else $60 = $47; while (0);
 $59 = ($60 | 0) == 0;
 $61 = HEAP32[$__e >> 2] | 0;
 do if (!$61) label = 26; else {
  if ((HEAP32[$61 + 12 >> 2] | 0) != (HEAP32[$61 + 16 >> 2] | 0)) if ($59) break; else {
   label = 28;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$61 >> 2] | 0) + 36 >> 2] & 127]($61) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 26;
   break;
  } else if ($59) break; else {
   label = 28;
   break;
  }
 } while (0);
 if ((label | 0) == 26) if ($59) label = 28;
 if ((label | 0) == 28) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 $76 = $3 + 4 | 0;
 $77 = HEAP32[$76 >> 2] | 0;
 HEAP32[$76 >> 2] = $77 + -1;
 if (!$77) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] & 127]($3);
 $82 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if (!$82) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($82);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $32 = 0, $36 = 0, $38 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $54 = 0, $56 = 0, $57 = 0, $7 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$2 = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $vararg_buffer5 = sp;
 $__fmt = sp + 232 | 0;
 $__nar = sp + 260 | 0;
 $__nb = sp + 248 | 0;
 $__op = sp + 244 | 0;
 $__oe = sp + 240 | 0;
 $0 = sp + 252 | 0;
 $1 = sp + 256 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $__iob + 4 | 0;
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 60816, HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = __ZNSt3__16__clocEv() | 0;
 if ($9) {
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr1 = $vararg_buffer5 + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer5) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer5) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0;
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr8 = $vararg_buffer5 + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $19 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0;
  $20 = HEAP32[$__nb >> 2] | 0;
  if (!$20) {
   $22 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$22 >> 2] = 61776;
   ___cxa_throw($22 | 0, 61824, 94);
  } else {
   $24 = $20;
   $57 = $20;
   $__nc$2 = $19;
  }
 } else {
  $24 = $__nar;
  $57 = 0;
  $__nc$2 = $__nc$0;
 }
 $23 = $24 + $__nc$2 | 0;
 $26 = HEAP32[$7 >> 2] & 176;
 do if (($26 | 0) == 32) $$0$i = $23; else if (($26 | 0) == 16) {
  $27 = HEAP8[$24 >> 0] | 0;
  if ($27 << 24 >> 24 == 43 | $27 << 24 >> 24 == 45) {
   $$0$i = $24 + 1 | 0;
   break;
  }
  if (($__nc$2 | 0) > 1 & $27 << 24 >> 24 == 48) {
   $32 = HEAP8[$24 + 1 >> 0] | 0;
   if ($32 << 24 >> 24 == 88 | $32 << 24 >> 24 == 120) $$0$i = $24 + 2 | 0; else label = 13;
  } else label = 13;
 } else label = 13; while (0);
 if ((label | 0) == 13) $$0$i = $24;
 if (($24 | 0) == ($__nar | 0)) {
  $43 = $__nar;
  $56 = 0;
  $__ob$0 = $vararg_buffer5;
 } else {
  $36 = _malloc($__nc$2 << 3) | 0;
  if (!$36) {
   $38 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$38 >> 2] = 61776;
   ___cxa_throw($38 | 0, 61824, 94);
  } else {
   $43 = $24;
   $56 = $36;
   $__ob$0 = $36;
  }
 }
 $40 = HEAP32[$__iob + 28 >> 2] | 0;
 HEAP32[$0 >> 2] = $40;
 $41 = $40 + 4 | 0;
 HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($43, $$0$i, $23, $__ob$0, $__op, $__oe, $0);
 $44 = HEAP32[$0 >> 2] | 0;
 $45 = $44 + 4 | 0;
 $46 = HEAP32[$45 >> 2] | 0;
 HEAP32[$45 >> 2] = $46 + -1;
 if (!$46) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$44 >> 2] | 0) + 8 >> 2] & 127]($44);
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, HEAP32[$__s >> 2] | 0, $__ob$0, HEAP32[$__op >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl);
 $54 = HEAP32[$1 >> 2] | 0;
 HEAP32[$__s >> 2] = $54;
 HEAP32[$agg$result >> 2] = $54;
 if (!$56) {
  _free($57);
  STACKTOP = sp;
  return;
 }
 _free($56);
 _free($57);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $32 = 0, $36 = 0, $38 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $54 = 0, $56 = 0, $58 = 0, $7 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$2 = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer5 = sp;
 $__fmt = sp + 64 | 0;
 $__nar = sp + 92 | 0;
 $__nb = sp + 80 | 0;
 $__op = sp + 76 | 0;
 $__oe = sp + 72 | 0;
 $0 = sp + 84 | 0;
 $1 = sp + 88 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $__iob + 4 | 0;
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 60816, HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = __ZNSt3__16__clocEv() | 0;
 if ($9) {
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr1 = $vararg_buffer5 + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer5) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer5) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0;
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr8 = $vararg_buffer5 + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $19 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0;
  $20 = HEAP32[$__nb >> 2] | 0;
  if (!$20) {
   $22 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$22 >> 2] = 61776;
   ___cxa_throw($22 | 0, 61824, 94);
  } else {
   $24 = $20;
   $58 = $20;
   $__nc$2 = $19;
  }
 } else {
  $24 = $__nar;
  $58 = 0;
  $__nc$2 = $__nc$0;
 }
 $23 = $24 + $__nc$2 | 0;
 $26 = HEAP32[$7 >> 2] & 176;
 do if (($26 | 0) == 16) {
  $27 = HEAP8[$24 >> 0] | 0;
  if ($27 << 24 >> 24 == 43 | $27 << 24 >> 24 == 45) {
   $$0$i = $24 + 1 | 0;
   break;
  }
  if (($__nc$2 | 0) > 1 & $27 << 24 >> 24 == 48) {
   $32 = HEAP8[$24 + 1 >> 0] | 0;
   if ($32 << 24 >> 24 == 88 | $32 << 24 >> 24 == 120) $$0$i = $24 + 2 | 0; else label = 13;
  } else label = 13;
 } else if (($26 | 0) == 32) $$0$i = $23; else label = 13; while (0);
 if ((label | 0) == 13) $$0$i = $24;
 if (($24 | 0) == ($__nar | 0)) {
  $43 = $__nar;
  $56 = 0;
  $__ob$0 = $vararg_buffer5;
 } else {
  $36 = _malloc($__nc$2 << 1) | 0;
  if (!$36) {
   $38 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$38 >> 2] = 61776;
   ___cxa_throw($38 | 0, 61824, 94);
  } else {
   $43 = $24;
   $56 = $36;
   $__ob$0 = $36;
  }
 }
 $40 = HEAP32[$__iob + 28 >> 2] | 0;
 HEAP32[$0 >> 2] = $40;
 $41 = $40 + 4 | 0;
 HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($43, $$0$i, $23, $__ob$0, $__op, $__oe, $0);
 $44 = HEAP32[$0 >> 2] | 0;
 $45 = $44 + 4 | 0;
 $46 = HEAP32[$45 >> 2] | 0;
 HEAP32[$45 >> 2] = $46 + -1;
 if (!$46) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$44 >> 2] | 0) + 8 >> 2] & 127]($44);
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, HEAP32[$__s >> 2] | 0, $__ob$0, HEAP32[$__op >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl);
 $54 = HEAP32[$1 >> 2] | 0;
 HEAP32[$__s >> 2] = $54;
 HEAP32[$agg$result >> 2] = $54;
 if ($56) _free($56);
 if (!$58) {
  STACKTOP = sp;
  return;
 }
 _free($58);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$0$i = 0, $19 = 0, $23 = 0, $25 = 0, $3 = 0, $4 = 0, $42 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $frm_nxt$1$lcssa$i = 0, $frm_nxt$117$i = 0, $frm_nxt$2$i = 0, $nchar16_t$016$i = 0, $nchar16_t$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1 : do if ($frm >>> 0 < $frm_end >>> 0 & ($mx | 0) != 0) {
  $3 = $frm_end;
  $frm_nxt$117$i = $frm;
  $nchar16_t$016$i = 0;
  L3 : while (1) {
   $4 = HEAP8[$frm_nxt$117$i >> 0] | 0;
   $5 = $4 & 255;
   do if ($4 << 24 >> 24 > -1) {
    $frm_nxt$2$i = $frm_nxt$117$i + 1 | 0;
    $nchar16_t$1$i = $nchar16_t$016$i;
   } else {
    if (($4 & 255) < 194) {
     $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
     break L1;
    }
    if (($4 & 255) < 224) {
     if (($3 - $frm_nxt$117$i | 0) < 2) {
      $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
      break L1;
     }
     if ((HEAP8[$frm_nxt$117$i + 1 >> 0] & -64) << 24 >> 24 != -128) {
      $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
      break L1;
     }
     $frm_nxt$2$i = $frm_nxt$117$i + 2 | 0;
     $nchar16_t$1$i = $nchar16_t$016$i;
     break;
    }
    if (($4 & 255) < 240) {
     $19 = $frm_nxt$117$i;
     if (($3 - $19 | 0) < 3) {
      $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
      break L1;
     }
     $23 = HEAP8[$frm_nxt$117$i + 1 >> 0] | 0;
     $25 = HEAP8[$frm_nxt$117$i + 2 >> 0] | 0;
     if (($5 | 0) == 224) {
      if (($23 & -32) << 24 >> 24 != -96) {
       label = 14;
       break L3;
      }
     } else if (($5 | 0) == 237) {
      if (($23 & -32) << 24 >> 24 != -128) {
       label = 16;
       break L3;
      }
     } else if (($23 & -64) << 24 >> 24 != -128) {
      label = 18;
      break L3;
     }
     if (($25 & -64) << 24 >> 24 != -128) {
      $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
      break L1;
     }
     $frm_nxt$2$i = $frm_nxt$117$i + 3 | 0;
     $nchar16_t$1$i = $nchar16_t$016$i;
     break;
    }
    if (($4 & 255) >= 245) {
     $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
     break L1;
    }
    $42 = $frm_nxt$117$i;
    if (($3 - $42 | 0) < 4 | ($mx - $nchar16_t$016$i | 0) >>> 0 < 2) {
     $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
     break L1;
    }
    $48 = HEAP8[$frm_nxt$117$i + 1 >> 0] | 0;
    $50 = HEAP8[$frm_nxt$117$i + 2 >> 0] | 0;
    $52 = HEAP8[$frm_nxt$117$i + 3 >> 0] | 0;
    if (($5 | 0) == 240) {
     if (($48 + 112 << 24 >> 24 & 255) >= 48) {
      label = 25;
      break L3;
     }
    } else if (($5 | 0) == 244) {
     if (($48 & -16) << 24 >> 24 != -128) {
      label = 27;
      break L3;
     }
    } else if (($48 & -64) << 24 >> 24 != -128) {
     label = 29;
     break L3;
    }
    if (!(($50 & -64) << 24 >> 24 == -128 & ($52 & -64) << 24 >> 24 == -128)) {
     $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
     break L1;
    }
    if ((($48 & 255) << 12 & 196608 | $5 << 18 & 1835008) >>> 0 > 1114111) {
     $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
     break L1;
    }
    $frm_nxt$2$i = $frm_nxt$117$i + 4 | 0;
    $nchar16_t$1$i = $nchar16_t$016$i + 1 | 0;
   } while (0);
   $nchar16_t$016$i = $nchar16_t$1$i + 1 | 0;
   if (!($frm_nxt$2$i >>> 0 < $frm_end >>> 0 & $nchar16_t$016$i >>> 0 < $mx >>> 0)) {
    $frm_nxt$1$lcssa$i = $frm_nxt$2$i;
    break L1;
   } else $frm_nxt$117$i = $frm_nxt$2$i;
  }
  if ((label | 0) == 14) {
   $$0$i = $19 - $frm | 0;
   STACKTOP = sp;
   return $$0$i | 0;
  } else if ((label | 0) == 16) {
   $$0$i = $19 - $frm | 0;
   STACKTOP = sp;
   return $$0$i | 0;
  } else if ((label | 0) == 18) {
   $$0$i = $19 - $frm | 0;
   STACKTOP = sp;
   return $$0$i | 0;
  } else if ((label | 0) == 25) {
   $$0$i = $42 - $frm | 0;
   STACKTOP = sp;
   return $$0$i | 0;
  } else if ((label | 0) == 27) {
   $$0$i = $42 - $frm | 0;
   STACKTOP = sp;
   return $$0$i | 0;
  } else if ((label | 0) == 29) {
   $$0$i = $42 - $frm | 0;
   STACKTOP = sp;
   return $$0$i | 0;
  }
 } else $frm_nxt$1$lcssa$i = $frm; while (0);
 $$0$i = $frm_nxt$1$lcssa$i - $frm | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function __ZN7Scanner14scanWhiteSpaceEP10LexContext($this, $ctx) {
 $this = $this | 0;
 $ctx = $ctx | 0;
 var $$$i = 0, $$0 = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $42 = 0, $44 = 0, $5 = 0, $55 = 0, $6 = 0, $63 = 0, $65 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $83 = 0, $86 = 0, $88 = 0, $does_ws_continue$0$off0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp;
 $2 = HEAP32[$ctx + 4 >> 2] | 0;
 $5 = $2 + 72 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = (HEAP32[$2 + 68 >> 2] | 0) == ($6 | 0);
 $$$i = $7 ? 0 : $6 + -72 | 0;
 if ($7) {
  $55 = 211;
  label = 4;
 } else {
  $10 = HEAP32[$$$i + 8 >> 2] | 0;
  if (($10 & -2 | 0) == 208) {
   $13 = $ctx + 40 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   HEAP32[$13 >> 2] = $14 + 1;
   $16 = $ctx + 36 | 0;
   HEAP8[(HEAP32[$16 >> 2] | 0) + $14 >> 0] = 10;
   HEAP8[(HEAP32[$16 >> 2] | 0) + (HEAP32[$13 >> 2] | 0) >> 0] = 0;
   HEAP32[$ctx + 8 >> 2] = HEAP32[$$$i + 28 >> 2];
  } else {
   $55 = $10;
   label = 4;
  }
 }
 L4 : do if ((label | 0) == 4) {
  $25 = HEAP32[$ctx >> 2] | 0;
  $26 = $25 + 12 | 0;
  $27 = $25 + 4 | 0;
  $28 = $ctx + 40 | 0;
  $29 = $ctx + 36 | 0;
  $32 = HEAP32[$26 >> 2] | 0;
  $does_ws_continue$0$off0 = 1;
  while (1) {
   $33 = HEAP8[(HEAP32[$27 >> 2] | 0) + $32 >> 0] | 0;
   if (!($33 << 24 >> 24)) break L4; else if (!($33 << 24 >> 24 == 9 | $33 << 24 >> 24 == 32)) break;
   $34 = HEAP32[$28 >> 2] | 0;
   HEAP32[$28 >> 2] = $34 + 1;
   HEAP8[(HEAP32[$29 >> 2] | 0) + $34 >> 0] = $33;
   HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$28 >> 2] | 0) >> 0] = 0;
   $42 = (HEAP32[$26 >> 2] | 0) + 1 | 0;
   HEAP32[$26 >> 2] = $42;
   $32 = $42;
   $does_ws_continue$0$off0 = 0;
  }
  if (!($does_ws_continue$0$off0 & $33 << 24 >> 24 == 10)) {
   HEAP32[$26 >> 2] = $32 + -1;
   break;
  }
  $44 = HEAP32[$28 >> 2] | 0;
  HEAP32[$28 >> 2] = $44 + 1;
  HEAP8[(HEAP32[$29 >> 2] | 0) + $44 >> 0] = 10;
  HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$28 >> 2] | 0) >> 0] = 0;
  if ((HEAP8[$this + 96 >> 0] | 0) != 0 & ($55 | 0) != 182) HEAP32[$ctx + 8 >> 2] = HEAP32[$$$i + 28 >> 2];
 } while (0);
 if (!(HEAP8[$this + 96 >> 0] | 0)) {
  $63 = $ctx + 40 | 0;
  $65 = $ctx + 36 | 0;
  $67 = (HEAP32[$65 >> 2] | 0) + (HEAP32[$63 >> 2] | 0) | 0;
  HEAP32[$65 >> 2] = $67;
  HEAP8[$67 >> 0] = 0;
  HEAP32[$63 >> 2] = 0;
  $69 = (HEAP32[$65 >> 2] | 0) + 1 | 0;
  HEAP32[$65 >> 2] = $69;
  HEAP8[$69 >> 0] = 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $70 = $ctx + 36 | 0;
  $71 = HEAP32[$70 >> 2] | 0;
  $72 = $ctx + 8 | 0;
  HEAP32[$0 + 0 >> 2] = HEAP32[$72 + 0 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$72 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$72 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$72 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$72 + 16 >> 2];
  $73 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $73 + 72;
  HEAP32[$73 >> 2] = 0;
  HEAP32[$73 + 4 >> 2] = 211;
  $76 = $73 + 28 | 0;
  HEAP32[$76 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  HEAP32[$76 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$76 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$76 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$76 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
  $77 = $73 + 8 | 0;
  $78 = $2 + 48 | 0;
  HEAP32[$77 + 0 >> 2] = HEAP32[$78 + 0 >> 2];
  HEAP32[$77 + 4 >> 2] = HEAP32[$78 + 4 >> 2];
  HEAP32[$77 + 8 >> 2] = HEAP32[$78 + 8 >> 2];
  HEAP32[$77 + 12 >> 2] = HEAP32[$78 + 12 >> 2];
  HEAP32[$77 + 16 >> 2] = HEAP32[$78 + 16 >> 2];
  HEAP32[$73 + 52 >> 2] = $71;
  HEAP32[$73 + 56 >> 2] = 0;
  HEAP32[$73 + 60 >> 2] = 0;
  HEAP32[$73 + 64 >> 2] = 60816;
  _memmove($77 | 0, 44680, 20) | 0;
  $83 = $ctx + 40 | 0;
  $86 = (HEAP32[$70 >> 2] | 0) + (HEAP32[$83 >> 2] | 0) | 0;
  HEAP32[$70 >> 2] = $86;
  HEAP8[$86 >> 0] = 0;
  HEAP32[$83 >> 2] = 0;
  $88 = (HEAP32[$70 >> 2] | 0) + 1 | 0;
  HEAP32[$70 >> 2] = $88;
  HEAP8[$88 >> 0] = 0;
  $$0 = $73;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $13 = 0, $14 = 0, $19 = 0, $22 = 0, $3 = 0, $30 = 0, $33 = 0, $38 = 0, $40 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $62 = 0, $65 = 0, $73 = 0, $81 = 0, $82 = 0, $87 = 0, $89 = 0, sp = 0;
 sp = STACKTOP;
 if ($__ct << 24 >> 24 == $__decimal_point << 24 >> 24) {
  if (!(HEAP8[$__in_units >> 0] | 0)) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP8[$__in_units >> 0] = 0;
  $3 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = 46;
  $5 = HEAP8[$__grouping >> 0] | 0;
  if (!($5 & 1)) $13 = ($5 & 255) >>> 1; else $13 = HEAP32[$__grouping + 4 >> 2] | 0;
  if (!$13) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $14 = HEAP32[$__g_end >> 2] | 0;
  if (($14 - $__g | 0) >= 160) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $19 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $14 + 4;
  HEAP32[$14 >> 2] = $19;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24) {
  $22 = HEAP8[$__grouping >> 0] | 0;
  if (!($22 & 1)) $30 = ($22 & 255) >>> 1; else $30 = HEAP32[$__grouping + 4 >> 2] | 0;
  if ($30) {
   if (!(HEAP8[$__in_units >> 0] | 0)) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $33 = HEAP32[$__g_end >> 2] | 0;
   if (($33 - $__g | 0) >= 160) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $38 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $38;
   HEAP32[$__dc >> 2] = 0;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $40 = $__atoms + 32 | 0;
 $$01$i = $__atoms;
 while (1) {
  if ((HEAP8[$$01$i >> 0] | 0) == $__ct << 24 >> 24) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $$01$i = $$01$i + 1 | 0;
  if (($$01$i | 0) == ($40 | 0)) {
   $$0$lcssa$i = $40;
   break;
  }
 }
 $47 = $$0$lcssa$i - $__atoms | 0;
 if (($47 | 0) > 31) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $50 = HEAP8[49384 + $47 >> 0] | 0;
 if (($47 | 0) == 24 | ($47 | 0) == 25) {
  $51 = HEAP32[$__a_end >> 2] | 0;
  if (($51 | 0) != ($__a | 0)) if ((HEAPU8[$51 + -1 >> 0] & 95 | 0) != (HEAPU8[$__exp >> 0] & 127 | 0)) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$__a_end >> 2] = $51 + 1;
  HEAP8[$51 >> 0] = $50;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($47 | 0) == 23 | ($47 | 0) == 22) {
  HEAP8[$__exp >> 0] = 80;
  $62 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $62 + 1;
  HEAP8[$62 >> 0] = $50;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $65 = $50 & 95;
  if (($65 | 0) == (HEAP8[$__exp >> 0] | 0)) {
   HEAP8[$__exp >> 0] = $65 | 128;
   if (HEAP8[$__in_units >> 0] | 0) {
    HEAP8[$__in_units >> 0] = 0;
    $73 = HEAP8[$__grouping >> 0] | 0;
    if (!($73 & 1)) $81 = ($73 & 255) >>> 1; else $81 = HEAP32[$__grouping + 4 >> 2] | 0;
    if ($81) {
     $82 = HEAP32[$__g_end >> 2] | 0;
     if (($82 - $__g | 0) < 160) {
      $87 = HEAP32[$__dc >> 2] | 0;
      HEAP32[$__g_end >> 2] = $82 + 4;
      HEAP32[$82 >> 2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $89 + 1;
  HEAP8[$89 >> 0] = $50;
  if (($47 | 0) > 21) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZN10emscripten8internal12VectorAccessINSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEE3getERKS7_j($agg$result, $v, $index) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 $index = $index | 0;
 var $$lcssa$i = 0, $$lcssa$i21 = 0, $$lcssa$i6 = 0, $$size$i = 0, $$size$i17 = 0, $10 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $30 = 0, $32 = 0, $34 = 0, $37 = 0, $39 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $59 = 0, $61 = 0, $63 = 0, $66 = 0, $68 = 0, $8 = 0, $__p$0$i = 0, $__p$0$i13 = 0, $argv$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $argv$i = sp;
 $2 = HEAP32[$v >> 2] | 0;
 if ((((HEAP32[$v + 4 >> 2] | 0) - $2 | 0) / 24 | 0) >>> 0 <= $index >>> 0) {
  HEAP32[$agg$result >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 $8 = _malloc(24) | 0;
 L5 : do if (!$8) {
  while (1) {
   $10 = HEAP32[15470] | 0;
   HEAP32[15470] = $10 + 0;
   if (!$10) break;
   FUNCTION_TABLE_v[$10 & 3]();
   $13 = _malloc(24) | 0;
   if ($13) {
    $$lcssa$i = $13;
    break L5;
   }
  }
  $15 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$15 >> 2] = 61776;
  ___cxa_throw($15 | 0, 61824, 94);
 } else $$lcssa$i = $8; while (0);
 $16 = $2 + ($index * 24 | 0) | 0;
 if (!(HEAP8[$16 >> 0] & 1)) {
  HEAP32[$$lcssa$i + 0 >> 2] = HEAP32[$16 + 0 >> 2];
  HEAP32[$$lcssa$i + 4 >> 2] = HEAP32[$16 + 4 >> 2];
  HEAP32[$$lcssa$i + 8 >> 2] = HEAP32[$16 + 8 >> 2];
 } else {
  $21 = HEAP32[$2 + ($index * 24 | 0) + 8 >> 2] | 0;
  $23 = HEAP32[$2 + ($index * 24 | 0) + 4 >> 2] | 0;
  if ($23 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($23 >>> 0 < 11) {
   HEAP8[$$lcssa$i >> 0] = $23 << 1;
   $__p$0$i = $$lcssa$i + 1 | 0;
  } else {
   $30 = $23 + 16 & -16;
   $$size$i = ($30 | 0) == 0 ? 1 : $30;
   $32 = _malloc($$size$i) | 0;
   L19 : do if (!$32) {
    while (1) {
     $34 = HEAP32[15470] | 0;
     HEAP32[15470] = $34 + 0;
     if (!$34) break;
     FUNCTION_TABLE_v[$34 & 3]();
     $37 = _malloc($$size$i) | 0;
     if ($37) {
      $$lcssa$i6 = $37;
      break L19;
     }
    }
    $39 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$39 >> 2] = 61776;
    ___cxa_throw($39 | 0, 61824, 94);
   } else $$lcssa$i6 = $32; while (0);
   HEAP32[$$lcssa$i + 8 >> 2] = $$lcssa$i6;
   HEAP32[$$lcssa$i >> 2] = $30 | 1;
   HEAP32[$$lcssa$i + 4 >> 2] = $23;
   $__p$0$i = $$lcssa$i6;
  }
  _memcpy($__p$0$i | 0, $21 | 0, $23 | 0) | 0;
  HEAP8[$__p$0$i + $23 >> 0] = 0;
 }
 $44 = $$lcssa$i + 12 | 0;
 $45 = $2 + ($index * 24 | 0) + 12 | 0;
 if (!(HEAP8[$45 >> 0] & 1)) {
  HEAP32[$44 + 0 >> 2] = HEAP32[$45 + 0 >> 2];
  HEAP32[$44 + 4 >> 2] = HEAP32[$45 + 4 >> 2];
  HEAP32[$44 + 8 >> 2] = HEAP32[$45 + 8 >> 2];
 } else {
  $50 = HEAP32[$2 + ($index * 24 | 0) + 20 >> 2] | 0;
  $52 = HEAP32[$2 + ($index * 24 | 0) + 16 >> 2] | 0;
  if ($52 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($52 >>> 0 < 11) {
   HEAP8[$44 >> 0] = $52 << 1;
   $__p$0$i13 = $$lcssa$i + 13 | 0;
  } else {
   $59 = $52 + 16 & -16;
   $$size$i17 = ($59 | 0) == 0 ? 1 : $59;
   $61 = _malloc($$size$i17) | 0;
   L37 : do if (!$61) {
    while (1) {
     $63 = HEAP32[15470] | 0;
     HEAP32[15470] = $63 + 0;
     if (!$63) break;
     FUNCTION_TABLE_v[$63 & 3]();
     $66 = _malloc($$size$i17) | 0;
     if ($66) {
      $$lcssa$i21 = $66;
      break L37;
     }
    }
    $68 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$68 >> 2] = 61776;
    ___cxa_throw($68 | 0, 61824, 94);
   } else $$lcssa$i21 = $61; while (0);
   HEAP32[$$lcssa$i + 20 >> 2] = $$lcssa$i21;
   HEAP32[$44 >> 2] = $59 | 1;
   HEAP32[$$lcssa$i + 16 >> 2] = $52;
   $__p$0$i13 = $$lcssa$i21;
  }
  _memcpy($__p$0$i13 | 0, $50 | 0, $52 | 0) | 0;
  HEAP8[$__p$0$i13 + $52 >> 0] = 0;
 }
 HEAP32[$argv$i >> 2] = $$lcssa$i;
 HEAP32[$agg$result >> 2] = __emval_take_value(552, $argv$i | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZN7Scanner11isPrototypeEP10LexContext($ctx) {
 $ctx = $ctx | 0;
 var $$0 = 0, $$lcssa$i = 0, $$lcssa$i11 = 0, $$pre = 0, $$size$i = 0, $$size$i7 = 0, $0 = 0, $1 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $25 = 0, $3 = 0, $32 = 0, $34 = 0, $43 = 0, $44 = 0, $5 = 0, $51 = 0, $53 = 0, $55 = 0, $58 = 0, $60 = 0, $66 = 0, $8 = 0, $9 = 0, $__p$0$i = 0, $__p$0$i4 = 0, $before_prev_data = 0, $prev_data = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $prev_data = sp + 12 | 0;
 $before_prev_data = sp;
 $0 = $ctx + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $3 = HEAP32[$1 + 68 >> 2] | 0;
 $5 = HEAP32[$1 + 72 >> 2] | 0;
 if (($3 | 0) == ($5 | 0)) {
  HEAP8[$prev_data >> 0] = 0;
  HEAP8[$prev_data + 1 >> 0] = 0;
  $32 = $3;
  $34 = $3;
 } else {
  $8 = HEAP32[$5 + -20 >> 2] | 0;
  $9 = _strlen($8 | 0) | 0;
  if ($9 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($9 >>> 0 < 11) {
   HEAP8[$prev_data >> 0] = $9 << 1;
   $__p$0$i = $prev_data + 1 | 0;
  } else {
   $16 = $9 + 16 & -16;
   $$size$i = ($16 | 0) == 0 ? 1 : $16;
   $18 = _malloc($$size$i) | 0;
   L10 : do if (!$18) {
    while (1) {
     $20 = HEAP32[15470] | 0;
     HEAP32[15470] = $20 + 0;
     if (!$20) break;
     FUNCTION_TABLE_v[$20 & 3]();
     $23 = _malloc($$size$i) | 0;
     if ($23) {
      $$lcssa$i = $23;
      break L10;
     }
    }
    $25 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$25 >> 2] = 61776;
    ___cxa_throw($25 | 0, 61824, 94);
   } else $$lcssa$i = $18; while (0);
   HEAP32[$prev_data + 8 >> 2] = $$lcssa$i;
   HEAP32[$prev_data >> 2] = $16 | 1;
   HEAP32[$prev_data + 4 >> 2] = $9;
   $__p$0$i = $$lcssa$i;
  }
  _memcpy($__p$0$i | 0, $8 | 0, $9 | 0) | 0;
  HEAP8[$__p$0$i + $9 >> 0] = 0;
  $$pre = HEAP32[$0 >> 2] | 0;
  $32 = HEAP32[$$pre + 72 >> 2] | 0;
  $34 = HEAP32[$$pre + 68 >> 2] | 0;
 }
 if (((($32 - $34 | 0) / 72 | 0) + -2 | 0) > -1) {
  $43 = HEAP32[(($34 + 144 | 0) >>> 0 > $32 >>> 0 ? 0 : $32 + -144 | 0) + 52 >> 2] | 0;
  $44 = _strlen($43 | 0) | 0;
  if ($44 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($44 >>> 0 < 11) {
   HEAP8[$before_prev_data >> 0] = $44 << 1;
   $__p$0$i4 = $before_prev_data + 1 | 0;
  } else {
   $51 = $44 + 16 & -16;
   $$size$i7 = ($51 | 0) == 0 ? 1 : $51;
   $53 = _malloc($$size$i7) | 0;
   L26 : do if (!$53) {
    while (1) {
     $55 = HEAP32[15470] | 0;
     HEAP32[15470] = $55 + 0;
     if (!$55) break;
     FUNCTION_TABLE_v[$55 & 3]();
     $58 = _malloc($$size$i7) | 0;
     if ($58) {
      $$lcssa$i11 = $58;
      break L26;
     }
    }
    $60 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$60 >> 2] = 61776;
    ___cxa_throw($60 | 0, 61824, 94);
   } else $$lcssa$i11 = $53; while (0);
   HEAP32[$before_prev_data + 8 >> 2] = $$lcssa$i11;
   HEAP32[$before_prev_data >> 2] = $51 | 1;
   HEAP32[$before_prev_data + 4 >> 2] = $44;
   $__p$0$i4 = $$lcssa$i11;
  }
  _memcpy($__p$0$i4 | 0, $43 | 0, $44 | 0) | 0;
  HEAP8[$__p$0$i4 + $44 >> 0] = 0;
 } else {
  HEAP8[$before_prev_data >> 0] = 0;
  HEAP8[$before_prev_data + 1 >> 0] = 0;
 }
 $66 = HEAP32[$ctx >> 2] | 0;
 do if ((HEAP8[(HEAP32[$66 + 4 >> 2] | 0) + (HEAP32[$66 + 12 >> 2] | 0) >> 0] | 0) == 40) if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_data, 37696) | 0)) $$0 = 1; else {
  if (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_data, 38528) | 0) if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($before_prev_data, 37696) | 0)) {
   $$0 = 1;
   break;
  }
  $$0 = 0;
 } else $$0 = 0; while (0);
 if (HEAP8[$before_prev_data >> 0] & 1) _free(HEAP32[$before_prev_data + 8 >> 2] | 0);
 if (!(HEAP8[$prev_data >> 0] & 1)) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 _free(HEAP32[$prev_data + 8 >> 2] | 0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$0$i = 0, $19 = 0, $23 = 0, $25 = 0, $3 = 0, $4 = 0, $42 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $frm_nxt$1$lcssa$i = 0, $frm_nxt$115$i = 0, $frm_nxt$2$i = 0, $nchar32_t$014$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1 : do if ($frm >>> 0 < $frm_end >>> 0 & ($mx | 0) != 0) {
  $3 = $frm_end;
  $frm_nxt$115$i = $frm;
  $nchar32_t$014$i = 0;
  L3 : while (1) {
   $4 = HEAP8[$frm_nxt$115$i >> 0] | 0;
   $5 = $4 & 255;
   do if ($4 << 24 >> 24 > -1) $frm_nxt$2$i = $frm_nxt$115$i + 1 | 0; else {
    if (($4 & 255) < 194) {
     $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
     break L1;
    }
    if (($4 & 255) < 224) {
     if (($3 - $frm_nxt$115$i | 0) < 2) {
      $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
      break L1;
     }
     if ((HEAP8[$frm_nxt$115$i + 1 >> 0] & -64) << 24 >> 24 != -128) {
      $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
      break L1;
     }
     $frm_nxt$2$i = $frm_nxt$115$i + 2 | 0;
     break;
    }
    if (($4 & 255) < 240) {
     $19 = $frm_nxt$115$i;
     if (($3 - $19 | 0) < 3) {
      $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
      break L1;
     }
     $23 = HEAP8[$frm_nxt$115$i + 1 >> 0] | 0;
     $25 = HEAP8[$frm_nxt$115$i + 2 >> 0] | 0;
     if (($5 | 0) == 224) {
      if (($23 & -32) << 24 >> 24 != -96) {
       label = 14;
       break L3;
      }
     } else if (($5 | 0) == 237) {
      if (($23 & -32) << 24 >> 24 != -128) {
       label = 16;
       break L3;
      }
     } else if (($23 & -64) << 24 >> 24 != -128) {
      label = 18;
      break L3;
     }
     if (($25 & -64) << 24 >> 24 != -128) {
      $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
      break L1;
     }
     $frm_nxt$2$i = $frm_nxt$115$i + 3 | 0;
     break;
    }
    if (($4 & 255) >= 245) {
     $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
     break L1;
    }
    $42 = $frm_nxt$115$i;
    if (($3 - $42 | 0) < 4) {
     $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
     break L1;
    }
    $46 = HEAP8[$frm_nxt$115$i + 1 >> 0] | 0;
    $48 = HEAP8[$frm_nxt$115$i + 2 >> 0] | 0;
    $50 = HEAP8[$frm_nxt$115$i + 3 >> 0] | 0;
    if (($5 | 0) == 240) {
     if (($46 + 112 << 24 >> 24 & 255) >= 48) {
      label = 25;
      break L3;
     }
    } else if (($5 | 0) == 244) {
     if (($46 & -16) << 24 >> 24 != -128) {
      label = 27;
      break L3;
     }
    } else if (($46 & -64) << 24 >> 24 != -128) {
     label = 29;
     break L3;
    }
    if (!(($48 & -64) << 24 >> 24 == -128 & ($50 & -64) << 24 >> 24 == -128)) {
     $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
     break L1;
    }
    if ((($46 & 255) << 12 & 196608 | $5 << 18 & 1835008) >>> 0 > 1114111) {
     $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
     break L1;
    }
    $frm_nxt$2$i = $frm_nxt$115$i + 4 | 0;
   } while (0);
   $nchar32_t$014$i = $nchar32_t$014$i + 1 | 0;
   if (!($frm_nxt$2$i >>> 0 < $frm_end >>> 0 & $nchar32_t$014$i >>> 0 < $mx >>> 0)) {
    $frm_nxt$1$lcssa$i = $frm_nxt$2$i;
    break L1;
   } else $frm_nxt$115$i = $frm_nxt$2$i;
  }
  if ((label | 0) == 14) {
   $$0$i = $19 - $frm | 0;
   STACKTOP = sp;
   return $$0$i | 0;
  } else if ((label | 0) == 16) {
   $$0$i = $19 - $frm | 0;
   STACKTOP = sp;
   return $$0$i | 0;
  } else if ((label | 0) == 18) {
   $$0$i = $19 - $frm | 0;
   STACKTOP = sp;
   return $$0$i | 0;
  } else if ((label | 0) == 25) {
   $$0$i = $42 - $frm | 0;
   STACKTOP = sp;
   return $$0$i | 0;
  } else if ((label | 0) == 27) {
   $$0$i = $42 - $frm | 0;
   STACKTOP = sp;
   return $$0$i | 0;
  } else if ((label | 0) == 29) {
   $$0$i = $42 - $frm | 0;
   STACKTOP = sp;
   return $$0$i | 0;
  }
 } else $frm_nxt$1$lcssa$i = $frm; while (0);
 $$0$i = $frm_nxt$1$lcssa$i - $frm | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function __ZN13ScriptManager7compareEiiNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $start, $len, $target) {
 $this = $this | 0;
 $start = $start | 0;
 $len = $len | 0;
 $target = $target | 0;
 var $$0 = 0, $$0$i = 0, $$0$i11 = 0, $$0$i9 = 0, $$03$i = 0, $$lcssa$i = 0, $$pre$phiZ2D = 0, $$size$i = 0, $0 = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $31 = 0, $36 = 0, $38 = 0, $43 = 0, $45 = 0, $51 = 0, $52 = 0, $59 = 0, $76 = 0, $77 = 0, $9 = 0, $__lhs_sz$03$i = 0, $__lp$04$i = 0, $__p$0$i = 0, $__rp$05$i = 0, $l$04$i = 0, $r$05$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $3 = (HEAP32[$this + 12 >> 2] | 0) + $start | 0;
 if (($3 | 0) <= -1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($3 + $len | 0) >>> 0 >= (HEAP32[$this + 8 >> 2] | 0) >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $9 = $len + 1 | 0;
 $10 = _llvm_stacksave() | 0;
 $11 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $9 | 0) + 15 & -16) | 0;
 _memset($11 | 0, 0, $9 | 0) | 0;
 _memcpy($11 | 0, (HEAP32[$this + 4 >> 2] | 0) + $3 | 0, $len | 0) | 0;
 $15 = _strlen($11 | 0) | 0;
 if ($15 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($15 >>> 0 < 11) {
  HEAP8[$0 >> 0] = $15 << 1;
  $$pre$phiZ2D = $0;
  $__p$0$i = $0 + 1 | 0;
 } else {
  $22 = $15 + 16 & -16;
  $$size$i = ($22 | 0) == 0 ? 1 : $22;
  $24 = _malloc($$size$i) | 0;
  L13 : do if (!$24) {
   while (1) {
    $26 = HEAP32[15470] | 0;
    HEAP32[15470] = $26 + 0;
    if (!$26) break;
    FUNCTION_TABLE_v[$26 & 3]();
    $29 = _malloc($$size$i) | 0;
    if ($29) {
     $$lcssa$i = $29;
     break L13;
    }
   }
   $31 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$31 >> 2] = 61776;
   ___cxa_throw($31 | 0, 61824, 94);
  } else $$lcssa$i = $24; while (0);
  HEAP32[$0 + 8 >> 2] = $$lcssa$i;
  HEAP32[$0 >> 2] = $22 | 1;
  HEAP32[$0 + 4 >> 2] = $15;
  $$pre$phiZ2D = $0;
  $__p$0$i = $$lcssa$i;
 }
 _memcpy($__p$0$i | 0, $11 | 0, $15 | 0) | 0;
 HEAP8[$__p$0$i + $15 >> 0] = 0;
 $36 = HEAP8[$$pre$phiZ2D >> 0] | 0;
 $38 = ($36 & 1) == 0;
 if ($38) $51 = ($36 & 255) >>> 1; else $51 = HEAP32[$0 + 4 >> 2] | 0;
 $43 = HEAP8[$target >> 0] | 0;
 $45 = ($43 & 1) == 0;
 if ($45) $52 = ($43 & 255) >>> 1; else $52 = HEAP32[$target + 4 >> 2] | 0;
 L28 : do if (($51 | 0) == ($52 | 0)) {
  if ($38) $76 = $0 + 1 | 0; else $76 = HEAP32[$0 + 8 >> 2] | 0;
  if ($45) $77 = $target + 1 | 0; else $77 = HEAP32[$target + 8 >> 2] | 0;
  $59 = ($51 | 0) == 0;
  if ($38) {
   if ($59) {
    $$0$i9 = 1;
    break;
   } else {
    $__lhs_sz$03$i = $51;
    $__lp$04$i = $76;
    $__rp$05$i = $77;
   }
   while (1) {
    if ((HEAP8[$__lp$04$i >> 0] | 0) != (HEAP8[$__rp$05$i >> 0] | 0)) {
     $$0$i = 0;
     label = 32;
     break L28;
    }
    $__lhs_sz$03$i = $__lhs_sz$03$i + -1 | 0;
    if (!$__lhs_sz$03$i) {
     $$0$i = 1;
     label = 32;
     break;
    } else {
     $__lp$04$i = $__lp$04$i + 1 | 0;
     $__rp$05$i = $__rp$05$i + 1 | 0;
    }
   }
  } else {
   if ($59) {
    $$0$i11 = 1;
    label = 33;
    break;
   } else {
    $$03$i = $51;
    $l$04$i = $76;
    $r$05$i = $77;
   }
   while (1) {
    if ((HEAP8[$l$04$i >> 0] | 0) != (HEAP8[$r$05$i >> 0] | 0)) {
     $$0$i = 0;
     label = 32;
     break L28;
    }
    $$03$i = $$03$i + -1 | 0;
    if (!$$03$i) {
     $$0$i = 1;
     label = 32;
     break;
    } else {
     $l$04$i = $l$04$i + 1 | 0;
     $r$05$i = $r$05$i + 1 | 0;
    }
   }
  }
 } else {
  $$0$i = 0;
  label = 32;
 } while (0);
 if ((label | 0) == 32) if ($38) $$0$i9 = $$0$i; else {
  $$0$i11 = $$0$i;
  label = 33;
 }
 if ((label | 0) == 33) {
  _free(HEAP32[$0 + 8 >> 2] | 0);
  $$0$i9 = $$0$i11;
 }
 _llvm_stackrestore($10 | 0);
 $$0 = $$0$i9;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$05$i = 0, $$05$i13 = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $22 = 0, $23 = 0, $3 = 0, $32 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $57 = 0, $58 = 0, $67 = 0, $73 = 0, $__bn$i11 = 0, $__buf$i10 = 0, $__mb$i9 = 0, $__ndflt = 0, $__p$04$i = 0, $__p$04$i18 = 0, $__wn$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $__mb$i9 = sp + 24 | 0;
 $__buf$i10 = sp + 40 | 0;
 $__bn$i11 = sp + 168 | 0;
 $__wn$i = sp + 172 | 0;
 $__ndflt = sp + 8 | 0;
 $0 = sp;
 $1 = sp + 32 | 0;
 HEAP32[$__ndflt + 0 >> 2] = 0;
 HEAP32[$__ndflt + 4 >> 2] = 0;
 HEAP32[$__ndflt + 8 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 >> 2] = 52448;
 $3 = HEAP8[$__dflt >> 0] | 0;
 if (!($3 & 1)) {
  $14 = $__dflt + 4 | 0;
  $15 = ($3 & 255) >>> 1;
 } else {
  $14 = HEAP32[$__dflt + 8 >> 2] | 0;
  $15 = HEAP32[$__dflt + 4 >> 2] | 0;
 }
 $13 = $14 + ($15 << 2) | 0;
 do if ($14 >>> 0 < $13 >>> 0) {
  $17 = $__buf$i10 + 32 | 0;
  $$05$i13 = $14;
  $19 = 52448 | 0;
  while (1) {
   HEAP32[$__wn$i >> 2] = $$05$i13;
   $22 = (FUNCTION_TABLE_iiiiiiiii[HEAP32[$19 + 12 >> 2] & 15]($0, $__mb$i9, $$05$i13, $13, $__wn$i, $__buf$i10, $17, $__bn$i11) | 0) == 2;
   $23 = HEAP32[$__wn$i >> 2] | 0;
   if ($22 | ($23 | 0) == ($$05$i13 | 0)) {
    label = 8;
    break;
   }
   if ($__buf$i10 >>> 0 < (HEAP32[$__bn$i11 >> 2] | 0) >>> 0) {
    $__p$04$i18 = $__buf$i10;
    do {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__p$04$i18 >> 0] | 0);
     $__p$04$i18 = $__p$04$i18 + 1 | 0;
    } while ($__p$04$i18 >>> 0 < (HEAP32[$__bn$i11 >> 2] | 0) >>> 0);
    $32 = HEAP32[$__wn$i >> 2] | 0;
   } else $32 = $23;
   if ($32 >>> 0 >= $13 >>> 0) {
    label = 13;
    break;
   }
   $$05$i13 = $32;
   $19 = HEAP32[$0 >> 2] | 0;
  }
  if ((label | 0) == 8) __ZNSt3__121__throw_runtime_errorEPKc(51672); else if ((label | 0) == 13) {
   $73 = (HEAP8[$__ndflt >> 0] & 1) == 0;
   break;
  }
 } else $73 = 1; while (0);
 if ($73) $40 = $__ndflt + 1 | 0; else $40 = HEAP32[$__ndflt + 8 >> 2] | 0;
 $41 = _catgets((($__c | 0) == -1 ? -1 : $__c << 1) | 0, $__set | 0, $__msgid | 0, $40 | 0) | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = 52552;
 $43 = _strlen($41 | 0) | 0;
 $44 = $41 + $43 | 0;
 L24 : do if (($43 | 0) > 0) {
  $46 = $44;
  $47 = $__buf$i10 + 128 | 0;
  $$05$i = $41;
  $49 = 52552 | 0;
  while (1) {
   HEAP32[$__wn$i >> 2] = $$05$i;
   $57 = (FUNCTION_TABLE_iiiiiiiii[HEAP32[$49 + 16 >> 2] & 15]($1, $__mb$i9, $$05$i, ($46 - $$05$i | 0) > 32 ? $$05$i + 32 | 0 : $44, $__wn$i, $__buf$i10, $47, $__bn$i11) | 0) == 2;
   $58 = HEAP32[$__wn$i >> 2] | 0;
   if ($57 | ($58 | 0) == ($$05$i | 0)) break;
   if ($__buf$i10 >>> 0 < (HEAP32[$__bn$i11 >> 2] | 0) >>> 0) {
    $__p$04$i = $__buf$i10;
    do {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result, HEAP32[$__p$04$i >> 2] | 0);
     $__p$04$i = $__p$04$i + 4 | 0;
    } while ($__p$04$i >>> 0 < (HEAP32[$__bn$i11 >> 2] | 0) >>> 0);
    $67 = HEAP32[$__wn$i >> 2] | 0;
   } else $67 = $58;
   if ($67 >>> 0 >= $44 >>> 0) break L24;
   $$05$i = $67;
   $49 = HEAP32[$1 >> 2] | 0;
  }
  __ZNSt3__121__throw_runtime_errorEPKc(51672);
 } while (0);
 if (!(HEAP8[$__ndflt >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__ndflt + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0$i = 0, $1 = 0, $100 = 0, $3 = 0, $4 = 0, $45 = 0, $47 = 0, $5 = 0, $53 = 0, $58 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_frm_nxt$2 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, sp = 0;
 sp = STACKTOP;
 $1 = $frm_end;
 L1 : do if ($frm >>> 0 < $frm_end >>> 0) {
  $3 = $to_end;
  $_frm_nxt$0 = $frm;
  $_to_nxt$0 = $to;
  while (1) {
   $4 = HEAP16[$_frm_nxt$0 >> 1] | 0;
   $5 = $4 & 65535;
   do if (($4 & 65535) < 128) {
    if (($3 - $_to_nxt$0 | 0) < 1) {
     $$0$i = 1;
     $_frm_nxt$2 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    HEAP8[$_to_nxt$0 >> 0] = $4;
    $_frm_nxt$1 = $_frm_nxt$0;
    $_to_nxt$1 = $_to_nxt$0 + 1 | 0;
   } else {
    if (($4 & 65535) < 2048) {
     if (($3 - $_to_nxt$0 | 0) < 2) {
      $$0$i = 1;
      $_frm_nxt$2 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
     HEAP8[$_to_nxt$0 >> 0] = $5 >>> 6 | 192;
     HEAP8[$_to_nxt$0 + 1 >> 0] = $5 & 63 | 128;
     $_frm_nxt$1 = $_frm_nxt$0;
     $_to_nxt$1 = $_to_nxt$0 + 2 | 0;
     break;
    }
    if (($4 & 65535) < 55296) {
     if (($3 - $_to_nxt$0 | 0) < 3) {
      $$0$i = 1;
      $_frm_nxt$2 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
     HEAP8[$_to_nxt$0 >> 0] = $5 >>> 12 | 224;
     HEAP8[$_to_nxt$0 + 1 >> 0] = $5 >>> 6 & 63 | 128;
     HEAP8[$_to_nxt$0 + 2 >> 0] = $5 & 63 | 128;
     $_frm_nxt$1 = $_frm_nxt$0;
     $_to_nxt$1 = $_to_nxt$0 + 3 | 0;
     break;
    }
    if (($4 & 65535) >= 56320) {
     if (($4 & 65535) < 57344) {
      $$0$i = 2;
      $_frm_nxt$2 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
     if (($3 - $_to_nxt$0 | 0) < 3) {
      $$0$i = 1;
      $_frm_nxt$2 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
     HEAP8[$_to_nxt$0 >> 0] = $5 >>> 12 | 224;
     HEAP8[$_to_nxt$0 + 1 >> 0] = $5 >>> 6 & 63 | 128;
     HEAP8[$_to_nxt$0 + 2 >> 0] = $5 & 63 | 128;
     $_frm_nxt$1 = $_frm_nxt$0;
     $_to_nxt$1 = $_to_nxt$0 + 3 | 0;
     break;
    }
    if (($1 - $_frm_nxt$0 | 0) < 4) {
     $$0$i = 1;
     $_frm_nxt$2 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    $45 = $_frm_nxt$0 + 2 | 0;
    $47 = HEAPU16[$45 >> 1] | 0;
    if (($47 & 64512 | 0) != 56320) {
     $$0$i = 2;
     $_frm_nxt$2 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    if (($3 - $_to_nxt$0 | 0) < 4) {
     $$0$i = 1;
     $_frm_nxt$2 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    $53 = $5 & 960;
    if ((($53 << 10) + 65536 | 0) >>> 0 > 1114111) {
     $$0$i = 2;
     $_frm_nxt$2 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    $58 = ($53 >>> 6) + 1 | 0;
    HEAP8[$_to_nxt$0 >> 0] = $58 >>> 2 | 240;
    HEAP8[$_to_nxt$0 + 1 >> 0] = $5 >>> 2 & 15 | $58 << 4 & 48 | 128;
    HEAP8[$_to_nxt$0 + 2 >> 0] = $5 << 4 & 48 | $47 >>> 6 & 15 | 128;
    HEAP8[$_to_nxt$0 + 3 >> 0] = $47 & 63 | 128;
    $_frm_nxt$1 = $45;
    $_to_nxt$1 = $_to_nxt$0 + 4 | 0;
   } while (0);
   $100 = $_frm_nxt$1 + 2 | 0;
   if ($100 >>> 0 < $frm_end >>> 0) {
    $_frm_nxt$0 = $100;
    $_to_nxt$0 = $_to_nxt$1;
   } else {
    $$0$i = 0;
    $_frm_nxt$2 = $100;
    $_to_nxt$2 = $_to_nxt$1;
    break;
   }
  }
 } else {
  $$0$i = 0;
  $_frm_nxt$2 = $frm;
  $_to_nxt$2 = $to;
 } while (0);
 HEAP32[$frm_nxt >> 2] = $frm + ($_frm_nxt$2 - $frm >> 1 << 1);
 HEAP32[$to_nxt >> 2] = $to + ($_to_nxt$2 - $to);
 STACKTOP = sp;
 return $$0$i | 0;
}

function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $13 = 0, $14 = 0, $19 = 0, $22 = 0, $3 = 0, $30 = 0, $33 = 0, $38 = 0, $40 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $64 = 0, $72 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, sp = 0;
 sp = STACKTOP;
 if (($__ct | 0) == ($__decimal_point | 0)) {
  if (!(HEAP8[$__in_units >> 0] | 0)) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP8[$__in_units >> 0] = 0;
  $3 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = 46;
  $5 = HEAP8[$__grouping >> 0] | 0;
  if (!($5 & 1)) $13 = ($5 & 255) >>> 1; else $13 = HEAP32[$__grouping + 4 >> 2] | 0;
  if (!$13) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $14 = HEAP32[$__g_end >> 2] | 0;
  if (($14 - $__g | 0) >= 160) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $19 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $14 + 4;
  HEAP32[$14 >> 2] = $19;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($__ct | 0) == ($__thousands_sep | 0)) {
  $22 = HEAP8[$__grouping >> 0] | 0;
  if (!($22 & 1)) $30 = ($22 & 255) >>> 1; else $30 = HEAP32[$__grouping + 4 >> 2] | 0;
  if ($30) {
   if (!(HEAP8[$__in_units >> 0] | 0)) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $33 = HEAP32[$__g_end >> 2] | 0;
   if (($33 - $__g | 0) >= 160) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $38 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $38;
   HEAP32[$__dc >> 2] = 0;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $40 = $__atoms + 128 | 0;
 $$01$i = $__atoms;
 while (1) {
  if ((HEAP32[$$01$i >> 2] | 0) == ($__ct | 0)) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $$01$i = $$01$i + 4 | 0;
  if (($$01$i | 0) == ($40 | 0)) {
   $$0$lcssa$i = $40;
   break;
  }
 }
 $47 = $$0$lcssa$i - $__atoms | 0;
 $48 = $47 >> 2;
 if (($47 | 0) > 124) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $51 = HEAP8[49384 + $48 >> 0] | 0;
 if (($48 | 0) == 24 | ($48 | 0) == 25) {
  $52 = HEAP32[$__a_end >> 2] | 0;
  if (($52 | 0) != ($__a | 0)) if ((HEAPU8[$52 + -1 >> 0] & 95 | 0) != (HEAPU8[$__exp >> 0] & 127 | 0)) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$__a_end >> 2] = $52 + 1;
  HEAP8[$52 >> 0] = $51;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($48 | 0) == 23 | ($48 | 0) == 22) HEAP8[$__exp >> 0] = 80; else {
  $64 = $51 & 95;
  if (($64 | 0) == (HEAP8[$__exp >> 0] | 0)) {
   HEAP8[$__exp >> 0] = $64 | 128;
   if (HEAP8[$__in_units >> 0] | 0) {
    HEAP8[$__in_units >> 0] = 0;
    $72 = HEAP8[$__grouping >> 0] | 0;
    if (!($72 & 1)) $80 = ($72 & 255) >>> 1; else $80 = HEAP32[$__grouping + 4 >> 2] | 0;
    if ($80) {
     $81 = HEAP32[$__g_end >> 2] | 0;
     if (($81 - $__g | 0) < 160) {
      $86 = HEAP32[$__dc >> 2] | 0;
      HEAP32[$__g_end >> 2] = $81 + 4;
      HEAP32[$81 >> 2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end >> 2] | 0;
 HEAP32[$__a_end >> 2] = $88 + 1;
 HEAP8[$88 >> 0] = $51;
 if (($47 | 0) > 84) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $10 = 0, $14 = 0, $17 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $39 = 0, $42 = 0, $45 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $56 = 0, $60 = 0, $63 = 0, $68 = 0, $69 = 0, $7 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $85 = 0, $88 = 0, $91 = 0, $92 = 0, sp = 0;
 sp = STACKTOP;
 do if (!(HEAP8[$this >> 0] & 1)) {
  HEAP8[$this + 1 >> 0] = 0;
  HEAP8[$this >> 0] = 0;
 } else {
  $5 = $this + 8 | 0;
  HEAP8[HEAP32[$5 >> 2] >> 0] = 0;
  $7 = $this + 4 | 0;
  HEAP32[$7 >> 2] = 0;
  $$pre$i$i$i = HEAP8[$this >> 0] | 0;
  if (!($$pre$i$i$i & 1)) {
   $14 = $$pre$i$i$i;
   $23 = 10;
  } else {
   $10 = HEAP32[$this >> 2] | 0;
   $14 = $10 & 255;
   $23 = ($10 & -2) + -1 | 0;
  }
  if (!($14 & 1)) {
   $17 = ($14 & 255) >>> 1;
   if (($14 & 255) < 22) {
    $22 = 10;
    $42 = $17;
    $91 = 1;
   } else {
    $22 = ($17 + 16 & 240) + -1 | 0;
    $42 = $17;
    $91 = 1;
   }
  } else {
   $22 = 10;
   $42 = 0;
   $91 = 0;
  }
  if (($22 | 0) != ($23 | 0)) {
   if (($22 | 0) == 10) {
    $29 = $this + 1 | 0;
    $30 = HEAP32[$5 >> 2] | 0;
    if ($91) {
     _memcpy($29 | 0, $30 | 0, (($14 & 255) >>> 1) + 1 | 0) | 0;
     _free($30);
    } else {
     HEAP8[$29 >> 0] = HEAP8[$30 >> 0] | 0;
     _free($30);
    }
    HEAP8[$this >> 0] = $42 << 1;
    break;
   }
   $26 = $22 + 1 | 0;
   $27 = _malloc($26) | 0;
   if (!($22 >>> 0 <= $23 >>> 0 & ($27 | 0) == 0)) {
    if ($91) _memcpy($27 | 0, $this + 1 | 0, (($14 & 255) >>> 1) + 1 | 0) | 0; else {
     $39 = HEAP32[$5 >> 2] | 0;
     HEAP8[$27 >> 0] = HEAP8[$39 >> 0] | 0;
     _free($39);
    }
    HEAP32[$this >> 2] = $26 | 1;
    HEAP32[$7 >> 2] = $42;
    HEAP32[$5 >> 2] = $27;
   }
  }
 } while (0);
 HEAP32[$this + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$0 + 0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $45 = $this + 12 | 0;
 $46 = $0 + 12 | 0;
 do if (!(HEAP8[$45 >> 0] & 1)) {
  HEAP8[$45 + 1 >> 0] = 0;
  HEAP8[$45 >> 0] = 0;
 } else {
  $51 = $this + 20 | 0;
  HEAP8[HEAP32[$51 >> 2] >> 0] = 0;
  $53 = $this + 16 | 0;
  HEAP32[$53 >> 2] = 0;
  $$pre$i$i$i2 = HEAP8[$45 >> 0] | 0;
  if (!($$pre$i$i$i2 & 1)) {
   $60 = $$pre$i$i$i2;
   $69 = 10;
  } else {
   $56 = HEAP32[$45 >> 2] | 0;
   $60 = $56 & 255;
   $69 = ($56 & -2) + -1 | 0;
  }
  if (!($60 & 1)) {
   $63 = ($60 & 255) >>> 1;
   if (($60 & 255) < 22) {
    $68 = 10;
    $88 = $63;
    $92 = 1;
   } else {
    $68 = ($63 + 16 & 240) + -1 | 0;
    $88 = $63;
    $92 = 1;
   }
  } else {
   $68 = 10;
   $88 = 0;
   $92 = 0;
  }
  if (($68 | 0) != ($69 | 0)) {
   if (($68 | 0) == 10) {
    $75 = $45 + 1 | 0;
    $76 = HEAP32[$51 >> 2] | 0;
    if ($92) {
     _memcpy($75 | 0, $76 | 0, (($60 & 255) >>> 1) + 1 | 0) | 0;
     _free($76);
    } else {
     HEAP8[$75 >> 0] = HEAP8[$76 >> 0] | 0;
     _free($76);
    }
    HEAP8[$45 >> 0] = $88 << 1;
    break;
   }
   $72 = $68 + 1 | 0;
   $73 = _malloc($72) | 0;
   if (!($68 >>> 0 <= $69 >>> 0 & ($73 | 0) == 0)) {
    if ($92) _memcpy($73 | 0, $45 + 1 | 0, (($60 & 255) >>> 1) + 1 | 0) | 0; else {
     $85 = HEAP32[$51 >> 2] | 0;
     HEAP8[$73 >> 0] = HEAP8[$85 >> 0] | 0;
     _free($85);
    }
    HEAP32[$45 >> 2] = $72 | 1;
    HEAP32[$53 >> 2] = $88;
    HEAP32[$51 >> 2] = $73;
   }
  }
 } while (0);
 HEAP32[$45 + 0 >> 2] = HEAP32[$46 + 0 >> 2];
 HEAP32[$45 + 4 >> 2] = HEAP32[$46 + 4 >> 2];
 HEAP32[$45 + 8 >> 2] = HEAP32[$46 + 8 >> 2];
 HEAP32[$46 + 0 >> 2] = 0;
 HEAP32[$46 + 4 >> 2] = 0;
 HEAP32[$46 + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 $this = $this | 0;
 $f = $f | 0;
 $id = $id | 0;
 var $$0$i$i$i38 = 0, $$0$i$i$i4 = 0, $$0$i1$i$i = 0, $$0$i3$i$i = 0, $0 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $41 = 0, $45 = 0, $48 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $62 = 0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $78 = 0, $79 = 0, $9 = 0, $__v$i$i$sroa$12$0 = 0, $__v$i$i$sroa$20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__v$i$i$sroa$20 = sp;
 $0 = $f + 4 | 0;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
 $2 = $this + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $this + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $3;
 $7 = $5;
 $9 = $6 - $7 >> 2;
 do if ($9 >>> 0 > $id >>> 0) $69 = $5; else {
  $11 = $id + 1 | 0;
  if ($11 >>> 0 <= $9 >>> 0) {
   if ($11 >>> 0 >= $9 >>> 0) {
    $69 = $5;
    break;
   }
   $62 = $5 + ($11 << 2) | 0;
   if (($3 | 0) == ($62 | 0)) {
    $69 = $5;
    break;
   }
   HEAP32[$2 >> 2] = $3 + (~(($3 + -4 - $62 | 0) >>> 2) << 2);
   $69 = $5;
   break;
  }
  $13 = $11 - $9 | 0;
  $14 = $this + 16 | 0;
  $16 = HEAP32[$14 >> 2] | 0;
  do if ($16 - $6 >> 2 >>> 0 < $13 >>> 0) {
   $26 = $this + 24 | 0;
   if ($11 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   $28 = $16 - $7 | 0;
   if ($28 >> 2 >>> 0 < 536870911) {
    $31 = $28 >> 1;
    $33 = $31 >>> 0 < $11 >>> 0 ? $11 : $31;
    HEAP32[$__v$i$i$sroa$20 >> 2] = 0;
    if (!$33) {
     $$0$i$i$i4 = 0;
     $41 = 0;
    } else {
     $35 = $this + 136 | 0;
     if ((HEAP8[$35 >> 0] | 0) == 0 & $33 >>> 0 < 29) {
      HEAP8[$35 >> 0] = 1;
      $$0$i$i$i4 = $33;
      $41 = $26;
     } else {
      $$0$i$i$i38 = $33;
      label = 14;
     }
    }
   } else {
    HEAP32[$__v$i$i$sroa$20 >> 2] = 0;
    $$0$i$i$i38 = 1073741823;
    label = 14;
   }
   if ((label | 0) == 14) {
    $$0$i$i$i4 = $$0$i$i$i38;
    $41 = __Znwj($$0$i$i$i38 << 2) | 0;
   }
   HEAP32[$__v$i$i$sroa$20 >> 2] = $41 + ($$0$i$i$i4 << 2);
   $$0$i3$i$i = $13;
   $__v$i$i$sroa$12$0 = $41 + ($9 << 2) | 0;
   do {
    if (!$__v$i$i$sroa$12$0) $45 = 0; else {
     HEAP32[$__v$i$i$sroa$12$0 >> 2] = 0;
     $45 = $__v$i$i$sroa$12$0;
    }
    $__v$i$i$sroa$12$0 = $45 + 4 | 0;
    $$0$i3$i$i = $$0$i3$i$i + -1 | 0;
   } while (($$0$i3$i$i | 0) != 0);
   $48 = HEAP32[$4 >> 2] | 0;
   $52 = (HEAP32[$2 >> 2] | 0) - $48 | 0;
   $54 = $41 + ($9 - ($52 >> 2) << 2) | 0;
   _memcpy($54 | 0, $48 | 0, $52 | 0) | 0;
   $55 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $54;
   HEAP32[$2 >> 2] = $__v$i$i$sroa$12$0;
   $56 = HEAP32[$14 >> 2] | 0;
   HEAP32[$14 >> 2] = HEAP32[$__v$i$i$sroa$20 >> 2];
   HEAP32[$__v$i$i$sroa$20 >> 2] = $56;
   if ($55) if (($26 | 0) == ($55 | 0)) {
    HEAP8[$this + 136 >> 0] = 0;
    break;
   } else {
    _free($55);
    break;
   }
  } else {
   $$0$i1$i$i = $13;
   $21 = $3;
   do {
    if (!$21) $23 = 0; else {
     HEAP32[$21 >> 2] = 0;
     $23 = HEAP32[$2 >> 2] | 0;
    }
    $21 = $23 + 4 | 0;
    HEAP32[$2 >> 2] = $21;
    $$0$i1$i$i = $$0$i1$i$i + -1 | 0;
   } while (($$0$i1$i$i | 0) != 0);
  } while (0);
  $69 = HEAP32[$4 >> 2] | 0;
 } while (0);
 $70 = HEAP32[$69 + ($id << 2) >> 2] | 0;
 if (!$70) {
  $79 = $69;
  $78 = $79 + ($id << 2) | 0;
  HEAP32[$78 >> 2] = $f;
  STACKTOP = sp;
  return;
 }
 $72 = $70 + 4 | 0;
 $73 = HEAP32[$72 >> 2] | 0;
 HEAP32[$72 >> 2] = $73 + -1;
 if (!$73) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$70 >> 2] | 0) + 8 >> 2] & 127]($70);
 $79 = HEAP32[$4 >> 2] | 0;
 $78 = $79 + ($id << 2) | 0;
 HEAP32[$78 >> 2] = $f;
 STACKTOP = sp;
 return;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($agg$result, $this, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__v = $__v | 0;
 var $$$i1 = 0, $$0$ph$lcssa$i = 0, $$0$ph7$i = 0, $$01$ph6$i$in = 0, $$014$i$in = 0, $$03$i = 0, $$03$i5 = 0, $$11$i = 0, $1 = 0, $14 = 0, $15 = 0, $2 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $4 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $76 = 0, $77 = 0, $l$04$i = 0, $l$04$i4 = 0, $r$05$i = 0, $r$05$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $this + 4 | 0;
 L1 : do if ($1) {
  $4 = HEAP8[$__v >> 0] | 0;
  $6 = ($4 & 1) == 0;
  $$$i1 = $6 ? ($4 & 255) >>> 1 : HEAP32[$__v + 4 >> 2] | 0;
  $$11$i = $6 ? $__v + 1 | 0 : HEAP32[$__v + 8 >> 2] | 0;
  $$0$ph7$i = $2;
  $$01$ph6$i$in = $1;
  L3 : while (1) {
   $$014$i$in = $$01$ph6$i$in;
   L5 : while (1) {
    $14 = $$014$i$in + 16 | 0;
    $15 = HEAP8[$14 >> 0] | 0;
    if (!($15 & 1)) {
     $26 = ($15 & 255) >>> 1;
     $76 = $14 + 1 | 0;
    } else {
     $26 = HEAP32[$$014$i$in + 20 >> 2] | 0;
     $76 = HEAP32[$$014$i$in + 24 >> 2] | 0;
    }
    $27 = $$$i1 >>> 0 < $26 >>> 0 ? $$$i1 : $26;
    L11 : do if (!$27) label = 11; else {
     $$03$i = $27;
     $l$04$i = $76;
     $r$05$i = $$11$i;
     while (1) {
      $29 = HEAP8[$l$04$i >> 0] | 0;
      $30 = HEAP8[$r$05$i >> 0] | 0;
      if ($29 << 24 >> 24 != $30 << 24 >> 24) break;
      $$03$i = $$03$i + -1 | 0;
      if (!$$03$i) {
       label = 11;
       break L11;
      } else {
       $l$04$i = $l$04$i + 1 | 0;
       $r$05$i = $r$05$i + 1 | 0;
      }
     }
     if ($29 << 24 >> 24 == $30 << 24 >> 24) label = 11; else if ((($29 & 255) - ($30 & 255) | 0) >= 0) break L5;
    } while (0);
    if ((label | 0) == 11) {
     label = 0;
     if ($26 >>> 0 >= $$$i1 >>> 0) break;
    }
    $45 = HEAP32[$$014$i$in + 4 >> 2] | 0;
    if (!$45) {
     $$0$ph$lcssa$i = $$0$ph7$i;
     break L3;
    } else $$014$i$in = $45;
   }
   $$01$ph6$i$in = HEAP32[$$014$i$in >> 2] | 0;
   if (!$$01$ph6$i$in) {
    $$0$ph$lcssa$i = $$014$i$in;
    break;
   } else $$0$ph7$i = $$014$i$in;
  }
  if (($$0$ph$lcssa$i | 0) != ($2 | 0)) {
   $48 = $$0$ph$lcssa$i + 16 | 0;
   $49 = HEAP8[$48 >> 0] | 0;
   if (!($49 & 1)) {
    $60 = ($49 & 255) >>> 1;
    $77 = $48 + 1 | 0;
   } else {
    $60 = HEAP32[$$0$ph$lcssa$i + 20 >> 2] | 0;
    $77 = HEAP32[$$0$ph$lcssa$i + 24 >> 2] | 0;
   }
   $61 = $60 >>> 0 < $$$i1 >>> 0 ? $60 : $$$i1;
   L27 : do if (!$61) label = 23; else {
    $$03$i5 = $61;
    $l$04$i4 = $$11$i;
    $r$05$i3 = $77;
    while (1) {
     $63 = HEAP8[$l$04$i4 >> 0] | 0;
     $64 = HEAP8[$r$05$i3 >> 0] | 0;
     if ($63 << 24 >> 24 != $64 << 24 >> 24) break;
     $$03$i5 = $$03$i5 + -1 | 0;
     if (!$$03$i5) {
      label = 23;
      break L27;
     } else {
      $l$04$i4 = $l$04$i4 + 1 | 0;
      $r$05$i3 = $r$05$i3 + 1 | 0;
     }
    }
    if ($63 << 24 >> 24 == $64 << 24 >> 24) label = 23; else if ((($63 & 255) - ($64 & 255) | 0) < 0) break L1;
   } while (0);
   if ((label | 0) == 23) if ($$$i1 >>> 0 < $60 >>> 0) break;
   HEAP32[$agg$result >> 2] = $$0$ph$lcssa$i;
   STACKTOP = sp;
   return;
  }
 } while (0);
 HEAP32[$agg$result >> 2] = $2;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$03 = 0, $$sroa$4 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $31 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 24 | 0;
 $$sroa$4 = sp + 48 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 if (($last - $first | 0) <= 3) {
  $$03 = $first;
  STACKTOP = sp;
  return $$03 | 0;
 }
 if ((HEAP8[$first >> 0] | 0) != 68) {
  $$03 = $first;
  STACKTOP = sp;
  return $$03 | 0;
 }
 $11 = HEAP8[$first + 1 >> 0] | 0;
 if (!(($11 | 0) == 84 | ($11 | 0) == 116)) {
  $$03 = $first;
  STACKTOP = sp;
  return $$03 | 0;
 }
 $12 = $first + 2 | 0;
 $13 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($12, $last, $db) | 0;
 if (($13 | 0) == ($12 | 0) | ($13 | 0) == ($last | 0)) {
  $$03 = $first;
  STACKTOP = sp;
  return $$03 | 0;
 }
 if ((HEAP8[$13 >> 0] | 0) != 69) {
  $$03 = $first;
  STACKTOP = sp;
  return $$03 | 0;
 }
 $20 = HEAP32[$db + 4 >> 2] | 0;
 if ((HEAP32[$db >> 2] | 0) == ($20 | 0)) {
  $$03 = $first;
  STACKTOP = sp;
  return $$03 | 0;
 }
 $22 = $20 + -24 | 0;
 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2, $22);
 $23 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($2, 0, 60896, 9) | 0;
 HEAP32[$1 + 0 >> 2] = HEAP32[$23 + 0 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
 HEAP32[$23 + 0 >> 2] = 0;
 HEAP32[$23 + 4 >> 2] = 0;
 HEAP32[$23 + 8 >> 2] = 0;
 $24 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1, 58936, 1) | 0;
 $25 = HEAP8[$24 >> 0] | 0;
 $26 = $24 + 1 | 0;
 HEAP8[$$sroa$4 + 0 >> 0] = HEAP8[$26 + 0 >> 0] | 0;
 HEAP8[$$sroa$4 + 1 >> 0] = HEAP8[$26 + 1 >> 0] | 0;
 HEAP8[$$sroa$4 + 2 >> 0] = HEAP8[$26 + 2 >> 0] | 0;
 HEAP8[$$sroa$4 + 3 >> 0] = HEAP8[$26 + 3 >> 0] | 0;
 HEAP8[$$sroa$4 + 4 >> 0] = HEAP8[$26 + 4 >> 0] | 0;
 HEAP8[$$sroa$4 + 5 >> 0] = HEAP8[$26 + 5 >> 0] | 0;
 HEAP8[$$sroa$4 + 6 >> 0] = HEAP8[$26 + 6 >> 0] | 0;
 $28 = HEAP32[$24 + 8 >> 2] | 0;
 HEAP32[$24 + 0 >> 2] = 0;
 HEAP32[$24 + 4 >> 2] = 0;
 HEAP32[$24 + 8 >> 2] = 0;
 HEAP8[$0 >> 0] = $25;
 $29 = $0 + 1 | 0;
 HEAP8[$29 + 0 >> 0] = HEAP8[$$sroa$4 + 0 >> 0] | 0;
 HEAP8[$29 + 1 >> 0] = HEAP8[$$sroa$4 + 1 >> 0] | 0;
 HEAP8[$29 + 2 >> 0] = HEAP8[$$sroa$4 + 2 >> 0] | 0;
 HEAP8[$29 + 3 >> 0] = HEAP8[$$sroa$4 + 3 >> 0] | 0;
 HEAP8[$29 + 4 >> 0] = HEAP8[$$sroa$4 + 4 >> 0] | 0;
 HEAP8[$29 + 5 >> 0] = HEAP8[$$sroa$4 + 5 >> 0] | 0;
 HEAP8[$29 + 6 >> 0] = HEAP8[$$sroa$4 + 6 >> 0] | 0;
 HEAP32[$0 + 8 >> 2] = $28;
 HEAP8[$$sroa$4 + 0 >> 0] = 0;
 HEAP8[$$sroa$4 + 1 >> 0] = 0;
 HEAP8[$$sroa$4 + 2 >> 0] = 0;
 HEAP8[$$sroa$4 + 3 >> 0] = 0;
 HEAP8[$$sroa$4 + 4 >> 0] = 0;
 HEAP8[$$sroa$4 + 5 >> 0] = 0;
 HEAP8[$$sroa$4 + 6 >> 0] = 0;
 $31 = $0 + 12 | 0;
 HEAP32[$31 + 0 >> 2] = 0;
 HEAP32[$31 + 4 >> 2] = 0;
 HEAP32[$31 + 8 >> 2] = 0;
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($22, $0);
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
 if (HEAP8[$1 >> 0] & 1) _free(HEAP32[$1 + 8 >> 2] | 0);
 if (HEAP8[$2 >> 0] & 1) _free(HEAP32[$2 + 8 >> 2] | 0);
 $$03 = $13 + 1 | 0;
 STACKTOP = sp;
 return $$03 | 0;
}

function __ZNSt3__110__stdinbufIcE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $64 = 0, $8 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $0 = $this + 52 | 0;
 if (HEAP8[$0 >> 0] | 0) {
  $3 = $this + 48 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (!$__consume) {
   $$0 = $4;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$3 >> 2] = -1;
  HEAP8[$0 >> 0] = 0;
  $$0 = $4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = HEAP32[$this + 44 >> 2] | 0;
 $8 = ($6 | 0) > 1 ? $6 : 1;
 L8 : do if (($8 | 0) > 0) {
  $10 = $this + 32 | 0;
  $__i$09 = 0;
  while (1) {
   $12 = _getc(HEAP32[$10 >> 2] | 0) | 0;
   if (($12 | 0) == -1) {
    $$0 = -1;
    break;
   }
   HEAP8[$__extbuf + $__i$09 >> 0] = $12;
   $__i$09 = $__i$09 + 1 | 0;
   if (($__i$09 | 0) >= ($8 | 0)) break L8;
  }
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 L15 : do if (!(HEAP8[$this + 53 >> 0] | 0)) {
  $21 = $this + 40 | 0;
  $22 = $this + 36 | 0;
  $23 = $__1buf + 1 | 0;
  $24 = $this + 32 | 0;
  $__nread$0 = $8;
  while (1) {
   $26 = HEAP32[$21 >> 2] | 0;
   $27 = $26;
   $29 = HEAP32[$27 >> 2] | 0;
   $32 = HEAP32[$27 + 4 >> 2] | 0;
   $33 = HEAP32[$22 >> 2] | 0;
   $34 = $__extbuf + $__nread$0 | 0;
   $38 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$33 >> 2] | 0) + 16 >> 2] & 15]($33, $26, $__extbuf, $34, $__enxt, $__1buf, $23, $__inxt) | 0;
   if (($38 | 0) == 3) {
    label = 14;
    break;
   } else if (($38 | 0) == 2) {
    $$0 = -1;
    label = 23;
    break;
   } else if (($38 | 0) != 1) {
    $__nread$2 = $__nread$0;
    break L15;
   }
   $40 = HEAP32[$21 >> 2] | 0;
   HEAP32[$40 >> 2] = $29;
   HEAP32[$40 + 4 >> 2] = $32;
   if (($__nread$0 | 0) == 8) {
    $$0 = -1;
    label = 23;
    break;
   }
   $46 = _getc(HEAP32[$24 >> 2] | 0) | 0;
   if (($46 | 0) == -1) {
    $$0 = -1;
    label = 23;
    break;
   }
   HEAP8[$34 >> 0] = $46;
   $__nread$0 = $__nread$0 + 1 | 0;
  }
  if ((label | 0) == 14) {
   HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
   $__nread$2 = $__nread$0;
   break;
  } else if ((label | 0) == 23) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else {
  HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
  $__nread$2 = $8;
 } while (0);
 do if ($__consume) {
  $60 = HEAP8[$__1buf >> 0] | 0;
  HEAP32[$this + 48 >> 2] = $60 & 255;
  $64 = $60;
 } else {
  $51 = $this + 32 | 0;
  $__i2$0 = $__nread$2;
  while (1) {
   if (($__i2$0 | 0) <= 0) {
    label = 21;
    break;
   }
   $__i2$0 = $__i2$0 + -1 | 0;
   if ((_ungetc(HEAPU8[$__extbuf + $__i2$0 >> 0] | 0, HEAP32[$51 >> 2] | 0) | 0) == -1) {
    $$0 = -1;
    label = 23;
    break;
   }
  }
  if ((label | 0) == 21) {
   $64 = HEAP8[$__1buf >> 0] | 0;
   break;
  } else if ((label | 0) == 23) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 $$0 = $64 & 255;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__16vectorI18CompilerLexerTokenNS_9allocatorIS1_EEE9push_backERKS1_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$lcssa$i = 0, $$lcssa$i11 = 0, $$size$i = 0, $$size$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $19 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $33 = 0, $34 = 0, $39 = 0, $41 = 0, $48 = 0, $50 = 0, $52 = 0, $55 = 0, $57 = 0, $63 = 0, $__p$0$i = 0, $__p$0$i3 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == (HEAP32[$this + 8 >> 2] | 0)) {
  __ZNSt3__16vectorI18CompilerLexerTokenNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this, $__x);
  STACKTOP = sp;
  return;
 }
 if (!$1) $63 = 0; else {
  if (!(HEAP8[$__x >> 0] & 1)) {
   HEAP32[$1 + 0 >> 2] = HEAP32[$__x + 0 >> 2];
   HEAP32[$1 + 4 >> 2] = HEAP32[$__x + 4 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$__x + 8 >> 2];
  } else {
   $10 = HEAP32[$__x + 8 >> 2] | 0;
   $12 = HEAP32[$__x + 4 >> 2] | 0;
   if ($12 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
   if ($12 >>> 0 < 11) {
    HEAP8[$1 >> 0] = $12 << 1;
    $__p$0$i = $1 + 1 | 0;
   } else {
    $19 = $12 + 16 & -16;
    $$size$i = ($19 | 0) == 0 ? 1 : $19;
    $21 = _malloc($$size$i) | 0;
    L14 : do if (!$21) {
     while (1) {
      $23 = HEAP32[15470] | 0;
      HEAP32[15470] = $23 + 0;
      if (!$23) break;
      FUNCTION_TABLE_v[$23 & 3]();
      $26 = _malloc($$size$i) | 0;
      if ($26) {
       $$lcssa$i = $26;
       break L14;
      }
     }
     $28 = ___cxa_allocate_exception(4) | 0;
     HEAP32[$28 >> 2] = 61776;
     ___cxa_throw($28 | 0, 61824, 94);
    } else $$lcssa$i = $21; while (0);
    HEAP32[$1 + 8 >> 2] = $$lcssa$i;
    HEAP32[$1 >> 2] = $19 | 1;
    HEAP32[$1 + 4 >> 2] = $12;
    $__p$0$i = $$lcssa$i;
   }
   _memcpy($__p$0$i | 0, $10 | 0, $12 | 0) | 0;
   HEAP8[$__p$0$i + $12 >> 0] = 0;
  }
  $33 = $1 + 12 | 0;
  $34 = $__x + 12 | 0;
  if (!(HEAP8[$34 >> 0] & 1)) {
   HEAP32[$33 + 0 >> 2] = HEAP32[$34 + 0 >> 2];
   HEAP32[$33 + 4 >> 2] = HEAP32[$34 + 4 >> 2];
   HEAP32[$33 + 8 >> 2] = HEAP32[$34 + 8 >> 2];
  } else {
   $39 = HEAP32[$__x + 20 >> 2] | 0;
   $41 = HEAP32[$__x + 16 >> 2] | 0;
   if ($41 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
   if ($41 >>> 0 < 11) {
    HEAP8[$33 >> 0] = $41 << 1;
    $__p$0$i3 = $33 + 1 | 0;
   } else {
    $48 = $41 + 16 & -16;
    $$size$i7 = ($48 | 0) == 0 ? 1 : $48;
    $50 = _malloc($$size$i7) | 0;
    L32 : do if (!$50) {
     while (1) {
      $52 = HEAP32[15470] | 0;
      HEAP32[15470] = $52 + 0;
      if (!$52) break;
      FUNCTION_TABLE_v[$52 & 3]();
      $55 = _malloc($$size$i7) | 0;
      if ($55) {
       $$lcssa$i11 = $55;
       break L32;
      }
     }
     $57 = ___cxa_allocate_exception(4) | 0;
     HEAP32[$57 >> 2] = 61776;
     ___cxa_throw($57 | 0, 61824, 94);
    } else $$lcssa$i11 = $50; while (0);
    HEAP32[$1 + 20 >> 2] = $$lcssa$i11;
    HEAP32[$33 >> 2] = $48 | 1;
    HEAP32[$1 + 16 >> 2] = $41;
    $__p$0$i3 = $$lcssa$i11;
   }
   _memcpy($__p$0$i3 | 0, $39 | 0, $41 | 0) | 0;
   HEAP8[$__p$0$i3 + $41 >> 0] = 0;
  }
  $63 = HEAP32[$0 >> 2] | 0;
 }
 HEAP32[$0 >> 2] = $63 + 24;
 STACKTOP = sp;
 return;
}

function _wcsrtombs($s, $ws, $n) {
 $s = $s | 0;
 $ws = $ws | 0;
 $n = $n | 0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$24$lcssa = 0, $$2428 = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$5 = 0, $$pn = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $46 = 0, $6 = 0, $7 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 if (!$s) {
  $2 = HEAP32[$ws >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  if (!$3) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $$0218 = 0;
   $6 = $3;
   $ws2$019 = $2;
  }
  while (1) {
   if ($6 >>> 0 > 127) {
    $7 = _wcrtomb($buf, $6) | 0;
    if (($7 | 0) == -1) {
     $$0 = -1;
     label = 26;
     break;
    } else $$pn = $7;
   } else $$pn = 1;
   $$13 = $$pn + $$0218 | 0;
   $ws2$019 = $ws2$019 + 4 | 0;
   $6 = HEAP32[$ws2$019 >> 2] | 0;
   if (!$6) {
    $$0 = $$13;
    label = 26;
    break;
   } else $$0218 = $$13;
  }
  if ((label | 0) == 26) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 L14 : do if ($n >>> 0 > 3) {
  $$0129 = $s;
  $$2428 = $n;
  $14 = HEAP32[$ws >> 2] | 0;
  while (1) {
   $13 = HEAP32[$14 >> 2] | 0;
   if (($13 + -1 | 0) >>> 0 > 126) {
    if (!$13) break;
    $19 = _wcrtomb($$0129, $13) | 0;
    if (($19 | 0) == -1) {
     $$0 = -1;
     label = 26;
     break;
    }
    $$1 = $$0129 + $19 | 0;
    $$35 = $$2428 - $19 | 0;
    $27 = $14;
   } else {
    HEAP8[$$0129 >> 0] = $13;
    $$1 = $$0129 + 1 | 0;
    $$35 = $$2428 + -1 | 0;
    $27 = HEAP32[$ws >> 2] | 0;
   }
   $14 = $27 + 4 | 0;
   HEAP32[$ws >> 2] = $14;
   if ($$35 >>> 0 <= 3) {
    $$01$lcssa = $$1;
    $$24$lcssa = $$35;
    break L14;
   } else {
    $$0129 = $$1;
    $$2428 = $$35;
   }
  }
  if ((label | 0) == 26) {
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP8[$$0129 >> 0] = 0;
  HEAP32[$ws >> 2] = 0;
  $$0 = $n - $$2428 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$01$lcssa = $s;
  $$24$lcssa = $n;
 } while (0);
 if (!$$24$lcssa) {
  $$0 = $n;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$223 = $$01$lcssa;
 $$422 = $$24$lcssa;
 $30 = HEAP32[$ws >> 2] | 0;
 while (1) {
  $29 = HEAP32[$30 >> 2] | 0;
  if (($29 + -1 | 0) >>> 0 > 126) {
   if (!$29) {
    label = 19;
    break;
   }
   $35 = _wcrtomb($buf, $29) | 0;
   if (($35 | 0) == -1) {
    $$0 = -1;
    label = 26;
    break;
   }
   if ($$422 >>> 0 < $35 >>> 0) {
    label = 22;
    break;
   }
   _wcrtomb($$223, HEAP32[$30 >> 2] | 0) | 0;
   $$3 = $$223 + $35 | 0;
   $$5 = $$422 - $35 | 0;
   $46 = $30;
  } else {
   HEAP8[$$223 >> 0] = $29;
   $$3 = $$223 + 1 | 0;
   $$5 = $$422 + -1 | 0;
   $46 = HEAP32[$ws >> 2] | 0;
  }
  $30 = $46 + 4 | 0;
  HEAP32[$ws >> 2] = $30;
  if (!$$5) {
   $$0 = $n;
   label = 26;
   break;
  } else {
   $$223 = $$3;
   $$422 = $$5;
  }
 }
 if ((label | 0) == 19) {
  HEAP8[$$223 >> 0] = 0;
  HEAP32[$ws >> 2] = 0;
  $$0 = $n - $$422 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 22) {
  $$0 = $n - $$422 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 26) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZNSt3__110__stdinbufIwE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $41 = 0, $47 = 0, $53 = 0, $6 = 0, $62 = 0, $8 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $0 = $this + 52 | 0;
 if (HEAP8[$0 >> 0] | 0) {
  $3 = $this + 48 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (!$__consume) {
   $$0 = $4;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$3 >> 2] = -1;
  HEAP8[$0 >> 0] = 0;
  $$0 = $4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = HEAP32[$this + 44 >> 2] | 0;
 $8 = ($6 | 0) > 1 ? $6 : 1;
 L8 : do if (($8 | 0) > 0) {
  $10 = $this + 32 | 0;
  $__i$09 = 0;
  while (1) {
   $12 = _getc(HEAP32[$10 >> 2] | 0) | 0;
   if (($12 | 0) == -1) {
    $$0 = -1;
    break;
   }
   HEAP8[$__extbuf + $__i$09 >> 0] = $12;
   $__i$09 = $__i$09 + 1 | 0;
   if (($__i$09 | 0) >= ($8 | 0)) break L8;
  }
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 L15 : do if (!(HEAP8[$this + 53 >> 0] | 0)) {
  $21 = $this + 40 | 0;
  $22 = $this + 36 | 0;
  $23 = $__1buf + 4 | 0;
  $24 = $this + 32 | 0;
  $__nread$0 = $8;
  while (1) {
   $27 = HEAP32[$21 >> 2] | 0;
   $28 = $27;
   $30 = HEAP32[$28 >> 2] | 0;
   $33 = HEAP32[$28 + 4 >> 2] | 0;
   $34 = HEAP32[$22 >> 2] | 0;
   $35 = $__extbuf + $__nread$0 | 0;
   $39 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$34 >> 2] | 0) + 16 >> 2] & 15]($34, $27, $__extbuf, $35, $__enxt, $__1buf, $23, $__inxt) | 0;
   if (($39 | 0) == 2) {
    $$0 = -1;
    label = 22;
    break;
   } else if (($39 | 0) == 3) {
    label = 14;
    break;
   } else if (($39 | 0) != 1) {
    $__nread$2 = $__nread$0;
    break L15;
   }
   $41 = HEAP32[$21 >> 2] | 0;
   HEAP32[$41 >> 2] = $30;
   HEAP32[$41 + 4 >> 2] = $33;
   if (($__nread$0 | 0) == 8) {
    $$0 = -1;
    label = 22;
    break;
   }
   $47 = _getc(HEAP32[$24 >> 2] | 0) | 0;
   if (($47 | 0) == -1) {
    $$0 = -1;
    label = 22;
    break;
   }
   HEAP8[$35 >> 0] = $47;
   $__nread$0 = $__nread$0 + 1 | 0;
  }
  if ((label | 0) == 14) {
   HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0];
   $__nread$2 = $__nread$0;
   break;
  } else if ((label | 0) == 22) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else {
  HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0];
  $__nread$2 = $8;
 } while (0);
 if ($__consume) {
  $62 = HEAP32[$__1buf >> 2] | 0;
  HEAP32[$this + 48 >> 2] = $62;
  $$0 = $62;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $53 = $this + 32 | 0;
 $__i2$0 = $__nread$2;
 while (1) {
  if (($__i2$0 | 0) <= 0) break;
  $__i2$0 = $__i2$0 + -1 | 0;
  if ((_ungetc(HEAP8[$__extbuf + $__i2$0 >> 0] | 0, HEAP32[$53 >> 2] | 0) | 0) == -1) {
   $$0 = -1;
   label = 22;
   break;
  }
 }
 if ((label | 0) == 22) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = HEAP32[$__1buf >> 2] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10LexContextC2EPKcPc($this, $filename, $script) {
 $this = $this | 0;
 $filename = $filename | 0;
 $script = $script | 0;
 var $$lcssa$i = 0, $$lcssa$i$i = 0, $$lcssa$i4 = 0, $11 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $26 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $53 = 0, $57 = 0, $7 = 0, $req$0$i$i = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this + 28 >> 2] = 0;
 HEAP32[$this + 40 >> 2] = 0;
 $2 = _strlen($script | 0) | 0;
 $4 = $this + 44 | 0;
 HEAP32[$4 >> 2] = $2 + 1;
 $7 = _malloc(($2 << 1) + 34 | 0) | 0;
 HEAP32[$this + 36 >> 2] = $7;
 HEAP32[$this + 32 >> 2] = $7;
 HEAP8[$7 >> 0] = 0;
 HEAP32[$this + 52 >> 2] = 211;
 $11 = _malloc(16) | 0;
 L1 : do if (!$11) {
  while (1) {
   $13 = HEAP32[15470] | 0;
   HEAP32[15470] = $13 + 0;
   if (!$13) break;
   FUNCTION_TABLE_v[$13 & 3]();
   $16 = _malloc(16) | 0;
   if ($16) {
    $$lcssa$i = $16;
    break L1;
   }
  }
  $18 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$18 >> 2] = 61776;
  ___cxa_throw($18 | 0, 61824, 94);
 } else $$lcssa$i = $11; while (0);
 HEAP32[$$lcssa$i >> 2] = $script;
 HEAP32[$$lcssa$i + 4 >> 2] = $script;
 HEAP32[$$lcssa$i + 12 >> 2] = 0;
 HEAP32[$$lcssa$i + 8 >> 2] = (_strlen($script | 0) | 0) + 1;
 HEAP32[$this >> 2] = $$lcssa$i;
 $24 = _malloc(76) | 0;
 L7 : do if (!$24) {
  while (1) {
   $26 = HEAP32[15470] | 0;
   HEAP32[15470] = $26 + 0;
   if (!$26) break;
   FUNCTION_TABLE_v[$26 & 3]();
   $29 = _malloc(76) | 0;
   if ($29) {
    $$lcssa$i4 = $29;
    break L7;
   }
  }
  $31 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$31 >> 2] = 61776;
  ___cxa_throw($31 | 0, 61824, 94);
 } else $$lcssa$i4 = $24; while (0);
 $33 = (HEAP32[$4 >> 2] | 0) + 16 | 0;
 HEAP32[$$lcssa$i4 + 4 >> 2] = 0;
 HEAP32[$$lcssa$i4 + 8 >> 2] = 0;
 $36 = $$lcssa$i4 + 16 | 0;
 HEAP32[$36 >> 2] = 0;
 HEAP32[$$lcssa$i4 + 20 >> 2] = 0;
 HEAP32[$$lcssa$i4 + 12 >> 2] = $36;
 $39 = $$lcssa$i4 + 28 | 0;
 HEAP32[$39 >> 2] = 0;
 HEAP32[$$lcssa$i4 + 32 >> 2] = 0;
 HEAP32[$$lcssa$i4 + 24 >> 2] = $39;
 $42 = _malloc(12) | 0;
 L13 : do if (!$42) {
  while (1) {
   $44 = HEAP32[15470] | 0;
   HEAP32[15470] = $44 + 0;
   if (!$44) break;
   FUNCTION_TABLE_v[$44 & 3]();
   $47 = _malloc(12) | 0;
   if ($47) {
    $$lcssa$i$i = $47;
    break L13;
   }
  }
  $49 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$49 >> 2] = 61776;
  ___cxa_throw($49 | 0, 61824, 94);
 } else $$lcssa$i$i = $42; while (0);
 HEAP32[$$lcssa$i$i >> 2] = 0;
 HEAP32[$$lcssa$i$i + 4 >> 2] = 0;
 HEAP32[$$lcssa$i$i + 8 >> 2] = 0;
 HEAP32[$$lcssa$i4 >> 2] = $$lcssa$i$i;
 if (!$33) $req$0$i$i = 0; else {
  $53 = $33 * 72 | 0;
  if ($33 >>> 0 > 65535) $req$0$i$i = (($53 >>> 0) / ($33 >>> 0) | 0 | 0) == 72 ? $53 : -1; else $req$0$i$i = $53;
 }
 $57 = _malloc($req$0$i$i) | 0;
 if ($57) if (HEAP32[$57 + -4 >> 2] & 3) _memset($57 | 0, 0, $req$0$i$i | 0) | 0;
 HEAP32[$$lcssa$i4 + 72 >> 2] = $57;
 HEAP32[$$lcssa$i4 + 68 >> 2] = $57;
 _memmove($$lcssa$i4 + 48 | 0, 44700 | 0, 20) | 0;
 HEAP32[$this + 4 >> 2] = $$lcssa$i4;
 HEAP32[$this + 8 >> 2] = 1;
 HEAP32[$this + 24 >> 2] = $filename;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $40 = 0, $9 = 0, $__lv = 0, $__names = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy1 = sp + 8 | 0;
 $$byval_copy = sp + 40 | 0;
 $__lv = sp + 44 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 $__names = sp + 16 | 0;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $9 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$__b >> 2];
  HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  FUNCTION_TABLE_viiiiiii[$9 & 63]($0, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__lv);
  $12 = HEAP32[$0 >> 2] | 0;
  HEAP32[$__b >> 2] = $12;
  $13 = HEAP32[$__lv >> 2] | 0;
  if (($13 | 0) == 1) HEAP8[$__v >> 0] = 1; else if (!$13) HEAP8[$__v >> 0] = 0; else {
   HEAP8[$__v >> 0] = 1;
   HEAP32[$__err >> 2] = 4;
  }
  HEAP32[$agg$result >> 2] = $12;
  STACKTOP = sp;
  return;
 }
 $14 = $__iob + 28 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $16 = $15 + 4 | 0;
 HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
 $18 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $19 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$15 + 8 >> 2] | 0, HEAP32[$15 + 12 >> 2] | 0, $18) | 0;
 $20 = $15 + 4 | 0;
 $21 = HEAP32[$20 >> 2] | 0;
 HEAP32[$20 >> 2] = $21 + -1;
 if (!$21) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 127]($15);
 $26 = HEAP32[$14 >> 2] | 0;
 $27 = $26 + 4 | 0;
 HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
 $29 = __ZNSt3__16locale2id5__getEv(50992) | 0;
 $30 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$26 + 8 >> 2] | 0, HEAP32[$26 + 12 >> 2] | 0, $29) | 0;
 $31 = $26 + 4 | 0;
 $32 = HEAP32[$31 >> 2] | 0;
 HEAP32[$31 >> 2] = $32 + -1;
 if (!$32) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] & 127]($26);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$30 >> 2] | 0) + 24 >> 2] & 63]($__names, $30);
 $40 = $__names + 12 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$30 >> 2] | 0) + 28 >> 2] & 63]($40, $30);
 HEAP8[$__v >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, HEAP32[$__e >> 2] | 0, $__names, $__names + 24 | 0, $19, $__err, 1) | 0) == ($__names | 0) & 1;
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 if (HEAP8[$40 >> 0] & 1) _free(HEAP32[$__names + 20 >> 2] | 0);
 if (!(HEAP8[$__names >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__names + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $40 = 0, $9 = 0, $__lv = 0, $__names = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy1 = sp + 8 | 0;
 $$byval_copy = sp + 40 | 0;
 $__lv = sp + 44 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 $__names = sp + 16 | 0;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $9 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$__b >> 2];
  HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  FUNCTION_TABLE_viiiiiii[$9 & 63]($0, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__lv);
  $12 = HEAP32[$0 >> 2] | 0;
  HEAP32[$__b >> 2] = $12;
  $13 = HEAP32[$__lv >> 2] | 0;
  if (!$13) HEAP8[$__v >> 0] = 0; else if (($13 | 0) == 1) HEAP8[$__v >> 0] = 1; else {
   HEAP8[$__v >> 0] = 1;
   HEAP32[$__err >> 2] = 4;
  }
  HEAP32[$agg$result >> 2] = $12;
  STACKTOP = sp;
  return;
 }
 $14 = $__iob + 28 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $16 = $15 + 4 | 0;
 HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
 $18 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $19 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$15 + 8 >> 2] | 0, HEAP32[$15 + 12 >> 2] | 0, $18) | 0;
 $20 = $15 + 4 | 0;
 $21 = HEAP32[$20 >> 2] | 0;
 HEAP32[$20 >> 2] = $21 + -1;
 if (!$21) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 127]($15);
 $26 = HEAP32[$14 >> 2] | 0;
 $27 = $26 + 4 | 0;
 HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
 $29 = __ZNSt3__16locale2id5__getEv(50984) | 0;
 $30 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$26 + 8 >> 2] | 0, HEAP32[$26 + 12 >> 2] | 0, $29) | 0;
 $31 = $26 + 4 | 0;
 $32 = HEAP32[$31 >> 2] | 0;
 HEAP32[$31 >> 2] = $32 + -1;
 if (!$32) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] & 127]($26);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$30 >> 2] | 0) + 24 >> 2] & 63]($__names, $30);
 $40 = $__names + 12 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$30 >> 2] | 0) + 28 >> 2] & 63]($40, $30);
 HEAP8[$__v >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, HEAP32[$__e >> 2] | 0, $__names, $__names + 24 | 0, $19, $__err, 1) | 0) == ($__names | 0) & 1;
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 if (HEAP8[$40 >> 0] & 1) _free(HEAP32[$__names + 20 >> 2] | 0);
 if (!(HEAP8[$__names >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__names + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN7Scanner11isPostDerefEP10LexContext($ctx) {
 $ctx = $ctx | 0;
 var $$0 = 0, $$lcssa$i = 0, $$size$i = 0, $1 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $25 = 0, $31 = 0, $37 = 0, $40 = 0, $43 = 0, $5 = 0, $56 = 0, $8 = 0, $9 = 0, $__p$0$i = 0, $prev_data = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $prev_data = sp;
 $1 = HEAP32[$ctx + 4 >> 2] | 0;
 $5 = HEAP32[$1 + 72 >> 2] | 0;
 if ((HEAP32[$1 + 68 >> 2] | 0) == ($5 | 0)) {
  HEAP8[$prev_data >> 0] = 0;
  HEAP8[$prev_data + 1 >> 0] = 0;
 } else {
  $8 = HEAP32[$5 + -20 >> 2] | 0;
  $9 = _strlen($8 | 0) | 0;
  if ($9 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  if ($9 >>> 0 < 11) {
   HEAP8[$prev_data >> 0] = $9 << 1;
   $__p$0$i = $prev_data + 1 | 0;
  } else {
   $16 = $9 + 16 & -16;
   $$size$i = ($16 | 0) == 0 ? 1 : $16;
   $18 = _malloc($$size$i) | 0;
   L10 : do if (!$18) {
    while (1) {
     $20 = HEAP32[15470] | 0;
     HEAP32[15470] = $20 + 0;
     if (!$20) break;
     FUNCTION_TABLE_v[$20 & 3]();
     $23 = _malloc($$size$i) | 0;
     if ($23) {
      $$lcssa$i = $23;
      break L10;
     }
    }
    $25 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$25 >> 2] = 61776;
    ___cxa_throw($25 | 0, 61824, 94);
   } else $$lcssa$i = $18; while (0);
   HEAP32[$prev_data + 8 >> 2] = $$lcssa$i;
   HEAP32[$prev_data >> 2] = $16 | 1;
   HEAP32[$prev_data + 4 >> 2] = $9;
   $__p$0$i = $$lcssa$i;
  }
  _memcpy($__p$0$i | 0, $8 | 0, $9 | 0) | 0;
  HEAP8[$__p$0$i + $9 >> 0] = 0;
 }
 $31 = HEAP32[$ctx >> 2] | 0;
 $37 = HEAP8[(HEAP32[$31 + 4 >> 2] | 0) + (HEAP32[$31 + 12 >> 2] | 0) >> 0] | 0;
 L18 : do if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($prev_data, 59504) | 0)) {
  switch ($37 << 24 >> 24) {
  case 42:
  case 38:
  case 37:
  case 64:
  case 36:
   break;
  default:
   {
    $$0 = 0;
    break L18;
   }
  }
  $40 = HEAP32[$ctx >> 2] | 0;
  $43 = (HEAP32[$40 + 12 >> 2] | 0) + 1 | 0;
  if ($43 >>> 0 < (HEAP32[$40 + 8 >> 2] | 0) >>> 0) $56 = HEAP8[(HEAP32[$40 + 4 >> 2] | 0) + $43 >> 0] | 0; else $56 = 0;
  switch ($37 << 24 >> 24) {
  case 36:
   {
    if (!($56 << 24 >> 24 == 35 | $56 << 24 >> 24 == 42)) {
     $$0 = 0;
     break L18;
    }
    break;
   }
  case 38:
   {
    if (!($56 << 24 >> 24 == 40 | $56 << 24 >> 24 == 42)) {
     $$0 = 0;
     break L18;
    }
    break;
   }
  case 42:
   {
    if (!($56 << 24 >> 24 == 42 | $56 << 24 >> 24 == 123)) {
     $$0 = 0;
     break L18;
    }
    break;
   }
  case 37:
   {
    if (!($56 << 24 >> 24 == 42 | $56 << 24 >> 24 == 123)) {
     $$0 = 0;
     break L18;
    }
    break;
   }
  case 64:
   {
    if (!($56 << 24 >> 24 == 42 | $56 << 24 >> 24 == 91)) {
     $$0 = 0;
     break L18;
    }
    break;
   }
  default:
   {}
  }
  $$0 = 1;
 } else $$0 = 0; while (0);
 if (!(HEAP8[$prev_data >> 0] & 1)) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 _free(HEAP32[$prev_data + 8 >> 2] | 0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if (HEAP8[51168] | 0) {
  $8 = HEAP32[12790] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(___cxa_guard_acquire(51168) | 0)) {
  $8 = HEAP32[12790] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(HEAP8[57376] | 0)) if (___cxa_guard_acquire(57376) | 0) {
  _memset(57088, 0, 288) | 0;
  ___cxa_atexit(117, 0, ___dso_handle | 0) | 0;
  ___cxa_guard_release(57376);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57088, 57384, 7);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57100, 57392, 8);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57112, 57408, 5);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57124, 57416, 5);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57136, 57424, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57148, 57432, 4);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57160, 57440, 4);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57172, 57448, 6);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57184, 57456, 9);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57196, 57472, 7);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57208, 57480, 8);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57220, 57496, 8);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57232, 57512, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57244, 57520, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57256, 57528, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57268, 57536, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57280, 57424, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57292, 57544, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57304, 57552, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57316, 57560, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57328, 57568, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57340, 57576, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57352, 57584, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(57364, 57592, 3);
 HEAP32[12790] = 57088;
 ___cxa_guard_release(51168);
 $8 = HEAP32[12790] | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $0 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 108 | 0;
 $__nar = sp + 96 | 0;
 $__op = sp + 92 | 0;
 $__oe = sp + 88 | 0;
 $0 = sp + 84 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[49640] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[49641] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[49642] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[49643] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[49644] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[49645] | 0;
 $2 = $__iob + 4 | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 60824, 0, HEAP32[$2 >> 2] | 0);
 $4 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $5 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $4, $__fmt, $vararg_buffer) | 0;
 $6 = $__nar + $5 | 0;
 $8 = HEAP32[$2 >> 2] & 176;
 do if (($8 | 0) == 16) {
  $9 = HEAP8[$__nar >> 0] | 0;
  if ($9 << 24 >> 24 == 43 | $9 << 24 >> 24 == 45) {
   $$0$i = $__nar + 1 | 0;
   break;
  }
  if (($5 | 0) > 1 & $9 << 24 >> 24 == 48) {
   $14 = HEAP8[$__nar + 1 >> 0] | 0;
   if ($14 << 24 >> 24 == 88 | $14 << 24 >> 24 == 120) $$0$i = $__nar + 2 | 0; else label = 7;
  } else label = 7;
 } else if (($8 | 0) == 32) $$0$i = $6; else label = 7; while (0);
 if ((label | 0) == 7) $$0$i = $__nar;
 $17 = HEAP32[$__iob + 28 >> 2] | 0;
 HEAP32[$0 >> 2] = $17;
 $18 = $17 + 4 | 0;
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $$0$i, $6, $vararg_buffer, $__op, $__oe, $0);
 $20 = HEAP32[$0 >> 2] | 0;
 $21 = $20 + 4 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 HEAP32[$21 >> 2] = $22 + -1;
 if ($22) {
  $27 = HEAP32[$__s >> 2] | 0;
  $28 = HEAP32[$__op >> 2] | 0;
  $29 = HEAP32[$__oe >> 2] | 0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $27, $vararg_buffer, $28, $29, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] & 127]($20);
 $27 = HEAP32[$__s >> 2] | 0;
 $28 = HEAP32[$__op >> 2] | 0;
 $29 = HEAP32[$__oe >> 2] | 0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $27, $vararg_buffer, $28, $29, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $0 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 108 | 0;
 $__nar = sp + 96 | 0;
 $__op = sp + 92 | 0;
 $__oe = sp + 88 | 0;
 $0 = sp + 84 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[49640] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[49641] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[49642] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[49643] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[49644] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[49645] | 0;
 $2 = $__iob + 4 | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 60824, 1, HEAP32[$2 >> 2] | 0);
 $4 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $5 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $4, $__fmt, $vararg_buffer) | 0;
 $6 = $__nar + $5 | 0;
 $8 = HEAP32[$2 >> 2] & 176;
 do if (($8 | 0) == 32) $$0$i = $6; else if (($8 | 0) == 16) {
  $9 = HEAP8[$__nar >> 0] | 0;
  if ($9 << 24 >> 24 == 43 | $9 << 24 >> 24 == 45) {
   $$0$i = $__nar + 1 | 0;
   break;
  }
  if (($5 | 0) > 1 & $9 << 24 >> 24 == 48) {
   $14 = HEAP8[$__nar + 1 >> 0] | 0;
   if ($14 << 24 >> 24 == 88 | $14 << 24 >> 24 == 120) $$0$i = $__nar + 2 | 0; else label = 7;
  } else label = 7;
 } else label = 7; while (0);
 if ((label | 0) == 7) $$0$i = $__nar;
 $17 = HEAP32[$__iob + 28 >> 2] | 0;
 HEAP32[$0 >> 2] = $17;
 $18 = $17 + 4 | 0;
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $$0$i, $6, $vararg_buffer, $__op, $__oe, $0);
 $20 = HEAP32[$0 >> 2] | 0;
 $21 = $20 + 4 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 HEAP32[$21 >> 2] = $22 + -1;
 if ($22) {
  $27 = HEAP32[$__s >> 2] | 0;
  $28 = HEAP32[$__op >> 2] | 0;
  $29 = HEAP32[$__oe >> 2] | 0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $27, $vararg_buffer, $28, $29, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] & 127]($20);
 $27 = HEAP32[$__s >> 2] | 0;
 $28 = HEAP32[$__op >> 2] | 0;
 $29 = HEAP32[$__oe >> 2] | 0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $27, $vararg_buffer, $28, $29, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $0 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 16 | 0;
 $__nar = sp + 24 | 0;
 $__o = sp + 36 | 0;
 $__op = sp + 8 | 0;
 $__oe = sp + 4 | 0;
 $0 = sp + 12 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[49640] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[49641] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[49642] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[49643] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[49644] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[49645] | 0;
 $2 = $__iob + 4 | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 60824, 0, HEAP32[$2 >> 2] | 0);
 $4 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $5 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $4, $__fmt, $vararg_buffer) | 0;
 $6 = $__nar + $5 | 0;
 $8 = HEAP32[$2 >> 2] & 176;
 do if (($8 | 0) == 32) $$0$i = $6; else if (($8 | 0) == 16) {
  $9 = HEAP8[$__nar >> 0] | 0;
  if ($9 << 24 >> 24 == 43 | $9 << 24 >> 24 == 45) {
   $$0$i = $__nar + 1 | 0;
   break;
  }
  if (($5 | 0) > 1 & $9 << 24 >> 24 == 48) {
   $14 = HEAP8[$__nar + 1 >> 0] | 0;
   if ($14 << 24 >> 24 == 88 | $14 << 24 >> 24 == 120) $$0$i = $__nar + 2 | 0; else label = 7;
  } else label = 7;
 } else label = 7; while (0);
 if ((label | 0) == 7) $$0$i = $__nar;
 $17 = HEAP32[$__iob + 28 >> 2] | 0;
 HEAP32[$0 >> 2] = $17;
 $18 = $17 + 4 | 0;
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $$0$i, $6, $__o, $__op, $__oe, $0);
 $20 = HEAP32[$0 >> 2] | 0;
 $21 = $20 + 4 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 HEAP32[$21 >> 2] = $22 + -1;
 if ($22) {
  $27 = HEAP32[$__s >> 2] | 0;
  $28 = HEAP32[$__op >> 2] | 0;
  $29 = HEAP32[$__oe >> 2] | 0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $27, $__o, $28, $29, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] & 127]($20);
 $27 = HEAP32[$__s >> 2] | 0;
 $28 = HEAP32[$__op >> 2] | 0;
 $29 = HEAP32[$__oe >> 2] | 0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $27, $__o, $28, $29, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $0 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 16 | 0;
 $__nar = sp + 24 | 0;
 $__o = sp + 36 | 0;
 $__op = sp + 8 | 0;
 $__oe = sp + 4 | 0;
 $0 = sp + 12 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[49640] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[49641] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[49642] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[49643] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[49644] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[49645] | 0;
 $2 = $__iob + 4 | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 60824, 1, HEAP32[$2 >> 2] | 0);
 $4 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $5 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $4, $__fmt, $vararg_buffer) | 0;
 $6 = $__nar + $5 | 0;
 $8 = HEAP32[$2 >> 2] & 176;
 do if (($8 | 0) == 32) $$0$i = $6; else if (($8 | 0) == 16) {
  $9 = HEAP8[$__nar >> 0] | 0;
  if ($9 << 24 >> 24 == 43 | $9 << 24 >> 24 == 45) {
   $$0$i = $__nar + 1 | 0;
   break;
  }
  if (($5 | 0) > 1 & $9 << 24 >> 24 == 48) {
   $14 = HEAP8[$__nar + 1 >> 0] | 0;
   if ($14 << 24 >> 24 == 88 | $14 << 24 >> 24 == 120) $$0$i = $__nar + 2 | 0; else label = 7;
  } else label = 7;
 } else label = 7; while (0);
 if ((label | 0) == 7) $$0$i = $__nar;
 $17 = HEAP32[$__iob + 28 >> 2] | 0;
 HEAP32[$0 >> 2] = $17;
 $18 = $17 + 4 | 0;
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $$0$i, $6, $__o, $__op, $__oe, $0);
 $20 = HEAP32[$0 >> 2] | 0;
 $21 = $20 + 4 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 HEAP32[$21 >> 2] = $22 + -1;
 if ($22) {
  $27 = HEAP32[$__s >> 2] | 0;
  $28 = HEAP32[$__op >> 2] | 0;
  $29 = HEAP32[$__oe >> 2] | 0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $27, $__o, $28, $29, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] & 127]($20);
 $27 = HEAP32[$__s >> 2] | 0;
 $28 = HEAP32[$__op >> 2] | 0;
 $29 = HEAP32[$__oe >> 2] | 0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $27, $__o, $28, $29, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if (HEAP8[51184] | 0) {
  $8 = HEAP32[12794] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(___cxa_guard_acquire(51184) | 0)) {
  $8 = HEAP32[12794] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(HEAP8[56536] | 0)) if (___cxa_guard_acquire(56536) | 0) {
  _memset(56248, 0, 288) | 0;
  ___cxa_atexit(118, 0, ___dso_handle | 0) | 0;
  ___cxa_guard_release(56536);
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56248, 56544);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56260, 56576);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56272, 56616);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56284, 56640);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56296, 56664);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56308, 56680);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56320, 56704);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56332, 56728);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56344, 56760);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56356, 56800);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56368, 56832);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56380, 56872);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56392, 56912);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56404, 56928);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56416, 56944);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56428, 56960);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56440, 56664);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56452, 56976);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56464, 56992);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56476, 57008);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56488, 57024);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56500, 57040);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56512, 57056);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(56524, 57072);
 HEAP32[12794] = 56248;
 ___cxa_guard_release(51184);
 $8 = HEAP32[12794] | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNSt3__16vectorIP5TokenNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$0$i2 = 0, $$0$i3 = 0, $$lcssa$i = 0, $$lcssa$i5 = 0, $$size$i = 0, $0 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $2 = HEAP32[$this >> 2] | 0;
 $4 = $2;
 $5 = (HEAP32[$0 >> 2] | 0) - $4 | 0;
 $6 = $5 >> 2;
 $7 = $6 + 1 | 0;
 if ($7 >>> 0 > 1073741823) {
  $9 = ___cxa_allocate_exception(8) | 0;
  HEAP32[$9 >> 2] = 61920;
  $10 = $9 + 4 | 0;
  $11 = _malloc(19) | 0;
  L3 : do if (!$11) {
   while (1) {
    $13 = HEAP32[15470] | 0;
    HEAP32[15470] = $13 + 0;
    if (!$13) break;
    FUNCTION_TABLE_v[$13 & 3]();
    $16 = _malloc(19) | 0;
    if ($16) {
     $$lcssa$i5 = $16;
     break L3;
    }
   }
   $18 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$18 >> 2] = 61776;
   ___cxa_throw($18 | 0, 61824, 94);
  } else $$lcssa$i5 = $11; while (0);
  HEAP32[$$lcssa$i5 >> 2] = 6;
  HEAP32[$$lcssa$i5 + 4 >> 2] = 6;
  HEAP32[$$lcssa$i5 + 8 >> 2] = 0;
  $21 = $$lcssa$i5 + 12 | 0;
  HEAP8[$21 + 0 >> 0] = HEAP8[50728] | 0;
  HEAP8[$21 + 1 >> 0] = HEAP8[50729] | 0;
  HEAP8[$21 + 2 >> 0] = HEAP8[50730] | 0;
  HEAP8[$21 + 3 >> 0] = HEAP8[50731] | 0;
  HEAP8[$21 + 4 >> 0] = HEAP8[50732] | 0;
  HEAP8[$21 + 5 >> 0] = HEAP8[50733] | 0;
  HEAP8[$21 + 6 >> 0] = HEAP8[50734] | 0;
  HEAP32[$10 >> 2] = $21;
  HEAP32[$9 >> 2] = 62e3;
  ___cxa_throw($9 | 0, 62040, 96);
 }
 $22 = $this + 8 | 0;
 $25 = (HEAP32[$22 >> 2] | 0) - $4 | 0;
 if ($25 >> 2 >>> 0 < 536870911) {
  $28 = $25 >> 1;
  $30 = $28 >>> 0 < $7 >>> 0 ? $7 : $28;
  if (!$30) {
   $$0$i3 = 0;
   $43 = 0;
  } else {
   $$0$i2 = $30;
   label = 9;
  }
 } else {
  $$0$i2 = 1073741823;
  label = 9;
 }
 if ((label | 0) == 9) {
  $32 = $$0$i2 << 2;
  $$size$i = ($32 | 0) == 0 ? 1 : $32;
  $34 = _malloc($$size$i) | 0;
  L14 : do if (!$34) {
   while (1) {
    $36 = HEAP32[15470] | 0;
    HEAP32[15470] = $36 + 0;
    if (!$36) break;
    FUNCTION_TABLE_v[$36 & 3]();
    $39 = _malloc($$size$i) | 0;
    if ($39) {
     $$lcssa$i = $39;
     break L14;
    }
   }
   $41 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$41 >> 2] = 61776;
   ___cxa_throw($41 | 0, 61824, 94);
  } else $$lcssa$i = $34; while (0);
  $$0$i3 = $$0$i2;
  $43 = $$lcssa$i;
 }
 $42 = $43 + ($6 << 2) | 0;
 if ($42) HEAP32[$42 >> 2] = HEAP32[$__x >> 2];
 _memcpy($43 | 0, $2 | 0, $5 | 0) | 0;
 HEAP32[$this >> 2] = $43;
 HEAP32[$0 >> 2] = $43 + ($7 << 2);
 HEAP32[$22 >> 2] = $43 + ($$0$i3 << 2);
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 _free($2);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$byval_copy = 0, $$ph = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $22 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $7 = 0, $__nm = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 12 | 0;
 $__nm = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $7 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  FUNCTION_TABLE_viiiiii[$7 & 15]($agg$result, $this, $$byval_copy, $__iob, $__fl, $__v & 1);
  STACKTOP = sp;
  return;
 }
 $11 = HEAP32[$__iob + 28 >> 2] | 0;
 $12 = $11 + 4 | 0;
 HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 $14 = __ZNSt3__16locale2id5__getEv(50992) | 0;
 $15 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$11 + 8 >> 2] | 0, HEAP32[$11 + 12 >> 2] | 0, $14) | 0;
 $16 = $11 + 4 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 HEAP32[$16 >> 2] = $17 + -1;
 if (!$17) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] & 127]($11);
 $22 = HEAP32[$15 >> 2] | 0;
 if ($__v) FUNCTION_TABLE_vii[HEAP32[$22 + 24 >> 2] & 63]($__nm, $15); else FUNCTION_TABLE_vii[HEAP32[$22 + 28 >> 2] & 63]($__nm, $15);
 $27 = HEAP8[$__nm >> 0] | 0;
 if (!($27 & 1)) {
  $32 = $__nm + 4 | 0;
  $$ph = $32;
  $$pre$phi4Z2D = $__nm + 8 | 0;
  $$pre$phiZ2D = $32;
 } else {
  $30 = $__nm + 8 | 0;
  $$ph = HEAP32[$30 >> 2] | 0;
  $$pre$phi4Z2D = $30;
  $$pre$phiZ2D = $__nm + 4 | 0;
 }
 $34 = $27;
 $44 = $$ph;
 while (1) {
  $35 = ($34 & 1) == 0;
  if ($35) {
   $41 = $$pre$phiZ2D;
   $42 = ($34 & 255) >>> 1;
  } else {
   $41 = HEAP32[$$pre$phi4Z2D >> 2] | 0;
   $42 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  }
  if (($44 | 0) == ($41 + ($42 << 2) | 0)) break;
  $45 = HEAP32[$44 >> 2] | 0;
  $46 = HEAP32[$__s >> 2] | 0;
  if ($46) {
   $48 = $46 + 24 | 0;
   $49 = HEAP32[$48 >> 2] | 0;
   if (($49 | 0) == (HEAP32[$46 + 28 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$46 >> 2] | 0) + 52 >> 2] & 31]($46, $45) | 0; else {
    HEAP32[$48 >> 2] = $49 + 4;
    HEAP32[$49 >> 2] = $45;
    $$0$i$i = $45;
   }
   if (($$0$i$i | 0) == -1) HEAP32[$__s >> 2] = 0;
  }
  $34 = HEAP8[$__nm >> 0] | 0;
  $44 = $44 + 4 | 0;
 }
 HEAP32[$agg$result >> 2] = HEAP32[$__s >> 2];
 if ($35) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__nm + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this) {
 $this = $this | 0;
 var $$014$i = 0, $$023$i = 0, $$05$i = 0, $$sink = 0, $0 = 0, $14 = 0, $18 = 0, $19 = 0, $23 = 0, $29 = 0, $3 = 0, $31 = 0, $36 = 0, $37 = 0, $7 = 0, $8 = 0, $__new_data$113 = 0, $__new_data$17 = 0, $__new_data$18 = 0, $__now_long$0$off01 = 0, $__now_long$0$off010 = 0, $__now_long$0$off02 = 0, $__p$012 = 0, $__p$05 = 0, $__p$06 = 0, $__was_long$0$off011 = 0, $__was_long$0$off03 = 0, $__was_long$0$off04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $19 = 1;
  $7 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $19 = ($3 & -2) + -1 | 0;
  $7 = $3 & 255;
 }
 $8 = ($7 & 1) == 0;
 if ($8) $14 = ($7 & 255) >>> 1; else $14 = HEAP32[$this + 4 >> 2] | 0;
 if ($14 >>> 0 < 2) $18 = 1; else $18 = ($14 + 4 & -4) + -1 | 0;
 if (($18 | 0) == ($19 | 0)) {
  STACKTOP = sp;
  return;
 }
 do if (($18 | 0) == 1) {
  $29 = $this + 4 | 0;
  $31 = HEAP32[$this + 8 >> 2] | 0;
  if ($8) {
   $__new_data$18 = $29;
   $__now_long$0$off02 = 0;
   $__p$06 = $31;
   $__was_long$0$off04 = 1;
   label = 18;
  } else {
   $__new_data$113 = $29;
   $__now_long$0$off010 = 0;
   $__p$012 = $31;
   $__was_long$0$off011 = 1;
   label = 17;
  }
 } else {
  $23 = ($18 << 2) + 4 | 0;
  if ($18 >>> 0 > $19 >>> 0) $$sink = __Znwj($23) | 0; else $$sink = __Znwj($23) | 0;
  if ($8) {
   $__new_data$18 = $$sink;
   $__now_long$0$off02 = 1;
   $__p$06 = $this + 4 | 0;
   $__was_long$0$off04 = 0;
   label = 18;
   break;
  } else {
   $__new_data$113 = $$sink;
   $__now_long$0$off010 = 1;
   $__p$012 = HEAP32[$this + 8 >> 2] | 0;
   $__was_long$0$off011 = 1;
   label = 17;
   break;
  }
 } while (0);
 if ((label | 0) == 17) {
  $37 = HEAP32[$this + 4 >> 2] | 0;
  $__new_data$17 = $__new_data$113;
  $__now_long$0$off01 = $__now_long$0$off010;
  $__p$05 = $__p$012;
  $__was_long$0$off03 = $__was_long$0$off011;
 } else if ((label | 0) == 18) {
  $37 = ($7 & 255) >>> 1;
  $__new_data$17 = $__new_data$18;
  $__now_long$0$off01 = $__now_long$0$off02;
  $__p$05 = $__p$06;
  $__was_long$0$off03 = $__was_long$0$off04;
 }
 $36 = $37 + 1 | 0;
 if ($36) {
  $$014$i = $36;
  $$023$i = $__p$05;
  $$05$i = $__new_data$17;
  while (1) {
   $$014$i = $$014$i + -1 | 0;
   HEAP32[$$05$i >> 2] = HEAP32[$$023$i >> 2];
   if (!$$014$i) break; else {
    $$023$i = $$023$i + 4 | 0;
    $$05$i = $$05$i + 4 | 0;
   }
  }
 }
 if ($__was_long$0$off03) _free($__p$05);
 if ($__now_long$0$off01) {
  HEAP32[$this >> 2] = $18 + 1 | 1;
  HEAP32[$this + 4 >> 2] = $14;
  HEAP32[$this + 8 >> 2] = $__new_data$17;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[$this >> 0] = $14 << 1;
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$ph = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $0 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $22 = 0, $27 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $7 = 0, $__nm = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 12 | 0;
 $__nm = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $7 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  FUNCTION_TABLE_viiiiii[$7 & 15]($agg$result, $this, $$byval_copy, $__iob, $__fl, $__v & 1);
  STACKTOP = sp;
  return;
 }
 $11 = HEAP32[$__iob + 28 >> 2] | 0;
 $12 = $11 + 4 | 0;
 HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 $14 = __ZNSt3__16locale2id5__getEv(50984) | 0;
 $15 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$11 + 8 >> 2] | 0, HEAP32[$11 + 12 >> 2] | 0, $14) | 0;
 $16 = $11 + 4 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 HEAP32[$16 >> 2] = $17 + -1;
 if (!$17) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] & 127]($11);
 $22 = HEAP32[$15 >> 2] | 0;
 if ($__v) FUNCTION_TABLE_vii[HEAP32[$22 + 24 >> 2] & 63]($__nm, $15); else FUNCTION_TABLE_vii[HEAP32[$22 + 28 >> 2] & 63]($__nm, $15);
 $27 = HEAP8[$__nm >> 0] | 0;
 if (!($27 & 1)) {
  $32 = $__nm + 1 | 0;
  $$ph = $32;
  $$pre$phi4Z2D = $32;
  $$pre$phi6Z2D = $__nm + 8 | 0;
 } else {
  $30 = $__nm + 8 | 0;
  $$ph = HEAP32[$30 >> 2] | 0;
  $$pre$phi4Z2D = $__nm + 1 | 0;
  $$pre$phi6Z2D = $30;
 }
 $33 = $__nm + 4 | 0;
 $35 = $27;
 $45 = $$ph;
 while (1) {
  $36 = ($35 & 1) == 0;
  if ($36) {
   $42 = $$pre$phi4Z2D;
   $43 = ($35 & 255) >>> 1;
  } else {
   $42 = HEAP32[$$pre$phi6Z2D >> 2] | 0;
   $43 = HEAP32[$33 >> 2] | 0;
  }
  if (($45 | 0) == ($42 + $43 | 0)) break;
  $46 = HEAP8[$45 >> 0] | 0;
  $47 = HEAP32[$__s >> 2] | 0;
  do if ($47) {
   $49 = $47 + 24 | 0;
   $50 = HEAP32[$49 >> 2] | 0;
   if (($50 | 0) != (HEAP32[$47 + 28 >> 2] | 0)) {
    HEAP32[$49 >> 2] = $50 + 1;
    HEAP8[$50 >> 0] = $46;
    break;
   }
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$47 >> 2] | 0) + 52 >> 2] & 31]($47, $46 & 255) | 0) == -1) HEAP32[$__s >> 2] = 0;
  } while (0);
  $35 = HEAP8[$__nm >> 0] | 0;
  $45 = $45 + 1 | 0;
 }
 HEAP32[$agg$result >> 2] = HEAP32[$__s >> 2];
 if ($36) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__nm + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $28 = 0, $34 = 0, $5 = 0, $6 = 0, $__fmt = 0, $__nar = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 168 | 0;
 $__nar = sp + 148 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[49648] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[49649] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[49650] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[49651] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[49652] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[49653] | 0;
 $0 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $0, $__fmt, $vararg_buffer) | 0;
 $2 = $__nar + $1 | 0;
 $5 = HEAP32[$__iob + 4 >> 2] & 176;
 do if (($5 | 0) == 32) $$0$i = $2; else if (($5 | 0) == 16) {
  $6 = HEAP8[$__nar >> 0] | 0;
  if ($6 << 24 >> 24 == 43 | $6 << 24 >> 24 == 45) {
   $$0$i = $__nar + 1 | 0;
   break;
  }
  if (($1 | 0) > 1 & $6 << 24 >> 24 == 48) {
   $11 = HEAP8[$__nar + 1 >> 0] | 0;
   if ($11 << 24 >> 24 == 88 | $11 << 24 >> 24 == 120) $$0$i = $__nar + 2 | 0; else label = 7;
  } else label = 7;
 } else label = 7; while (0);
 if ((label | 0) == 7) $$0$i = $__nar;
 $14 = HEAP32[$__iob + 28 >> 2] | 0;
 $15 = $14 + 4 | 0;
 HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
 $17 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $18 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$14 + 8 >> 2] | 0, HEAP32[$14 + 12 >> 2] | 0, $17) | 0;
 $19 = $14 + 4 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = $20 + -1;
 if (!$20) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$14 >> 2] | 0) + 8 >> 2] & 127]($14);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$18 >> 2] | 0) + 48 >> 2] & 7]($18, $__nar, $2, $vararg_buffer) | 0;
 $28 = $vararg_buffer + ($1 << 2) | 0;
 if (($$0$i | 0) == ($2 | 0)) {
  $__op$0 = $28;
  $34 = HEAP32[$__s >> 2] | 0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $34, $vararg_buffer, $__op$0, $28, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 $__op$0 = $vararg_buffer + ($$0$i - $__nar << 2) | 0;
 $34 = HEAP32[$__s >> 2] | 0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $34, $vararg_buffer, $__op$0, $28, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result, $this, $__s, $__iob, $__fl, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $39 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 192 | 0;
 $__op = sp + 188 | 0;
 $__oe = sp + 184 | 0;
 $2 = sp + 180 | 0;
 $3 = $__fmt;
 HEAP32[$3 >> 2] = 37;
 HEAP32[$3 + 4 >> 2] = 0;
 $8 = $__iob + 4 | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 60832, 0, HEAP32[$8 >> 2] | 0);
 $10 = __ZNSt3__16__clocEv() | 0;
 $11 = $vararg_buffer;
 HEAP32[$11 >> 2] = $0;
 HEAP32[$11 + 4 >> 2] = $1;
 $15 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $10, $__fmt, $vararg_buffer) | 0;
 $16 = $__nar + $15 | 0;
 $18 = HEAP32[$8 >> 2] & 176;
 do if (($18 | 0) == 16) {
  $19 = HEAP8[$__nar >> 0] | 0;
  if ($19 << 24 >> 24 == 43 | $19 << 24 >> 24 == 45) {
   $$0$i = $__nar + 1 | 0;
   break;
  }
  if (($15 | 0) > 1 & $19 << 24 >> 24 == 48) {
   $24 = HEAP8[$__nar + 1 >> 0] | 0;
   if ($24 << 24 >> 24 == 88 | $24 << 24 >> 24 == 120) $$0$i = $__nar + 2 | 0; else label = 7;
  } else label = 7;
 } else if (($18 | 0) == 32) $$0$i = $16; else label = 7; while (0);
 if ((label | 0) == 7) $$0$i = $__nar;
 $27 = HEAP32[$__iob + 28 >> 2] | 0;
 HEAP32[$2 >> 2] = $27;
 $28 = $27 + 4 | 0;
 HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $$0$i, $16, $vararg_buffer, $__op, $__oe, $2);
 $30 = HEAP32[$2 >> 2] | 0;
 $31 = $30 + 4 | 0;
 $32 = HEAP32[$31 >> 2] | 0;
 HEAP32[$31 >> 2] = $32 + -1;
 if ($32) {
  $37 = HEAP32[$__s >> 2] | 0;
  $38 = HEAP32[$__op >> 2] | 0;
  $39 = HEAP32[$__oe >> 2] | 0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $37, $vararg_buffer, $38, $39, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] & 127]($30);
 $37 = HEAP32[$__s >> 2] | 0;
 $38 = HEAP32[$__op >> 2] | 0;
 $39 = HEAP32[$__oe >> 2] | 0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $37, $vararg_buffer, $38, $39, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result, $this, $__s, $__iob, $__fl, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $39 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 184 | 0;
 $__op = sp + 180 | 0;
 $__oe = sp + 176 | 0;
 $2 = sp + 172 | 0;
 $3 = $__fmt;
 HEAP32[$3 >> 2] = 37;
 HEAP32[$3 + 4 >> 2] = 0;
 $8 = $__iob + 4 | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 60832, 1, HEAP32[$8 >> 2] | 0);
 $10 = __ZNSt3__16__clocEv() | 0;
 $11 = $vararg_buffer;
 HEAP32[$11 >> 2] = $0;
 HEAP32[$11 + 4 >> 2] = $1;
 $15 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $10, $__fmt, $vararg_buffer) | 0;
 $16 = $__nar + $15 | 0;
 $18 = HEAP32[$8 >> 2] & 176;
 do if (($18 | 0) == 16) {
  $19 = HEAP8[$__nar >> 0] | 0;
  if ($19 << 24 >> 24 == 43 | $19 << 24 >> 24 == 45) {
   $$0$i = $__nar + 1 | 0;
   break;
  }
  if (($15 | 0) > 1 & $19 << 24 >> 24 == 48) {
   $24 = HEAP8[$__nar + 1 >> 0] | 0;
   if ($24 << 24 >> 24 == 88 | $24 << 24 >> 24 == 120) $$0$i = $__nar + 2 | 0; else label = 7;
  } else label = 7;
 } else if (($18 | 0) == 32) $$0$i = $16; else label = 7; while (0);
 if ((label | 0) == 7) $$0$i = $__nar;
 $27 = HEAP32[$__iob + 28 >> 2] | 0;
 HEAP32[$2 >> 2] = $27;
 $28 = $27 + 4 | 0;
 HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $$0$i, $16, $vararg_buffer, $__op, $__oe, $2);
 $30 = HEAP32[$2 >> 2] | 0;
 $31 = $30 + 4 | 0;
 $32 = HEAP32[$31 >> 2] | 0;
 HEAP32[$31 >> 2] = $32 + -1;
 if ($32) {
  $37 = HEAP32[$__s >> 2] | 0;
  $38 = HEAP32[$__op >> 2] | 0;
  $39 = HEAP32[$__oe >> 2] | 0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $37, $vararg_buffer, $38, $39, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] & 127]($30);
 $37 = HEAP32[$__s >> 2] | 0;
 $38 = HEAP32[$__op >> 2] | 0;
 $39 = HEAP32[$__oe >> 2] | 0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $37, $vararg_buffer, $38, $39, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $28 = 0, $34 = 0, $5 = 0, $6 = 0, $__fmt = 0, $__nar = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 60 | 0;
 $__nar = sp + 40 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[49648] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[49649] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[49650] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[49651] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[49652] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[49653] | 0;
 $0 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $0, $__fmt, $vararg_buffer) | 0;
 $2 = $__nar + $1 | 0;
 $5 = HEAP32[$__iob + 4 >> 2] & 176;
 do if (($5 | 0) == 16) {
  $6 = HEAP8[$__nar >> 0] | 0;
  if ($6 << 24 >> 24 == 43 | $6 << 24 >> 24 == 45) {
   $$0$i = $__nar + 1 | 0;
   break;
  }
  if (($1 | 0) > 1 & $6 << 24 >> 24 == 48) {
   $11 = HEAP8[$__nar + 1 >> 0] | 0;
   if ($11 << 24 >> 24 == 88 | $11 << 24 >> 24 == 120) $$0$i = $__nar + 2 | 0; else label = 7;
  } else label = 7;
 } else if (($5 | 0) == 32) $$0$i = $2; else label = 7; while (0);
 if ((label | 0) == 7) $$0$i = $__nar;
 $14 = HEAP32[$__iob + 28 >> 2] | 0;
 $15 = $14 + 4 | 0;
 HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
 $17 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $18 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$14 + 8 >> 2] | 0, HEAP32[$14 + 12 >> 2] | 0, $17) | 0;
 $19 = $14 + 4 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = $20 + -1;
 if (!$20) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$14 >> 2] | 0) + 8 >> 2] & 127]($14);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$18 >> 2] | 0) + 32 >> 2] & 7]($18, $__nar, $2, $vararg_buffer) | 0;
 $28 = $vararg_buffer + $1 | 0;
 if (($$0$i | 0) == ($2 | 0)) {
  $__op$0 = $28;
  $34 = HEAP32[$__s >> 2] | 0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $34, $vararg_buffer, $__op$0, $28, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 $__op$0 = $vararg_buffer + ($$0$i - $__nar) | 0;
 $34 = HEAP32[$__s >> 2] | 0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $34, $vararg_buffer, $__op$0, $28, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result, $this, $__s, $__iob, $__fl, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $39 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 64 | 0;
 $__op = sp + 60 | 0;
 $__oe = sp + 56 | 0;
 $2 = sp + 52 | 0;
 $3 = $__fmt;
 HEAP32[$3 >> 2] = 37;
 HEAP32[$3 + 4 >> 2] = 0;
 $8 = $__iob + 4 | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 60832, 0, HEAP32[$8 >> 2] | 0);
 $10 = __ZNSt3__16__clocEv() | 0;
 $11 = $vararg_buffer;
 HEAP32[$11 >> 2] = $0;
 HEAP32[$11 + 4 >> 2] = $1;
 $15 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $10, $__fmt, $vararg_buffer) | 0;
 $16 = $__nar + $15 | 0;
 $18 = HEAP32[$8 >> 2] & 176;
 do if (($18 | 0) == 32) $$0$i = $16; else if (($18 | 0) == 16) {
  $19 = HEAP8[$__nar >> 0] | 0;
  if ($19 << 24 >> 24 == 43 | $19 << 24 >> 24 == 45) {
   $$0$i = $__nar + 1 | 0;
   break;
  }
  if (($15 | 0) > 1 & $19 << 24 >> 24 == 48) {
   $24 = HEAP8[$__nar + 1 >> 0] | 0;
   if ($24 << 24 >> 24 == 88 | $24 << 24 >> 24 == 120) $$0$i = $__nar + 2 | 0; else label = 7;
  } else label = 7;
 } else label = 7; while (0);
 if ((label | 0) == 7) $$0$i = $__nar;
 $27 = HEAP32[$__iob + 28 >> 2] | 0;
 HEAP32[$2 >> 2] = $27;
 $28 = $27 + 4 | 0;
 HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $$0$i, $16, $vararg_buffer, $__op, $__oe, $2);
 $30 = HEAP32[$2 >> 2] | 0;
 $31 = $30 + 4 | 0;
 $32 = HEAP32[$31 >> 2] | 0;
 HEAP32[$31 >> 2] = $32 + -1;
 if ($32) {
  $37 = HEAP32[$__s >> 2] | 0;
  $38 = HEAP32[$__op >> 2] | 0;
  $39 = HEAP32[$__oe >> 2] | 0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $37, $vararg_buffer, $38, $39, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] & 127]($30);
 $37 = HEAP32[$__s >> 2] | 0;
 $38 = HEAP32[$__op >> 2] | 0;
 $39 = HEAP32[$__oe >> 2] | 0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $37, $vararg_buffer, $38, $39, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result, $this, $__s, $__iob, $__fl, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $39 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 64 | 0;
 $__op = sp + 60 | 0;
 $__oe = sp + 56 | 0;
 $2 = sp + 52 | 0;
 $3 = $__fmt;
 HEAP32[$3 >> 2] = 37;
 HEAP32[$3 + 4 >> 2] = 0;
 $8 = $__iob + 4 | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 60832, 1, HEAP32[$8 >> 2] | 0);
 $10 = __ZNSt3__16__clocEv() | 0;
 $11 = $vararg_buffer;
 HEAP32[$11 >> 2] = $0;
 HEAP32[$11 + 4 >> 2] = $1;
 $15 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $10, $__fmt, $vararg_buffer) | 0;
 $16 = $__nar + $15 | 0;
 $18 = HEAP32[$8 >> 2] & 176;
 do if (($18 | 0) == 16) {
  $19 = HEAP8[$__nar >> 0] | 0;
  if ($19 << 24 >> 24 == 43 | $19 << 24 >> 24 == 45) {
   $$0$i = $__nar + 1 | 0;
   break;
  }
  if (($15 | 0) > 1 & $19 << 24 >> 24 == 48) {
   $24 = HEAP8[$__nar + 1 >> 0] | 0;
   if ($24 << 24 >> 24 == 88 | $24 << 24 >> 24 == 120) $$0$i = $__nar + 2 | 0; else label = 7;
  } else label = 7;
 } else if (($18 | 0) == 32) $$0$i = $16; else label = 7; while (0);
 if ((label | 0) == 7) $$0$i = $__nar;
 $27 = HEAP32[$__iob + 28 >> 2] | 0;
 HEAP32[$2 >> 2] = $27;
 $28 = $27 + 4 | 0;
 HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $$0$i, $16, $vararg_buffer, $__op, $__oe, $2);
 $30 = HEAP32[$2 >> 2] | 0;
 $31 = $30 + 4 | 0;
 $32 = HEAP32[$31 >> 2] | 0;
 HEAP32[$31 >> 2] = $32 + -1;
 if ($32) {
  $37 = HEAP32[$__s >> 2] | 0;
  $38 = HEAP32[$__op >> 2] | 0;
  $39 = HEAP32[$__oe >> 2] | 0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $37, $vararg_buffer, $38, $39, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] & 127]($30);
 $37 = HEAP32[$__s >> 2] | 0;
 $38 = HEAP32[$__op >> 2] | 0;
 $39 = HEAP32[$__oe >> 2] | 0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $37, $vararg_buffer, $38, $39, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $18 = 0, $20 = 0, $25 = 0, $27 = 0, $34 = 0, $4 = 0, $46 = 0, $49 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $1 = ($0 | 0) == ($__a | 0);
 do if ($1) {
  $4 = (HEAP8[$__atoms + 24 >> 0] | 0) == $__ct << 24 >> 24;
  if (!$4) if ((HEAP8[$__atoms + 25 >> 0] | 0) != $__ct << 24 >> 24) break;
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $4 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 $10 = HEAP8[$__grouping >> 0] | 0;
 if (!($10 & 1)) $18 = ($10 & 255) >>> 1; else $18 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (($18 | 0) != 0 ? $__ct << 24 >> 24 == $__thousands_sep << 24 >> 24 : 0) {
  $20 = HEAP32[$__g_end >> 2] | 0;
  if (($20 - $__g | 0) >= 160) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $25 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $20 + 4;
  HEAP32[$20 >> 2] = $25;
  HEAP32[$__dc >> 2] = 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $27 = $__atoms + 26 | 0;
 $$01$i = $__atoms;
 while (1) {
  if ((HEAP8[$$01$i >> 0] | 0) == $__ct << 24 >> 24) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $$01$i = $$01$i + 1 | 0;
  if (($$01$i | 0) == ($27 | 0)) {
   $$0$lcssa$i = $27;
   break;
  }
 }
 $34 = $$0$lcssa$i - $__atoms | 0;
 if (($34 | 0) > 23) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($__base | 0) == 16) {
  if (($34 | 0) >= 22) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if (($0 - $__a | 0) >= 3) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP32[$__dc >> 2] = 0;
   $46 = HEAP8[49384 + $34 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $46;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if (($__base | 0) == 10 | ($__base | 0) == 8) if (($34 | 0) >= ($__base | 0)) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $49 = HEAP8[49384 + $34 >> 0] | 0;
 HEAP32[$__a_end >> 2] = $0 + 1;
 HEAP8[$0 >> 0] = $49;
 HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10emscripten8internal12VectorAccessINSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEE3setERS7_jRKS4_($v, $index, $value) {
 $v = $v | 0;
 $index = $index | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $3 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $56 = 0, $59 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $71 = 0, $72 = 0, $85 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v >> 2] | 0;
 $1 = $0 + ($index * 24 | 0) | 0;
 do if (($1 | 0) != ($value | 0)) {
  $3 = HEAP8[$value >> 0] | 0;
  if (!($3 & 1)) {
   $20 = ($3 & 255) >>> 1;
   $29 = $value + 1 | 0;
  } else {
   $20 = HEAP32[$value + 4 >> 2] | 0;
   $29 = HEAP32[$value + 8 >> 2] | 0;
  }
  $13 = HEAP8[$1 >> 0] | 0;
  if (!($13 & 1)) {
   $21 = 10;
   $23 = $13;
  } else {
   $16 = HEAP32[$1 >> 2] | 0;
   $21 = ($16 & -2) + -1 | 0;
   $23 = $16 & 255;
  }
  $24 = ($23 & 1) == 0;
  if ($20 >>> 0 > $21 >>> 0) {
   if ($24) $42 = ($23 & 255) >>> 1; else $42 = HEAP32[$0 + ($index * 24 | 0) + 4 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($1, $21, $20 - $21 | 0, $42, 0, $42, $20, $29);
   break;
  }
  if ($24) $28 = $1 + 1 | 0; else $28 = HEAP32[$0 + ($index * 24 | 0) + 8 >> 2] | 0;
  _memmove($28 | 0, $29 | 0, $20 | 0) | 0;
  HEAP8[$28 + $20 >> 0] = 0;
  if (!(HEAP8[$1 >> 0] & 1)) {
   HEAP8[$1 >> 0] = $20 << 1;
   break;
  } else {
   HEAP32[$0 + ($index * 24 | 0) + 4 >> 2] = $20;
   break;
  }
 } while (0);
 $43 = $0 + ($index * 24 | 0) + 12 | 0;
 $44 = $value + 12 | 0;
 if (($43 | 0) == ($44 | 0)) {
  STACKTOP = sp;
  return 1;
 }
 $46 = HEAP8[$44 >> 0] | 0;
 if (!($46 & 1)) {
  $63 = ($46 & 255) >>> 1;
  $72 = $44 + 1 | 0;
 } else {
  $63 = HEAP32[$value + 16 >> 2] | 0;
  $72 = HEAP32[$value + 20 >> 2] | 0;
 }
 $56 = HEAP8[$43 >> 0] | 0;
 if (!($56 & 1)) {
  $64 = 10;
  $66 = $56;
 } else {
  $59 = HEAP32[$43 >> 2] | 0;
  $64 = ($59 & -2) + -1 | 0;
  $66 = $59 & 255;
 }
 $67 = ($66 & 1) == 0;
 if ($63 >>> 0 > $64 >>> 0) {
  if ($67) $85 = ($66 & 255) >>> 1; else $85 = HEAP32[$0 + ($index * 24 | 0) + 16 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($43, $64, $63 - $64 | 0, $85, 0, $85, $63, $72);
  STACKTOP = sp;
  return 1;
 }
 if ($67) $71 = $43 + 1 | 0; else $71 = HEAP32[$0 + ($index * 24 | 0) + 20 >> 2] | 0;
 _memmove($71 | 0, $72 | 0, $63 | 0) | 0;
 HEAP8[$71 + $63 >> 0] = 0;
 if (!(HEAP8[$43 >> 0] & 1)) {
  HEAP8[$43 >> 0] = $63 << 1;
  STACKTOP = sp;
  return 1;
 } else {
  HEAP32[$0 + ($index * 24 | 0) + 16 >> 2] = $63;
  STACKTOP = sp;
  return 1;
 }
 return 0;
}

function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $18 = 0, $20 = 0, $25 = 0, $27 = 0, $34 = 0, $35 = 0, $4 = 0, $47 = 0, $50 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $1 = ($0 | 0) == ($__a | 0);
 do if ($1) {
  $4 = (HEAP32[$__atoms + 96 >> 2] | 0) == ($__ct | 0);
  if (!$4) if ((HEAP32[$__atoms + 100 >> 2] | 0) != ($__ct | 0)) break;
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $4 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 $10 = HEAP8[$__grouping >> 0] | 0;
 if (!($10 & 1)) $18 = ($10 & 255) >>> 1; else $18 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (($18 | 0) != 0 & ($__ct | 0) == ($__thousands_sep | 0)) {
  $20 = HEAP32[$__g_end >> 2] | 0;
  if (($20 - $__g | 0) >= 160) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $25 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $20 + 4;
  HEAP32[$20 >> 2] = $25;
  HEAP32[$__dc >> 2] = 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $27 = $__atoms + 104 | 0;
 $$01$i = $__atoms;
 while (1) {
  if ((HEAP32[$$01$i >> 2] | 0) == ($__ct | 0)) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $$01$i = $$01$i + 4 | 0;
  if (($$01$i | 0) == ($27 | 0)) {
   $$0$lcssa$i = $27;
   break;
  }
 }
 $34 = $$0$lcssa$i - $__atoms | 0;
 $35 = $34 >> 2;
 if (($34 | 0) > 92) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($__base | 0) == 10 | ($__base | 0) == 8) {
  if (($35 | 0) >= ($__base | 0)) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if (($__base | 0) == 16) if (($34 | 0) >= 88) {
  if ($1) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($0 - $__a | 0) >= 3) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$__dc >> 2] = 0;
  $47 = HEAP8[49384 + $35 >> 0] | 0;
  HEAP32[$__a_end >> 2] = $0 + 1;
  HEAP8[$0 >> 0] = $47;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $50 = HEAP8[49384 + $35 >> 0] | 0;
 HEAP32[$__a_end >> 2] = $0 + 1;
 HEAP8[$0 >> 0] = $50;
 HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0$lcssa$i = 0, $$019$i = 0, $$1$lcssa$i = 0, $$110$i = 0, $$24$i = 0, $$3$i = 0, $$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $28 = 0, $3 = 0, $32 = 0, $39 = 0, $6 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, $s$0$lcssa$i = 0, $s$020$i = 0, $s$15$i = 0, $s$2$i = 0, $w$0$lcssa$i = 0, $w$011$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 84 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $len + 256 | 0;
 $3 = $1;
 $6 = ($2 | 0) != 0;
 L1 : do if (($3 & 3 | 0) != 0 & $6) {
  $$019$i = $2;
  $s$020$i = $1;
  while (1) {
   if (!(HEAP8[$s$020$i >> 0] | 0)) {
    $$3$i = $$019$i;
    $s$2$i = $s$020$i;
    break L1;
   }
   $9 = $s$020$i + 1 | 0;
   $10 = $$019$i + -1 | 0;
   $14 = ($10 | 0) != 0;
   if (($9 & 3 | 0) != 0 & $14) {
    $$019$i = $10;
    $s$020$i = $9;
   } else {
    $$0$lcssa$i = $10;
    $$lcssa$i = $14;
    $s$0$lcssa$i = $9;
    label = 4;
    break;
   }
  }
 } else {
  $$0$lcssa$i = $2;
  $$lcssa$i = $6;
  $s$0$lcssa$i = $1;
  label = 4;
 } while (0);
 L5 : do if ((label | 0) == 4) if ($$lcssa$i) if (!(HEAP8[$s$0$lcssa$i >> 0] | 0)) {
  $$3$i = $$0$lcssa$i;
  $s$2$i = $s$0$lcssa$i;
 } else {
  L9 : do if ($$0$lcssa$i >>> 0 > 3) {
   $$110$i = $$0$lcssa$i;
   $w$011$i = $s$0$lcssa$i;
   while (1) {
    $16 = HEAP32[$w$011$i >> 2] | 0;
    if (($16 & -2139062144 ^ -2139062144) & $16 + -16843009) {
     $$1$lcssa$i = $$110$i;
     $w$0$lcssa$i = $w$011$i;
     break L9;
    }
    $22 = $w$011$i + 4 | 0;
    $23 = $$110$i + -4 | 0;
    if ($23 >>> 0 > 3) {
     $$110$i = $23;
     $w$011$i = $22;
    } else {
     $$1$lcssa$i = $23;
     $w$0$lcssa$i = $22;
     break;
    }
   }
  } else {
   $$1$lcssa$i = $$0$lcssa$i;
   $w$0$lcssa$i = $s$0$lcssa$i;
  } while (0);
  if (!$$1$lcssa$i) {
   $$3$i = 0;
   $s$2$i = $w$0$lcssa$i;
  } else {
   $$24$i = $$1$lcssa$i;
   $s$15$i = $w$0$lcssa$i;
   while (1) {
    if (!(HEAP8[$s$15$i >> 0] | 0)) {
     $$3$i = $$24$i;
     $s$2$i = $s$15$i;
     break L5;
    }
    $28 = $s$15$i + 1 | 0;
    $$24$i = $$24$i + -1 | 0;
    if (!$$24$i) {
     $$3$i = 0;
     $s$2$i = $28;
     break;
    } else $s$15$i = $28;
   }
  }
 } else {
  $$3$i = 0;
  $s$2$i = $s$0$lcssa$i;
 } while (0);
 $32 = ($$3$i | 0) != 0 ? $s$2$i : 0;
 if (!$32) $k$0 = $2; else $k$0 = $32 - $3 | 0;
 $k$0$len = $k$0 >>> 0 < $len >>> 0 ? $k$0 : $len;
 _memcpy($buf | 0, $1 | 0, $k$0$len | 0) | 0;
 HEAP32[$f + 4 >> 2] = $1 + $k$0$len;
 $39 = $1 + $k$0 | 0;
 HEAP32[$f + 8 >> 2] = $39;
 HEAP32[$0 >> 2] = $39;
 STACKTOP = sp;
 return $k$0$len | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0$i = 0, $2 = 0, $27 = 0, $3 = 0, $61 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, sp = 0;
 sp = STACKTOP;
 L1 : do if ($frm >>> 0 < $frm_end >>> 0) {
  $2 = $to_end;
  $_frm_nxt$0 = $frm;
  $_to_nxt$0 = $to;
  while (1) {
   $3 = HEAP32[$_frm_nxt$0 >> 2] | 0;
   if (($3 & -2048 | 0) == 55296 | $3 >>> 0 > 1114111) {
    $$0$i = 2;
    $_frm_nxt$1 = $_frm_nxt$0;
    $_to_nxt$2 = $_to_nxt$0;
    break L1;
   }
   do if ($3 >>> 0 < 128) {
    if (($2 - $_to_nxt$0 | 0) < 1) {
     $$0$i = 1;
     $_frm_nxt$1 = $_frm_nxt$0;
     $_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    HEAP8[$_to_nxt$0 >> 0] = $3;
    $_to_nxt$1 = $_to_nxt$0 + 1 | 0;
   } else {
    if ($3 >>> 0 < 2048) {
     if (($2 - $_to_nxt$0 | 0) < 2) {
      $$0$i = 1;
      $_frm_nxt$1 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
     HEAP8[$_to_nxt$0 >> 0] = $3 >>> 6 | 192;
     HEAP8[$_to_nxt$0 + 1 >> 0] = $3 & 63 | 128;
     $_to_nxt$1 = $_to_nxt$0 + 2 | 0;
     break;
    }
    $27 = $2 - $_to_nxt$0 | 0;
    if ($3 >>> 0 < 65536) {
     if (($27 | 0) < 3) {
      $$0$i = 1;
      $_frm_nxt$1 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
     HEAP8[$_to_nxt$0 >> 0] = $3 >>> 12 | 224;
     HEAP8[$_to_nxt$0 + 1 >> 0] = $3 >>> 6 & 63 | 128;
     HEAP8[$_to_nxt$0 + 2 >> 0] = $3 & 63 | 128;
     $_to_nxt$1 = $_to_nxt$0 + 3 | 0;
     break;
    } else {
     if (($27 | 0) < 4) {
      $$0$i = 1;
      $_frm_nxt$1 = $_frm_nxt$0;
      $_to_nxt$2 = $_to_nxt$0;
      break L1;
     }
     HEAP8[$_to_nxt$0 >> 0] = $3 >>> 18 | 240;
     HEAP8[$_to_nxt$0 + 1 >> 0] = $3 >>> 12 & 63 | 128;
     HEAP8[$_to_nxt$0 + 2 >> 0] = $3 >>> 6 & 63 | 128;
     HEAP8[$_to_nxt$0 + 3 >> 0] = $3 & 63 | 128;
     $_to_nxt$1 = $_to_nxt$0 + 4 | 0;
     break;
    }
   } while (0);
   $61 = $_frm_nxt$0 + 4 | 0;
   if ($61 >>> 0 < $frm_end >>> 0) {
    $_frm_nxt$0 = $61;
    $_to_nxt$0 = $_to_nxt$1;
   } else {
    $$0$i = 0;
    $_frm_nxt$1 = $61;
    $_to_nxt$2 = $_to_nxt$1;
    break;
   }
  }
 } else {
  $$0$i = 0;
  $_frm_nxt$1 = $frm;
  $_to_nxt$2 = $to;
 } while (0);
 HEAP32[$frm_nxt >> 2] = $frm + ($_frm_nxt$1 - $frm >> 2 << 2);
 HEAP32[$to_nxt >> 2] = $to + ($_to_nxt$2 - $to);
 STACKTOP = sp;
 return $$0$i | 0;
}

function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__err = $__err | 0;
 var $$012$i$i = 0, $$lcssa6 = 0, $0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $17$phi = 0, $20 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $38 = 0, $47 = 0, $8 = 0, $__ig$011 = 0, $__r$012 = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping >> 0] | 0;
 if (!($0 & 1)) $8 = ($0 & 255) >>> 1; else $8 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!$8) {
  STACKTOP = sp;
  return;
 }
 if (($__g | 0) == ($__g_end | 0)) $20 = $0; else {
  $10 = $__g_end + -4 | 0;
  if ($10 >>> 0 > $__g >>> 0) {
   $$012$i$i = $__g;
   $14 = $10;
   $17 = $__g_end;
   while (1) {
    $12 = HEAP32[$$012$i$i >> 2] | 0;
    HEAP32[$$012$i$i >> 2] = HEAP32[$14 >> 2];
    HEAP32[$14 >> 2] = $12;
    $$012$i$i = $$012$i$i + 4 | 0;
    $16 = $17 + -8 | 0;
    if ($$012$i$i >>> 0 >= $16 >>> 0) break; else {
     $17$phi = $14;
     $14 = $16;
     $17 = $17$phi;
    }
   }
   $20 = HEAP8[$__grouping >> 0] | 0;
  } else $20 = $0;
 }
 if (!($20 & 1)) {
  $32 = $__grouping + 1 | 0;
  $35 = ($20 & 255) >>> 1;
 } else {
  $32 = HEAP32[$__grouping + 8 >> 2] | 0;
  $35 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 $29 = $__g_end + -4 | 0;
 $31 = HEAP8[$32 >> 0] | 0;
 $or$cond210 = $31 << 24 >> 24 < 1 | $31 << 24 >> 24 == 127;
 L18 : do if ($29 >>> 0 > $__g >>> 0) {
  $36 = $32 + $35 | 0;
  $38 = $31;
  $__ig$011 = $32;
  $__r$012 = $__g;
  $or$cond213 = $or$cond210;
  while (1) {
   if (!$or$cond213) if (($38 << 24 >> 24 | 0) != (HEAP32[$__r$012 >> 2] | 0)) break;
   $__ig$011 = ($36 - $__ig$011 | 0) > 1 ? $__ig$011 + 1 | 0 : $__ig$011;
   $__r$012 = $__r$012 + 4 | 0;
   $47 = HEAP8[$__ig$011 >> 0] | 0;
   $or$cond2 = $47 << 24 >> 24 < 1 | $47 << 24 >> 24 == 127;
   if ($__r$012 >>> 0 >= $29 >>> 0) {
    $$lcssa6 = $47;
    $or$cond2$lcssa = $or$cond2;
    break L18;
   } else {
    $38 = $47;
    $or$cond213 = $or$cond2;
   }
  }
  HEAP32[$__err >> 2] = 4;
  STACKTOP = sp;
  return;
 } else {
  $$lcssa6 = $31;
  $or$cond2$lcssa = $or$cond210;
 } while (0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;
  return;
 }
 if (((HEAP32[$29 >> 2] | 0) + -1 | 0) >>> 0 < $$lcssa6 << 24 >> 24 >>> 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$__err >> 2] = 4;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $33 = 0, $44 = 0, $6 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   STACKTOP = sp;
   return;
  }
  $6 = $info + 28 | 0;
  if ((HEAP32[$6 >> 2] | 0) == 1) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$6 >> 2] = $path_below;
  STACKTOP = sp;
  return;
 }
 if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
  $44 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$44 >> 2] | 0) + 24 >> 2] & 3]($44, $info, $current_ptr, $path_below, $use_strcmp);
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
  $14 = $info + 20 | 0;
  if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
   HEAP32[$info + 32 >> 2] = $path_below;
   $20 = $info + 44 | 0;
   if ((HEAP32[$20 >> 2] | 0) == 4) {
    STACKTOP = sp;
    return;
   }
   $23 = $info + 52 | 0;
   HEAP8[$23 >> 0] = 0;
   $24 = $info + 53 | 0;
   HEAP8[$24 >> 0] = 0;
   $26 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$26 >> 2] | 0) + 20 >> 2] & 15]($26, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
   if (!(HEAP8[$24 >> 0] | 0)) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else if (!(HEAP8[$23 >> 0] | 0)) {
    $is_dst_type_derived_from_static_type$0$off01 = 1;
    label = 13;
   }
   do if ((label | 0) == 13) {
    HEAP32[$14 >> 2] = $current_ptr;
    $33 = $info + 40 | 0;
    HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
     HEAP8[$info + 54 >> 0] = 1;
     if ($is_dst_type_derived_from_static_type$0$off01) break;
    } else label = 16; else label = 16;
    if ((label | 0) == 16) if ($is_dst_type_derived_from_static_type$0$off01) break;
    HEAP32[$20 >> 2] = 4;
    STACKTOP = sp;
    return;
   } while (0);
   HEAP32[$20 >> 2] = 3;
   STACKTOP = sp;
   return;
  }
 }
 if (($path_below | 0) != 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$info + 32 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $19 = 0, $26 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $ap2$i = 0, $b = 0, $f = 0, $internal_buf$i = 0, $nl_arg$i = 0, $nl_type$i = 0, $ret$1$i = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $ap2$i = sp + 232 | 0;
 $nl_type$i = sp + 192 | 0;
 $nl_arg$i = sp;
 $internal_buf$i = sp + 256 | 0;
 $b = sp + 248 | 0;
 $f = sp + 80 | 0;
 dest = $f + 0 | 0;
 src = 64432 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $$02 = 1;
  $5 = $b;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$02 = $n;
  $5 = $s;
 }
 $6 = -2 - $5 | 0;
 $$$02 = $$02 >>> 0 > $6 >>> 0 ? $6 : $$02;
 $8 = $f + 48 | 0;
 HEAP32[$8 >> 2] = $$$02;
 $9 = $f + 20 | 0;
 HEAP32[$9 >> 2] = $5;
 $10 = $f + 44 | 0;
 HEAP32[$10 >> 2] = $5;
 $11 = $5 + $$$02 | 0;
 $12 = $f + 16 | 0;
 HEAP32[$12 >> 2] = $11;
 $13 = $f + 28 | 0;
 HEAP32[$13 >> 2] = $11;
 dest = $nl_type$i + 0 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2$i >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2$i, $nl_arg$i, $nl_type$i) | 0) < 0) $$0$i = -1; else {
  if (!$$$02) {
   HEAP32[$10 >> 2] = $internal_buf$i;
   HEAP32[$13 >> 2] = $internal_buf$i;
   HEAP32[$9 >> 2] = $internal_buf$i;
   HEAP32[$8 >> 2] = 80;
   HEAP32[$12 >> 2] = $internal_buf$i + 80;
   $19 = _printf_core($f, $fmt, $ap2$i, $nl_arg$i, $nl_type$i) | 0;
   if (!$5) $ret$1$i = $19; else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
    $$$i = (HEAP32[$9 >> 2] | 0) == 0 ? -1 : $19;
    HEAP32[$10 >> 2] = $5;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$13 >> 2] = 0;
    HEAP32[$9 >> 2] = 0;
    $ret$1$i = $$$i;
   }
  } else $ret$1$i = _printf_core($f, $fmt, $ap2$i, $nl_arg$i, $nl_type$i) | 0;
  $$0$i = $ret$1$i;
 }
 if (!$$$02) {
  $$0 = $$0$i;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $26 = HEAP32[$9 >> 2] | 0;
 HEAP8[$26 + ((($26 | 0) == (HEAP32[$12 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
 $$0 = $$0$i;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10emscripten8internal7InvokerINSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEJNS2_12basic_stringIcNS2_11char_traitsIcEENS5_IcEEEEEE6invokeEPFS7_SC_EPNS0_11BindingTypeISC_EUt_E($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $$lcssa$i = 0, $$lcssa$i4 = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $31 = 0, $35 = 0, $37 = 0, $__p$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 $2 = $args + 4 | 0;
 $3 = HEAP32[$args >> 2] | 0;
 if ($3 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($3 >>> 0 < 11) {
  HEAP8[$1 >> 0] = $3 << 1;
  $__p$0$i = $1 + 1 | 0;
 } else {
  $10 = $3 + 16 & -16;
  $$size$i = ($10 | 0) == 0 ? 1 : $10;
  $12 = _malloc($$size$i) | 0;
  L6 : do if (!$12) {
   while (1) {
    $14 = HEAP32[15470] | 0;
    HEAP32[15470] = $14 + 0;
    if (!$14) break;
    FUNCTION_TABLE_v[$14 & 3]();
    $17 = _malloc($$size$i) | 0;
    if ($17) {
     $$lcssa$i = $17;
     break L6;
    }
   }
   $19 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$19 >> 2] = 61776;
   ___cxa_throw($19 | 0, 61824, 94);
  } else $$lcssa$i = $12; while (0);
  HEAP32[$1 + 8 >> 2] = $$lcssa$i;
  HEAP32[$1 >> 2] = $10 | 1;
  HEAP32[$1 + 4 >> 2] = $3;
  $__p$0$i = $$lcssa$i;
 }
 _memcpy($__p$0$i | 0, $2 | 0, $3 | 0) | 0;
 HEAP8[$__p$0$i + $3 >> 0] = 0;
 FUNCTION_TABLE_vii[$fn & 63]($0, $1);
 $24 = _malloc(12) | 0;
 L14 : do if (!$24) {
  while (1) {
   $26 = HEAP32[15470] | 0;
   HEAP32[15470] = $26 + 0;
   if (!$26) break;
   FUNCTION_TABLE_v[$26 & 3]();
   $29 = _malloc(12) | 0;
   if ($29) {
    $$lcssa$i4 = $29;
    break L14;
   }
  }
  $31 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$31 >> 2] = 61776;
  ___cxa_throw($31 | 0, 61824, 94);
 } else $$lcssa$i4 = $24; while (0);
 HEAP32[$$lcssa$i4 >> 2] = HEAP32[$0 >> 2];
 $35 = $0 + 4 | 0;
 HEAP32[$$lcssa$i4 + 4 >> 2] = HEAP32[$35 >> 2];
 $37 = $0 + 8 | 0;
 HEAP32[$$lcssa$i4 + 8 >> 2] = HEAP32[$37 >> 2];
 HEAP32[$37 >> 2] = 0;
 HEAP32[$35 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 if (!(HEAP8[$1 >> 0] & 1)) {
  STACKTOP = sp;
  return $$lcssa$i4 | 0;
 }
 _free(HEAP32[$1 + 8 >> 2] | 0);
 STACKTOP = sp;
 return $$lcssa$i4 | 0;
}

function __ZN18ReservedKeywordMap11in_word_setEPKcj($str, $len) {
 $str = $str | 0;
 $len = $len | 0;
 var $$0 = 0, $$014$i = 0, $$05$i = 0, $$lcssa$i = 0, $$lcssa2$i = 0, $23 = 0, $36 = 0, $38 = 0, $39 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $49$phi = 0, $50 = 0, $51 = 0, $51$phi = 0, $52 = 0, $53 = 0, $hval$0$i = 0, $hval$1$i = 0, $hval$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($len >>> 0 < 17 & ($len | 0) != 0) {
  if (($len | 0) == 1) $hval$2$i = 1; else if (($len | 0) == 4) {
   $hval$0$i = 4;
   label = 4;
  } else if (($len | 0) == 2 | ($len | 0) == 3) {
   $hval$1$i = $len;
   label = 5;
  } else {
   $hval$0$i = (HEAPU16[36128 + (HEAPU8[$str + 4 >> 0] << 1) >> 1] | 0) + $len | 0;
   label = 4;
  }
  if ((label | 0) == 4) {
   $hval$1$i = (HEAPU16[36128 + (HEAPU8[$str + 3 >> 0] << 1) >> 1] | 0) + $hval$0$i | 0;
   label = 5;
  }
  if ((label | 0) == 5) $hval$2$i = (HEAPU16[36128 + (HEAPU8[$str + 1 >> 0] << 1) >> 1] | 0) + $hval$1$i | 0;
  $23 = HEAP8[$str >> 0] | 0;
  $36 = (HEAPU16[36128 + (($23 & 255) << 1) >> 1] | 0) + $hval$2$i + (HEAPU16[36128 + (HEAPU8[$str + ($len + -1) >> 0] << 1) >> 1] | 0) | 0;
  if ($36 >>> 0 < 1263) {
   $38 = 3224 + ($36 * 24 | 0) | 0;
   $39 = HEAP32[$38 >> 2] | 0;
   if ($23 << 24 >> 24 == (HEAP8[$39 >> 0] | 0)) {
    $42 = $str + 1 | 0;
    $43 = $39 + 1 | 0;
    $44 = HEAP8[$42 >> 0] | 0;
    $45 = HEAP8[$43 >> 0] | 0;
    if ($44 << 24 >> 24 == 0 ? 1 : $44 << 24 >> 24 != $45 << 24 >> 24) {
     $$lcssa$i = $44;
     $$lcssa2$i = $45;
    } else {
     $$014$i = $42;
     $$05$i = $43;
     $49 = $str;
     $51 = $39;
     while (1) {
      $48 = $49 + 2 | 0;
      $50 = $51 + 2 | 0;
      $52 = HEAP8[$48 >> 0] | 0;
      $53 = HEAP8[$50 >> 0] | 0;
      if ($52 << 24 >> 24 == 0 ? 1 : $52 << 24 >> 24 != $53 << 24 >> 24) {
       $$lcssa$i = $52;
       $$lcssa2$i = $53;
       break;
      } else {
       $51$phi = $$05$i;
       $49$phi = $$014$i;
       $$014$i = $48;
       $$05$i = $50;
       $51 = $51$phi;
       $49 = $49$phi;
      }
     }
    }
    if ($$lcssa$i << 24 >> 24 == $$lcssa2$i << 24 >> 24) {
     $$0 = $38;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
  }
 }
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($first | 0) == ($last | 0)) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = HEAP8[$first >> 0] | 0;
 if (($2 | 0) == 88) {
  $3 = $first + 1 | 0;
  $4 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($3, $last, $db) | 0;
  if (($4 | 0) == ($3 | 0) | ($4 | 0) == ($last | 0)) {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $$0 = (HEAP8[$4 >> 0] | 0) == 69 ? $4 + 1 | 0 : $first;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($2 | 0) == 74) {
  $10 = $first + 1 | 0;
  if (($10 | 0) == ($last | 0)) {
   $$0 = $first;
   STACKTOP = sp;
   return $$0 | 0;
  } else $t$0 = $10;
  while (1) {
   if ((HEAP8[$t$0 >> 0] | 0) == 69) break;
   $14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($t$0, $last, $db) | 0;
   if (($14 | 0) == ($t$0 | 0)) {
    $$0 = $first;
    label = 15;
    break;
   } else $t$0 = $14;
  }
  if ((label | 0) == 15) {
   STACKTOP = sp;
   return $$0 | 0;
  }
  $$0 = $t$0 + 1 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($2 | 0) == 76) {
  $17 = $first + 1 | 0;
  if (($17 | 0) != ($last | 0)) if ((HEAP8[$17 >> 0] | 0) == 90) {
   $21 = $first + 2 | 0;
   $22 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($21, $last, $db) | 0;
   if (($22 | 0) == ($21 | 0) | ($22 | 0) == ($last | 0)) {
    $$0 = $first;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    STACKTOP = sp;
    return ((HEAP8[$22 >> 0] | 0) == 69 ? $22 + 1 | 0 : $first) | 0;
   }
  }
  $$0 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZN10emscripten8internal13MethodInvokerIM18CompilerLexerTokenFvNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEvPS2_JS9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_EUt_E($method, $wireThis, $args) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 $args = $args | 0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$lcssa$i = 0, $$size$i = 0, $0 = 0, $10 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $31 = 0, $9 = 0, $__p$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $$field = HEAPU8[$method >> 0] | HEAPU8[$method + 1 >> 0] << 8 | HEAPU8[$method + 2 >> 0] << 16 | HEAPU8[$method + 3 >> 0] << 24;
 $$index1 = $method + 4 | 0;
 $$field2 = HEAPU8[$$index1 >> 0] | HEAPU8[$$index1 + 1 >> 0] << 8 | HEAPU8[$$index1 + 2 >> 0] << 16 | HEAPU8[$$index1 + 3 >> 0] << 24;
 $2 = $wireThis + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) $31 = $$field; else $31 = HEAP32[(HEAP32[$2 >> 2] | 0) + $$field >> 2] | 0;
 $9 = $args + 4 | 0;
 $10 = HEAP32[$args >> 2] | 0;
 if ($10 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($10 >>> 0 < 11) {
  HEAP8[$0 >> 0] = $10 << 1;
  $__p$0$i = $0 + 1 | 0;
 } else {
  $17 = $10 + 16 & -16;
  $$size$i = ($17 | 0) == 0 ? 1 : $17;
  $19 = _malloc($$size$i) | 0;
  L10 : do if (!$19) {
   while (1) {
    $21 = HEAP32[15470] | 0;
    HEAP32[15470] = $21 + 0;
    if (!$21) break;
    FUNCTION_TABLE_v[$21 & 3]();
    $24 = _malloc($$size$i) | 0;
    if ($24) {
     $$lcssa$i = $24;
     break L10;
    }
   }
   $26 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$26 >> 2] = 61776;
   ___cxa_throw($26 | 0, 61824, 94);
  } else $$lcssa$i = $19; while (0);
  HEAP32[$0 + 8 >> 2] = $$lcssa$i;
  HEAP32[$0 >> 2] = $17 | 1;
  HEAP32[$0 + 4 >> 2] = $10;
  $__p$0$i = $$lcssa$i;
 }
 _memcpy($__p$0$i | 0, $9 | 0, $10 | 0) | 0;
 HEAP8[$__p$0$i + $10 >> 0] = 0;
 FUNCTION_TABLE_vii[$31 & 63]($2, $0);
 if (!(HEAP8[$0 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$0 + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $$014$i = 0, $$014$i3 = 0, $$023$i = 0, $$023$i4 = 0, $$05$i = 0, $$05$i2 = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $25 = 0, $29 = 0, $37 = 0, $38 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((1073741807 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if (!(HEAP8[$this >> 0] & 1)) $29 = $this + 4 | 0; else $29 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 536870887) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 2) $17 = 2; else $17 = $12 + 4 & -4;
 } else $17 = 1073741807;
 $18 = __Znwj($17 << 2) | 0;
 if ($__n_copy) {
  $$014$i = $__n_copy;
  $$023$i = $29;
  $$05$i = $18;
  while (1) {
   $$014$i = $$014$i + -1 | 0;
   HEAP32[$$05$i >> 2] = HEAP32[$$023$i >> 2];
   if (!$$014$i) break; else {
    $$023$i = $$023$i + 4 | 0;
    $$05$i = $$05$i + 4 | 0;
   }
  }
 }
 $25 = $__old_sz - $__n_del | 0;
 if (($25 | 0) != ($__n_copy | 0)) {
  $$014$i3 = $25 - $__n_copy | 0;
  $$023$i4 = $29 + ($__n_del + $__n_copy << 2) | 0;
  $$05$i2 = $18 + ($__n_add + $__n_copy << 2) | 0;
  while (1) {
   $$014$i3 = $$014$i3 + -1 | 0;
   HEAP32[$$05$i2 >> 2] = HEAP32[$$023$i4 >> 2];
   if (!$$014$i3) break; else {
    $$023$i4 = $$023$i4 + 4 | 0;
    $$05$i2 = $$05$i2 + 4 | 0;
   }
  }
 }
 if (($__old_cap | 0) == 1) {
  $37 = $this + 8 | 0;
  HEAP32[$37 >> 2] = $18;
  $38 = $17 | 1;
  HEAP32[$this >> 2] = $38;
  STACKTOP = sp;
  return;
 }
 _free($29);
 $37 = $this + 8 | 0;
 HEAP32[$37 >> 2] = $18;
 $38 = $17 | 1;
 HEAP32[$this >> 2] = $38;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this) {
 $this = $this | 0;
 var $0 = 0, $14 = 0, $18 = 0, $19 = 0, $22 = 0, $27 = 0, $29 = 0, $3 = 0, $7 = 0, $8 = 0, $__new_data$0 = 0, $__new_data$113 = 0, $__new_data$171420 = 0, $__now_long$0$off010 = 0, $__p$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $19 = 10;
  $7 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $19 = ($3 & -2) + -1 | 0;
  $7 = $3 & 255;
 }
 $8 = ($7 & 1) == 0;
 if ($8) $14 = ($7 & 255) >>> 1; else $14 = HEAP32[$this + 4 >> 2] | 0;
 if ($14 >>> 0 < 11) $18 = 10; else $18 = ($14 + 16 & -16) + -1 | 0;
 if (($18 | 0) == ($19 | 0)) {
  STACKTOP = sp;
  return;
 }
 do if (($18 | 0) == 10) {
  $27 = $this + 1 | 0;
  $29 = HEAP32[$this + 8 >> 2] | 0;
  if ($8) {
   _memcpy($27 | 0, $29 | 0, (($7 & 255) >>> 1) + 1 | 0) | 0;
   _free($29);
   label = 20;
  } else {
   $__new_data$113 = $27;
   $__now_long$0$off010 = 0;
   $__p$012 = $29;
   label = 18;
  }
 } else {
  $22 = $18 + 1 | 0;
  if ($18 >>> 0 > $19 >>> 0) $__new_data$0 = __Znwj($22) | 0; else $__new_data$0 = __Znwj($22) | 0;
  if ($8) {
   _memcpy($__new_data$0 | 0, $this + 1 | 0, (($7 & 255) >>> 1) + 1 | 0) | 0;
   $__new_data$171420 = $__new_data$0;
   label = 19;
   break;
  } else {
   $__new_data$113 = $__new_data$0;
   $__now_long$0$off010 = 1;
   $__p$012 = HEAP32[$this + 8 >> 2] | 0;
   label = 18;
   break;
  }
 } while (0);
 if ((label | 0) == 18) {
  _memcpy($__new_data$113 | 0, $__p$012 | 0, (HEAP32[$this + 4 >> 2] | 0) + 1 | 0) | 0;
  _free($__p$012);
  if ($__now_long$0$off010) {
   $__new_data$171420 = $__new_data$113;
   label = 19;
  } else label = 20;
 }
 if ((label | 0) == 19) {
  HEAP32[$this >> 2] = $18 + 1 | 1;
  HEAP32[$this + 4 >> 2] = $14;
  HEAP32[$this + 8 >> 2] = $__new_data$171420;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 20) {
  HEAP8[$this >> 0] = $14 << 1;
  STACKTOP = sp;
  return;
 }
}

function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$st = 0, $0 = 0, $11 = 0, $14 = 0, $2 = 0, $21 = 0, $23 = 0, $32 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $wc;
 $$st = ($st | 0) == 0 ? 58664 : $st;
 $2 = HEAP32[$$st >> 2] | 0;
 L1 : do if (!$src) {
  if (!$2) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else {
  if (!$wc) {
   HEAP32[$0 >> 2] = $0;
   $11 = $0;
  } else $11 = $wc;
  if (!$n) {
   $$0 = -2;
   STACKTOP = sp;
   return $$0 | 0;
  }
  do if (!$2) {
   $8 = HEAP8[$src >> 0] | 0;
   $9 = $8 & 255;
   if ($8 << 24 >> 24 > -1) {
    HEAP32[$11 >> 2] = $9;
    $$0 = $8 << 24 >> 24 != 0 & 1;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $14 = $9 + -194 | 0;
    if ($14 >>> 0 > 50) break L1;
    $$02 = $n + -1 | 0;
    $c$0 = HEAP32[58456 + ($14 << 2) >> 2] | 0;
    $s$0 = $src + 1 | 0;
    break;
   }
  } else {
   $$02 = $n;
   $c$0 = $2;
   $s$0 = $src;
  } while (0);
  L19 : do if (!$$02) $c$2 = $c$0; else {
   $21 = HEAP8[$s$0 >> 0] | 0;
   $23 = ($21 & 255) >>> 3;
   if (($23 + -16 | $23 + ($c$0 >> 26)) >>> 0 > 7) break L1; else {
    $$1 = $$02;
    $32 = $21;
    $c$1 = $c$0;
    $s$1 = $s$0;
   }
   while (1) {
    $s$1 = $s$1 + 1 | 0;
    $c$1 = ($32 & 255) + -128 | $c$1 << 6;
    $$1 = $$1 + -1 | 0;
    if (($c$1 | 0) >= 0) break;
    if (!$$1) {
     $c$2 = $c$1;
     break L19;
    }
    $32 = HEAP8[$s$1 >> 0] | 0;
    if (($32 & -64) << 24 >> 24 != -128) break L1;
   }
   HEAP32[$$st >> 2] = 0;
   HEAP32[$11 >> 2] = $c$1;
   $$0 = $n - $$1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  } while (0);
  HEAP32[$$st >> 2] = $c$2;
  $$0 = -2;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 HEAP32[$$st >> 2] = 0;
 HEAP32[(___errno_location() | 0) >> 2] = 84;
 $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$01$i = 0, $$01$i5 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $__ndflt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__ndflt = sp;
 HEAP32[$__ndflt + 0 >> 2] = 0;
 HEAP32[$__ndflt + 4 >> 2] = 0;
 HEAP32[$__ndflt + 8 >> 2] = 0;
 $0 = HEAP8[$__dflt >> 0] | 0;
 if (!($0 & 1)) {
  $11 = $__dflt + 1 | 0;
  $12 = ($0 & 255) >>> 1;
 } else {
  $11 = HEAP32[$__dflt + 8 >> 2] | 0;
  $12 = HEAP32[$__dflt + 4 >> 2] | 0;
 }
 $10 = $11 + $12 | 0;
 if ($11 >>> 0 < $10 >>> 0) {
  $$01$i5 = $11;
  do {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$$01$i5 >> 0] | 0);
   $$01$i5 = $$01$i5 + 1 | 0;
  } while (($$01$i5 | 0) != ($10 | 0));
  $23 = ($__c | 0) == -1 ? -1 : $__c << 1;
  if (!(HEAP8[$__ndflt >> 0] & 1)) {
   $40 = $23;
   label = 9;
  } else {
   $27 = $23;
   $28 = HEAP32[$__ndflt + 8 >> 2] | 0;
  }
 } else {
  $40 = ($__c | 0) == -1 ? -1 : $__c << 1;
  label = 9;
 }
 if ((label | 0) == 9) {
  $27 = $40;
  $28 = $__ndflt + 1 | 0;
 }
 $29 = _catgets($27 | 0, $__set | 0, $__msgid | 0, $28 | 0) | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $30 = _strlen($29 | 0) | 0;
 $31 = $29 + $30 | 0;
 if (($30 | 0) > 0) {
  $$01$i = $29;
  do {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, HEAP8[$$01$i >> 0] | 0);
   $$01$i = $$01$i + 1 | 0;
  } while (($$01$i | 0) != ($31 | 0));
 }
 if (!(HEAP8[$__ndflt >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__ndflt + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if (HEAP8[51136] | 0) {
  $8 = HEAP32[12782] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(___cxa_guard_acquire(51136) | 0)) {
  $8 = HEAP32[12782] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(HEAP8[58304] | 0)) if (___cxa_guard_acquire(58304) | 0) {
  _memset(58136, 0, 168) | 0;
  ___cxa_atexit(115, 0, ___dso_handle | 0) | 0;
  ___cxa_guard_release(58304);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58136, 58312, 6);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58148, 58320, 6);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58160, 58328, 7);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58172, 58336, 9);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58184, 58352, 8);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58196, 58368, 6);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58208, 58376, 8);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58220, 58392, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58232, 58400, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58244, 58408, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58256, 58416, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58268, 58424, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58280, 58432, 3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(58292, 58440, 3);
 HEAP32[12782] = 58136;
 ___cxa_guard_release(51136);
 $8 = HEAP32[12782] | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result, $this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$0$i$i$i$i = 0, $$01$i$i = 0, $10 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $32 = 0, $33 = 0, $4 = 0, $9 = 0, $__nar = 0, $__nar$i = 0, $__nb$i = 0, $__ne$i = 0, $mb$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 $__nar$i = sp + 416 | 0;
 $__ne$i = sp + 412 | 0;
 $mb$i = sp;
 $__nb$i = sp + 408 | 0;
 $__nar = sp + 8 | 0;
 $2 = $this + 8 | 0;
 HEAP32[$__ne$i >> 2] = $__nar$i + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($2, $__nar$i, $__ne$i, $__tm, $__fmt, $__mod);
 $4 = $mb$i;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$__nb$i >> 2] = $__nar$i;
 $9 = _uselocale(HEAP32[$2 >> 2] | 0) | 0;
 $10 = _mbsrtowcs($__nar, $__nb$i, 100, $mb$i) | 0;
 if ($9) _uselocale($9 | 0) | 0;
 if (($10 | 0) == -1) __ZNSt3__121__throw_runtime_errorEPKc(51672);
 $13 = $__nar + ($10 << 2) | 0;
 $14 = HEAP32[$__s >> 2] | 0;
 if (!$10) {
  $32 = $14;
  HEAP32[$agg$result >> 2] = $32;
  STACKTOP = sp;
  return;
 } else {
  $$01$i$i = $__nar;
  $18 = $14;
 }
 while (1) {
  $16 = HEAP32[$$01$i$i >> 2] | 0;
  if (!$18) $33 = 0; else {
   $19 = $18 + 24 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$18 + 28 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$18 >> 2] | 0) + 52 >> 2] & 31]($18, $16) | 0; else {
    HEAP32[$19 >> 2] = $20 + 4;
    HEAP32[$20 >> 2] = $16;
    $$0$i$i$i$i = $16;
   }
   $33 = ($$0$i$i$i$i | 0) == -1 ? 0 : $18;
  }
  $$01$i$i = $$01$i$i + 4 | 0;
  if (($$01$i$i | 0) == ($13 | 0)) {
   $32 = $33;
   break;
  } else $18 = $33;
 }
 HEAP32[$agg$result >> 2] = $32;
 STACKTOP = sp;
 return;
}

function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $__s$0, $__ob, $__op, $__oe, $__iob, $__fl) {
 $agg$result = $agg$result | 0;
 $__s$0 = $__s$0 | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $28 = 0, $4 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__sp = sp;
 if (!$__s$0) {
  HEAP32[$agg$result >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $1 = $__oe;
 $2 = $__ob;
 $4 = $1 - $2 >> 2;
 $5 = $__iob + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $__ns$0 = ($6 | 0) > ($4 | 0) ? $6 - $4 | 0 : 0;
 $9 = $__op;
 $10 = $9 - $2 | 0;
 $11 = $10 >> 2;
 if (($10 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__s$0 >> 2] | 0) + 48 >> 2] & 31]($__s$0, $__ob, $11) | 0) != ($11 | 0)) {
  HEAP32[$agg$result >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 do if (($__ns$0 | 0) > 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp, $__ns$0, $__fl);
  if (!(HEAP8[$__sp >> 0] & 1)) $28 = $__sp + 4 | 0; else $28 = HEAP32[$__sp + 8 >> 2] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__s$0 >> 2] | 0) + 48 >> 2] & 31]($__s$0, $28, $__ns$0) | 0) == ($__ns$0 | 0)) {
   if (!(HEAP8[$__sp >> 0] & 1)) break;
   _free(HEAP32[$__sp + 8 >> 2] | 0);
   break;
  }
  HEAP32[$agg$result >> 2] = 0;
  if (!(HEAP8[$__sp >> 0] & 1)) {
   STACKTOP = sp;
   return;
  }
  _free(HEAP32[$__sp + 8 >> 2] | 0);
  STACKTOP = sp;
  return;
 } while (0);
 $41 = $1 - $9 | 0;
 $42 = $41 >> 2;
 if (($41 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__s$0 >> 2] | 0) + 48 >> 2] & 31]($__s$0, $__op, $42) | 0) != ($42 | 0)) {
  HEAP32[$agg$result >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 HEAP32[$5 >> 2] = 0;
 HEAP32[$agg$result >> 2] = $__s$0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if (!(HEAP8[$this >> 0] & 1)) $19 = $this + 1 | 0; else $19 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 11) $16 = 11; else $16 = $12 + 16 & -16;
 } else $16 = -17;
 $17 = _malloc($16) | 0;
 if ($__n_copy) _memcpy($17 | 0, $19 | 0, $__n_copy | 0) | 0;
 if ($__n_add) _memcpy($17 + $__n_copy | 0, $__p_new_stuff | 0, $__n_add | 0) | 0;
 $22 = $__old_sz - $__n_del | 0;
 if (($22 | 0) != ($__n_copy | 0)) _memcpy($17 + ($__n_add + $__n_copy) | 0, $19 + ($__n_del + $__n_copy) | 0, $22 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) == 10) {
  $28 = $this + 8 | 0;
  HEAP32[$28 >> 2] = $17;
  $29 = $16 | 1;
  HEAP32[$this >> 2] = $29;
  $30 = $22 + $__n_add | 0;
  $31 = $this + 4 | 0;
  HEAP32[$31 >> 2] = $30;
  $32 = $17 + $30 | 0;
  HEAP8[$32 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 _free($19);
 $28 = $this + 8 | 0;
 HEAP32[$28 >> 2] = $17;
 $29 = $16 | 1;
 HEAP32[$this >> 2] = $29;
 $30 = $22 + $__n_add | 0;
 $31 = $this + 4 | 0;
 HEAP32[$31 >> 2] = $30;
 $32 = $17 + $30 | 0;
 HEAP8[$32 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if (HEAP8[51152] | 0) {
  $8 = HEAP32[12786] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(___cxa_guard_acquire(51152) | 0)) {
  $8 = HEAP32[12786] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(HEAP8[57768] | 0)) if (___cxa_guard_acquire(57768) | 0) {
  _memset(57600, 0, 168) | 0;
  ___cxa_atexit(116, 0, ___dso_handle | 0) | 0;
  ___cxa_guard_release(57768);
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57600, 57776);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57612, 57808);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57624, 57840);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57636, 57872);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57648, 57912);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57660, 57952);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57672, 57984);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57684, 58024);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57696, 58040);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57708, 58056);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57720, 58072);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57732, 58088);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57744, 58104);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57756, 58120);
 HEAP32[12786] = 57600;
 ___cxa_guard_release(51152);
 $8 = HEAP32[12786] | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNSt3__111__stdoutbufIcE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $27 = 0, $31 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 $0 = ($__c | 0) == -1;
 L1 : do if (!$0) {
  HEAP8[$__1buf >> 0] = $__c;
  if (HEAP8[$this + 44 >> 0] | 0) {
   if ((_fwrite($__1buf | 0, 1, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) break; else $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $9 = $__1buf + 1 | 0;
  $10 = $this + 36 | 0;
  $11 = $this + 40 | 0;
  $12 = $__extbuf + 8 | 0;
  $13 = $__extbuf;
  $14 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $15 = HEAP32[$10 >> 2] | 0;
   $20 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 12 >> 2] & 15]($15, HEAP32[$11 >> 2] | 0, $pbase$0, $9, $__e, $__extbuf, $12, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    $$0 = -1;
    label = 12;
    break;
   }
   if (($20 | 0) == 3) {
    label = 7;
    break;
   }
   $27 = ($20 | 0) == 1;
   if ($20 >>> 0 >= 2) {
    $$0 = -1;
    label = 12;
    break;
   }
   $31 = (HEAP32[$__extbe >> 2] | 0) - $13 | 0;
   if ((_fwrite($__extbuf | 0, 1, $31 | 0, HEAP32[$14 >> 2] | 0) | 0) != ($31 | 0)) {
    $$0 = -1;
    label = 12;
    break;
   }
   if ($27) $pbase$0 = $27 ? HEAP32[$__e >> 2] | 0 : $pbase$0; else break L1;
  }
  if ((label | 0) == 7) {
   if ((_fwrite($pbase$0 | 0, 1, 1, HEAP32[$14 >> 2] | 0) | 0) == 1) break; else $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  } else if ((label | 0) == 12) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 $$0 = $0 ? 0 : $__c;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__111__stdoutbufIwE8overflowEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $26 = 0, $30 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 $0 = ($__c | 0) == -1;
 L1 : do if (!$0) {
  HEAP32[$__1buf >> 2] = $__c;
  if (HEAP8[$this + 44 >> 0] | 0) {
   if ((_fwrite($__1buf | 0, 4, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) break; else $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $8 = $__1buf + 4 | 0;
  $9 = $this + 36 | 0;
  $10 = $this + 40 | 0;
  $11 = $__extbuf + 8 | 0;
  $12 = $__extbuf;
  $13 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $14 = HEAP32[$9 >> 2] | 0;
   $19 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] & 15]($14, HEAP32[$10 >> 2] | 0, $pbase$0, $8, $__e, $__extbuf, $11, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    $$0 = -1;
    label = 12;
    break;
   }
   if (($19 | 0) == 3) {
    label = 7;
    break;
   }
   $26 = ($19 | 0) == 1;
   if ($19 >>> 0 >= 2) {
    $$0 = -1;
    label = 12;
    break;
   }
   $30 = (HEAP32[$__extbe >> 2] | 0) - $12 | 0;
   if ((_fwrite($__extbuf | 0, 1, $30 | 0, HEAP32[$13 >> 2] | 0) | 0) != ($30 | 0)) {
    $$0 = -1;
    label = 12;
    break;
   }
   if ($26) $pbase$0 = $26 ? HEAP32[$__e >> 2] | 0 : $pbase$0; else break L1;
  }
  if ((label | 0) == 7) {
   if ((_fwrite($pbase$0 | 0, 1, 1, HEAP32[$13 >> 2] | 0) | 0) == 1) break; else $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  } else if ((label | 0) == 12) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 $$0 = $0 ? 0 : $__c;
 STACKTOP = sp;
 return $$0 | 0;
}

function ___dynamic_cast($static_ptr, $dst_type) {
 $static_ptr = $static_ptr | 0;
 $dst_type = $dst_type | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $27 = 0, $4 = 0, $6 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $4 = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $6 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = 62296;
 $9 = $info + 12 | 0;
 $10 = $info + 16 | 0;
 $11 = $info + 20 | 0;
 $12 = $info + 24 | 0;
 $13 = $info + 28 | 0;
 $14 = $info + 32 | 0;
 $15 = $info + 40 | 0;
 $16 = ($6 | 0) == ($dst_type | 0);
 dest = $9 + 0 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9 + 40 >> 1] = 0;
 HEAP8[$9 + 42 >> 0] = 0;
 if ($16) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] & 15]($6, $info, $4, $4, 1, 0);
  $dst_ptr$0 = (HEAP32[$12 >> 2] | 0) == 1 ? $4 : 0;
  STACKTOP = sp;
  return $dst_ptr$0 | 0;
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] & 3]($6, $info, $4, 1, 0);
 $27 = HEAP32[$info + 36 >> 2] | 0;
 if (($27 | 0) == 1) {
  if ((HEAP32[$12 >> 2] | 0) != 1) if (!((HEAP32[$15 >> 2] | 0) == 0 & (HEAP32[$13 >> 2] | 0) == 1 & (HEAP32[$14 >> 2] | 0) == 1)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;
   return $dst_ptr$0 | 0;
  }
  $dst_ptr$0 = HEAP32[$10 >> 2] | 0;
  STACKTOP = sp;
  return $dst_ptr$0 | 0;
 } else if (!$27) {
  $dst_ptr$0 = (HEAP32[$15 >> 2] | 0) == 1 & (HEAP32[$13 >> 2] | 0) == 1 & (HEAP32[$14 >> 2] | 0) == 1 ? HEAP32[$11 >> 2] | 0 : 0;
  STACKTOP = sp;
  return $dst_ptr$0 | 0;
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;
  return $dst_ptr$0 | 0;
 }
 return 0;
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev() {
 var sp = 0;
 sp = STACKTOP;
 __embind_register_void(62648, 44880);
 __embind_register_bool(62680, 44888, 1, 1, 0);
 __embind_register_integer(62696, 60752, 1, -128, 127);
 __embind_register_integer(62728, 60760, 1, -128, 127);
 __embind_register_integer(62712, 60776, 1, 0, 255);
 __embind_register_integer(62736, 60792, 2, -32768, 32767);
 __embind_register_integer(62752, 60800, 2, 0, 65535);
 __embind_register_integer(62768, 61064, 4, -2147483648, 2147483647);
 __embind_register_integer(62784, 61072, 4, 0, -1);
 __embind_register_integer(62792, 44896, 4, -2147483648, 2147483647);
 __embind_register_integer(62800, 61088, 4, 0, -1);
 __embind_register_float(62816, 61144, 4);
 __embind_register_float(62832, 61152, 8);
 __embind_register_std_string(432, 60304);
 __embind_register_std_string(46272, 44904);
 __embind_register_std_wstring(46184, 4, 44944);
 __embind_register_emval(608, 44960);
 __embind_register_memory_view(46112, 0, 44976);
 __embind_register_memory_view(46072, 0, 45008);
 __embind_register_memory_view(46032, 1, 45048);
 __embind_register_memory_view(45992, 2, 45088);
 __embind_register_memory_view(45952, 3, 45120);
 __embind_register_memory_view(45912, 4, 45160);
 __embind_register_memory_view(45872, 5, 45192);
 __embind_register_memory_view(45832, 4, 45232);
 __embind_register_memory_view(45792, 5, 45264);
 __embind_register_memory_view(46072, 0, 45304);
 __embind_register_memory_view(46032, 1, 45336);
 __embind_register_memory_view(45992, 2, 45376);
 __embind_register_memory_view(45952, 3, 45416);
 __embind_register_memory_view(45912, 4, 45456);
 __embind_register_memory_view(45872, 5, 45496);
 __embind_register_memory_view(45752, 6, 45536);
 __embind_register_memory_view(45712, 7, 45568);
 __embind_register_memory_view(45672, 7, 45600);
 STACKTOP = sp;
 return;
}

function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $__s$0, $__ob, $__op, $__oe, $__iob, $__fl) {
 $agg$result = $agg$result | 0;
 $__s$0 = $__s$0 | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $1 = 0, $2 = 0, $26 = 0, $3 = 0, $39 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__sp = sp;
 if (!$__s$0) {
  HEAP32[$agg$result >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $1 = $__oe;
 $2 = $__ob;
 $3 = $1 - $2 | 0;
 $4 = $__iob + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $__ns$0 = ($5 | 0) > ($3 | 0) ? $5 - $3 | 0 : 0;
 $8 = $__op;
 $9 = $8 - $2 | 0;
 if (($9 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__s$0 >> 2] | 0) + 48 >> 2] & 31]($__s$0, $__ob, $9) | 0) != ($9 | 0)) {
  HEAP32[$agg$result >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 do if (($__ns$0 | 0) > 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp, $__ns$0, $__fl);
  if (!(HEAP8[$__sp >> 0] & 1)) $26 = $__sp + 1 | 0; else $26 = HEAP32[$__sp + 8 >> 2] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__s$0 >> 2] | 0) + 48 >> 2] & 31]($__s$0, $26, $__ns$0) | 0) == ($__ns$0 | 0)) {
   if (!(HEAP8[$__sp >> 0] & 1)) break;
   _free(HEAP32[$__sp + 8 >> 2] | 0);
   break;
  }
  HEAP32[$agg$result >> 2] = 0;
  if (!(HEAP8[$__sp >> 0] & 1)) {
   STACKTOP = sp;
   return;
  }
  _free(HEAP32[$__sp + 8 >> 2] | 0);
  STACKTOP = sp;
  return;
 } while (0);
 $39 = $1 - $8 | 0;
 if (($39 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__s$0 >> 2] | 0) + 48 >> 2] & 31]($__s$0, $__op, $39) | 0) != ($39 | 0)) {
  HEAP32[$agg$result >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 HEAP32[$4 >> 2] = 0;
 HEAP32[$agg$result >> 2] = $__s$0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $$0$i = 0, $$014$i$i$i = 0, $$023$i$i$i = 0, $$05$i$i$i = 0, $10 = 0, $14 = 0, $16 = 0, $21 = 0, $38 = 0, $40 = 0, $45 = 0, $46 = 0, $5 = 0, $54 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = $__s;
 while (1) if (!(HEAP32[$$0$i >> 2] | 0)) break; else $$0$i = $$0$i + 4 | 0;
 $5 = $$0$i - $__s | 0;
 $6 = $5 >> 2;
 $7 = HEAP8[$this >> 0] | 0;
 if (!($7 & 1)) {
  $14 = 1;
  $16 = $7;
 } else {
  $10 = HEAP32[$this >> 2] | 0;
  $14 = ($10 & -2) + -1 | 0;
  $16 = $10 & 255;
 }
 if ($6 >>> 0 <= $14 >>> 0) {
  if (!($16 & 1)) $21 = $this + 4 | 0; else $21 = HEAP32[$this + 8 >> 2] | 0;
  _wmemmove($21, $__s, $6);
  HEAP32[$21 + ($6 << 2) >> 2] = 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $5 >>> 1;
   STACKTOP = sp;
   return;
  } else {
   HEAP32[$this + 4 >> 2] = $6;
   STACKTOP = sp;
   return;
  }
 }
 if ((1073741806 - $14 | 0) >>> 0 < ($6 - $14 | 0) >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if (!($16 & 1)) $54 = $this + 4 | 0; else $54 = HEAP32[$this + 8 >> 2] | 0;
 if ($14 >>> 0 < 536870887) {
  $38 = $14 << 1;
  $40 = $6 >>> 0 < $38 >>> 0 ? $38 : $6;
  if ($40 >>> 0 < 2) $45 = 2; else $45 = $40 + 4 & -4;
 } else $45 = 1073741807;
 $46 = __Znwj($45 << 2) | 0;
 if ($6) {
  $$014$i$i$i = $6;
  $$023$i$i$i = $__s;
  $$05$i$i$i = $46;
  while (1) {
   $$014$i$i$i = $$014$i$i$i + -1 | 0;
   HEAP32[$$05$i$i$i >> 2] = HEAP32[$$023$i$i$i >> 2];
   if (!$$014$i$i$i) break; else {
    $$023$i$i$i = $$023$i$i$i + 4 | 0;
    $$05$i$i$i = $$05$i$i$i + 4 | 0;
   }
  }
 }
 if (($14 | 0) != 1) _free($54);
 HEAP32[$this + 8 >> 2] = $46;
 HEAP32[$this >> 2] = $45 | 1;
 HEAP32[$this + 4 >> 2] = $6;
 HEAP32[$46 + ($6 << 2) >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if (!(HEAP8[$this >> 0] & 1)) $19 = $this + 1 | 0; else $19 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 11) $16 = 11; else $16 = $12 + 16 & -16;
 } else $16 = -17;
 $17 = __Znwj($16) | 0;
 if ($__n_copy) _memcpy($17 | 0, $19 | 0, $__n_copy | 0) | 0;
 if ($__n_add) _memcpy($17 + $__n_copy | 0, $__p_new_stuff | 0, $__n_add | 0) | 0;
 $22 = $__old_sz - $__n_del | 0;
 if (($22 | 0) != ($__n_copy | 0)) _memcpy($17 + ($__n_add + $__n_copy) | 0, $19 + ($__n_del + $__n_copy) | 0, $22 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) == 10) {
  $28 = $this + 8 | 0;
  HEAP32[$28 >> 2] = $17;
  $29 = $16 | 1;
  HEAP32[$this >> 2] = $29;
  $30 = $22 + $__n_add | 0;
  $31 = $this + 4 | 0;
  HEAP32[$31 >> 2] = $30;
  $32 = $17 + $30 | 0;
  HEAP8[$32 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 _free($19);
 $28 = $this + 8 | 0;
 HEAP32[$28 >> 2] = $17;
 $29 = $16 | 1;
 HEAP32[$this >> 2] = $29;
 $30 = $22 + $__n_add | 0;
 $31 = $this + 4 | 0;
 HEAP32[$31 >> 2] = $30;
 $32 = $17 + $30 | 0;
 HEAP8[$32 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $p$0 = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below);
  STACKTOP = sp;
  return;
 }
 $3 = $info + 52 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $info + 53 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $9 = HEAP32[$this + 12 >> 2] | 0;
 $10 = $this + ($9 << 3) + 16 | 0;
 HEAP8[$3 >> 0] = 0;
 HEAP8[$5 >> 0] = 0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 L5 : do if (($9 | 0) > 1) {
  $13 = $info + 24 | 0;
  $14 = $this + 8 | 0;
  $15 = $info + 54 | 0;
  $p$0 = $this + 24 | 0;
  do {
   if (HEAP8[$15 >> 0] | 0) break L5;
   if (!(HEAP8[$3 >> 0] | 0)) {
    if (HEAP8[$5 >> 0] | 0) if (!(HEAP32[$14 >> 2] & 1)) break L5;
   } else {
    if ((HEAP32[$13 >> 2] | 0) == 1) break L5;
    if (!(HEAP32[$14 >> 2] & 2)) break L5;
   }
   HEAP8[$3 >> 0] = 0;
   HEAP8[$5 >> 0] = 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
   $p$0 = $p$0 + 8 | 0;
  } while ($p$0 >>> 0 < $10 >>> 0);
 } while (0);
 HEAP8[$3 >> 0] = $4;
 HEAP8[$5 >> 0] = $6;
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$01$i = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0, $$01$i$looptemp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $this + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $__v + 4 | 0;
 $$pre1 = HEAP32[$3 >> 2] | 0;
 if (($2 | 0) == ($0 | 0)) {
  $21 = $$pre1;
  $22 = $0;
 } else {
  $$01$i = $2;
  $7 = $$pre1;
  do {
   $$01$i$looptemp = $$01$i;
   $$01$i = $$01$i + -16 | 0;
   $6 = $7 + -16 | 0;
   HEAP32[$6 >> 2] = 0;
   $8 = $7 + -12 | 0;
   HEAP32[$8 >> 2] = 0;
   $10 = HEAP32[$$01$i$looptemp + -4 >> 2] | 0;
   $11 = $7 + -8 | 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$7 + -4 >> 2] = $10;
   HEAP32[$6 >> 2] = HEAP32[$$01$i >> 2];
   $14 = $$01$i$looptemp + -12 | 0;
   HEAP32[$8 >> 2] = HEAP32[$14 >> 2];
   $16 = $$01$i$looptemp + -8 | 0;
   HEAP32[$11 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$16 >> 2] = 0;
   HEAP32[$14 >> 2] = 0;
   HEAP32[$$01$i >> 2] = 0;
   $7 = (HEAP32[$3 >> 2] | 0) + -16 | 0;
   HEAP32[$3 >> 2] = $7;
  } while (($$01$i | 0) != ($0 | 0));
  $21 = $7;
  $22 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$this >> 2] = $21;
 HEAP32[$3 >> 2] = $22;
 $23 = $__v + 8 | 0;
 $24 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$23 >> 2];
 HEAP32[$23 >> 2] = $24;
 $26 = $this + 8 | 0;
 $27 = $__v + 12 | 0;
 $28 = HEAP32[$26 >> 2] | 0;
 HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$27 >> 2] = $28;
 HEAP32[$__v >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $21 = 0, $23 = 0, $3 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $args = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $args = sp;
 if (($first | 0) == ($last | 0)) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 if (($1 | 0) == ($first | 0)) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($1, $last, $db) | 0;
 if (($3 | 0) == ($1 | 0)) {
  $$0 = $1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = $db + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if ((($6 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
  $$0 = $first;
  STACKTOP = sp;
  return $$0 | 0;
 }
 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $6 + -24 | 0);
 $14 = HEAP32[$5 >> 2] | 0;
 $15 = $14 + -24 | 0;
 $17 = $14;
 do {
  $16 = $17 + -24 | 0;
  HEAP32[$5 >> 2] = $16;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
  $17 = HEAP32[$5 >> 2] | 0;
 } while (($17 | 0) != ($15 | 0));
 $21 = HEAP8[$args >> 0] | 0;
 $23 = ($21 & 1) == 0;
 if ($23) {
  $31 = $args + 1 | 0;
  $32 = ($21 & 255) >>> 1;
 } else {
  $31 = HEAP32[$args + 8 >> 2] | 0;
  $32 = HEAP32[$args + 4 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($14 + -48 | 0, $31, $32) | 0;
 if ($23) {
  $$0 = $3;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _free(HEAP32[$args + 8 >> 2] | 0);
 $$0 = $3;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$01$i = 0, $$pre1 = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0, $$01$i$looptemp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $this + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $__v + 4 | 0;
 $$pre1 = HEAP32[$3 >> 2] | 0;
 if (($2 | 0) == ($0 | 0)) {
  $13 = $$pre1;
  $14 = $0;
 } else {
  $$01$i = $2;
  $6 = $$pre1;
  do {
   $5 = $6 + -24 | 0;
   $$01$i$looptemp = $$01$i;
   $$01$i = $$01$i + -24 | 0;
   HEAP32[$5 + 0 >> 2] = HEAP32[$$01$i + 0 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$$01$i + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$$01$i + 8 >> 2];
   HEAP32[$$01$i + 0 >> 2] = 0;
   HEAP32[$$01$i + 4 >> 2] = 0;
   HEAP32[$$01$i + 8 >> 2] = 0;
   $8 = $6 + -12 | 0;
   $9 = $$01$i$looptemp + -12 | 0;
   HEAP32[$8 + 0 >> 2] = HEAP32[$9 + 0 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$9 + 0 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   HEAP32[$9 + 8 >> 2] = 0;
   $6 = (HEAP32[$3 >> 2] | 0) + -24 | 0;
   HEAP32[$3 >> 2] = $6;
  } while (($$01$i | 0) != ($0 | 0));
  $13 = $6;
  $14 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$this >> 2] = $13;
 HEAP32[$3 >> 2] = $14;
 $15 = $__v + 8 | 0;
 $16 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$15 >> 2] = $16;
 $18 = $this + 8 | 0;
 $19 = $__v + 12 | 0;
 $20 = HEAP32[$18 >> 2] | 0;
 HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$19 >> 2] = $20;
 HEAP32[$__v >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$01$i = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0, $$01$i$looptemp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $this + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $__v + 4 | 0;
 $$pre1 = HEAP32[$3 >> 2] | 0;
 if (($2 | 0) == ($0 | 0)) {
  $21 = $$pre1;
  $22 = $0;
 } else {
  $$01$i = $2;
  $7 = $$pre1;
  do {
   $$01$i$looptemp = $$01$i;
   $$01$i = $$01$i + -16 | 0;
   $6 = $7 + -16 | 0;
   HEAP32[$6 >> 2] = 0;
   $8 = $7 + -12 | 0;
   HEAP32[$8 >> 2] = 0;
   $10 = HEAP32[$$01$i$looptemp + -4 >> 2] | 0;
   $11 = $7 + -8 | 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$7 + -4 >> 2] = $10;
   HEAP32[$6 >> 2] = HEAP32[$$01$i >> 2];
   $14 = $$01$i$looptemp + -12 | 0;
   HEAP32[$8 >> 2] = HEAP32[$14 >> 2];
   $16 = $$01$i$looptemp + -8 | 0;
   HEAP32[$11 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$16 >> 2] = 0;
   HEAP32[$14 >> 2] = 0;
   HEAP32[$$01$i >> 2] = 0;
   $7 = (HEAP32[$3 >> 2] | 0) + -16 | 0;
   HEAP32[$3 >> 2] = $7;
  } while (($$01$i | 0) != ($0 | 0));
  $21 = $7;
  $22 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$this >> 2] = $21;
 HEAP32[$3 >> 2] = $22;
 $23 = $__v + 8 | 0;
 $24 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$23 >> 2];
 HEAP32[$23 >> 2] = $24;
 $26 = $this + 8 | 0;
 $27 = $__v + 12 | 0;
 $28 = HEAP32[$26 >> 2] | 0;
 HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$27 >> 2] = $28;
 HEAP32[$__v >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp, $__len, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__flags = $__flags | 0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $11 = 0, $14 = 0, $15 = 0, $23 = 0, $6 = 0, $7 = 0, $8 = 0, $specify_precision$0$off0$ph = 0, sp = 0;
 sp = STACKTOP;
 if (!($__flags & 2048)) $$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 1024)) $$1 = $$0; else {
  HEAP8[$$0 >> 0] = 35;
  $$1 = $$0 + 1 | 0;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6 | 0) == 260;
 if ($8) {
  $$2$ph = $$1;
  $specify_precision$0$off0$ph = 0;
 } else {
  HEAP8[$$1 >> 0] = 46;
  HEAP8[$$1 + 1 >> 0] = 42;
  $$2$ph = $$1 + 2 | 0;
  $specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len >> 0] | 0;
 if (!($11 << 24 >> 24)) $$2$lcssa = $$2$ph; else {
  $$012 = $__len;
  $$23 = $$2$ph;
  $15 = $11;
  while (1) {
   $$012 = $$012 + 1 | 0;
   $14 = $$23 + 1 | 0;
   HEAP8[$$23 >> 0] = $15;
   $15 = HEAP8[$$012 >> 0] | 0;
   if (!($15 << 24 >> 24)) {
    $$2$lcssa = $14;
    break;
   } else $$23 = $14;
  }
 }
 do if (($6 | 0) == 4) if (!($7 & 1)) {
  HEAP8[$$2$lcssa >> 0] = 102;
  break;
 } else {
  HEAP8[$$2$lcssa >> 0] = 70;
  break;
 } else if (($6 | 0) == 256) if (!($7 & 1)) {
  HEAP8[$$2$lcssa >> 0] = 101;
  break;
 } else {
  HEAP8[$$2$lcssa >> 0] = 69;
  break;
 } else {
  $23 = ($7 & 1 | 0) != 0;
  if ($8) if ($23) {
   HEAP8[$$2$lcssa >> 0] = 65;
   break;
  } else {
   HEAP8[$$2$lcssa >> 0] = 97;
   break;
  } else if ($23) {
   HEAP8[$$2$lcssa >> 0] = 71;
   break;
  } else {
   HEAP8[$$2$lcssa >> 0] = 103;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $specify_precision$0$off0$ph | 0;
}

function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$1 = 0, $15 = 0, $16 = 0, $21 = 0, $23 = 0, $25 = 0, $5 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 HEAP32[$adjustedPtr >> 2] = HEAP32[HEAP32[$adjustedPtr >> 2] >> 2];
 if (($this | 0) == ($thrown_type | 0) | ($thrown_type | 0) == 62664) $$1 = 1; else if (!$thrown_type) $$1 = 0; else {
  $5 = ___dynamic_cast($thrown_type, 62464) | 0;
  if (!$5) $$1 = 0; else if (!(HEAP32[$5 + 8 >> 2] & ~HEAP32[$this + 8 >> 2])) {
   $15 = HEAP32[$this + 12 >> 2] | 0;
   $16 = $5 + 12 | 0;
   if (($15 | 0) == 62648 ? 1 : ($15 | 0) == (HEAP32[$16 >> 2] | 0)) $$1 = 1; else if (!$15) $$1 = 0; else {
    $21 = ___dynamic_cast($15, 62352) | 0;
    if (!$21) $$1 = 0; else {
     $23 = HEAP32[$16 >> 2] | 0;
     if (!$23) $$1 = 0; else {
      $25 = ___dynamic_cast($23, 62352) | 0;
      if (!$25) $$1 = 0; else {
       dest = $info + 0 | 0;
       stop = dest + 56 | 0;
       do {
        HEAP32[dest >> 2] = 0;
        dest = dest + 4 | 0;
       } while ((dest | 0) < (stop | 0));
       HEAP32[$info >> 2] = $25;
       HEAP32[$info + 8 >> 2] = $21;
       HEAP32[$info + 12 >> 2] = -1;
       HEAP32[$info + 48 >> 2] = 1;
       FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$25 >> 2] | 0) + 28 >> 2] & 15]($25, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
       if ((HEAP32[$info + 24 >> 2] | 0) == 1) {
        HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2];
        $$1 = 1;
       } else $$1 = 0;
      }
     }
    }
   }
  } else $$1 = 0;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($this, $__x, $__a) {
 $this = $this | 0;
 $__x = $__x | 0;
 $__a = $__a | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $22 = 0, $23 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $0 = $this + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = HEAP32[$__a >> 2] | 0;
 $2 = $this + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = $1;
 $5 = $1 + 4096 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($1 + 4096 - $6 | 0) >>> 0 < 32) $$0$i = _malloc(32) | 0; else {
  HEAP32[$5 >> 2] = $6 + 32;
  $$0$i = $6;
 }
 HEAP32[$0 >> 2] = $$0$i;
 HEAP32[$this >> 2] = $$0$i;
 HEAP32[$2 >> 2] = $$0$i + 24;
 if (!$$0$i) {
  $32 = 0;
  $31 = $32 + 24 | 0;
  HEAP32[$0 >> 2] = $31;
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[$__x >> 0] & 1)) {
  HEAP32[$$0$i + 0 >> 2] = HEAP32[$__x + 0 >> 2];
  HEAP32[$$0$i + 4 >> 2] = HEAP32[$__x + 4 >> 2];
  HEAP32[$$0$i + 8 >> 2] = HEAP32[$__x + 8 >> 2];
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($$0$i, HEAP32[$__x + 8 >> 2] | 0, HEAP32[$__x + 4 >> 2] | 0);
 $22 = $$0$i + 12 | 0;
 $23 = $__x + 12 | 0;
 if (!(HEAP8[$23 >> 0] & 1)) {
  HEAP32[$22 + 0 >> 2] = HEAP32[$23 + 0 >> 2];
  HEAP32[$22 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
  HEAP32[$22 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($22, HEAP32[$__x + 20 >> 2] | 0, HEAP32[$__x + 16 >> 2] | 0);
 $32 = HEAP32[$0 >> 2] | 0;
 $31 = $32 + 24 | 0;
 HEAP32[$0 >> 2] = $31;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $12 = 0, $19 = 0, $20 = 0, $23 = 0, $3 = 0, $4 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) != (HEAP32[$info + 8 >> 2] | 0)) {
  $19 = HEAP32[$this + 12 >> 2] | 0;
  $20 = $this + ($19 << 3) + 16 | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below);
  if (($19 | 0) <= 1) {
   STACKTOP = sp;
   return;
  }
  $23 = $info + 54 | 0;
  $p$0 = $this + 24 | 0;
  while (1) {
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
   if (HEAP8[$23 >> 0] | 0) {
    label = 12;
    break;
   }
   $p$0 = $p$0 + 8 | 0;
   if ($p$0 >>> 0 >= $20 >>> 0) {
    label = 12;
    break;
   }
  }
  if ((label | 0) == 12) {
   STACKTOP = sp;
   return;
  }
 }
 $3 = $info + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) {
  HEAP32[$3 >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 if (($4 | 0) != ($adjustedPtr | 0)) {
  $12 = $info + 36 | 0;
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
  HEAP32[$info + 24 >> 2] = 2;
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $9 = $info + 24 | 0;
 if ((HEAP32[$9 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$9 >> 2] = $path_below;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($this, $__pos, $__s, $__n) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $0 = 0, $13 = 0, $17 = 0, $2 = 0, $22 = 0, $24 = 0, $30 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) == 0;
 if ($2) $8 = ($0 & 255) >>> 1; else $8 = HEAP32[$this + 4 >> 2] | 0;
 if ($8 >>> 0 < $__pos >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv();
 if ($2) {
  $13 = 10;
  $17 = $0;
 } else {
  $9 = HEAP32[$this >> 2] | 0;
  $13 = ($9 & -2) + -1 | 0;
  $17 = $9 & 255;
 }
 if (($13 - $8 | 0) >>> 0 < $__n >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $13, $8 + $__n - $13 | 0, $8, $__pos, 0, $__n, $__s);
  STACKTOP = sp;
  return $this | 0;
 }
 if (!$__n) {
  STACKTOP = sp;
  return $this | 0;
 }
 if (!($17 & 1)) $24 = $this + 1 | 0; else $24 = HEAP32[$this + 8 >> 2] | 0;
 $22 = $8 - $__pos | 0;
 $$pre = $24 + $__pos | 0;
 if (($8 | 0) == ($__pos | 0)) $$1 = $__s; else {
  if ($$pre >>> 0 <= $__s >>> 0 & ($24 + $8 | 0) >>> 0 > $__s >>> 0) $$0 = $__s + $__n | 0; else $$0 = $__s;
  _memmove($24 + ($__n + $__pos) | 0, $$pre | 0, $22 | 0) | 0;
  $$1 = $$0;
 }
 _memmove($$pre | 0, $$1 | 0, $__n | 0) | 0;
 $30 = $8 + $__n | 0;
 if (!(HEAP8[$this >> 0] & 1)) HEAP8[$this >> 0] = $30 << 1; else HEAP32[$this + 4 >> 2] = $30;
 HEAP8[$24 + $30 >> 0] = 0;
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__110__stdinbufIwE9pbackfailEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$01 = 0, $1 = 0, $11 = 0, $19 = 0, $23 = 0, $24 = 0, $26 = 0, $3 = 0, $5 = 0, $8 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 8 | 0;
 $__ci = sp + 4 | 0;
 $__inxt = sp;
 $1 = $this + 52 | 0;
 $3 = (HEAP8[$1 >> 0] | 0) != 0;
 if (($__c | 0) == -1) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;
   return $$01 | 0;
  }
  $5 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$1 >> 0] = ($5 | 0) != -1 & 1;
  $$01 = $5;
  STACKTOP = sp;
  return $$01 | 0;
 }
 $8 = $this + 48 | 0;
 L8 : do if ($3) {
  HEAP32[$__ci >> 2] = HEAP32[$8 >> 2];
  $11 = HEAP32[$this + 36 >> 2] | 0;
  $19 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] & 15]($11, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 4 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0;
  if (($19 | 0) == 1 | ($19 | 0) == 2) {
   $$01 = -1;
   STACKTOP = sp;
   return $$01 | 0;
  } else if (($19 | 0) == 3) {
   HEAP8[$__extbuf >> 0] = HEAP32[$8 >> 2];
   HEAP32[$__enxt >> 2] = $__extbuf + 1;
  }
  $23 = $this + 32 | 0;
  while (1) {
   $24 = HEAP32[$__enxt >> 2] | 0;
   if ($24 >>> 0 <= $__extbuf >>> 0) break L8;
   $26 = $24 + -1 | 0;
   HEAP32[$__enxt >> 2] = $26;
   if ((_ungetc(HEAP8[$26 >> 0] | 0, HEAP32[$23 >> 2] | 0) | 0) == -1) {
    $$01 = -1;
    break;
   }
  }
  STACKTOP = sp;
  return $$01 | 0;
 } while (0);
 HEAP32[$8 >> 2] = $__c;
 HEAP8[$1 >> 0] = 1;
 $$01 = $__c;
 STACKTOP = sp;
 return $$01 | 0;
}

function __ZNSt3__110__stdinbufIcE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$01 = 0, $1 = 0, $12 = 0, $20 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $5 = 0, $8 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 4 | 0;
 $__ci = sp + 8 | 0;
 $__inxt = sp;
 $1 = $this + 52 | 0;
 $3 = (HEAP8[$1 >> 0] | 0) != 0;
 if (($__c | 0) == -1) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;
   return $$01 | 0;
  }
  $5 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$1 >> 0] = ($5 | 0) != -1 & 1;
  $$01 = $5;
  STACKTOP = sp;
  return $$01 | 0;
 }
 $8 = $this + 48 | 0;
 L8 : do if ($3) {
  HEAP8[$__ci >> 0] = HEAP32[$8 >> 2];
  $12 = HEAP32[$this + 36 >> 2] | 0;
  $20 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 15]($12, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 1 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0;
  if (($20 | 0) == 1 | ($20 | 0) == 2) {
   $$01 = -1;
   STACKTOP = sp;
   return $$01 | 0;
  } else if (($20 | 0) == 3) {
   HEAP8[$__extbuf >> 0] = HEAP32[$8 >> 2];
   HEAP32[$__enxt >> 2] = $__extbuf + 1;
  }
  $24 = $this + 32 | 0;
  while (1) {
   $25 = HEAP32[$__enxt >> 2] | 0;
   if ($25 >>> 0 <= $__extbuf >>> 0) break L8;
   $27 = $25 + -1 | 0;
   HEAP32[$__enxt >> 2] = $27;
   if ((_ungetc(HEAP8[$27 >> 0] | 0, HEAP32[$24 >> 2] | 0) | 0) == -1) {
    $$01 = -1;
    break;
   }
  }
  STACKTOP = sp;
  return $$01 | 0;
 } while (0);
 HEAP32[$8 >> 2] = $__c;
 HEAP8[$1 >> 0] = 1;
 $$01 = $__c;
 STACKTOP = sp;
 return $$01 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$01 = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $21 = 0, $27 = 0, $33 = 0, $40 = 0, $8 = 0, $__p$02 = 0, $scevgep = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $15 = 10;
  $16 = ($1 & 255) >>> 1;
  $40 = $1;
 } else {
  $8 = HEAP32[$this >> 2] | 0;
  $15 = ($8 & -2) + -1 | 0;
  $16 = HEAP32[$this + 4 >> 2] | 0;
  $40 = $8 & 255;
 }
 $12 = $__last - $0 | 0;
 if (($__last | 0) == ($__first | 0)) {
  STACKTOP = sp;
  return;
 }
 if (($15 - $16 | 0) >>> 0 < $12 >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $15, $16 + $12 - $15 | 0, $16, $16, 0);
  $21 = HEAP8[$this >> 0] | 0;
 } else $21 = $40;
 if (!($21 & 1)) $27 = $this + 1 | 0; else $27 = HEAP32[$this + 8 >> 2] | 0;
 $scevgep = $__last + ($16 - $0) | 0;
 $$01 = $__first;
 $__p$02 = $27 + $16 | 0;
 while (1) {
  HEAP8[$__p$02 >> 0] = HEAP8[$$01 >> 0] | 0;
  $$01 = $$01 + 1 | 0;
  if (($$01 | 0) == ($__last | 0)) break; else $__p$02 = $__p$02 + 1 | 0;
 }
 HEAP8[$27 + $scevgep >> 0] = 0;
 $33 = $16 + $12 | 0;
 if (!(HEAP8[$this >> 0] & 1)) {
  HEAP8[$this >> 0] = $33 << 1;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$this + 4 >> 2] = $33;
  STACKTOP = sp;
  return;
 }
}

function __ZL25default_terminate_handlerv() {
 var $11 = 0, $14 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $33 = 0, $5 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer12 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer12 = sp;
 $thrown_object = sp + 12 | 0;
 if (_pthread_once(61592, 2) | 0) _abort_message(61600, $vararg_buffer12);
 $3 = _pthread_getspecific(HEAP32[15396] | 0) | 0;
 if (!$3) _abort_message(58832, $vararg_buffer12);
 $5 = HEAP32[$3 >> 2] | 0;
 if (!$5) _abort_message(58832, $vararg_buffer12);
 $9 = $5 + 48 | 0;
 $11 = HEAP32[$9 >> 2] | 0;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 if (!(($11 & -256 | 0) == 1126902528 & ($14 | 0) == 1129074247)) {
  HEAP32[$vararg_buffer12 >> 2] = 58680;
  _abort_message(58792, $vararg_buffer12);
 }
 if (($11 | 0) == 1126902529 & ($14 | 0) == 1129074247) $24 = HEAP32[$5 + 44 >> 2] | 0; else $24 = $5 + 80 | 0;
 HEAP32[$thrown_object >> 2] = $24;
 $25 = HEAP32[$5 >> 2] | 0;
 $27 = HEAP32[$25 + 4 >> 2] | 0;
 if (__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(61904, $25, $thrown_object) | 0) {
  $29 = HEAP32[$thrown_object >> 2] | 0;
  $33 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 8 >> 2] & 127]($29) | 0;
  HEAP32[$vararg_buffer12 >> 2] = 58680;
  HEAP32[$vararg_buffer12 + 4 >> 2] = $27;
  HEAP32[$vararg_buffer12 + 8 >> 2] = $33;
  _abort_message(58696, $vararg_buffer12);
 } else {
  HEAP32[$vararg_buffer12 >> 2] = 58680;
  HEAP32[$vararg_buffer12 + 4 >> 2] = $27;
  _abort_message(58744, $vararg_buffer12);
 }
}

function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $$idx7 = 0, $$idx8 = 0, $1 = 0, $10 = 0, $2 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $$idx7 = $1 + 8 | 0;
 $$idx8 = $1 + 12 | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$$idx7 >> 2] | 0, HEAP32[$$idx8 >> 2] | 0, $4) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] & 7]($5, 49384, 49416 | 0, $__atoms) | 0;
 $9 = __ZNSt3__16locale2id5__getEv(50992) | 0;
 $10 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$$idx7 >> 2] | 0, HEAP32[$$idx8 >> 2] | 0, $9) | 0;
 HEAP32[$__decimal_point >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 127]($10) | 0;
 HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 127]($10) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $10);
 $22 = $1 + 4 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 HEAP32[$22 >> 2] = $23 + -1;
 if ($23) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result, $this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$01$i$i = 0, $10 = 0, $11 = 0, $21 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, $__nar = 0, $__ne = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__nar = sp + 4 | 0;
 $__ne = sp;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $4 = HEAP32[$__ne >> 2] | 0;
 $5 = HEAP32[$__s >> 2] | 0;
 if (($__nar | 0) == ($4 | 0)) {
  $24 = $5;
  HEAP32[$agg$result >> 2] = $24;
  STACKTOP = sp;
  return;
 } else {
  $$01$i$i = $__nar;
  $9 = $5;
 }
 while (1) {
  $7 = HEAP8[$$01$i$i >> 0] | 0;
  do if (!$9) $25 = 0; else {
   $10 = $9 + 24 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$9 + 28 >> 2] | 0)) {
    $21 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$9 >> 2] | 0) + 52 >> 2] & 31]($9, $7 & 255) | 0) == -1;
    $25 = $21 ? 0 : $9;
    break;
   } else {
    HEAP32[$10 >> 2] = $11 + 1;
    HEAP8[$11 >> 0] = $7;
    $25 = $9;
    break;
   }
  } while (0);
  $$01$i$i = $$01$i$i + 1 | 0;
  if (($$01$i$i | 0) == ($4 | 0)) {
   $24 = $25;
   break;
  } else $9 = $25;
 }
 HEAP32[$agg$result >> 2] = $24;
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $$idx7 = 0, $$idx8 = 0, $1 = 0, $10 = 0, $2 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $$idx7 = $1 + 8 | 0;
 $$idx8 = $1 + 12 | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$$idx7 >> 2] | 0, HEAP32[$$idx8 >> 2] | 0, $4) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] & 7]($5, 49384, 49416 | 0, $__atoms) | 0;
 $9 = __ZNSt3__16locale2id5__getEv(50984) | 0;
 $10 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$$idx7 >> 2] | 0, HEAP32[$$idx8 >> 2] | 0, $9) | 0;
 HEAP8[$__decimal_point >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 127]($10) | 0;
 HEAP8[$__thousands_sep >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 127]($10) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $10);
 $22 = $1 + 4 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 HEAP32[$22 >> 2] = $23 + -1;
 if ($23) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $3 = 0, $5 = 0, $9 = 0, $first$pn = 0, $t1$011 = 0, $t11$0 = 0, sp = 0;
 sp = STACKTOP;
 L1 : do if (($first | 0) == ($last | 0)) $$0 = $first; else {
  $1 = HEAP8[$first >> 0] | 0;
  if ($1 << 24 >> 24 != 95) {
   if ((($1 << 24 >> 24) + -48 | 0) >>> 0 < 10) $first$pn = $first; else {
    $$0 = $first;
    break;
   }
   while (1) {
    $t11$0 = $first$pn + 1 | 0;
    if (($t11$0 | 0) == ($last | 0)) {
     $$0 = $last;
     break L1;
    }
    if (((HEAP8[$t11$0 >> 0] | 0) + -48 | 0) >>> 0 < 10) $first$pn = $t11$0; else {
     $$0 = $t11$0;
     break L1;
    }
   }
  }
  $3 = $first + 1 | 0;
  if (($3 | 0) == ($last | 0)) $$0 = $first; else {
   $5 = HEAP8[$3 >> 0] | 0;
   if ((($5 << 24 >> 24) + -48 | 0) >>> 0 < 10) {
    $$0 = $first + 2 | 0;
    break;
   }
   if ($5 << 24 >> 24 == 95) {
    $9 = $first + 2 | 0;
    if (($9 | 0) == ($last | 0)) $$0 = $first; else {
     $t1$011 = $9;
     while (1) {
      $13 = HEAP8[$t1$011 >> 0] | 0;
      $t1$011 = $t1$011 + 1 | 0;
      if ((($13 << 24 >> 24) + -48 | 0) >>> 0 >= 10) break;
      if (($t1$011 | 0) == ($last | 0)) {
       $$0 = $first;
       break L1;
      }
     }
     STACKTOP = sp;
     return ($13 << 24 >> 24 == 95 ? $t1$011 : $first) | 0;
    }
   } else $$0 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10emscripten8internal13MethodInvokerIM18CompilerLexerTokenFRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEvESB_PS2_JEE6invokeERKSD_SE_($method, $wireThis) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 var $$field = 0, $$field2 = 0, $$in$i = 0, $$index1 = 0, $1 = 0, $10 = 0, $14 = 0, $16 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method >> 0] | HEAPU8[$method + 1 >> 0] << 8 | HEAPU8[$method + 2 >> 0] << 16 | HEAPU8[$method + 3 >> 0] << 24;
 $$index1 = $method + 4 | 0;
 $$field2 = HEAPU8[$$index1 >> 0] | HEAPU8[$$index1 + 1 >> 0] << 8 | HEAPU8[$$index1 + 2 >> 0] << 16 | HEAPU8[$$index1 + 3 >> 0] << 24;
 $1 = $wireThis + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) $8 = $$field; else $8 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$field >> 2] | 0;
 $9 = FUNCTION_TABLE_ii[$8 & 127]($1) | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 if (!($10 & 1)) {
  $20 = ($10 & 255) >>> 1;
  $22 = _malloc($20 + 4 | 0) | 0;
  HEAP32[$22 >> 2] = $20;
  $$in$i = $22;
  $25 = $9 + 1 | 0;
  $26 = $20;
  $24 = $$in$i + 4 | 0;
  _memcpy($24 | 0, $25 | 0, $26 | 0) | 0;
  STACKTOP = sp;
  return $$in$i | 0;
 } else {
  $14 = HEAP32[$9 + 4 >> 2] | 0;
  $16 = _malloc($14 + 4 | 0) | 0;
  HEAP32[$16 >> 2] = $14;
  $$in$i = $16;
  $25 = HEAP32[$9 + 8 >> 2] | 0;
  $26 = $14;
  $24 = $$in$i + 4 | 0;
  _memcpy($24 | 0, $25 | 0, $26 | 0) | 0;
  STACKTOP = sp;
  return $$in$i | 0;
 }
 return 0;
}

function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $ec, $what_arg) {
 $agg$result = $agg$result | 0;
 $ec = $ec | 0;
 $what_arg = $what_arg | 0;
 var $0 = 0, $1 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $28 = 0, $29 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = HEAP32[$ec >> 2] | 0;
 if ($1) {
  $3 = HEAP8[$what_arg >> 0] | 0;
  if (!($3 & 1)) $11 = ($3 & 255) >>> 1; else $11 = HEAP32[$what_arg + 4 >> 2] | 0;
  if (!$11) $17 = $1; else {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg, 47880, 2);
   $17 = HEAP32[$ec >> 2] | 0;
  }
  $13 = HEAP32[$ec + 4 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 7]($0, $13, $17);
  $18 = HEAP8[$0 >> 0] | 0;
  if (!($18 & 1)) {
   $28 = $0 + 1 | 0;
   $29 = ($18 & 255) >>> 1;
  } else {
   $28 = HEAP32[$0 + 8 >> 2] | 0;
   $29 = HEAP32[$0 + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg, $28, $29);
  if (HEAP8[$0 >> 0] & 1) _free(HEAP32[$0 + 8 >> 2] | 0);
 };
 HEAP32[$agg$result + 0 >> 2] = HEAP32[$what_arg + 0 >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$what_arg + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$what_arg + 8 >> 2];
 HEAP32[$what_arg + 0 >> 2] = 0;
 HEAP32[$what_arg + 4 >> 2] = 0;
 HEAP32[$what_arg + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) != 0;
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 10;
  $__sz$0 = ($0 & 255) >>> 1;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0);
  if (!(HEAP8[$this >> 0] & 1)) label = 7; else label = 8;
 } else if ($2) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2;
  $$pn = $this + 1 | 0;
  $__p$0$sum$pre$phiZZZ2D = $__sz$0 + 1 | 0;
  $__p$0 = $$pn + $__sz$0 | 0;
  HEAP8[$__p$0 >> 0] = $__c;
  $22 = $$pn + $__p$0$sum$pre$phiZZZ2D | 0;
  HEAP8[$22 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0;
  $20 = $__sz$0 + 1 | 0;
  HEAP32[$this + 4 >> 2] = $20;
  $$pn = $19;
  $__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = $$pn + $__sz$0 | 0;
  HEAP8[$__p$0 >> 0] = $__c;
  $22 = $$pn + $__p$0$sum$pre$phiZZZ2D | 0;
  HEAP8[$22 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $11 = 0, $15 = 0, $2 = 0, $22 = 0, $23 = 0, $28 = 0, $34 = 0, $35 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) == 0;
 if ($2) $8 = ($0 & 255) >>> 1; else $8 = HEAP32[$this + 4 >> 2] | 0;
 if ($8 >>> 0 >= $__n >>> 0) if ($2) {
  HEAP8[$this + $__n + 1 >> 0] = 0;
  HEAP8[$this >> 0] = $__n << 1;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[(HEAP32[$this + 8 >> 2] | 0) + $__n >> 0] = 0;
  HEAP32[$this + 4 >> 2] = $__n;
  STACKTOP = sp;
  return;
 }
 $9 = $__n - $8 | 0;
 if (($8 | 0) == ($__n | 0)) {
  STACKTOP = sp;
  return;
 }
 if ($2) {
  $15 = $0;
  $22 = 10;
 } else {
  $11 = HEAP32[$this >> 2] | 0;
  $15 = $11 & 255;
  $22 = ($11 & -2) + -1 | 0;
 }
 if (!($15 & 1)) $23 = ($15 & 255) >>> 1; else $23 = HEAP32[$this + 4 >> 2] | 0;
 if (($22 - $23 | 0) >>> 0 < $9 >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $22, $9 - $22 + $23 | 0, $23, $23, 0);
  $28 = HEAP8[$this >> 0] | 0;
 } else $28 = $15;
 if (!($28 & 1)) $34 = $this + 1 | 0; else $34 = HEAP32[$this + 8 >> 2] | 0;
 _memset($34 + $23 | 0, 0, $9 | 0) | 0;
 $35 = $23 + $9 | 0;
 if (!(HEAP8[$this >> 0] & 1)) HEAP8[$this >> 0] = $35 << 1; else HEAP32[$this + 4 >> 2] = $35;
 HEAP8[$34 + $35 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) != 0;
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 1;
  $__sz$0 = ($0 & 255) >>> 1;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if (!(HEAP8[$this >> 0] & 1)) label = 7; else label = 8;
 } else if ($2) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2;
  $$pn = $this + 4 | 0;
  $__p$0$sum$pre$phiZZZ2D = $__sz$0 + 1 | 0;
  $__p$0 = $$pn + ($__sz$0 << 2) | 0;
  HEAP32[$__p$0 >> 2] = $__c;
  $22 = $$pn + ($__p$0$sum$pre$phiZZZ2D << 2) | 0;
  HEAP32[$22 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0;
  $20 = $__sz$0 + 1 | 0;
  HEAP32[$this + 4 >> 2] = $20;
  $$pn = $19;
  $__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = $$pn + ($__sz$0 << 2) | 0;
  HEAP32[$__p$0 >> 2] = $__c;
  $22 = $$pn + ($__p$0$sum$pre$phiZZZ2D << 2) | 0;
  HEAP32[$22 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) != 0;
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 10;
  $__sz$0 = ($0 & 255) >>> 1;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0);
  if (!(HEAP8[$this >> 0] & 1)) label = 7; else label = 8;
 } else if ($2) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2;
  $$pn = $this + 1 | 0;
  $__p$0$sum$pre$phiZZZ2D = $__sz$0 + 1 | 0;
  $__p$0 = $$pn + $__sz$0 | 0;
  HEAP8[$__p$0 >> 0] = $__c;
  $22 = $$pn + $__p$0$sum$pre$phiZZZ2D | 0;
  HEAP8[$22 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0;
  $20 = $__sz$0 + 1 | 0;
  HEAP32[$this + 4 >> 2] = $20;
  $$pn = $19;
  $__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = $$pn + $__sz$0 | 0;
  HEAP8[$__p$0 >> 0] = $__c;
  $22 = $$pn + $__p$0$sum$pre$phiZZZ2D | 0;
  HEAP8[$22 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $25 = 0, $26 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if (!(HEAP8[$this >> 0] & 1)) $19 = $this + 1 | 0; else $19 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 11) $16 = 11; else $16 = $12 + 16 & -16;
 } else $16 = -17;
 $17 = _malloc($16) | 0;
 if ($__n_copy) _memcpy($17 | 0, $19 | 0, $__n_copy | 0) | 0;
 if (($__old_sz | 0) != ($__n_copy | 0)) _memcpy($17 + ($__n_add + $__n_copy) | 0, $19 + $__n_copy | 0, $__old_sz - $__n_copy | 0) | 0;
 if (($__old_cap | 0) == 10) {
  $25 = $this + 8 | 0;
  HEAP32[$25 >> 2] = $17;
  $26 = $16 | 1;
  HEAP32[$this >> 2] = $26;
  STACKTOP = sp;
  return;
 }
 _free($19);
 $25 = $this + 8 | 0;
 HEAP32[$25 >> 2] = $17;
 $26 = $16 | 1;
 HEAP32[$this >> 2] = $26;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $25 = 0, $26 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if (!(HEAP8[$this >> 0] & 1)) $19 = $this + 1 | 0; else $19 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 11) $16 = 11; else $16 = $12 + 16 & -16;
 } else $16 = -17;
 $17 = __Znwj($16) | 0;
 if ($__n_copy) _memcpy($17 | 0, $19 | 0, $__n_copy | 0) | 0;
 if (($__old_sz | 0) != ($__n_copy | 0)) _memcpy($17 + ($__n_add + $__n_copy) | 0, $19 + $__n_copy | 0, $__old_sz - $__n_copy | 0) | 0;
 if (($__old_cap | 0) == 10) {
  $25 = $this + 8 | 0;
  HEAP32[$25 >> 2] = $17;
  $26 = $16 | 1;
  HEAP32[$this >> 2] = $26;
  STACKTOP = sp;
  return;
 }
 _free($19);
 $25 = $this + 8 | 0;
 HEAP32[$25 >> 2] = $17;
 $26 = $16 | 1;
 HEAP32[$this >> 2] = $26;
 STACKTOP = sp;
 return;
}

function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = ___errno_location() | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 __ZNSt3__16__clocEv() | 0;
 $3 = _strtoll($__a, $__p2, $__base) | 0;
 $4 = tempRet0;
 $5 = HEAP32[$1 >> 2] | 0;
 if (!$5) HEAP32[$1 >> 2] = $2;
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do if (($5 | 0) == 34) {
  HEAP32[$__err >> 2] = 4;
  if (($4 | 0) > 0 | ($4 | 0) == 0 & $3 >>> 0 > 0) {
   $$0 = 2147483647;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else {
  if (($4 | 0) < -1 | ($4 | 0) == -1 & $3 >>> 0 < 2147483648) {
   HEAP32[$__err >> 2] = 4;
   break;
  }
  if (($4 | 0) > 0 | ($4 | 0) == 0 & $3 >>> 0 > 2147483647) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 2147483647;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $$0 = $3;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 $$0 = -2147483648;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this, $ec$0, $ec$1, $what_arg) {
 $this = $this | 0;
 $ec$0 = $ec$0 | 0;
 $ec$1 = $ec$1 | 0;
 $what_arg = $what_arg | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $15 = 0, $26 = 0, $31 = 0, $32 = 0, $5 = 0, $9 = 0, $ec = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $ec = sp;
 HEAP32[$ec >> 2] = $ec$0;
 HEAP32[$ec + 4 >> 2] = $ec$1;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1, $what_arg, _strlen($what_arg | 0) | 0);
 __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0, $ec, $1);
 HEAP32[$this >> 2] = 61944;
 $5 = (HEAP8[$0 >> 0] & 1) == 0;
 if ($5) $9 = $0 + 1 | 0; else $9 = HEAP32[$0 + 8 >> 2] | 0;
 $10 = _strlen($9 | 0) | 0;
 $12 = __Znwj($10 + 13 | 0) | 0;
 HEAP32[$12 >> 2] = $10;
 HEAP32[$12 + 4 >> 2] = $10;
 HEAP32[$12 + 8 >> 2] = 0;
 $15 = $12 + 12 | 0;
 _memcpy($15 | 0, $9 | 0, $10 + 1 | 0) | 0;
 HEAP32[$this + 4 >> 2] = $15;
 if (!$5) _free(HEAP32[$0 + 8 >> 2] | 0);
 if (HEAP8[$1 >> 0] & 1) _free(HEAP32[$1 + 8 >> 2] | 0);
 HEAP32[$this >> 2] = 47896;
 $26 = $ec;
 $31 = HEAP32[$26 + 4 >> 2] | 0;
 $32 = $this + 8 | 0;
 HEAP32[$32 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$32 + 4 >> 2] = $31;
 STACKTOP = sp;
 return;
}

function ___cxx_global_array_dtor69($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 if (HEAP8[57364] & 1) _free(HEAP32[14343] | 0);
 if (HEAP8[57352] & 1) _free(HEAP32[14340] | 0);
 if (HEAP8[57340] & 1) _free(HEAP32[14337] | 0);
 if (HEAP8[57328] & 1) _free(HEAP32[14334] | 0);
 if (HEAP8[57316] & 1) _free(HEAP32[14331] | 0);
 if (HEAP8[57304] & 1) _free(HEAP32[14328] | 0);
 if (HEAP8[57292] & 1) _free(HEAP32[14325] | 0);
 if (HEAP8[57280] & 1) _free(HEAP32[14322] | 0);
 if (HEAP8[57268] & 1) _free(HEAP32[14319] | 0);
 if (HEAP8[57256] & 1) _free(HEAP32[14316] | 0);
 if (HEAP8[57244] & 1) _free(HEAP32[14313] | 0);
 if (HEAP8[57232] & 1) _free(HEAP32[14310] | 0);
 if (HEAP8[57220] & 1) _free(HEAP32[14307] | 0);
 if (HEAP8[57208] & 1) _free(HEAP32[14304] | 0);
 if (HEAP8[57196] & 1) _free(HEAP32[14301] | 0);
 if (HEAP8[57184] & 1) _free(HEAP32[14298] | 0);
 if (HEAP8[57172] & 1) _free(HEAP32[14295] | 0);
 if (HEAP8[57160] & 1) _free(HEAP32[14292] | 0);
 if (HEAP8[57148] & 1) _free(HEAP32[14289] | 0);
 if (HEAP8[57136] & 1) _free(HEAP32[14286] | 0);
 if (HEAP8[57124] & 1) _free(HEAP32[14283] | 0);
 if (HEAP8[57112] & 1) _free(HEAP32[14280] | 0);
 if (HEAP8[57100] & 1) _free(HEAP32[14277] | 0);
 if (!(HEAP8[57088] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[14274] | 0);
 STACKTOP = sp;
 return;
}

function ___cxx_global_array_dtor45($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 if (HEAP8[56524] & 1) _free(HEAP32[14133] | 0);
 if (HEAP8[56512] & 1) _free(HEAP32[14130] | 0);
 if (HEAP8[56500] & 1) _free(HEAP32[14127] | 0);
 if (HEAP8[56488] & 1) _free(HEAP32[14124] | 0);
 if (HEAP8[56476] & 1) _free(HEAP32[14121] | 0);
 if (HEAP8[56464] & 1) _free(HEAP32[14118] | 0);
 if (HEAP8[56452] & 1) _free(HEAP32[14115] | 0);
 if (HEAP8[56440] & 1) _free(HEAP32[14112] | 0);
 if (HEAP8[56428] & 1) _free(HEAP32[14109] | 0);
 if (HEAP8[56416] & 1) _free(HEAP32[14106] | 0);
 if (HEAP8[56404] & 1) _free(HEAP32[14103] | 0);
 if (HEAP8[56392] & 1) _free(HEAP32[14100] | 0);
 if (HEAP8[56380] & 1) _free(HEAP32[14097] | 0);
 if (HEAP8[56368] & 1) _free(HEAP32[14094] | 0);
 if (HEAP8[56356] & 1) _free(HEAP32[14091] | 0);
 if (HEAP8[56344] & 1) _free(HEAP32[14088] | 0);
 if (HEAP8[56332] & 1) _free(HEAP32[14085] | 0);
 if (HEAP8[56320] & 1) _free(HEAP32[14082] | 0);
 if (HEAP8[56308] & 1) _free(HEAP32[14079] | 0);
 if (HEAP8[56296] & 1) _free(HEAP32[14076] | 0);
 if (HEAP8[56284] & 1) _free(HEAP32[14073] | 0);
 if (HEAP8[56272] & 1) _free(HEAP32[14070] | 0);
 if (HEAP8[56260] & 1) _free(HEAP32[14067] | 0);
 if (!(HEAP8[56248] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[14064] | 0);
 STACKTOP = sp;
 return;
}

function ___cxx_global_array_dtor42($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 if (HEAP8[56212] & 1) _free(HEAP32[14055] | 0);
 if (HEAP8[56200] & 1) _free(HEAP32[14052] | 0);
 if (HEAP8[56188] & 1) _free(HEAP32[14049] | 0);
 if (HEAP8[56176] & 1) _free(HEAP32[14046] | 0);
 if (HEAP8[56164] & 1) _free(HEAP32[14043] | 0);
 if (HEAP8[56152] & 1) _free(HEAP32[14040] | 0);
 if (HEAP8[56140] & 1) _free(HEAP32[14037] | 0);
 if (HEAP8[56128] & 1) _free(HEAP32[14034] | 0);
 if (HEAP8[56116] & 1) _free(HEAP32[14031] | 0);
 if (HEAP8[56104] & 1) _free(HEAP32[14028] | 0);
 if (HEAP8[56092] & 1) _free(HEAP32[14025] | 0);
 if (HEAP8[56080] & 1) _free(HEAP32[14022] | 0);
 if (HEAP8[56068] & 1) _free(HEAP32[14019] | 0);
 if (HEAP8[56056] & 1) _free(HEAP32[14016] | 0);
 if (HEAP8[56044] & 1) _free(HEAP32[14013] | 0);
 if (HEAP8[56032] & 1) _free(HEAP32[14010] | 0);
 if (HEAP8[56020] & 1) _free(HEAP32[14007] | 0);
 if (HEAP8[56008] & 1) _free(HEAP32[14004] | 0);
 if (HEAP8[55996] & 1) _free(HEAP32[14001] | 0);
 if (HEAP8[55984] & 1) _free(HEAP32[13998] | 0);
 if (HEAP8[55972] & 1) _free(HEAP32[13995] | 0);
 if (HEAP8[55960] & 1) _free(HEAP32[13992] | 0);
 if (HEAP8[55948] & 1) _free(HEAP32[13989] | 0);
 if (!(HEAP8[55936] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[13986] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $$idx7 = 0, $$idx8 = 0, $1 = 0, $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $$idx7 = $1 + 8 | 0;
 $$idx8 = $1 + 12 | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$$idx7 >> 2] | 0, HEAP32[$$idx8 >> 2] | 0, $4) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] & 7]($5, 49384, 49410 | 0, $__atoms) | 0;
 $9 = __ZNSt3__16locale2id5__getEv(50992) | 0;
 $10 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$$idx7 >> 2] | 0, HEAP32[$$idx8 >> 2] | 0, $9) | 0;
 HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 127]($10) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $10);
 $18 = $1 + 4 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 HEAP32[$18 >> 2] = $19 + -1;
 if ($19) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $$idx7 = 0, $$idx8 = 0, $1 = 0, $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $$idx7 = $1 + 8 | 0;
 $$idx8 = $1 + 12 | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$$idx7 >> 2] | 0, HEAP32[$$idx8 >> 2] | 0, $4) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] & 7]($5, 49384, 49410 | 0, $__atoms) | 0;
 $9 = __ZNSt3__16locale2id5__getEv(50984) | 0;
 $10 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$$idx7 >> 2] | 0, HEAP32[$$idx8 >> 2] | 0, $9) | 0;
 HEAP8[$__thousands_sep >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 127]($10) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $10);
 $18 = $1 + 4 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 HEAP32[$18 >> 2] = $19 + -1;
 if ($19) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 STACKTOP = sp;
 return;
}

function ___cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 if (HEAP8[55884] & 1) _free(HEAP32[13973] | 0);
 if (HEAP8[55872] & 1) _free(HEAP32[13970] | 0);
 if (HEAP8[55860] & 1) _free(HEAP32[13967] | 0);
 if (HEAP8[55848] & 1) _free(HEAP32[13964] | 0);
 if (HEAP8[55836] & 1) _free(HEAP32[13961] | 0);
 if (HEAP8[55824] & 1) _free(HEAP32[13958] | 0);
 if (HEAP8[55812] & 1) _free(HEAP32[13955] | 0);
 if (HEAP8[55800] & 1) _free(HEAP32[13952] | 0);
 if (HEAP8[55788] & 1) _free(HEAP32[13949] | 0);
 if (HEAP8[55776] & 1) _free(HEAP32[13946] | 0);
 if (HEAP8[55764] & 1) _free(HEAP32[13943] | 0);
 if (HEAP8[55752] & 1) _free(HEAP32[13940] | 0);
 if (HEAP8[55740] & 1) _free(HEAP32[13937] | 0);
 if (HEAP8[55728] & 1) _free(HEAP32[13934] | 0);
 if (HEAP8[55716] & 1) _free(HEAP32[13931] | 0);
 if (HEAP8[55704] & 1) _free(HEAP32[13928] | 0);
 if (HEAP8[55692] & 1) _free(HEAP32[13925] | 0);
 if (HEAP8[55680] & 1) _free(HEAP32[13922] | 0);
 if (HEAP8[55668] & 1) _free(HEAP32[13919] | 0);
 if (HEAP8[55656] & 1) _free(HEAP32[13916] | 0);
 if (HEAP8[55644] & 1) _free(HEAP32[13913] | 0);
 if (HEAP8[55632] & 1) _free(HEAP32[13910] | 0);
 if (HEAP8[55620] & 1) _free(HEAP32[13907] | 0);
 if (!(HEAP8[55608] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[13904] | 0);
 STACKTOP = sp;
 return;
}

function __ZN18CompilerLexerToken7setNameENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $name) {
 $this = $this | 0;
 $name = $name | 0;
 var $0 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $27 = 0, $28 = 0, $41 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 if (($0 | 0) == ($name | 0)) {
  STACKTOP = sp;
  return;
 }
 $2 = HEAP8[$name >> 0] | 0;
 if (!($2 & 1)) {
  $19 = ($2 & 255) >>> 1;
  $28 = $name + 1 | 0;
 } else {
  $19 = HEAP32[$name + 4 >> 2] | 0;
  $28 = HEAP32[$name + 8 >> 2] | 0;
 }
 $12 = HEAP8[$0 >> 0] | 0;
 if (!($12 & 1)) {
  $20 = 10;
  $22 = $12;
 } else {
  $15 = HEAP32[$0 >> 2] | 0;
  $20 = ($15 & -2) + -1 | 0;
  $22 = $15 & 255;
 }
 $23 = ($22 & 1) == 0;
 if ($19 >>> 0 > $20 >>> 0) {
  if ($23) $41 = ($22 & 255) >>> 1; else $41 = HEAP32[$this + 16 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $20, $19 - $20 | 0, $41, 0, $41, $19, $28);
  STACKTOP = sp;
  return;
 }
 if ($23) $27 = $0 + 1 | 0; else $27 = HEAP32[$this + 20 >> 2] | 0;
 _memmove($27 | 0, $28 | 0, $19 | 0) | 0;
 HEAP8[$27 + $19 >> 0] = 0;
 if (!(HEAP8[$0 >> 0] & 1)) {
  HEAP8[$0 >> 0] = $19 << 1;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$this + 16 >> 2] = $19;
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$info + 8 >> 2] | 0) == ($this | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   STACKTOP = sp;
   return;
  }
  $6 = $info + 28 | 0;
  if ((HEAP32[$6 >> 2] | 0) == 1) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$6 >> 2] = $path_below;
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$info >> 2] | 0) != ($this | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
  $14 = $info + 20 | 0;
  if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
   HEAP32[$info + 32 >> 2] = $path_below;
   HEAP32[$14 >> 2] = $current_ptr;
   $20 = $info + 40 | 0;
   HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
   if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) HEAP8[$info + 54 >> 0] = 1;
   HEAP32[$info + 44 >> 2] = 4;
   STACKTOP = sp;
   return;
  }
 }
 if (($path_below | 0) != 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$info + 32 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function __ZN18CompilerLexerToken7setDataENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0, $11 = 0, $14 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $40 = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == ($data | 0)) {
  STACKTOP = sp;
  return;
 }
 $1 = HEAP8[$data >> 0] | 0;
 if (!($1 & 1)) {
  $18 = ($1 & 255) >>> 1;
  $27 = $data + 1 | 0;
 } else {
  $18 = HEAP32[$data + 4 >> 2] | 0;
  $27 = HEAP32[$data + 8 >> 2] | 0;
 }
 $11 = HEAP8[$this >> 0] | 0;
 if (!($11 & 1)) {
  $19 = 10;
  $21 = $11;
 } else {
  $14 = HEAP32[$this >> 2] | 0;
  $19 = ($14 & -2) + -1 | 0;
  $21 = $14 & 255;
 }
 $22 = ($21 & 1) == 0;
 if ($18 >>> 0 > $19 >>> 0) {
  if ($22) $40 = ($21 & 255) >>> 1; else $40 = HEAP32[$this + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $19, $18 - $19 | 0, $40, 0, $40, $18, $27);
  STACKTOP = sp;
  return;
 }
 if ($22) $26 = $this + 1 | 0; else $26 = HEAP32[$this + 8 >> 2] | 0;
 _memmove($26 | 0, $27 | 0, $18 | 0) | 0;
 HEAP8[$26 + $18 >> 0] = 0;
 if (!(HEAP8[$this >> 0] & 1)) {
  HEAP8[$this >> 0] = $18 << 1;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$this + 4 >> 2] = $18;
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below) {
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $16 = 0, $17 = 0, $23 = 0, $25 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$info + 53 >> 0] = 1;
 if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 52 >> 0] = 1;
 $5 = $info + 16 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (!$6) {
  HEAP32[$5 >> 2] = $dst_ptr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 if (($6 | 0) != ($dst_ptr | 0)) {
  $25 = $info + 36 | 0;
  HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $16 = $info + 24 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 if (($17 | 0) == 2) {
  HEAP32[$16 >> 2] = $path_below;
  $23 = $path_below;
 } else $23 = $17;
 if (!(($23 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 54 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp, $__len, $__signd, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__signd = $__signd | 0;
 $__flags = $__flags | 0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $10 = 0, $13 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if (!($__flags & 2048)) $$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 512)) $$1$ph = $$0; else {
  HEAP8[$$0 >> 0] = 35;
  $$1$ph = $$0 + 1 | 0;
 }
 $6 = HEAP8[$__len >> 0] | 0;
 if (!($6 << 24 >> 24)) $$1$lcssa = $$1$ph; else {
  $$012 = $__len;
  $$13 = $$1$ph;
  $10 = $6;
  while (1) {
   $$012 = $$012 + 1 | 0;
   $9 = $$13 + 1 | 0;
   HEAP8[$$13 >> 0] = $10;
   $10 = HEAP8[$$012 >> 0] | 0;
   if (!($10 << 24 >> 24)) {
    $$1$lcssa = $9;
    break;
   } else $$13 = $9;
  }
 }
 $13 = $__flags & 74;
 if (($13 | 0) == 8) if (!($__flags & 16384)) {
  HEAP8[$$1$lcssa >> 0] = 120;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[$$1$lcssa >> 0] = 88;
  STACKTOP = sp;
  return;
 } else if (($13 | 0) == 64) {
  HEAP8[$$1$lcssa >> 0] = 111;
  STACKTOP = sp;
  return;
 } else if ($__signd) {
  HEAP8[$$1$lcssa >> 0] = 100;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[$$1$lcssa >> 0] = 117;
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $st, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($mx | 0) == 0 | ($frm | 0) == ($frm_end | 0)) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;
  return $nbytes$0$lcssa | 0;
 }
 $2 = $frm_end;
 $3 = $this + 8 | 0;
 $$016 = $frm;
 $nbytes$07 = 0;
 $nwchar_t$08 = 0;
 while (1) {
  $7 = _uselocale(HEAP32[$3 >> 2] | 0) | 0;
  $8 = _mbrtowc(0, $$016, $2 - $$016 | 0, $st) | 0;
  if ($7) _uselocale($7 | 0) | 0;
  if (($8 | 0) == -2 | ($8 | 0) == -1) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 9;
   break;
  } else if (!$8) {
   $$1 = $$016 + 1 | 0;
   $$pn = 1;
  } else {
   $$1 = $$016 + $8 | 0;
   $$pn = $8;
  }
  $nbytes$1 = $$pn + $nbytes$07 | 0;
  $nwchar_t$08 = $nwchar_t$08 + 1 | 0;
  if ($nwchar_t$08 >>> 0 >= $mx >>> 0 | ($$1 | 0) == ($frm_end | 0)) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 9;
   break;
  } else {
   $$016 = $$1;
   $nbytes$07 = $nbytes$1;
  }
 }
 if ((label | 0) == 9) {
  STACKTOP = sp;
  return $nbytes$0$lcssa | 0;
 }
 return 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$02 = 0, $0 = 0, $10 = 0, $12 = 0, $19 = 0, $2 = 0, $3 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $2 = $__last - $0 | 0;
 $3 = $2 >> 2;
 if ($3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($3 >>> 0 < 2) {
  HEAP8[$this >> 0] = $2 >>> 1;
  $__p$0$ph = $this + 4 | 0;
 } else {
  $10 = $3 + 4 & -4;
  $12 = __Znwj($10 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $12;
  HEAP32[$this >> 2] = $10 | 1;
  HEAP32[$this + 4 >> 2] = $3;
  $__p$0$ph = $12;
 }
 if (($__first | 0) == ($__last | 0)) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP32[$__p$0$lcssa >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $19 = ($__last + -4 - $0 | 0) >>> 2;
 $$02 = $__first;
 $__p$01 = $__p$0$ph;
 while (1) {
  HEAP32[$__p$01 >> 2] = HEAP32[$$02 >> 2];
  $$02 = $$02 + 4 | 0;
  if (($$02 | 0) == ($__last | 0)) break; else $__p$01 = $__p$01 + 4 | 0;
 }
 $__p$0$lcssa = $__p$0$ph + ($19 + 1 << 2) | 0;
 HEAP32[$__p$0$lcssa >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 do if (($first | 0) == ($last | 0)) $$0 = $first; else {
  $2 = HEAP8[$first >> 0] | 0;
  if (($2 | 0) == 104) {
   $3 = $first + 1 | 0;
   $4 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($3, $last) | 0;
   if (($4 | 0) == ($3 | 0) | ($4 | 0) == ($last | 0)) {
    $$0 = $first;
    break;
   }
   $$0 = (HEAP8[$4 >> 0] | 0) == 95 ? $4 + 1 | 0 : $first;
   break;
  } else if (($2 | 0) != 118) {
   $$0 = $first;
   break;
  }
  $10 = $first + 1 | 0;
  $11 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($10, $last) | 0;
  if (($11 | 0) == ($10 | 0) | ($11 | 0) == ($last | 0)) $$0 = $first; else if ((HEAP8[$11 >> 0] | 0) == 95) {
   $16 = $11 + 1 | 0;
   $17 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($16, $last) | 0;
   if (($17 | 0) == ($16 | 0) | ($17 | 0) == ($last | 0)) $$0 = $first; else {
    STACKTOP = sp;
    return ((HEAP8[$17 >> 0] | 0) == 95 ? $17 + 1 | 0 : $first) | 0;
   }
  } else $$0 = $first;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $$03$i$i = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $28 = 0, $3 = 0, $l$04$i$i = 0, $r$05$i$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = _strlen($__s | 0) | 0;
 $1 = HEAP8[$this >> 0] | 0;
 $3 = ($1 & 1) == 0;
 if ($3) $13 = ($1 & 255) >>> 1; else $13 = HEAP32[$this + 4 >> 2] | 0;
 if (($0 | 0) == -1) __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv();
 if ($3) $28 = $this + 1 | 0; else $28 = HEAP32[$this + 8 >> 2] | 0;
 $12 = $13 >>> 0 > $0 >>> 0;
 $14 = $12 ? $0 : $13;
 L12 : do if ($14) {
  $$03$i$i = $14;
  $l$04$i$i = $28;
  $r$05$i$i = $__s;
  while (1) {
   $16 = HEAP8[$l$04$i$i >> 0] | 0;
   $17 = HEAP8[$r$05$i$i >> 0] | 0;
   if ($16 << 24 >> 24 != $17 << 24 >> 24) break;
   $$03$i$i = $$03$i$i + -1 | 0;
   if (!$$03$i$i) break L12; else {
    $l$04$i$i = $l$04$i$i + 1 | 0;
    $r$05$i$i = $r$05$i$i + 1 | 0;
   }
  }
  if ($16 << 24 >> 24 != $17 << 24 >> 24) {
   STACKTOP = sp;
   return ($16 & 255) - ($17 & 255) | 0;
  }
 } while (0);
 STACKTOP = sp;
 return ($13 >>> 0 < $0 >>> 0 ? -1 : $12 & 1) | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$02 = 0, $10 = 0, $2 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, sp = 0;
 sp = STACKTOP;
 $2 = $__last - $__first | 0;
 if ($2 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($2 >>> 0 < 11) {
  HEAP8[$this >> 0] = $2 << 1;
  $__p$0$ph = $this + 1 | 0;
 } else {
  $9 = $2 + 16 & -16;
  $10 = __Znwj($9) | 0;
  HEAP32[$this + 8 >> 2] = $10;
  HEAP32[$this >> 2] = $9 | 1;
  HEAP32[$this + 4 >> 2] = $2;
  $__p$0$ph = $10;
 }
 if (($__first | 0) == ($__last | 0)) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP8[$__p$0$lcssa >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  $$02 = $__first;
  $__p$01 = $__p$0$ph;
 }
 while (1) {
  HEAP8[$__p$01 >> 0] = HEAP8[$$02 >> 0] | 0;
  $$02 = $$02 + 1 | 0;
  if (($$02 | 0) == ($__last | 0)) break; else $__p$01 = $__p$01 + 1 | 0;
 }
 $__p$0$lcssa = $__p$0$ph + $2 | 0;
 HEAP8[$__p$0$lcssa >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $17 = 0, $19 = 0, $2 = 0, $29 = 0, $3 = 0, $6 = 0, $7 = 0, $9 = 0, $i$01 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 50768;
 $0 = $this + 8 | 0;
 $1 = $this + 12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$0 >> 2] | 0;
 if (($2 | 0) != ($3 | 0)) {
  $29 = $2;
  $6 = $3;
  $i$01 = 0;
  while (1) {
   $7 = HEAP32[$6 + ($i$01 << 2) >> 2] | 0;
   if (!$7) {
    $17 = $29;
    $19 = $6;
   } else {
    $9 = $7 + 4 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    HEAP32[$9 >> 2] = $10 + -1;
    if (!$10) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] & 127]($7);
    $17 = HEAP32[$1 >> 2] | 0;
    $19 = HEAP32[$0 >> 2] | 0;
   }
   $i$01 = $i$01 + 1 | 0;
   if ($i$01 >>> 0 >= $17 - $19 >> 2 >>> 0) break; else {
    $29 = $17;
    $6 = $19;
   }
  }
 }
 if (!(HEAP8[$this + 144 >> 0] & 1)) {
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$this + 152 >> 2] | 0);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $14 = 0, $15 = 0, $22 = 0, $23 = 0, $3 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $14 = 10;
  $7 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $14 = ($3 & -2) + -1 | 0;
  $7 = $3 & 255;
 }
 $8 = ($7 & 1) == 0;
 if ($8) $15 = ($7 & 255) >>> 1; else $15 = HEAP32[$this + 4 >> 2] | 0;
 if (($14 - $15 | 0) >>> 0 < $__n >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $14, $__n - $14 + $15 | 0, $15, $15, 0, $__n, $__s);
  STACKTOP = sp;
  return $this | 0;
 }
 if (!$__n) {
  STACKTOP = sp;
  return $this | 0;
 }
 if ($8) $22 = $this + 1 | 0; else $22 = HEAP32[$this + 8 >> 2] | 0;
 _memcpy($22 + $15 | 0, $__s | 0, $__n | 0) | 0;
 $23 = $15 + $__n | 0;
 if (!(HEAP8[$this >> 0] & 1)) HEAP8[$this >> 0] = $23 << 1; else HEAP32[$this + 4 >> 2] = $23;
 HEAP8[$22 + $23 >> 0] = 0;
 STACKTOP = sp;
 return $this | 0;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$1 = 0, $2 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 if (($this | 0) == ($thrown_type | 0)) {
  $$1 = 1;
  STACKTOP = sp;
  return $$1 | 0;
 }
 if (!$thrown_type) {
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $2 = ___dynamic_cast($thrown_type, 62352) | 0;
 if (!$2) {
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 dest = $info + 0 | 0;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$info >> 2] = $2;
 HEAP32[$info + 8 >> 2] = $this;
 HEAP32[$info + 12 >> 2] = -1;
 HEAP32[$info + 48 >> 2] = 1;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 15]($2, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
 if ((HEAP32[$info + 24 >> 2] | 0) != 1) {
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2];
 $$1 = 1;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $17 = 0;
  $18 = 0;
  tempRet0 = $17;
  STACKTOP = sp;
  return $18 | 0;
 }
 $1 = ___errno_location() | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 __ZNSt3__16__clocEv() | 0;
 $3 = _strtoll($__a, $__p2, $__base) | 0;
 $4 = tempRet0;
 $5 = HEAP32[$1 >> 2] | 0;
 if (!$5) HEAP32[$1 >> 2] = $2;
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $17 = 0;
  $18 = 0;
  tempRet0 = $17;
  STACKTOP = sp;
  return $18 | 0;
 }
 if (($5 | 0) == 34) {
  HEAP32[$__err >> 2] = 4;
  $14 = ($4 | 0) > 0 | ($4 | 0) == 0 & $3 >>> 0 > 0;
  tempRet0 = $14 ? 2147483647 : -2147483648;
  STACKTOP = sp;
  return ($14 ? -1 : 0) | 0;
 } else {
  $17 = $4;
  $18 = $3;
  tempRet0 = $17;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP8[$__a >> 0] | 0) == 45) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = ___errno_location() | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__16__clocEv() | 0;
 $5 = _strtoull($__a, $__p2, $__base) | 0;
 $6 = tempRet0;
 $7 = HEAP32[$3 >> 2] | 0;
 if (!$7) HEAP32[$3 >> 2] = $4;
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($7 | 0) == 34 | ($6 >>> 0 > 0 | ($6 | 0) == 0 & $5 >>> 0 > 65535)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = $5 & 65535;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP8[$__a >> 0] | 0) == 45) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = ___errno_location() | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__16__clocEv() | 0;
 $5 = _strtoull($__a, $__p2, $__base) | 0;
 $6 = tempRet0;
 $7 = HEAP32[$3 >> 2] | 0;
 if (!$7) HEAP32[$3 >> 2] = $4;
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($7 | 0) == 34 | ($6 >>> 0 > 0 | ($6 | 0) == 0 & $5 >>> 0 > 4294967295)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = $5;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP8[$__a >> 0] | 0) == 45) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = ___errno_location() | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__16__clocEv() | 0;
 $5 = _strtoull($__a, $__p2, $__base) | 0;
 $6 = tempRet0;
 $7 = HEAP32[$3 >> 2] | 0;
 if (!$7) HEAP32[$3 >> 2] = $4;
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($7 | 0) == 34 | ($6 >>> 0 > 0 | ($6 | 0) == 0 & $5 >>> 0 > 4294967295)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = $5;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $1 = 0, $10 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48176;
 __ZNSt3__16localeC2Ev($this + 4 | 0);
 $1 = $this + 8 | 0;
 HEAP32[$1 + 0 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$this >> 2] = 47368;
 HEAP32[$this + 32 >> 2] = $__fp;
 $4 = HEAP32[$this + 4 >> 2] | 0;
 $5 = $4 + 4 | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 $7 = __ZNSt3__16locale2id5__getEv(50912) | 0;
 $8 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$4 + 8 >> 2] | 0, HEAP32[$4 + 12 >> 2] | 0, $7) | 0;
 $10 = HEAP32[$5 >> 2] | 0;
 HEAP32[$5 >> 2] = $10 + -1;
 if (!$10) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] & 127]($4);
 HEAP32[$this + 36 >> 2] = $8;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 127]($8) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $1 = 0, $10 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48112;
 __ZNSt3__16localeC2Ev($this + 4 | 0);
 $1 = $this + 8 | 0;
 HEAP32[$1 + 0 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$this >> 2] = 47624;
 HEAP32[$this + 32 >> 2] = $__fp;
 $4 = HEAP32[$this + 4 >> 2] | 0;
 $5 = $4 + 4 | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 $7 = __ZNSt3__16locale2id5__getEv(50904) | 0;
 $8 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$4 + 8 >> 2] | 0, HEAP32[$4 + 12 >> 2] | 0, $7) | 0;
 $10 = HEAP32[$5 >> 2] | 0;
 HEAP32[$5 >> 2] = $10 + -1;
 if (!$10) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] & 127]($4);
 HEAP32[$this + 36 >> 2] = $8;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 127]($8) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$01 = 0, $1 = 0, $11 = 0, $14 = 0, $2 = 0, $3 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($__n | 0) <= 0) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 $1 = $this + 12 | 0;
 $2 = $this + 16 | 0;
 $$01 = $__s;
 $__i$02 = 0;
 while (1) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$1 >> 2] = $3 + 1;
   $storemerge = HEAP8[$3 >> 0] | 0;
  } else {
   $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 127]($this) | 0;
   if (($11 | 0) == -1) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $storemerge = $11 & 255;
  }
  HEAP8[$$01 >> 0] = $storemerge;
  $14 = $__i$02 + 1 | 0;
  if (($14 | 0) < ($__n | 0)) {
   $$01 = $$01 + 1 | 0;
   $__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label | 0) == 8) {
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 return 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$01 = 0, $1 = 0, $11 = 0, $13 = 0, $2 = 0, $3 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($__n | 0) <= 0) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 $1 = $this + 12 | 0;
 $2 = $this + 16 | 0;
 $$01 = $__s;
 $__i$02 = 0;
 while (1) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$1 >> 2] = $3 + 4;
   $storemerge = HEAP32[$3 >> 2] | 0;
  } else {
   $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 127]($this) | 0;
   if (($11 | 0) == -1) {
    $__i$0$lcssa = $__i$02;
    label = 7;
    break;
   } else $storemerge = $11;
  }
  HEAP32[$$01 >> 2] = $storemerge;
  $13 = $__i$02 + 1 | 0;
  if (($13 | 0) < ($__n | 0)) {
   $$01 = $$01 + 4 | 0;
   $__i$02 = $13;
  } else {
   $__i$0$lcssa = $13;
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 return 0;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $12 = 0, $18 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) != (HEAP32[$info + 8 >> 2] | 0)) {
  $18 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$18 >> 2] | 0) + 28 >> 2] & 15]($18, $info, $adjustedPtr, $path_below);
  STACKTOP = sp;
  return;
 }
 $3 = $info + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) {
  HEAP32[$3 >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 if (($4 | 0) != ($adjustedPtr | 0)) {
  $12 = $info + 36 | 0;
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
  HEAP32[$info + 24 >> 2] = 2;
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $9 = $info + 24 | 0;
 if ((HEAP32[$9 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$9 >> 2] = $path_below;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $10 = 0, $14 = 0, $27 = 0, $3 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $7 = 10;
  $9 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $7 = ($3 & -2) + -1 | 0;
  $9 = $3 & 255;
 }
 $10 = ($9 & 1) == 0;
 if ($7 >>> 0 < $__n >>> 0) {
  if ($10) $27 = ($9 & 255) >>> 1; else $27 = HEAP32[$this + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $7, $__n - $7 | 0, $27, 0, $27, $__n, $__s);
  STACKTOP = sp;
  return;
 }
 if ($10) $14 = $this + 1 | 0; else $14 = HEAP32[$this + 8 >> 2] | 0;
 _memmove($14 | 0, $__s | 0, $__n | 0) | 0;
 HEAP8[$14 + $__n >> 0] = 0;
 if (!(HEAP8[$this >> 0] & 1)) {
  HEAP8[$this >> 0] = $__n << 1;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$this + 4 >> 2] = $__n;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $14 = 0, $15 = 0, $22 = 0, $23 = 0, $3 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $14 = 10;
  $7 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $14 = ($3 & -2) + -1 | 0;
  $7 = $3 & 255;
 }
 $8 = ($7 & 1) == 0;
 if ($8) $15 = ($7 & 255) >>> 1; else $15 = HEAP32[$this + 4 >> 2] | 0;
 if (($14 - $15 | 0) >>> 0 < $__n >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $14, $__n - $14 + $15 | 0, $15, $15, 0, $__n, $__s);
  STACKTOP = sp;
  return;
 }
 if (!$__n) {
  STACKTOP = sp;
  return;
 }
 if ($8) $22 = $this + 1 | 0; else $22 = HEAP32[$this + 8 >> 2] | 0;
 _memcpy($22 + $15 | 0, $__s | 0, $__n | 0) | 0;
 $23 = $15 + $__n | 0;
 if (!(HEAP8[$this >> 0] & 1)) HEAP8[$this >> 0] = $23 << 1; else HEAP32[$this + 4 >> 2] = $23;
 HEAP8[$22 + $23 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$1 + 8 >> 2] | 0, HEAP32[$1 + 12 >> 2] | 0, $4) | 0;
 $6 = $1 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $7 + -1;
 if (!$7) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $5);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$1 + 8 >> 2] | 0, HEAP32[$1 + 12 >> 2] | 0, $4) | 0;
 $6 = $1 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $7 + -1;
 if (!$7) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $5);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$1 + 8 >> 2] | 0, HEAP32[$1 + 12 >> 2] | 0, $4) | 0;
 $6 = $1 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $7 + -1;
 if (!$7) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $5);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$1 + 8 >> 2] | 0, HEAP32[$1 + 12 >> 2] | 0, $4) | 0;
 $6 = $1 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $7 + -1;
 if (!$7) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $5);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $0 = $this + 36 | 0;
 $1 = $this + 40 | 0;
 $2 = $__extbuf + 8 | 0;
 $3 = $__extbuf;
 $4 = $this + 32 | 0;
 while (1) {
  $5 = HEAP32[$0 >> 2] | 0;
  $10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 15]($5, HEAP32[$1 >> 2] | 0, $__extbuf, $2, $__extbe) | 0;
  $13 = (HEAP32[$__extbe >> 2] | 0) - $3 | 0;
  if ((_fwrite($__extbuf | 0, 1, $13 | 0, HEAP32[$4 >> 2] | 0) | 0) != ($13 | 0)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if (($10 | 0) == 2) {
   $$0 = -1;
   label = 5;
   break;
  } else if (($10 | 0) != 1) {
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) {
  $$0 = ((_fflush(HEAP32[$4 >> 2] | 0) | 0) != 0) << 31 >> 31;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $0 = $this + 36 | 0;
 $1 = $this + 40 | 0;
 $2 = $__extbuf + 8 | 0;
 $3 = $__extbuf;
 $4 = $this + 32 | 0;
 while (1) {
  $5 = HEAP32[$0 >> 2] | 0;
  $10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 15]($5, HEAP32[$1 >> 2] | 0, $__extbuf, $2, $__extbe) | 0;
  $13 = (HEAP32[$__extbe >> 2] | 0) - $3 | 0;
  if ((_fwrite($__extbuf | 0, 1, $13 | 0, HEAP32[$4 >> 2] | 0) | 0) != ($13 | 0)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if (($10 | 0) == 2) {
   $$0 = -1;
   label = 5;
   break;
  } else if (($10 | 0) != 1) {
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) {
  $$0 = ((_fflush(HEAP32[$4 >> 2] | 0) | 0) != 0) << 31 >> 31;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $$014$i = 0, $$023$i = 0, $$05$i = 0, $18 = 0, $6 = 0, $8 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 if ($__sz >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($__sz >>> 0 < 2) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 4 | 0;
 } else {
  $6 = $__sz + 4 & -4;
  $8 = __Znwj($6 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $8;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $8;
 }
 if (!$__sz) {
  $18 = $__p$0 + ($__sz << 2) | 0;
  HEAP32[$18 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else {
  $$014$i = $__sz;
  $$023$i = $__s;
  $$05$i = $__p$0;
 }
 while (1) {
  $$014$i = $$014$i + -1 | 0;
  HEAP32[$$05$i >> 2] = HEAP32[$$023$i >> 2];
  if (!$$014$i) break; else {
   $$023$i = $$023$i + 4 | 0;
   $$05$i = $$05$i + 4 | 0;
  }
 }
 $18 = $__p$0 + ($__sz << 2) | 0;
 HEAP32[$18 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $3 = 0, $6 = 0, $__va = 0, $ap2$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $ap2$i = sp + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l | 0) | 0;
 $1 = _malloc(240) | 0;
 do if (!$1) $$0$i = -1; else {
  HEAP32[$ap2$i >> 2] = HEAP32[$__va >> 2];
  $3 = _vsnprintf($1, 240, $__format, $ap2$i) | 0;
  if ($3 >>> 0 < 240) {
   $6 = _realloc($1, $3 + 1 | 0) | 0;
   HEAP32[$__s >> 2] = ($6 | 0) != 0 ? $6 : $1;
   $$0$i = $3;
   break;
  }
  _free($1);
  if (($3 | 0) < 0) $$0$i = -1; else {
   $10 = $3 + 1 | 0;
   $11 = _malloc($10) | 0;
   HEAP32[$__s >> 2] = $11;
   if (!$11) $$0$i = -1; else $$0$i = _vsnprintf($11, $10, $__format, $__va) | 0;
  }
 } while (0);
 if (!$0) {
  STACKTOP = sp;
  return $$0$i | 0;
 }
 _uselocale($0 | 0) | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $14 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 32 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1) {
  $3 = $this + 36 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($1 | 0)) $14 = $1; else {
   $7 = $4;
   do {
    $6 = $7 + -16 | 0;
    HEAP32[$3 >> 2] = $6;
    __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($6);
    $7 = HEAP32[$3 >> 2] | 0;
   } while (($7 | 0) != ($1 | 0));
   $14 = HEAP32[$0 >> 2] | 0;
  }
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$this + 44 >> 2] | 0, $14, (HEAP32[$this + 40 >> 2] | 0) - $14 | 0);
 }
 __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($this + 16 | 0);
 __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__b + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) != 114;
 $4 = HEAP32[$__b >> 2] | 0;
 $6 = $4;
 $7 = (HEAP32[$__e >> 2] | 0) - $6 | 0;
 $$ = $7 >>> 0 < 2147483647 ? $7 << 1 : -1;
 $13 = (HEAP32[$__n >> 2] | 0) - $6 >> 2;
 $15 = _realloc($2 ? $4 : 0, $$) | 0;
 if (!$15) {
  $17 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$17 >> 2] = 61776;
  ___cxa_throw($17 | 0, 61824, 94);
 }
 if ($2) {
  HEAP32[$__b >> 2] = $15;
  $22 = $15;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $15;
  if (!$$pr) $22 = $15; else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($$pr);
   $22 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$0 >> 2] = 124;
 HEAP32[$__n >> 2] = $22 + ($13 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($$ >>> 2 << 2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__b + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) != 114;
 $4 = HEAP32[$__b >> 2] | 0;
 $6 = $4;
 $7 = (HEAP32[$__e >> 2] | 0) - $6 | 0;
 $$ = $7 >>> 0 < 2147483647 ? $7 << 1 : -1;
 $13 = (HEAP32[$__n >> 2] | 0) - $6 >> 2;
 $15 = _realloc($2 ? $4 : 0, $$) | 0;
 if (!$15) {
  $17 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$17 >> 2] = 61776;
  ___cxa_throw($17 | 0, 61824, 94);
 }
 if ($2) {
  HEAP32[$__b >> 2] = $15;
  $22 = $15;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $15;
  if (!$$pr) $22 = $15; else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($$pr);
   $22 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$0 >> 2] = 124;
 HEAP32[$__n >> 2] = $22 + ($13 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($$ >>> 2 << 2);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50832) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$1 + 8 >> 2] | 0, HEAP32[$1 + 12 >> 2] | 0, $4) | 0;
 $6 = $1 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $7 + -1;
 if (!$7) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($__tm + 20 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $5);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__iob + 28 >> 2] | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 $4 = __ZNSt3__16locale2id5__getEv(50840) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$1 + 8 >> 2] | 0, HEAP32[$1 + 12 >> 2] | 0, $4) | 0;
 $6 = $1 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $7 + -1;
 if (!$7) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($__tm + 20 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $5);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $12 = 0;
  $13 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $12 = 0;
   $13 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  __ZNSt3__16__clocEv() | 0;
  $5 = _strtoull($__a, $__p2, $__base) | 0;
  $7 = HEAP32[$3 >> 2] | 0;
  if (!$7) HEAP32[$3 >> 2] = $4;
  if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $12 = 0;
   $13 = 0;
   break;
  }
  if (($7 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $12 = -1;
   $13 = -1;
  } else {
   $12 = tempRet0;
   $13 = $5;
  }
 } while (0);
 tempRet0 = $12;
 STACKTOP = sp;
 return $13 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$02 = 0, $1 = 0, $15 = 0, $2 = 0, $3 = 0, $6 = 0, $__i$0$lcssa = 0, $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($__n | 0) <= 0) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 $1 = $this + 24 | 0;
 $2 = $this + 28 | 0;
 $$02 = $__s;
 $__i$01 = 0;
 while (1) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   $6 = HEAP32[$$02 >> 2] | 0;
   HEAP32[$1 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = $6;
  } else if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 31]($this, HEAP32[$$02 >> 2] | 0) | 0) == -1) {
   $__i$0$lcssa = $__i$01;
   label = 7;
   break;
  }
  $15 = $__i$01 + 1 | 0;
  if (($15 | 0) < ($__n | 0)) {
   $$02 = $$02 + 4 | 0;
   $__i$01 = $15;
  } else {
   $__i$0$lcssa = $15;
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$02 = 0, $1 = 0, $16 = 0, $2 = 0, $3 = 0, $6 = 0, $__i$0$lcssa = 0, $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($__n | 0) <= 0) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 $1 = $this + 24 | 0;
 $2 = $this + 28 | 0;
 $$02 = $__s;
 $__i$01 = 0;
 while (1) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   $6 = HEAP8[$$02 >> 0] | 0;
   HEAP32[$1 >> 2] = $3 + 1;
   HEAP8[$3 >> 0] = $6;
  } else if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 31]($this, HEAPU8[$$02 >> 0] | 0) | 0) == -1) {
   $__i$0$lcssa = $__i$01;
   label = 7;
   break;
  }
  $16 = $__i$01 + 1 | 0;
  if (($16 | 0) < ($__n | 0)) {
   $$02 = $$02 + 1 | 0;
   $__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 return 0;
}

function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__b + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) != 114;
 $4 = HEAP32[$__b >> 2] | 0;
 $6 = $4;
 $7 = (HEAP32[$__e >> 2] | 0) - $6 | 0;
 $$ = $7 >>> 0 < 2147483647 ? $7 << 1 : -1;
 $12 = (HEAP32[$__n >> 2] | 0) - $6 | 0;
 $14 = _realloc($2 ? $4 : 0, $$) | 0;
 if (!$14) {
  $16 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$16 >> 2] = 61776;
  ___cxa_throw($16 | 0, 61824, 94);
 }
 if ($2) {
  HEAP32[$__b >> 2] = $14;
  $20 = $14;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $14;
  if (!$$pr) $20 = $14; else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($$pr);
   $20 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$0 >> 2] = 124;
 HEAP32[$__n >> 2] = $20 + $12;
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + $$;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $10 = 0, $14 = 0, $27 = 0, $3 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $7 = 10;
  $9 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $7 = ($3 & -2) + -1 | 0;
  $9 = $3 & 255;
 }
 $10 = ($9 & 1) == 0;
 if ($7 >>> 0 < $__n >>> 0) {
  if ($10) $27 = ($9 & 255) >>> 1; else $27 = HEAP32[$this + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $7, $__n - $7 | 0, $27, 0, $27, $__n, $__s);
  STACKTOP = sp;
  return;
 }
 if ($10) $14 = $this + 1 | 0; else $14 = HEAP32[$this + 8 >> 2] | 0;
 _memmove($14 | 0, $__s | 0, $__n | 0) | 0;
 HEAP8[$14 + $__n >> 0] = 0;
 if (!(HEAP8[$this >> 0] & 1)) {
  HEAP8[$this >> 0] = $__n << 1;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$this + 4 >> 2] = $__n;
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $2 = 0, $3 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1 : do if (($__lo2 | 0) == ($__hi2 | 0)) {
  $$02$lcssa = $__lo1;
  label = 6;
 } else {
  $$015 = $__lo2;
  $$024 = $__lo1;
  while (1) {
   if (($$024 | 0) == ($__hi1 | 0)) {
    $$0 = -1;
    break L1;
   }
   $2 = HEAP8[$$024 >> 0] | 0;
   $3 = HEAP8[$$015 >> 0] | 0;
   if ($2 << 24 >> 24 < $3 << 24 >> 24) {
    $$0 = -1;
    break L1;
   }
   if ($3 << 24 >> 24 < $2 << 24 >> 24) {
    $$0 = 1;
    break L1;
   }
   $6 = $$024 + 1 | 0;
   $$015 = $$015 + 1 | 0;
   if (($$015 | 0) == ($__hi2 | 0)) {
    $$02$lcssa = $6;
    label = 6;
    break;
   } else $$024 = $6;
  }
 } while (0);
 if ((label | 0) == 6) $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) & 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this | 0;
 var $11 = 0, $17 = 0, $2 = 0, $25 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__s = sp;
 $2 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
 if (!(HEAP32[$this + ($2 + 24) >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$__s >> 0] = 0;
 HEAP32[$__s + 4 >> 2] = $this;
 if (!(HEAP32[$this + ($2 + 16) >> 2] | 0)) {
  $11 = HEAP32[$this + ($2 + 72) >> 2] | 0;
  if ($11) __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($11);
  HEAP8[$__s >> 0] = 1;
  $17 = HEAP32[$this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 24 >> 2] & 127]($17) | 0) == -1) {
   $25 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
   __ZNSt3__18ios_base5clearEj($this + $25 | 0, HEAP32[$this + ($25 + 16) >> 2] | 1);
  }
 }
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this | 0;
 var $11 = 0, $17 = 0, $2 = 0, $25 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__s = sp;
 $2 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
 if (!(HEAP32[$this + ($2 + 24) >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$__s >> 0] = 0;
 HEAP32[$__s + 4 >> 2] = $this;
 if (!(HEAP32[$this + ($2 + 16) >> 2] | 0)) {
  $11 = HEAP32[$this + ($2 + 72) >> 2] | 0;
  if ($11) __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11);
  HEAP8[$__s >> 0] = 1;
  $17 = HEAP32[$this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 24 >> 2] & 127]($17) | 0) == -1) {
   $25 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
   __ZNSt3__18ios_base5clearEj($this + $25 | 0, HEAP32[$this + ($25 + 16) >> 2] | 1);
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return;
}

function _wcrtomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP;
 if (!$s) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 128) {
  HEAP8[$s >> 0] = $wc;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 2048) {
  HEAP8[$s >> 0] = $wc >>> 6 | 192;
  HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
  HEAP8[$s >> 0] = $wc >>> 12 | 224;
  HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
  HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
  $$0 = 3;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($wc + -65536 | 0) >>> 0 < 1048576) {
  HEAP8[$s >> 0] = $wc >>> 18 | 240;
  HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
  HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
  HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
  $$0 = 4;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($agg$result, $__lhs, $__rhs) {
 $agg$result = $agg$result | 0;
 $__lhs = $__lhs | 0;
 $__rhs = $__rhs | 0;
 var $0 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $0 = HEAP8[$__lhs >> 0] | 0;
 if (!($0 & 1)) {
  $13 = _strlen($__rhs | 0) | 0;
  $14 = ($0 & 255) >>> 1;
  $15 = $__lhs + 1 | 0;
 } else {
  $4 = HEAP32[$__lhs + 4 >> 2] | 0;
  $5 = _strlen($__rhs | 0) | 0;
  $13 = $5;
  $14 = $4;
  $15 = HEAP32[$__lhs + 8 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($agg$result, $15, $14, $13 + $14 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($agg$result, $__rhs, $13) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $16 = 0, $21 = 0, $27 = 0, $30 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $4 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0;
 if (!(HEAP32[$1 + ($4 + 24) >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$1 + ($4 + 16) >> 2] | 0) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[$1 + ($4 + 4) >> 2] & 8192)) {
  STACKTOP = sp;
  return;
 }
 if (__ZSt18uncaught_exceptionv() | 0) {
  STACKTOP = sp;
  return;
 }
 $16 = HEAP32[$0 >> 2] | 0;
 $21 = HEAP32[$16 + ((HEAP32[(HEAP32[$16 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 24 >> 2] & 127]($21) | 0) != -1) {
  STACKTOP = sp;
  return;
 }
 $27 = HEAP32[$0 >> 2] | 0;
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj($27 + $30 | 0, HEAP32[$27 + ($30 + 16) >> 2] | 1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $16 = 0, $21 = 0, $27 = 0, $30 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $4 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0;
 if (!(HEAP32[$1 + ($4 + 24) >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$1 + ($4 + 16) >> 2] | 0) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[$1 + ($4 + 4) >> 2] & 8192)) {
  STACKTOP = sp;
  return;
 }
 if (__ZSt18uncaught_exceptionv() | 0) {
  STACKTOP = sp;
  return;
 }
 $16 = HEAP32[$0 >> 2] | 0;
 $21 = HEAP32[$16 + ((HEAP32[(HEAP32[$16 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 24 >> 2] & 127]($21) | 0) != -1) {
  STACKTOP = sp;
  return;
 }
 $27 = HEAP32[$0 >> 2] | 0;
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj($27 + $30 | 0, HEAP32[$27 + ($30 + 16) >> 2] | 1);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $2 = 0, $3 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1 : do if (($__lo2 | 0) == ($__hi2 | 0)) {
  $$02$lcssa = $__lo1;
  label = 6;
 } else {
  $$015 = $__lo2;
  $$024 = $__lo1;
  while (1) {
   if (($$024 | 0) == ($__hi1 | 0)) {
    $$0 = -1;
    break L1;
   }
   $2 = HEAP32[$$024 >> 2] | 0;
   $3 = HEAP32[$$015 >> 2] | 0;
   if (($2 | 0) < ($3 | 0)) {
    $$0 = -1;
    break L1;
   }
   if (($3 | 0) < ($2 | 0)) {
    $$0 = 1;
    break L1;
   }
   $6 = $$024 + 4 | 0;
   $$015 = $$015 + 4 | 0;
   if (($$015 | 0) == ($__hi2 | 0)) {
    $$02$lcssa = $6;
    label = 6;
    break;
   } else $$024 = $6;
  }
 } while (0);
 if ((label | 0) == 6) $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) & 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($__nd) {
 $__nd = $__nd | 0;
 var sp = 0;
 sp = STACKTOP;
 if (!$__nd) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(HEAP32[$__nd >> 2] | 0);
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(HEAP32[$__nd + 4 >> 2] | 0);
 if (HEAP8[$__nd + 28 >> 0] & 1) _free(HEAP32[$__nd + 36 >> 2] | 0);
 if (!(HEAP8[$__nd + 16 >> 0] & 1)) {
  _free($__nd);
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$__nd + 24 >> 2] | 0);
 _free($__nd);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEFvjRKS4_EvPS7_JjS9_EE6invokeERKSB_SC_jPS4_($method, $wireThis, $args, $args1) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $1 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method >> 0] | HEAPU8[$method + 1 >> 0] << 8 | HEAPU8[$method + 2 >> 0] << 16 | HEAPU8[$method + 3 >> 0] << 24;
 $$index1 = $method + 4 | 0;
 $$field2 = HEAPU8[$$index1 >> 0] | HEAPU8[$$index1 + 1 >> 0] << 8 | HEAPU8[$$index1 + 2 >> 0] << 16 | HEAPU8[$$index1 + 3 >> 0] << 24;
 $1 = $wireThis + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) {
  $8 = $$field;
  FUNCTION_TABLE_viii[$8 & 7]($1, $args, $args1);
  STACKTOP = sp;
  return;
 } else {
  $8 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$field >> 2] | 0;
  FUNCTION_TABLE_viii[$8 & 7]($1, $args, $args1);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $$012$i = 0, $$03$i = 0, $16 = 0, $6 = 0, $8 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 if ($__n >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($__n >>> 0 < 2) {
  HEAP8[$this >> 0] = $__n << 1;
  $__p$0 = $this + 4 | 0;
 } else {
  $6 = $__n + 4 & -4;
  $8 = __Znwj($6 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $8;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $8;
 }
 if (!$__n) {
  $16 = $__p$0 + ($__n << 2) | 0;
  HEAP32[$16 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else {
  $$012$i = $__n;
  $$03$i = $__p$0;
 }
 while (1) {
  $$012$i = $$012$i + -1 | 0;
  HEAP32[$$03$i >> 2] = $__c;
  if (!$$012$i) break; else $$03$i = $$03$i + 4 | 0;
 }
 $16 = $__p$0 + ($__n << 2) | 0;
 HEAP32[$16 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $12 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$info + 8 >> 2] | 0) != ($this | 0)) {
  STACKTOP = sp;
  return;
 }
 $3 = $info + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) {
  HEAP32[$3 >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 if (($4 | 0) != ($adjustedPtr | 0)) {
  $12 = $info + 36 | 0;
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
  HEAP32[$info + 24 >> 2] = 2;
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $9 = $info + 24 | 0;
 if ((HEAP32[$9 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$9 >> 2] = $path_below;
 STACKTOP = sp;
 return;
}

function __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($agg$result, $__lhs, $__rhs) {
 $agg$result = $agg$result | 0;
 $__lhs = $__lhs | 0;
 $__rhs = $__rhs | 0;
 var $0 = 0, $1 = 0, $16 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $0 = _strlen($__lhs | 0) | 0;
 $1 = HEAP8[$__rhs >> 0] | 0;
 if (!($1 & 1)) $9 = ($1 & 255) >>> 1; else $9 = HEAP32[$__rhs + 4 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($agg$result, $__lhs, $0, $9 + $0 | 0);
 if (!(HEAP8[$__rhs >> 0] & 1)) $16 = $__rhs + 1 | 0; else $16 = HEAP32[$__rhs + 8 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($agg$result, $16, $9) | 0;
 STACKTOP = sp;
 return;
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}

function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $$0$i = 0, $0 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 if (!$__cap) $14 = 0; else {
  $3 = HEAP32[$__a >> 2] | 0;
  $4 = $__cap << 4;
  $6 = $3 + 4096 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if (($3 + 4096 - $7 | 0) >>> 0 < $4 >>> 0) $$0$i = _malloc($4) | 0; else {
   HEAP32[$6 >> 2] = $7 + $4;
   $$0$i = $7;
  }
  $14 = $$0$i;
 }
 HEAP32[$this >> 2] = $14;
 $15 = $14 + ($__start << 4) | 0;
 HEAP32[$this + 8 >> 2] = $15;
 HEAP32[$this + 4 >> 2] = $15;
 HEAP32[$0 >> 2] = $14 + ($__cap << 4);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $0 = 0, $18 = 0, $19 = 0, $4 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 127]($0) | 0;
 $7 = HEAP8[$4 >> 0] | 0;
 if (!($7 & 1)) {
  $18 = $4 + 4 | 0;
  $19 = ($7 & 255) >>> 1;
 } else {
  $18 = HEAP32[$4 + 8 >> 2] | 0;
  $19 = HEAP32[$4 + 4 >> 2] | 0;
 }
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, $18, $18 + ($19 << 2) | 0);
 STACKTOP = sp;
 return;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $4 = $2 & 2047;
 if (!$4) {
  if ($x != 0.0) {
   $7 = +_frexp($x * 18446744073709551616.0, $e);
   $$01 = $7;
   $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
  } else {
   $$01 = $x;
   $storemerge = 0;
  }
  HEAP32[$e >> 2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;
  return +$$0;
 } else if (($4 | 0) == 2047) {
  $$0 = $x;
  STACKTOP = sp;
  return +$$0;
 } else {
  HEAP32[$e >> 2] = $4 + -1022;
  HEAP32[tempDoublePtr >> 2] = $0;
  HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
  $$0 = +HEAPF64[tempDoublePtr >> 3];
  STACKTOP = sp;
  return +$$0;
 }
 return +(0.0);
}

function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEKFjvEjPKS7_JEE6invokeERKS9_SB_($method, $wireThis) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $1 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method >> 0] | HEAPU8[$method + 1 >> 0] << 8 | HEAPU8[$method + 2 >> 0] << 16 | HEAPU8[$method + 3 >> 0] << 24;
 $$index1 = $method + 4 | 0;
 $$field2 = HEAPU8[$$index1 >> 0] | HEAPU8[$$index1 + 1 >> 0] << 8 | HEAPU8[$$index1 + 2 >> 0] << 16 | HEAPU8[$$index1 + 3 >> 0] << 24;
 $1 = $wireThis + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) {
  $8 = $$field;
  $9 = FUNCTION_TABLE_ii[$8 & 127]($1) | 0;
  STACKTOP = sp;
  return $9 | 0;
 } else {
  $8 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$field >> 2] | 0;
  $9 = FUNCTION_TABLE_ii[$8 & 127]($1) | 0;
  STACKTOP = sp;
  return $9 | 0;
 }
 return 0;
}

function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEFvRKS4_EvPS7_JS9_EE6invokeERKSB_SC_PS4_($method, $wireThis, $args) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 $args = $args | 0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $1 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method >> 0] | HEAPU8[$method + 1 >> 0] << 8 | HEAPU8[$method + 2 >> 0] << 16 | HEAPU8[$method + 3 >> 0] << 24;
 $$index1 = $method + 4 | 0;
 $$field2 = HEAPU8[$$index1 >> 0] | HEAPU8[$$index1 + 1 >> 0] << 8 | HEAPU8[$$index1 + 2 >> 0] << 16 | HEAPU8[$$index1 + 3 >> 0] << 24;
 $1 = $wireThis + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) {
  $8 = $$field;
  FUNCTION_TABLE_vii[$8 & 63]($1, $args);
  STACKTOP = sp;
  return;
 } else {
  $8 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$field >> 2] | 0;
  FUNCTION_TABLE_vii[$8 & 63]($1, $args);
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $0 = 0, $18 = 0, $19 = 0, $4 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 127]($0) | 0;
 $7 = HEAP8[$4 >> 0] | 0;
 if (!($7 & 1)) {
  $18 = $4 + 1 | 0;
  $19 = ($7 & 255) >>> 1;
 } else {
  $18 = HEAP32[$4 + 8 >> 2] | 0;
  $19 = HEAP32[$4 + 4 >> 2] | 0;
 }
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, $18, $18 + $19 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $this + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) != ($1 | 0)) {
  $6 = $3;
  do {
   $5 = $6 + -16 | 0;
   HEAP32[$2 >> 2] = $5;
   __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($5);
   $6 = HEAP32[$2 >> 2] | 0;
  } while (($6 | 0) != ($1 | 0));
 }
 $9 = HEAP32[$this >> 2] | 0;
 if (!$9) {
  STACKTOP = sp;
  return;
 }
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[HEAP32[$this + 16 >> 2] >> 2] | 0, $9, (HEAP32[$this + 12 >> 2] | 0) - $9 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $$0$i = 0, $0 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 if (!$__cap) $14 = 0; else {
  $3 = HEAP32[$__a >> 2] | 0;
  $4 = $__cap << 4;
  $6 = $3 + 4096 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if (($3 + 4096 - $7 | 0) >>> 0 < $4 >>> 0) $$0$i = _malloc($4) | 0; else {
   HEAP32[$6 >> 2] = $7 + $4;
   $$0$i = $7;
  }
  $14 = $$0$i;
 }
 HEAP32[$this >> 2] = $14;
 $15 = $14 + ($__start << 4) | 0;
 HEAP32[$this + 8 >> 2] = $15;
 HEAP32[$this + 4 >> 2] = $15;
 HEAP32[$0 >> 2] = $14 + ($__cap << 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $$0$i = 0, $0 = 0, $16 = 0, $17 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 if (!$__cap) $16 = 0; else {
  $3 = HEAP32[$__a >> 2] | 0;
  $6 = ($__cap * 24 | 0) + 15 & -16;
  $8 = $3 + 4096 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  if (($3 + 4096 - $9 | 0) >>> 0 < $6 >>> 0) $$0$i = _malloc($6) | 0; else {
   HEAP32[$8 >> 2] = $9 + $6;
   $$0$i = $9;
  }
  $16 = $$0$i;
 }
 HEAP32[$this >> 2] = $16;
 $17 = $16 + ($__start * 24 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $17;
 HEAP32[$this + 4 >> 2] = $17;
 HEAP32[$0 >> 2] = $16 + ($__cap * 24 | 0);
 STACKTOP = sp;
 return;
}

function _strtold_l($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $16 = 0, $20 = 0, $7 = 0, $9 = 0.0, $f$i$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f$i$i = sp;
 dest = $f$i$i + 0 | 0;
 stop = dest + 108 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f$i$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 $1 = $f$i$i + 8 | 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$f$i$i + 44 >> 2] = $s;
 HEAP32[$f$i$i + 76 >> 2] = -1;
 HEAP32[$f$i$i + 104 >> 2] = 0;
 $7 = $f$i$i + 108 | 0;
 HEAP32[$7 >> 2] = ~$s;
 HEAP32[$f$i$i + 100 >> 2] = -1;
 $9 = +___floatscan($f$i$i, 2, 1);
 $16 = (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) | 0;
 if (!$p) {
  STACKTOP = sp;
  return +$9;
 }
 if (!$16) $20 = $s; else $20 = $s + $16 | 0;
 HEAP32[$p >> 2] = $20;
 STACKTOP = sp;
 return +$9;
}

function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $i$01$i = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48496;
 $1 = HEAP32[$this + 40 >> 2] | 0;
 if ($1) {
  $3 = $this + 32 | 0;
  $4 = $this + 36 | 0;
  $i$01$i = $1;
  do {
   $i$01$i = $i$01$i + -1 | 0;
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[$3 >> 2] | 0) + ($i$01$i << 2) >> 2] & 7](0, $this, HEAP32[(HEAP32[$4 >> 2] | 0) + ($i$01$i << 2) >> 2] | 0);
  } while (($i$01$i | 0) != 0);
 }
 $14 = HEAP32[$this + 28 >> 2] | 0;
 $15 = $14 + 4 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 HEAP32[$15 >> 2] = $16 + -1;
 if (!$16) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$14 >> 2] | 0) + 8 >> 2] & 127]($14);
 _free(HEAP32[$this + 32 >> 2] | 0);
 _free(HEAP32[$this + 36 >> 2] | 0);
 _free(HEAP32[$this + 48 >> 2] | 0);
 _free(HEAP32[$this + 60 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $$0 = 0, $$1 = 0, $$first = 0, $5 = 0, $t$0$pn = 0, sp = 0;
 sp = STACKTOP;
 L1 : do if (($first | 0) == ($last | 0)) $$1 = $first; else {
  $$first = (HEAP8[$first >> 0] | 0) == 110 ? $first + 1 | 0 : $first;
  if (($$first | 0) == ($last | 0)) $$1 = $first; else {
   $5 = HEAP8[$$first >> 0] | 0;
   if ($5 << 24 >> 24 == 48) {
    $$1 = $$first + 1 | 0;
    break;
   }
   if (($5 + -49 << 24 >> 24 & 255) < 9) {
    $t$0$pn = $$first;
    while (1) {
     $$0 = $t$0$pn + 1 | 0;
     if (($$0 | 0) == ($last | 0)) {
      $$1 = $last;
      break L1;
     }
     if (((HEAP8[$$0 >> 0] | 0) + -48 | 0) >>> 0 < 10) $t$0$pn = $$0; else {
      $$1 = $$0;
      break;
     }
    }
   } else $$1 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$012 = 0, $13 = 0, $__i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (HEAP8[$this + 44 >> 0] | 0) {
  $$0 = _fwrite($__s | 0, 4, $__n | 0, HEAP32[$this + 32 >> 2] | 0) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($__n | 0) > 0) {
  $$012 = $__s;
  $__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 while (1) {
  if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 31]($this, HEAP32[$$012 >> 2] | 0) | 0) == -1) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $13 = $__i$03 + 1 | 0;
  if (($13 | 0) < ($__n | 0)) {
   $$012 = $$012 + 4 | 0;
   $__i$03 = $13;
  } else {
   $$0 = $13;
   label = 6;
   break;
  }
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$012 = 0, $14 = 0, $__i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (HEAP8[$this + 44 >> 0] | 0) {
  $$0 = _fwrite($__s | 0, 1, $__n | 0, HEAP32[$this + 32 >> 2] | 0) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($__n | 0) > 0) {
  $$012 = $__s;
  $__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 while (1) {
  if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 31]($this, HEAPU8[$$012 >> 0] | 0) | 0) == -1) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = $__i$03 + 1 | 0;
  if (($14 | 0) < ($__n | 0)) {
   $$012 = $$012 + 1 | 0;
   $__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _strtoll($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $$sink$i = 0, $0 = 0, $10 = 0, $12 = 0, $13 = 0, $4 = 0, $f$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f$i = sp;
 HEAP32[$f$i >> 2] = 0;
 $0 = $f$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 HEAP32[$f$i + 44 >> 2] = $s;
 $$sink$i = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 $4 = $f$i + 8 | 0;
 HEAP32[$4 >> 2] = $$sink$i;
 HEAP32[$f$i + 76 >> 2] = -1;
 HEAP32[$f$i + 104 >> 2] = 0;
 $10 = $f$i + 108 | 0;
 HEAP32[$10 >> 2] = $$sink$i - $s;
 HEAP32[$f$i + 100 >> 2] = $$sink$i;
 $12 = ___intscan($f$i, $base, 1, 0, -2147483648) | 0;
 $13 = tempRet0;
 if (!$p) {
  tempRet0 = $13;
  STACKTOP = sp;
  return $12 | 0;
 }
 HEAP32[$p >> 2] = $s + ((HEAP32[$0 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) - (HEAP32[$4 >> 2] | 0));
 tempRet0 = $13;
 STACKTOP = sp;
 return $12 | 0;
}

function _strtoull($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $$sink$i = 0, $0 = 0, $10 = 0, $12 = 0, $13 = 0, $4 = 0, $f$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f$i = sp;
 HEAP32[$f$i >> 2] = 0;
 $0 = $f$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 HEAP32[$f$i + 44 >> 2] = $s;
 $$sink$i = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 $4 = $f$i + 8 | 0;
 HEAP32[$4 >> 2] = $$sink$i;
 HEAP32[$f$i + 76 >> 2] = -1;
 HEAP32[$f$i + 104 >> 2] = 0;
 $10 = $f$i + 108 | 0;
 HEAP32[$10 >> 2] = $$sink$i - $s;
 HEAP32[$f$i + 100 >> 2] = $$sink$i;
 $12 = ___intscan($f$i, $base, 1, -1, -1) | 0;
 $13 = tempRet0;
 if (!$p) {
  tempRet0 = $13;
  STACKTOP = sp;
  return $12 | 0;
 }
 HEAP32[$p >> 2] = $s + ((HEAP32[$0 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) - (HEAP32[$4 >> 2] | 0));
 tempRet0 = $13;
 STACKTOP = sp;
 return $12 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($this) {
 $this = $this | 0;
 var $$pre1 = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $21 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $10 = ($0 & 255) >>> 1;
  $14 = $this + 1 | 0;
 } else {
  $10 = HEAP32[$this + 4 >> 2] | 0;
  $14 = HEAP32[$this + 8 >> 2] | 0;
 }
 $11 = ($10 | 0) != 0 & 1;
 $$pre1 = $10 - $11 | 0;
 if (($10 | 0) == ($11 | 0)) $16 = $0; else {
  _memmove($14 | 0, $14 + $11 | 0, $$pre1 | 0) | 0;
  $16 = HEAP8[$this >> 0] | 0;
 }
 if (!($16 & 1)) {
  HEAP8[$this >> 0] = $$pre1 << 1;
  $21 = $14 + $$pre1 | 0;
  HEAP8[$21 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$this + 4 >> 2] = $$pre1;
  $21 = $14 + $$pre1 | 0;
  HEAP8[$21 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $this + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) != ($1 | 0)) {
  $6 = $3;
  do {
   $5 = $6 + -16 | 0;
   HEAP32[$2 >> 2] = $5;
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
   $6 = HEAP32[$2 >> 2] | 0;
  } while (($6 | 0) != ($1 | 0));
 }
 $9 = HEAP32[$this >> 2] | 0;
 if (!$9) {
  STACKTOP = sp;
  return;
 }
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[HEAP32[$this + 16 >> 2] >> 2] | 0, $9, (HEAP32[$this + 12 >> 2] | 0) - $9 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $13 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) {
  STACKTOP = sp;
  return;
 }
 $2 = $this + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) == ($0 | 0)) $13 = $0; else {
  $6 = $3;
  do {
   $5 = $6 + -16 | 0;
   HEAP32[$2 >> 2] = $5;
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
   $6 = HEAP32[$2 >> 2] | 0;
  } while (($6 | 0) != ($0 | 0));
  $13 = HEAP32[$this >> 2] | 0;
 }
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$this + 12 >> 2] | 0, $13, (HEAP32[$this + 8 >> 2] | 0) - $13 | 0);
 STACKTOP = sp;
 return;
}

function ___cxx_global_array_dtor108($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 if (HEAP8[58292] & 1) _free(HEAP32[14575] | 0);
 if (HEAP8[58280] & 1) _free(HEAP32[14572] | 0);
 if (HEAP8[58268] & 1) _free(HEAP32[14569] | 0);
 if (HEAP8[58256] & 1) _free(HEAP32[14566] | 0);
 if (HEAP8[58244] & 1) _free(HEAP32[14563] | 0);
 if (HEAP8[58232] & 1) _free(HEAP32[14560] | 0);
 if (HEAP8[58220] & 1) _free(HEAP32[14557] | 0);
 if (HEAP8[58208] & 1) _free(HEAP32[14554] | 0);
 if (HEAP8[58196] & 1) _free(HEAP32[14551] | 0);
 if (HEAP8[58184] & 1) _free(HEAP32[14548] | 0);
 if (HEAP8[58172] & 1) _free(HEAP32[14545] | 0);
 if (HEAP8[58160] & 1) _free(HEAP32[14542] | 0);
 if (HEAP8[58148] & 1) _free(HEAP32[14539] | 0);
 if (!(HEAP8[58136] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[14536] | 0);
 STACKTOP = sp;
 return;
}

function ___cxx_global_array_dtor93($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 if (HEAP8[57756] & 1) _free(HEAP32[14441] | 0);
 if (HEAP8[57744] & 1) _free(HEAP32[14438] | 0);
 if (HEAP8[57732] & 1) _free(HEAP32[14435] | 0);
 if (HEAP8[57720] & 1) _free(HEAP32[14432] | 0);
 if (HEAP8[57708] & 1) _free(HEAP32[14429] | 0);
 if (HEAP8[57696] & 1) _free(HEAP32[14426] | 0);
 if (HEAP8[57684] & 1) _free(HEAP32[14423] | 0);
 if (HEAP8[57672] & 1) _free(HEAP32[14420] | 0);
 if (HEAP8[57660] & 1) _free(HEAP32[14417] | 0);
 if (HEAP8[57648] & 1) _free(HEAP32[14414] | 0);
 if (HEAP8[57636] & 1) _free(HEAP32[14411] | 0);
 if (HEAP8[57624] & 1) _free(HEAP32[14408] | 0);
 if (HEAP8[57612] & 1) _free(HEAP32[14405] | 0);
 if (!(HEAP8[57600] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[14402] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__119__iostream_category7messageEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 var $2 = 0, $4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 if (($ev | 0) != 1 & ($ev | 0) < 257) {
  $2 = _strerror($ev | 0) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, $2, _strlen($2 | 0) | 0);
  STACKTOP = sp;
  return;
 } else {
  $4 = __Znwj(48) | 0;
  HEAP32[$agg$result + 8 >> 2] = $4;
  HEAP32[$agg$result >> 2] = 49;
  HEAP32[$agg$result + 4 >> 2] = 35;
  dest = $4 + 0 | 0;
  src = 48408 | 0;
  stop = dest + 35 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP8[$4 + 35 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 15]($8, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, ($1 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 if (!($1 & 1)) {
  $11 = $0 + 1 | 0;
  $12 = ($1 & 255) >>> 1;
 } else {
  $11 = HEAP32[$this + 20 >> 2] | 0;
  $12 = HEAP32[$this + 16 >> 2] | 0;
 }
 $13 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this, $11, $12) | 0;
 HEAP32[$agg$result + 0 >> 2] = HEAP32[$13 + 0 >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$13 + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$13 + 8 >> 2];
 HEAP32[$13 + 0 >> 2] = 0;
 HEAP32[$13 + 4 >> 2] = 0;
 HEAP32[$13 + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e$0, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] & 127]($0) | 0;
 $9 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $4, $4 + 288 | 0, $__ct, $__err, 0) | 0) - $4 | 0;
 if (($9 | 0) >= 288) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$__m >> 2] = (($9 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e$0, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] & 127]($0) | 0;
 $9 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $4, $4 + 288 | 0, $__ct, $__err, 0) | 0) - $4 | 0;
 if (($9 | 0) >= 288) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$__m >> 2] = (($9 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below);
  STACKTOP = sp;
  return;
 } else {
  $4 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 15]($4, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0.0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  __ZNSt3__16__clocEv() | 0;
  $3 = +_strtold_l($__a, $__p2);
  $4 = HEAP32[$1 >> 2] | 0;
  if (!$4) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
   break;
  }
  if (($4 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = $3;
  } else $$0 = $3;
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0.0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  __ZNSt3__16__clocEv() | 0;
  $3 = +_strtold_l($__a, $__p2);
  $4 = HEAP32[$1 >> 2] | 0;
  if (!$4) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
   break;
  }
  if (($4 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = $3;
  } else $$0 = $3;
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $1 = ___errno_location() | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 __ZNSt3__16__clocEv() | 0;
 $3 = +_strtold_l($__a, $__p2);
 $4 = HEAP32[$1 >> 2] | 0;
 if (!$4) HEAP32[$1 >> 2] = $2;
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 if (($4 | 0) == 34) HEAP32[$__err >> 2] = 4;
 $$0 = $3;
 STACKTOP = sp;
 return +$$0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e$0, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $3 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $3 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$0 >> 2] >> 2] & 127]($0) | 0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $3, $3 + 168 | 0, $__ct, $__err, 0) | 0) - $3 | 0;
 if (($8 | 0) >= 168) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$__w >> 2] = (($8 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e$0, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $3 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $3 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$0 >> 2] >> 2] & 127]($0) | 0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $3, $3 + 168 | 0, $__ct, $__err, 0) | 0) - $3 | 0;
 if (($8 | 0) >= 168) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$__w >> 2] = (($8 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if (HEAP8[51200] | 0) {
  $8 = HEAP32[12798] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(___cxa_guard_acquire(51200) | 0)) {
  $8 = HEAP32[12798] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(HEAP8[56224] | 0)) if (___cxa_guard_acquire(56224) | 0) {
  _memset(55936, 0, 288) | 0;
  ___cxa_atexit(119, 0, ___dso_handle | 0) | 0;
  ___cxa_guard_release(56224);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(55936, 56232, 2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(55948, 56240, 2);
 HEAP32[12798] = 55936;
 ___cxa_guard_release(51200);
 $8 = HEAP32[12798] | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if (HEAP8[51216] | 0) {
  $8 = HEAP32[12802] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(___cxa_guard_acquire(51216) | 0)) {
  $8 = HEAP32[12802] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(HEAP8[55896] | 0)) if (___cxa_guard_acquire(55896) | 0) {
  _memset(55608, 0, 288) | 0;
  ___cxa_atexit(120, 0, ___dso_handle | 0) | 0;
  ___cxa_guard_release(55896);
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(55608, 55904);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(55620, 55920);
 HEAP32[12802] = 55608;
 ___cxa_guard_release(51216);
 $8 = HEAP32[12802] | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZN10emscripten8internal12operator_newI18CompilerLexerTokenJEEEPT_DpOT0_() {
 var $$lcssa$i = 0, $0 = 0, $2 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = _malloc(24) | 0;
 L1 : do if (!$0) {
  while (1) {
   $2 = HEAP32[15470] | 0;
   HEAP32[15470] = $2 + 0;
   if (!$2) break;
   FUNCTION_TABLE_v[$2 & 3]();
   $5 = _malloc(24) | 0;
   if ($5) {
    $$lcssa$i = $5;
    break L1;
   }
  }
  $7 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$7 >> 2] = 61776;
  ___cxa_throw($7 | 0, 61824, 94);
 } else $$lcssa$i = $0; while (0);
 HEAP32[$$lcssa$i + 0 >> 2] = 0;
 HEAP32[$$lcssa$i + 4 >> 2] = 0;
 HEAP32[$$lcssa$i + 8 >> 2] = 0;
 HEAP32[$$lcssa$i + 12 >> 2] = 0;
 HEAP32[$$lcssa$i + 16 >> 2] = 0;
 HEAP32[$$lcssa$i + 20 >> 2] = 0;
 STACKTOP = sp;
 return $$lcssa$i | 0;
}

function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__loc >> 2] | 0;
 $1 = __ZNSt3__16locale2id5__getEv(50912) | 0;
 $2 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0, $1) | 0;
 $3 = $this + 36 | 0;
 HEAP32[$3 >> 2] = $2;
 $8 = $this + 44 | 0;
 HEAP32[$8 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 127]($2) | 0;
 $9 = HEAP32[$3 >> 2] | 0;
 HEAP8[$this + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 28 >> 2] & 127]($9) | 0) & 1;
 if ((HEAP32[$8 >> 2] | 0) > 8) __ZNSt3__121__throw_runtime_errorEPKc(47576); else {
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__loc >> 2] | 0;
 $1 = __ZNSt3__16locale2id5__getEv(50904) | 0;
 $2 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0, $1) | 0;
 $3 = $this + 36 | 0;
 HEAP32[$3 >> 2] = $2;
 $8 = $this + 44 | 0;
 HEAP32[$8 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 127]($2) | 0;
 $9 = HEAP32[$3 >> 2] | 0;
 HEAP8[$this + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 28 >> 2] & 127]($9) | 0) & 1;
 if ((HEAP32[$8 >> 2] | 0) > 8) __ZNSt3__121__throw_runtime_errorEPKc(47576); else {
  STACKTOP = sp;
  return;
 }
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 $10$0 = _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
 return $10$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($this, $__s, $__sz, $__reserve) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 $__reserve = $__reserve | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 if ($__reserve >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($__reserve >>> 0 < 11) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__reserve + 16 & -16;
  $7 = _malloc($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0;
 HEAP8[$__p$0 + $__sz >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $this + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) != ($1 | 0)) {
  $6 = $3;
  do {
   $5 = $6 + -24 | 0;
   HEAP32[$2 >> 2] = $5;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
   $6 = HEAP32[$2 >> 2] | 0;
  } while (($6 | 0) != ($1 | 0));
 }
 $9 = HEAP32[$this >> 2] | 0;
 if (!$9) {
  STACKTOP = sp;
  return;
 }
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[HEAP32[$this + 16 >> 2] >> 2] | 0, $9, (HEAP32[$this + 12 >> 2] | 0) - $9 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $13 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) {
  STACKTOP = sp;
  return;
 }
 $2 = $this + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) == ($0 | 0)) $13 = $0; else {
  $6 = $3;
  do {
   $5 = $6 + -24 | 0;
   HEAP32[$2 >> 2] = $5;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
   $6 = HEAP32[$2 >> 2] | 0;
  } while (($6 | 0) != ($0 | 0));
  $13 = HEAP32[$this >> 2] | 0;
 }
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$this + 12 >> 2] | 0, $13, (HEAP32[$this + 8 >> 2] | 0) - $13 | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $vec = $vec | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $3 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low;
  STACKTOP = sp;
  return $$01$lcssa | 0;
 }
 $3 = ($high + -4 - $low | 0) >>> 2;
 $$012 = $low;
 $$03 = $vec;
 while (1) {
  $4 = HEAP32[$$012 >> 2] | 0;
  if ($4 >>> 0 < 128) $8 = HEAP16[(__ZNSt3__15ctypeIcE13classic_tableEv() | 0) + ($4 << 1) >> 1] | 0; else $8 = 0;
  HEAP16[$$03 >> 1] = $8;
  $$012 = $$012 + 4 | 0;
  if (($$012 | 0) == ($high | 0)) break; else $$03 = $$03 + 2 | 0;
 }
 $$01$lcssa = $low + ($3 + 1 << 2) | 0;
 STACKTOP = sp;
 return $$01$lcssa | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] & 3]($8, $info, $current_ptr + $offset_to_base$0 | 0, ($1 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16__treeINS_12__value_typeIN4Enum5Token4Type4TypeE9TokenInfoEENS_19__map_value_compareIS5_S7_NS_4lessIS5_EELb1EEENS_9allocatorIS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE($__nd) {
 $__nd = $__nd | 0;
 var sp = 0;
 sp = STACKTOP;
 if (!$__nd) {
  STACKTOP = sp;
  return;
 } else {
  __ZNSt3__16__treeINS_12__value_typeIN4Enum5Token4Type4TypeE9TokenInfoEENS_19__map_value_compareIS5_S7_NS_4lessIS5_EELb1EEENS_9allocatorIS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE(HEAP32[$__nd >> 2] | 0);
  __ZNSt3__16__treeINS_12__value_typeIN4Enum5Token4Type4TypeE9TokenInfoEENS_19__map_value_compareIS5_S7_NS_4lessIS5_EELb1EEENS_9allocatorIS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE(HEAP32[$__nd + 4 >> 2] | 0);
  _free($__nd);
  STACKTOP = sp;
  return;
 }
}

function __ZN10emscripten8internal14raw_destructorINSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEEEvPT_($ptr) {
 $ptr = $ptr | 0;
 var $1 = 0, $21 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 if (!$ptr) {
  STACKTOP = sp;
  return;
 }
 $1 = HEAP32[$ptr >> 2] | 0;
 if ($1) {
  $3 = $ptr + 4 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($1 | 0)) $21 = $1; else {
   $7 = $4;
   do {
    $6 = $7 + -24 | 0;
    HEAP32[$3 >> 2] = $6;
    if (HEAP8[$7 + -12 >> 0] & 1) _free(HEAP32[$7 + -4 >> 2] | 0);
    if (HEAP8[$6 >> 0] & 1) _free(HEAP32[$7 + -16 >> 2] | 0);
    $7 = HEAP32[$3 >> 2] | 0;
   } while (($7 | 0) != ($1 | 0));
   $21 = HEAP32[$ptr >> 2] | 0;
  }
  _free($21);
 }
 _free($ptr);
 STACKTOP = sp;
 return;
}

function _wmemmove($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($n | 0) == 0;
 if ($d - $s >> 2 >>> 0 < $n >>> 0) {
  if ($5) {
   STACKTOP = sp;
   return;
  } else $$in = $n;
  do {
   $$in = $$in + -1 | 0;
   HEAP32[$d + ($$in << 2) >> 2] = HEAP32[$s + ($$in << 2) >> 2];
  } while (($$in | 0) != 0);
  STACKTOP = sp;
  return;
 } else {
  if ($5) {
   STACKTOP = sp;
   return;
  } else {
   $$025 = $s;
   $$07 = $d;
   $$16 = $n;
  }
  while (1) {
   $$16 = $$16 + -1 | 0;
   HEAP32[$$07 >> 2] = HEAP32[$$025 >> 2];
   if (!$$16) break; else {
    $$025 = $$025 + 4 | 0;
    $$07 = $$07 + 4 | 0;
   }
  }
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i = 0, $0 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $0 = $this + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 128 >> 0] = 0;
 if (!$__n) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this, $__n);
 $$0$i = $__n;
 $5 = HEAP32[$0 >> 2] | 0;
 do {
  if (!$5) $7 = 0; else {
   HEAP32[$5 >> 2] = 0;
   $7 = HEAP32[$0 >> 2] | 0;
  }
  $5 = $7 + 4 | 0;
  HEAP32[$0 >> 2] = $5;
  $$0$i = $$0$i + -1 | 0;
 } while (($$0$i | 0) != 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this, $__nb, $__ne, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $0 = 0, $1 = 0, $fmt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $fmt = sp;
 HEAP8[$fmt >> 0] = 37;
 $0 = $fmt + 1 | 0;
 HEAP8[$0 >> 0] = $__fmt;
 $1 = $fmt + 2 | 0;
 HEAP8[$1 >> 0] = $__mod;
 HEAP8[$fmt + 3 >> 0] = 0;
 if ($__mod << 24 >> 24) {
  HEAP8[$0 >> 0] = $__mod;
  HEAP8[$1 >> 0] = $__fmt;
 }
 HEAP32[$__ne >> 2] = $__nb + (_strftime_l($__nb | 0, (HEAP32[$__ne >> 2] | 0) - $__nb | 0, $fmt | 0, $__tm | 0, HEAP32[$this >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 do if ((HEAP32[$this >> 2] | 0) != -1) {
  _pthread_mutex_lock(48032) | 0;
  if ((HEAP32[$this >> 2] | 0) == 1) do _pthread_cond_wait(48056, 48032) | 0; while ((HEAP32[$this >> 2] | 0) == 1);
  if (!(HEAP32[$this >> 2] | 0)) {
   HEAP32[$this >> 2] = 1;
   _pthread_mutex_unlock(48032) | 0;
   __ZNSt3__16locale2id6__initEv($this);
   _pthread_mutex_lock(48032) | 0;
   HEAP32[$this >> 2] = -1;
   _pthread_mutex_unlock(48032) | 0;
   _pthread_cond_broadcast(48056) | 0;
   break;
  } else {
   _pthread_mutex_unlock(48032) | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return (HEAP32[$this + 4 >> 2] | 0) + -1 | 0;
}

function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low;
  STACKTOP = sp;
  return $$01$lcssa | 0;
 }
 $3 = ($high + -4 - $low | 0) >>> 2;
 $$012 = $low;
 $$03 = $dest;
 while (1) {
  $4 = HEAP32[$$012 >> 2] | 0;
  HEAP8[$$03 >> 0] = $4 >>> 0 < 128 ? $4 & 255 : $dfault;
  $$012 = $$012 + 4 | 0;
  if (($$012 | 0) == ($high | 0)) break; else $$03 = $$03 + 1 | 0;
 }
 $$01$lcssa = $low + ($3 + 1 << 2) | 0;
 STACKTOP = sp;
 return $$01$lcssa | 0;
}

function __Znwj($size) {
 $size = $size | 0;
 var $$lcssa = 0, $$size = 0, $1 = 0, $3 = 0, $6 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$size = ($size | 0) == 0 ? 1 : $size;
 $1 = _malloc($$size) | 0;
 if ($1) {
  $$lcssa = $1;
  STACKTOP = sp;
  return $$lcssa | 0;
 }
 while (1) {
  $3 = HEAP32[15470] | 0;
  HEAP32[15470] = $3 + 0;
  if (!$3) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$3 & 3]();
  $6 = _malloc($$size) | 0;
  if ($6) {
   $$lcssa = $6;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $8 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$8 >> 2] = 61776;
  ___cxa_throw($8 | 0, 61824, 94);
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $$lcssa | 0;
 }
 return 0;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 15]($8, $info, $adjustedPtr + $offset_to_base$0 | 0, ($1 & 2 | 0) != 0 ? $path_below : 2);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal12operator_newINSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEJEEEPT_DpOT0_() {
 var $$lcssa$i = 0, $0 = 0, $2 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = _malloc(12) | 0;
 L1 : do if (!$0) {
  while (1) {
   $2 = HEAP32[15470] | 0;
   HEAP32[15470] = $2 + 0;
   if (!$2) break;
   FUNCTION_TABLE_v[$2 & 3]();
   $5 = _malloc(12) | 0;
   if ($5) {
    $$lcssa$i = $5;
    break L1;
   }
  }
  $7 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$7 >> 2] = 61776;
  ___cxa_throw($7 | 0, 61824, 94);
 } else $$lcssa$i = $0; while (0);
 HEAP32[$$lcssa$i >> 2] = 0;
 HEAP32[$$lcssa$i + 4 >> 2] = 0;
 HEAP32[$$lcssa$i + 8 >> 2] = 0;
 STACKTOP = sp;
 return $$lcssa$i | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 if ($__sz >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($__sz >>> 0 < 11) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__sz + 16 & -16;
  $7 = _malloc($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0;
 HEAP8[$__p$0 + $__sz >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$01 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 L1 : do if (($low | 0) == ($high | 0)) $$0$lcssa = $low; else {
  $$01 = $low;
  while (1) {
   $3 = HEAP32[$$01 >> 2] | 0;
   if ($3 >>> 0 >= 128) {
    $$0$lcssa = $$01;
    break L1;
   }
   if (!((HEAP16[(__ZNSt3__15ctypeIcE13classic_tableEv() | 0) + ($3 << 1) >> 1] & $m) << 16 >> 16)) {
    $$0$lcssa = $$01;
    break L1;
   }
   $$01 = $$01 + 4 | 0;
   if (($$01 | 0) == ($high | 0)) {
    $$0$lcssa = $high;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0$lcssa | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this | 0;
 var $4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 if (HEAP8[51576] | 0) {
  STACKTOP = sp;
  return 51560;
 }
 if (!(___cxa_guard_acquire(51576) | 0)) {
  STACKTOP = sp;
  return 51560;
 }
 $4 = __Znwj(16) | 0;
 HEAP32[12892] = $4;
 HEAP32[12890] = 17;
 HEAP32[12891] = 11;
 dest = $4 + 0 | 0;
 src = 51584;
 stop = dest + 11 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$4 + 11 >> 0] = 0;
 ___cxa_atexit(121, 51560, ___dso_handle | 0) | 0;
 ___cxa_guard_release(51576);
 STACKTOP = sp;
 return 51560;
}

function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this | 0;
 var $4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 if (HEAP8[51416] | 0) {
  STACKTOP = sp;
  return 51400;
 }
 if (!(___cxa_guard_acquire(51416) | 0)) {
  STACKTOP = sp;
  return 51400;
 }
 $4 = __Znwj(32) | 0;
 HEAP32[12852] = $4;
 HEAP32[12850] = 33;
 HEAP32[12851] = 20;
 dest = $4 + 0 | 0;
 src = 51424;
 stop = dest + 20 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$4 + 20 >> 0] = 0;
 ___cxa_atexit(121, 51400, ___dso_handle | 0) | 0;
 ___cxa_guard_release(51416);
 STACKTOP = sp;
 return 51400;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($__y, $__b, $__e$0, $__err, $__ct) {
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $__t$0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 4) | 0;
 if (HEAP32[$__err >> 2] & 4) {
  STACKTOP = sp;
  return;
 }
 if (($0 | 0) < 69) $__t$0 = $0 + 2e3 | 0; else $__t$0 = ($0 + -69 | 0) >>> 0 < 31 ? $0 + 1900 | 0 : $0;
 HEAP32[$__y >> 2] = $__t$0 + -1900;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($__y, $__b, $__e$0, $__err, $__ct) {
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $__t$0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 4) | 0;
 if (HEAP32[$__err >> 2] & 4) {
  STACKTOP = sp;
  return;
 }
 if (($0 | 0) < 69) $__t$0 = $0 + 2e3 | 0; else $__t$0 = ($0 + -69 | 0) >>> 0 < 31 ? $0 + 1900 | 0 : $0;
 HEAP32[$__y >> 2] = $__t$0 + -1900;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 if ($__sz >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($__sz >>> 0 < 11) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__sz + 16 & -16;
  $7 = __Znwj($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0;
 HEAP8[$__p$0 + $__sz >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$01 = 0, $3 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$0$lcssa = $low;
  STACKTOP = sp;
  return $$0$lcssa | 0;
 }
 $3 = ($high + -4 - $low | 0) >>> 2;
 $$01 = $low;
 do {
  $4 = HEAP32[$$01 >> 2] | 0;
  if ($4 >>> 0 < 128) $8 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_upper_tableEv() | 0) + ($4 << 2) >> 2] | 0; else $8 = $4;
  HEAP32[$$01 >> 2] = $8;
  $$01 = $$01 + 4 | 0;
 } while (($$01 | 0) != ($high | 0));
 $$0$lcssa = $low + ($3 + 1 << 2) | 0;
 STACKTOP = sp;
 return $$0$lcssa | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$01 = 0, $3 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$0$lcssa = $low;
  STACKTOP = sp;
  return $$0$lcssa | 0;
 }
 $3 = ($high + -4 - $low | 0) >>> 2;
 $$01 = $low;
 do {
  $4 = HEAP32[$$01 >> 2] | 0;
  if ($4 >>> 0 < 128) $8 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_lower_tableEv() | 0) + ($4 << 2) >> 2] | 0; else $8 = $4;
  HEAP32[$$01 >> 2] = $8;
  $$01 = $$01 + 4 | 0;
 } while (($$01 | 0) != ($high | 0));
 $$0$lcssa = $low + ($3 + 1 << 2) | 0;
 STACKTOP = sp;
 return $$0$lcssa | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low;
  STACKTOP = sp;
  return $$01$lcssa | 0;
 } else {
  $$013 = $low;
  $$04 = $dest;
 }
 while (1) {
  $1 = HEAP8[$$013 >> 0] | 0;
  HEAP8[$$04 >> 0] = $1 << 24 >> 24 > -1 ? $1 : $dfault;
  $$013 = $$013 + 1 | 0;
  if (($$013 | 0) == ($high | 0)) {
   $$01$lcssa = $high;
   break;
  } else $$04 = $$04 + 1 | 0;
 }
 STACKTOP = sp;
 return $$01$lcssa | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 if ($__n >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($__n >>> 0 < 11) {
  HEAP8[$this >> 0] = $__n << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__n + 16 & -16;
  $7 = __Znwj($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $7;
 }
 _memset($__p$0 | 0, $__c | 0, $__n | 0) | 0;
 HEAP8[$__p$0 + $__n >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this | 0;
 var $4 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 if (HEAP8[51240] | 0) {
  STACKTOP = sp;
  return 51224;
 }
 if (!(___cxa_guard_acquire(51240) | 0)) {
  STACKTOP = sp;
  return 51224;
 }
 HEAP8[51224] = 16;
 $4 = 51225;
 $5 = $4;
 HEAP8[$5 >> 0] = 37;
 HEAP8[$5 + 1 >> 0] = 109;
 HEAP8[$5 + 2 >> 0] = 47;
 HEAP8[$5 + 3 >> 0] = 37;
 $7 = $4 + 4 | 0;
 HEAP8[$7 >> 0] = 100;
 HEAP8[$7 + 1 >> 0] = 47;
 HEAP8[$7 + 2 >> 0] = 37;
 HEAP8[$7 + 3 >> 0] = 121;
 HEAP8[51233] = 0;
 ___cxa_atexit(121, 51224, ___dso_handle | 0) | 0;
 ___cxa_guard_release(51240);
 STACKTOP = sp;
 return 51224;
}

function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this | 0;
 var $4 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 if (HEAP8[51328] | 0) {
  STACKTOP = sp;
  return 51312;
 }
 if (!(___cxa_guard_acquire(51328) | 0)) {
  STACKTOP = sp;
  return 51312;
 }
 HEAP8[51312] = 16;
 $4 = 51313;
 $5 = $4;
 HEAP8[$5 >> 0] = 37;
 HEAP8[$5 + 1 >> 0] = 72;
 HEAP8[$5 + 2 >> 0] = 58;
 HEAP8[$5 + 3 >> 0] = 37;
 $7 = $4 + 4 | 0;
 HEAP8[$7 >> 0] = 77;
 HEAP8[$7 + 1 >> 0] = 58;
 HEAP8[$7 + 2 >> 0] = 37;
 HEAP8[$7 + 3 >> 0] = 83;
 HEAP8[51321] = 0;
 ___cxa_atexit(121, 51312, ___dso_handle | 0) | 0;
 ___cxa_guard_release(51328);
 STACKTOP = sp;
 return 51312;
}

function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $3 = 0, $4 = 0, $7 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, sp = 0;
 sp = STACKTOP;
 if (($__lo | 0) == ($__hi | 0)) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;
  return $__h$0$lcssa | 0;
 } else {
  $__h$02 = 0;
  $__p$01 = $__lo;
 }
 while (1) {
  $3 = (HEAP32[$__p$01 >> 2] | 0) + ($__h$02 << 4) | 0;
  $4 = $3 & -268435456;
  $7 = ($4 >>> 24 | $4) ^ $3;
  $__p$01 = $__p$01 + 4 | 0;
  if (($__p$01 | 0) == ($__hi | 0)) {
   $__h$0$lcssa = $7;
   break;
  } else $__h$02 = $7;
 }
 STACKTOP = sp;
 return $__h$0$lcssa | 0;
}

function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $4 = 0, $5 = 0, $8 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, sp = 0;
 sp = STACKTOP;
 if (($__lo | 0) == ($__hi | 0)) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;
  return $__h$0$lcssa | 0;
 } else {
  $__h$02 = 0;
  $__p$01 = $__lo;
 }
 while (1) {
  $4 = (HEAP8[$__p$01 >> 0] | 0) + ($__h$02 << 4) | 0;
  $5 = $4 & -268435456;
  $8 = ($5 >>> 24 | $5) ^ $4;
  $__p$01 = $__p$01 + 1 | 0;
  if (($__p$01 | 0) == ($__hi | 0)) {
   $__h$0$lcssa = $8;
   break;
  } else $__h$02 = $8;
 }
 STACKTOP = sp;
 return $__h$0$lcssa | 0;
}

function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$01 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 L1 : do if (($low | 0) == ($high | 0)) $$0$lcssa = $low; else {
  $$01 = $low;
  while (1) {
   $1 = HEAP32[$$01 >> 2] | 0;
   if ($1 >>> 0 < 128) if ((HEAP16[(__ZNSt3__15ctypeIcE13classic_tableEv() | 0) + ($1 << 1) >> 1] & $m) << 16 >> 16) {
    $$0$lcssa = $$01;
    break L1;
   }
   $$01 = $$01 + 4 | 0;
   if (($$01 | 0) == ($high | 0)) {
    $$0$lcssa = $high;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0$lcssa | 0;
}

function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$0$lcssa = $low;
  STACKTOP = sp;
  return $$0$lcssa | 0;
 } else $$02 = $low;
 do {
  $1 = HEAP8[$$02 >> 0] | 0;
  if ($1 << 24 >> 24 > -1) $7 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_upper_tableEv() | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255; else $7 = $1;
  HEAP8[$$02 >> 0] = $7;
  $$02 = $$02 + 1 | 0;
 } while (($$02 | 0) != ($high | 0));
 $$0$lcssa = $high;
 STACKTOP = sp;
 return $$0$lcssa | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$0$lcssa = $low;
  STACKTOP = sp;
  return $$0$lcssa | 0;
 } else $$02 = $low;
 do {
  $1 = HEAP8[$$02 >> 0] | 0;
  if ($1 << 24 >> 24 > -1) $7 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_lower_tableEv() | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255; else $7 = $1;
  HEAP8[$$02 >> 0] = $7;
  $$02 = $$02 + 1 | 0;
 } while (($$02 | 0) != ($high | 0));
 $$0$lcssa = $high;
 STACKTOP = sp;
 return $$0$lcssa | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$info + 8 >> 2] | 0) != ($this | 0)) {
  STACKTOP = sp;
  return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 49904, 49936 | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result, $this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 49752, 49760 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i$i = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 if ($__n >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
 $1 = $this + 128 | 0;
 if ((HEAP8[$1 >> 0] | 0) == 0 & $__n >>> 0 < 29) {
  HEAP8[$1 >> 0] = 1;
  $$0$i$i = $this + 16 | 0;
 } else $$0$i$i = __Znwj($__n << 2) | 0;
 HEAP32[$this + 4 >> 2] = $$0$i$i;
 HEAP32[$this >> 2] = $$0$i$i;
 HEAP32[$this + 8 >> 2] = $$0$i$i + ($__n << 2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0;
 $3 = HEAP32[$__loc >> 2] | 0;
 $4 = __ZNSt3__16locale2id5__getEv(50912) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$3 + 8 >> 2] | 0, HEAP32[$3 + 12 >> 2] | 0, $4) | 0;
 HEAP32[$this + 36 >> 2] = $5;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 127]($5) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0;
 $3 = HEAP32[$__loc >> 2] | 0;
 $4 = __ZNSt3__16locale2id5__getEv(50904) | 0;
 $5 = __ZNKSt3__16locale5__imp9use_facetEl(HEAP32[$3 + 8 >> 2] | 0, HEAP32[$3 + 12 >> 2] | 0, $4) | 0;
 HEAP32[$this + 36 >> 2] = $5;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 127]($5) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 16 | 0;
 if (!(HEAP8[$0 >> 0] & 1)) {
  HEAP32[$agg$result + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  STACKTOP = sp;
  return;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, HEAP32[$this + 24 >> 2] | 0, HEAP32[$this + 20 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 if (!(HEAP8[$0 >> 0] & 1)) {
  HEAP32[$agg$result + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  STACKTOP = sp;
  return;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, HEAP32[$this + 20 >> 2] | 0, HEAP32[$this + 16 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low;
  STACKTOP = sp;
  return $$01$lcssa | 0;
 } else {
  $$012 = $low;
  $$03 = $dest;
 }
 while (1) {
  HEAP32[$$03 >> 2] = HEAP8[$$012 >> 0];
  $$012 = $$012 + 1 | 0;
  if (($$012 | 0) == ($high | 0)) {
   $$01$lcssa = $high;
   break;
  } else $$03 = $$03 + 4 | 0;
 }
 STACKTOP = sp;
 return $$01$lcssa | 0;
}

function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this, $code, $condition) {
 $this = $this | 0;
 $code = $code | 0;
 $condition = $condition | 0;
 var $0 = 0, $12 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$this >> 2] | 0) + 12 >> 2] & 7]($0, $this, $code);
 if ((HEAP32[$0 + 4 >> 2] | 0) != (HEAP32[$condition + 4 >> 2] | 0)) {
  $12 = 0;
  STACKTOP = sp;
  return $12 | 0;
 }
 $12 = (HEAP32[$0 >> 2] | 0) == (HEAP32[$condition >> 2] | 0);
 STACKTOP = sp;
 return $12 | 0;
}

function __ZNSt3__18ios_base5clearEj($this, $state) {
 $this = $this | 0;
 $state = $state | 0;
 var $$state = 0, $9 = 0;
 $$state = (HEAP32[$this + 24 >> 2] | 0) == 0 | $state;
 HEAP32[$this + 16 >> 2] = $$state;
 if (!($$state & HEAP32[$this + 20 >> 2])) return;
 $9 = ___cxa_allocate_exception(16) | 0;
 if (!(HEAP8[48456] | 0)) if (___cxa_guard_acquire(48456) | 0) {
  HEAP32[12112] = 49152;
  ___cxa_guard_release(48456);
 }
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($9, 1, 48448, 48504);
 HEAP32[$9 >> 2] = 48472;
 ___cxa_throw($9 | 0, 48552, 29);
}

function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) $$01$lcssa = $low; else {
  $$012 = $low;
  $$03 = $dest;
  while (1) {
   HEAP8[$$03 >> 0] = HEAP8[$$012 >> 0] | 0;
   $$012 = $$012 + 1 | 0;
   if (($$012 | 0) == ($high | 0)) {
    $$01$lcssa = $high;
    break;
   } else $$03 = $$03 + 1 | 0;
  }
 }
 STACKTOP = sp;
 return $$01$lcssa | 0;
}

function __ZSt9terminatev() {
 var $20 = 0, $3 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (_pthread_once(61592, 2) | 0) _abort_message(61600, sp);
 $3 = _pthread_getspecific(HEAP32[15396] | 0) | 0;
 if ($3) {
  $5 = HEAP32[$3 >> 2] | 0;
  if ($5) {
   $8 = $5 + 48 | 0;
   if ((HEAP32[$8 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$8 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[$5 + 12 >> 2] | 0);
  }
 }
 $20 = HEAP32[14668] | 0;
 HEAP32[14668] = $20 + 0;
 __ZSt11__terminatePFvvE($20);
}

function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $4 = 0, $5 = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $temp = sp;
 HEAP32[$temp >> 2] = HEAP32[$thrown >> 2];
 $4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$catchType >> 2] | 0) + 16 >> 2] & 31]($catchType, $excpType, $temp) | 0;
 $5 = $4 & 1;
 if (!$4) {
  STACKTOP = sp;
  return $5 | 0;
 }
 HEAP32[$thrown >> 2] = HEAP32[$temp >> 2];
 STACKTOP = sp;
 return $5 | 0;
}

function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorI18CompilerLexerTokenNS3_9allocatorIS5_EEEEjES2_SA_JjEE6invokeEPSC_PS8_j($function, $wireThis, $args) {
 $function = $function | 0;
 $wireThis = $wireThis | 0;
 $args = $args | 0;
 var $0 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 FUNCTION_TABLE_viii[HEAP32[$function >> 2] & 7]($0, $wireThis, $args);
 __emval_incref(HEAP32[$0 >> 2] | 0);
 $3 = HEAP32[$0 >> 2] | 0;
 __emval_decref($3 | 0);
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNKSt3__16locale5__imp9use_facetEl($this$0$1$0$0$val, $this$0$1$0$1$val, $id) {
 $this$0$1$0$0$val = $this$0$1$0$0$val | 0;
 $this$0$1$0$1$val = $this$0$1$0$1$val | 0;
 $id = $id | 0;
 var $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if ($this$0$1$0$1$val - $this$0$1$0$0$val >> 2 >>> 0 > $id >>> 0) {
  $6 = HEAP32[$this$0$1$0$0$val + ($id << 2) >> 2] | 0;
  if ($6) {
   STACKTOP = sp;
   return $6 | 0;
  }
 }
 $8 = ___cxa_allocate_exception(4) | 0;
 HEAP32[$8 >> 2] = 62168;
 ___cxa_throw($8 | 0, 62240, 102);
 return 0;
}

function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s, $__n, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l | 0) | 0;
 $1 = _vsnprintf($__s, $__n, $__format, $__va) | 0;
 if (!$0) {
  STACKTOP = sp;
  return $1 | 0;
 }
 _uselocale($0 | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) {
  STACKTOP = sp;
  return;
 }
 $2 = $this + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) != ($0 | 0)) HEAP32[$2 >> 2] = $3 + (~(($3 + -4 - $0 | 0) >>> 2) << 2);
 if (($this + 16 | 0) == ($0 | 0)) {
  HEAP8[$this + 128 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  _free($0);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__16localeC2Ev($this) {
 $this = $this | 0;
 var $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if (!(HEAP8[50816] | 0)) if (___cxa_guard_acquire(50816) | 0) {
  $5 = HEAP32[(__ZNSt3__16locale7classicEv() | 0) >> 2] | 0;
  HEAP32[12702] = $5;
  $6 = $5 + 4 | 0;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
  ___cxa_guard_release(50816);
 }
 $8 = HEAP32[12702] | 0;
 HEAP32[$this >> 2] = $8;
 $9 = $8 + 4 | 0;
 HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $$012$i$i = 0, $$03$i$i = 0, $0 = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result >> 0] = 2;
 $0 = $agg$result + 4 | 0;
 $$012$i$i = 1;
 $$03$i$i = $0;
 while (1) {
  $$012$i$i = $$012$i$i + -1 | 0;
  HEAP32[$$03$i$i >> 2] = 45;
  if (!$$012$i$i) break; else $$03$i$i = $$03$i$i + 4 | 0;
 }
 HEAP32[$0 + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $$012$i$i = 0, $$03$i$i = 0, $0 = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result >> 0] = 2;
 $0 = $agg$result + 4 | 0;
 $$012$i$i = 1;
 $$03$i$i = $0;
 while (1) {
  $$012$i$i = $$012$i$i + -1 | 0;
  HEAP32[$$03$i$i >> 2] = 45;
  if (!$$012$i$i) break; else $$03$i$i = $$03$i$i + 4 | 0;
 }
 HEAP32[$0 + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}

function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if (HEAP8[51616] | 0) {
  STACKTOP = sp;
  return 51600;
 }
 if (!(___cxa_guard_acquire(51616) | 0)) {
  STACKTOP = sp;
  return 51600;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(51600, 51624, 11);
 ___cxa_atexit(122, 51600, ___dso_handle | 0) | 0;
 ___cxa_guard_release(51616);
 STACKTOP = sp;
 return 51600;
}

function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if (HEAP8[51464] | 0) {
  STACKTOP = sp;
  return 51448;
 }
 if (!(___cxa_guard_acquire(51464) | 0)) {
  STACKTOP = sp;
  return 51448;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(51448, 51472, 20);
 ___cxa_atexit(122, 51448, ___dso_handle | 0) | 0;
 ___cxa_guard_release(51464);
 STACKTOP = sp;
 return 51448;
}

function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if (HEAP8[51264] | 0) {
  STACKTOP = sp;
  return 51248;
 }
 if (!(___cxa_guard_acquire(51264) | 0)) {
  STACKTOP = sp;
  return 51248;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(51248, 51272, 8);
 ___cxa_atexit(122, 51248, ___dso_handle | 0) | 0;
 ___cxa_guard_release(51264);
 STACKTOP = sp;
 return 51248;
}

function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if (HEAP8[51352] | 0) {
  STACKTOP = sp;
  return 51336;
 }
 if (!(___cxa_guard_acquire(51352) | 0)) {
  STACKTOP = sp;
  return 51336;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(51336, 51360, 8);
 ___cxa_atexit(122, 51336, ___dso_handle | 0) | 0;
 ___cxa_guard_release(51352);
 STACKTOP = sp;
 return 51336;
}

function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s, $__l, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l | 0) | 0;
 $1 = _vsscanf($__s, 49424, $__va) | 0;
 if (!$0) {
  STACKTOP = sp;
  return $1 | 0;
 }
 _uselocale($0 | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($this, $p, $n) {
 $this = $this | 0;
 $p = $p | 0;
 $n = $n | 0;
 var $6 = 0, sp = 0;
 sp = STACKTOP;
 if (!($this >>> 0 <= $p >>> 0 & ($this + 4096 | 0) >>> 0 >= $p >>> 0)) {
  _free($p);
  STACKTOP = sp;
  return;
 }
 $6 = $this + 4096 | 0;
 if (($p + ($n + 15 & -16) | 0) != (HEAP32[$6 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = $p;
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48176;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if ($3) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48112;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if ($3) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $2 = _uselocale(HEAP32[$0 >> 2] | 0) | 0;
 if ($2) _uselocale($2 | 0) | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 if (!$4) $$0 = 1; else {
  $6 = _uselocale($4 | 0) | 0;
  if (!$6) $$0 = 0; else {
   _uselocale($6 | 0) | 0;
   $$0 = 0;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEjRKS4_EbS8_JjSA_EE6invokeEPSC_PS7_jPS4_($function, $wireThis, $args, $args1) {
 $function = $function | 0;
 $wireThis = $wireThis | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 $1 = FUNCTION_TABLE_iiii[HEAP32[$function >> 2] & 31]($wireThis, $args, $args1) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0;
 HEAP8[$agg$result >> 0] = 10;
 $0 = $agg$result + 1 | 0;
 HEAP8[$0 + 0 >> 0] = HEAP8[60744] | 0;
 HEAP8[$0 + 1 >> 0] = HEAP8[60745] | 0;
 HEAP8[$0 + 2 >> 0] = HEAP8[60746] | 0;
 HEAP8[$0 + 3 >> 0] = HEAP8[60747] | 0;
 HEAP8[$0 + 4 >> 0] = HEAP8[60748] | 0;
 HEAP8[$agg$result + 6 >> 0] = 0;
 return;
}

function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg | 0;
 var $0 = 0, $1 = 0, $3 = 0, $7 = 0;
 $0 = ___cxa_allocate_exception(8) | 0;
 HEAP32[$0 >> 2] = 61944;
 $1 = _strlen($msg | 0) | 0;
 $3 = __Znwj($1 + 13 | 0) | 0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = 0;
 $7 = $3 + 12 | 0;
 _memcpy($7 | 0, $msg | 0, $1 + 1 | 0) | 0;
 HEAP32[$0 + 4 >> 2] = $7;
 ___cxa_throw($0 | 0, 62144, 98);
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 127]($this) | 0) == -1) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = $this + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$5 >> 2] = $6 + 4;
 $$0 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 127]($this) | 0) == -1) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = $this + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$5 >> 2] = $6 + 1;
 $$0 = HEAPU8[$6 >> 0] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48176;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if ($3) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48112;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if ($3) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48176;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if ($3) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48112;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if ($3) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt11logic_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $0 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 61920;
 $0 = _strlen($msg | 0) | 0;
 $2 = __Znwj($0 + 13 | 0) | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = 0;
 $5 = $2 + 12 | 0;
 _memcpy($5 | 0, $msg | 0, $0 + 1 | 0) | 0;
 HEAP32[$this + 4 >> 2] = $5;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt >> 2] = $to;
 $2 = _uselocale(HEAP32[$this + 8 >> 2] | 0) | 0;
 if (!$2) {
  STACKTOP = sp;
  return 0;
 }
 _uselocale($2 | 0) | 0;
 STACKTOP = sp;
 return 0;
}

function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 61944;
 $0 = $this + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (($3 + -1 | 0) >= 0) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 _free((HEAP32[$0 >> 2] | 0) + -12 | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48176;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if ($3) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48176;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if ($3) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48112;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if ($3) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 48112;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if ($3) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 61944;
 $0 = $this + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (($3 + -1 | 0) >= 0) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 _free((HEAP32[$0 >> 2] | 0) + -12 | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if (!(HEAP8[$__nm >> 0] & 1)) $7 = $__nm + 1 | 0; else $7 = HEAP32[$__nm + 8 >> 2] | 0;
 $8 = _catopen($7 | 0, 1) | 0;
 STACKTOP = sp;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if (!(HEAP8[$__nm >> 0] & 1)) $7 = $__nm + 1 | 0; else $7 = HEAP32[$__nm + 8 >> 2] | 0;
 $8 = _catopen($7 | 0, 1) | 0;
 STACKTOP = sp;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 61944;
 $0 = $this + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (($3 + -1 | 0) >= 0) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 _free((HEAP32[$0 >> 2] | 0) + -12 | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt12out_of_rangeD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 61920;
 $0 = $this + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (($3 + -1 | 0) >= 0) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 _free((HEAP32[$0 >> 2] | 0) + -12 | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt12length_errorD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 61920;
 $0 = $this + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (($3 + -1 | 0) >= 0) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 _free((HEAP32[$0 >> 2] | 0) + -12 | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $agg$result + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $agg$result + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}

function __ZNSt11logic_errorD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 61920;
 $0 = $this + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (($3 + -1 | 0) >= 0) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 _free((HEAP32[$0 >> 2] | 0) + -12 | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 STACKTOP = sp;
 return;
}

function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 61944;
 $0 = $this + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (($3 + -1 | 0) >= 0) {
  STACKTOP = sp;
  return;
 }
 _free((HEAP32[$0 >> 2] | 0) + -12 | 0);
 STACKTOP = sp;
 return;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this, $code, $condition) {
 $this = $this | 0;
 $code = $code | 0;
 $condition = $condition | 0;
 var $5 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$code + 4 >> 2] | 0) != ($this | 0)) {
  $5 = 0;
  STACKTOP = sp;
  return $5 | 0;
 }
 $5 = (HEAP32[$code >> 2] | 0) == ($condition | 0);
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 61944;
 $0 = $this + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (($3 + -1 | 0) >= 0) {
  STACKTOP = sp;
  return;
 }
 _free((HEAP32[$0 >> 2] | 0) + -12 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(46384);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(46560);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(46736);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(46912);
 STACKTOP = sp;
 return;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $6 = 0, $l$ = 0, sp = 0;
 sp = STACKTOP;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $6 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0;
 $l$ = $6 >>> 0 > $l >>> 0 ? $l : $6;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$;
 STACKTOP = sp;
 return $l | 0;
}

function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 61944;
 $0 = $this + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (($3 + -1 | 0) >= 0) {
  STACKTOP = sp;
  return;
 }
 _free((HEAP32[$0 >> 2] | 0) + -12 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt11logic_errorD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 61920;
 $0 = $this + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (($3 + -1 | 0) >= 0) {
  STACKTOP = sp;
  return;
 }
 _free((HEAP32[$0 >> 2] | 0) + -12 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $agg$result + 8 | 0;
 HEAP32[$7 >> 2] = -1;
 HEAP32[$7 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $agg$result + 8 | 0;
 HEAP32[$7 >> 2] = -1;
 HEAP32[$7 + 4 >> 2] = -1;
 return;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function ___getTypeName($ti) {
 $ti = $ti | 0;
 var $$0$i = 0, $1 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$ti + 4 >> 2] | 0;
 $3 = (_strlen($1 | 0) | 0) + 1 | 0;
 $4 = _malloc($3) | 0;
 if (!$4) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 _memcpy($4 | 0, $1 | 0, $3 | 0) | 0;
 $$0$i = $4;
 STACKTOP = sp;
 return $$0$i | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__15ctypeIwE5do_isEtw($this, $m, $c) {
 $this = $this | 0;
 $m = $m | 0;
 $c = $c | 0;
 var $5 = 0, sp = 0;
 sp = STACKTOP;
 if ($c >>> 0 >= 128) {
  $5 = 0;
  STACKTOP = sp;
  return $5 | 0;
 }
 $5 = (HEAP16[(__ZNSt3__15ctypeIcE13classic_tableEv() | 0) + ($c << 1) >> 1] & $m) << 16 >> 16 != 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZN10emscripten8internal14raw_destructorI18CompilerLexerTokenEEvPT_($ptr) {
 $ptr = $ptr | 0;
 var sp = 0;
 sp = STACKTOP;
 if (!$ptr) {
  STACKTOP = sp;
  return;
 }
 if (HEAP8[$ptr + 12 >> 0] & 1) _free(HEAP32[$ptr + 20 >> 2] | 0);
 if (HEAP8[$ptr >> 0] & 1) _free(HEAP32[$ptr + 8 >> 2] | 0);
 _free($ptr);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $5 = 0, sp = 0;
 sp = STACKTOP;
 if ($c << 24 >> 24 <= -1) {
  $5 = $c;
  STACKTOP = sp;
  return $5 | 0;
 }
 $5 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_lower_tableEv() | 0) + ($c << 24 >> 24 << 2) >> 2] & 255;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0;
 HEAP8[$agg$result >> 0] = 8;
 $0 = $agg$result + 1 | 0;
 HEAP8[$0 >> 0] = 116;
 HEAP8[$0 + 1 >> 0] = 114;
 HEAP8[$0 + 2 >> 0] = 117;
 HEAP8[$0 + 3 >> 0] = 101;
 HEAP8[$agg$result + 5 >> 0] = 0;
 return;
}

function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 50928;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == (__ZNSt3__16__clocEv() | 0)) {
  STACKTOP = sp;
  return;
 }
 _freelocale(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if (!$1) $5 = 1; else {
  $3 = _uselocale($1 | 0) | 0;
  if (!$3) $5 = 4; else {
   _uselocale($3 | 0) | 0;
   $5 = 4;
  }
 }
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNKSt3__15ctypeIcE10do_toupperEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $5 = 0, sp = 0;
 sp = STACKTOP;
 if ($c << 24 >> 24 <= -1) {
  $5 = $c;
  STACKTOP = sp;
  return $5 | 0;
 }
 $5 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_upper_tableEv() | 0) + (($c & 255) << 2) >> 2] & 255;
 STACKTOP = sp;
 return $5 | 0;
}

function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 $0 = HEAP32[_stderr >> 2] | 0;
 _vfprintf($0 | 0, $format | 0, $list | 0) | 0;
 _fputc(10, $0 | 0) | 0;
 _abort();
}

function dynCall_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 FUNCTION_TABLE_viiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0);
}

function __ZNKSt3__15ctypeIwE10do_toupperEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 if ($c >>> 0 >= 128) {
  $3 = $c;
  STACKTOP = sp;
  return $3 | 0;
 }
 $3 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_upper_tableEv() | 0) + ($c << 2) >> 2] | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 if ($c >>> 0 >= 128) {
  $3 = $c;
  STACKTOP = sp;
  return $3 | 0;
 }
 $3 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_lower_tableEv() | 0) + ($c << 2) >> 2] | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if (HEAP8[$this + 12 >> 0] & 1) _free(HEAP32[$this + 20 >> 2] | 0);
 if (!(HEAP8[$this >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$this + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16locale7classicEv() {
 var sp = 0;
 sp = STACKTOP;
 if (!(HEAP8[50800] | 0)) if (___cxa_guard_acquire(50800) | 0) {
  __ZNSt3__16locale5__impC2Ej(55136, 1);
  HEAP32[12696] = 55136;
  HEAP32[12698] = 50784;
  ___cxa_guard_release(50800);
 }
 STACKTOP = sp;
 return HEAP32[12698] | 0;
}

function dynCall_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 FUNCTION_TABLE_viiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0);
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_baseD2Ev($this + ($2 + 4) | 0);
 _free($this + $2 | 0);
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_baseD2Ev($this + ($2 + 4) | 0);
 _free($this + $2 | 0);
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_baseD2Ev($this + ($2 + 8) | 0);
 _free($this + $2 | 0);
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_baseD2Ev($this + ($2 + 8) | 0);
 _free($this + $2 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 51048;
 if (!(HEAP8[$this + 16 >> 0] & 1)) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$this + 24 >> 2] | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 51008;
 if (!(HEAP8[$this + 12 >> 0] & 1)) {
  _free($this);
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$this + 20 >> 2] | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsscanf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 51104, 5);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 51080, 4);
 STACKTOP = sp;
 return;
}

function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}

function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) == (__ZNSt3__16__clocEv() | 0)) {
  STACKTOP = sp;
  return;
 }
 _freelocale(HEAP32[$this >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function dynCall_viiiiiid(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = +a7;
 FUNCTION_TABLE_viiiiiid[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, +a7);
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $end = $end | 0;
 $mx = $mx | 0;
 var $3 = 0;
 $3 = $end - $frm | 0;
 return ($3 >>> 0 < $mx >>> 0 ? $3 : $mx) | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free($p);
 if (!(_pthread_setspecific(HEAP32[15396] | 0, 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(61712, sp);
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function __ZNSt3__16__clocEv() {
 var sp = 0;
 sp = STACKTOP;
 if (!(HEAP8[50744] | 0)) if (___cxa_guard_acquire(50744) | 0) {
  HEAP32[12684] = _newlocale(2147483647, 50752, 0) | 0;
  ___cxa_guard_release(50744);
 }
 STACKTOP = sp;
 return HEAP32[12684] | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if (!(HEAP8[$this >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$this + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if (!(HEAP8[$this >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$this + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if (!$this) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] & 127]($this);
 STACKTOP = sp;
 return;
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}

function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 50856;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if ($1) if (HEAP8[$this + 12 >> 0] | 0) _free($1);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 51048;
 if (!(HEAP8[$this + 16 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$this + 24 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 51008;
 if (!(HEAP8[$this + 12 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$this + 20 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal7InvokerIPNSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEJEE6invokeEPFS8_vE($fn) {
 $fn = $fn | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = FUNCTION_TABLE_i[$fn & 3]() | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 45;
 HEAP8[$agg$result + 2 >> 0] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 45;
 HEAP8[$agg$result + 2 >> 0] = 0;
 return;
}

function dynCall_viiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 FUNCTION_TABLE_viiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6);
}

function __ZNKSt3__114error_category23default_error_conditionEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 HEAP32[$agg$result >> 2] = $ev;
 HEAP32[$agg$result + 4 >> 2] = $this;
 return;
}

function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 50856;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if ($1) if (HEAP8[$this + 12 >> 0] | 0) _free($1);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $0 = $0 | 0;
 return ($this | 0) == ($thrown_type | 0) | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv() {
 var $0 = 0;
 $0 = ___cxa_allocate_exception(8) | 0;
 __ZNSt11logic_errorC2EPKc($0, 60392);
 HEAP32[$0 >> 2] = 62064;
 ___cxa_throw($0 | 0, 62104, 96);
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() {
 var $0 = 0;
 $0 = ___cxa_allocate_exception(8) | 0;
 __ZNSt11logic_errorC2EPKc($0, 60392);
 HEAP32[$0 >> 2] = 62e3;
 ___cxa_throw($0 | 0, 62040, 96);
}

function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv() {
 var $0 = 0;
 $0 = ___cxa_allocate_exception(8) | 0;
 __ZNSt11logic_errorC2EPKc($0, 50728);
 HEAP32[$0 >> 2] = 62e3;
 ___cxa_throw($0 | 0, 62040, 96);
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_key_create(61584, 125) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(61656, sp);
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZN10emscripten8internal7InvokerIP18CompilerLexerTokenJEE6invokeEPFS3_vE($fn) {
 $fn = $fn | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = FUNCTION_TABLE_i[$fn & 3]() | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18messagesIwE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var sp = 0;
 sp = STACKTOP;
 _catclose((($__c | 0) == -1 ? -1 : $__c << 1) | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18messagesIcE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var sp = 0;
 sp = STACKTOP;
 _catclose((($__c | 0) == -1 ? -1 : $__c << 1) | 0) | 0;
 STACKTOP = sp;
 return;
}

function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 if (!$type) $3 = 0; else $3 = (___dynamic_cast($type, 62464) | 0) != 0;
 STACKTOP = sp;
 return $3 & 1 | 0;
}

function runPostSets() {}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return $1$0 | 0;
}

function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__110__stdinbufIwE9__getcharEb($this, 0) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__110__stdinbufIcE9__getcharEb($this, 0) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__110__stdinbufIwE9__getcharEb($this, 1) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__110__stdinbufIcE9__getcharEb($this, 1) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _do_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = ___string_read($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 _free($this);
 STACKTOP = sp;
 return;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZNKSt3__16vectorI18CompilerLexerTokenNS_9allocatorIS1_EEE4sizeEv($this) {
 $this = $this | 0;
 return ((HEAP32[$this + 4 >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 24 | 0 | 0;
}

function b6(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 abort(6);
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function b12(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(12);
 return 0;
}

function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[$func & 3]();
 _abort_message(61840, sp);
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __GLOBAL__sub_I_iostream_cpp() {
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev();
 ___cxa_atexit(123, 47e3, ___dso_handle | 0) | 0;
 STACKTOP = sp;
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[12706] | 0;
 HEAP32[12706] = $0 + 1;
 HEAP32[$this + 4 >> 2] = $0 + 1;
 return;
}

function __ZNKSt3__15ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c >>> 0 < 128 ? $c & 255 : $dfault) | 0;
}

function __ZNKSt3__15ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c << 24 >> 24 > -1 ? $c : $dfault) | 0;
}

function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 _free($this);
 STACKTOP = sp;
 return;
}

function b14(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(14);
}

function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(___ctype_b_loc() | 0) >> 2] | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 _free($this);
 STACKTOP = sp;
 return;
}

function __GLOBAL__sub_I_bind_cpp1145() {
 var sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev();
 STACKTOP = sp;
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0);
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function __ZN10emscripten8internal13getActualTypeINSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEEEPKvPT_($ptr) {
 $ptr = $ptr | 0;
 return 296;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function b1(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(1);
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __GLOBAL__sub_I_bind_cpp() {
 var sp = 0;
 sp = STACKTOP;
 __ZN43EmscriptenBindingInitializer_compiler_lexerC2Ev();
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function b8(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = +p6;
 abort(8);
}

function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0;
}

function _strlen(ptr) {
 ptr = ptr | 0;
 var curr = 0;
 curr = ptr;
 while (HEAP8[curr >> 0] | 0) curr = curr + 1 | 0;
 return curr - ptr | 0;
}

function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 63](a1 | 0, a2 | 0);
}

function b15(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(15);
}

function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function b10(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 abort(10);
}

function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function b17(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(17);
 return 0;
}

function __ZNSt9bad_allocD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt8bad_castD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 127](a1 | 0) | 0;
}

function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 12 >> 2] | 0;
}

function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 8 >> 2] | 0;
}

function __ZN10emscripten8internal13getActualTypeI18CompilerLexerTokenEEPKvPT_($ptr) {
 $ptr = $ptr | 0;
 return 552;
}

function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 9 >> 0] | 0;
}

function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 8 >> 0] | 0;
}

function __ZNKSt3__15ctypeIwE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c << 24 >> 24 | 0;
}

function b2(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(2);
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function b13(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(13);
 return 0;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 127](a1 | 0);
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__15ctypeIcE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c | 0;
}

function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt11logic_error4whatEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 1;
}

function b18(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(18);
}

function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZN18CompilerLexerToken7getNameEv($this) {
 $this = $this | 0;
 return $this + 12 | 0;
}

function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this | 0;
 return 48392;
}

function __ZN18CompilerLexerToken7getDataEv($this) {
 $this = $this | 0;
 return $this | 0;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 3]() | 0;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}

function b0(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(0);
 return 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this | 0;
 return;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3]();
}

function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(9);
}

function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this | 0;
 return 61792;
}

function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this | 0;
 return 62184;
}

function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this | 0;
 return;
}

function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(16);
 return 0;
}

function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this | 0;
 return;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function __ZNSt9bad_allocD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt8bad_castD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0 | 0;
 return;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b5(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(5);
}

function b7(p0) {
 p0 = p0 | 0;
 abort(7);
 return 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b4(p0) {
 p0 = p0 | 0;
 abort(4);
}

function b3() {
 abort(3);
 return 0;
}

function b11() {
 abort(11);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorI18CompilerLexerTokenNS3_9allocatorIS5_EEEEjES2_SA_JjEE6invokeEPSC_PS8_j,__ZN10emscripten8internal12VectorAccessINSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEE3setERS7_jRKS4_,_do_read
,b0,b0,b0];
var FUNCTION_TABLE_viiiiiii = [b1,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_i = [b3,__ZN10emscripten8internal12operator_newI18CompilerLexerTokenJEEEPT_DpOT0_,__ZN10emscripten8internal12operator_newINSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEJEEEPT_DpOT0_,b3];
var FUNCTION_TABLE_vi = [b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev
,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED1Ev
,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev
,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv119__pointer_type_infoD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN10emscripten8internal14raw_destructorI18CompilerLexerTokenEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEEEvPT_,__ZNSt3__112__do_nothingEPv,___cxx_global_array_dtor108,___cxx_global_array_dtor93,___cxx_global_array_dtor69,___cxx_global_array_dtor45
,___cxx_global_array_dtor42,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,__ZNSt3__18ios_base4InitD2Ev,_free,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b4,b4];
var FUNCTION_TABLE_vii = [b5,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv
,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,__ZN18CompilerLexerToken7setDataENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN18CompilerLexerToken7setNameENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZNSt3__16vectorI18CompilerLexerTokenNS_9allocatorIS1_EEE9push_backERKS1_,__Z8tokenizeNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_viiiiiiiii = [b6,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b6];
var FUNCTION_TABLE_ii = [b7,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt13runtime_error4whatEv,__ZNKSt3__119__iostream_category4nameEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv
,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv
,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt9bad_alloc4whatEv,__ZNKSt11logic_error4whatEv,__ZNKSt8bad_cast4whatEv,__ZN10emscripten8internal13getActualTypeI18CompilerLexerTokenEEPKvPT_,__ZN10emscripten8internal7InvokerIP18CompilerLexerTokenJEE6invokeEPFS3_vE,__ZN18CompilerLexerToken7getDataEv,__ZN18CompilerLexerToken7getNameEv,__ZN10emscripten8internal13getActualTypeINSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEEEPKvPT_,__ZN10emscripten8internal7InvokerIPNSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEJEE6invokeEPFS8_vE,__ZNKSt3__16vectorI18CompilerLexerTokenNS_9allocatorIS1_EEE4sizeEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiiiiid = [b8,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b8];
var FUNCTION_TABLE_viii = [b9,__ZNKSt3__114error_category23default_error_conditionEi,__ZNKSt3__119__iostream_category7messageEi,__ZN10emscripten8internal13MethodInvokerIM18CompilerLexerTokenFvNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEvPS2_JS9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_EUt_E,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEFvRKS4_EvPS7_JS9_EE6invokeERKSB_SC_PS4_,__ZNSt3__16vectorI18CompilerLexerTokenNS_9allocatorIS1_EEE6resizeEjRKS1_,__ZN10emscripten8internal12VectorAccessINSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEE3getERKS7_j,b9];
var FUNCTION_TABLE_viiiiid = [b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b10,b10,b10];
var FUNCTION_TABLE_v = [b11,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b11];
var FUNCTION_TABLE_iiiiiiiii = [b12,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_iiiii = [b13,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEjRKS4_EbS8_JjSA_EE6invokeEPSC_PS7_jPS4_,b13];
var FUNCTION_TABLE_viiiiiiii = [b14,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b14];
var FUNCTION_TABLE_viiiiii = [b15,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_iii = [b16,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,__ZN10emscripten8internal13MethodInvokerIM18CompilerLexerTokenFRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEvESB_PS2_JEE6invokeERKSD_SE_,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEKFjvEjPKS7_JEE6invokeERKS9_SB_,__ZN10emscripten8internal7InvokerINSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEJNS2_12basic_stringIcNS2_11char_traitsIcEENS5_IcEEEEEE6invokeEPFS7_SC_EPNS0_11BindingTypeISC_EUt_E,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];
var FUNCTION_TABLE_iiiiii = [b17,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b17,b17,b17];
var FUNCTION_TABLE_viiii = [b18,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI18CompilerLexerTokenNS2_9allocatorIS4_EEEEFvjRKS4_EvPS7_JjS9_EE6invokeERKSB_SC_jPS4_,b18,b18,b18,b18,b18,b18,b18];

  return { _malloc: _malloc, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _memset: _memset, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _realloc: _realloc, _i64Subtract: _i64Subtract, _strlen: _strlen, ___cxa_demangle: ___cxa_demangle, _memcpy: _memcpy, ___getTypeName: ___getTypeName, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, __GLOBAL__sub_I_bind_cpp1145: __GLOBAL__sub_I_bind_cpp1145, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viii: dynCall_viii, dynCall_viiiiid: dynCall_viiiiid, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _malloc = Module["_malloc"] = asm["_malloc"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _memset = Module["_memset"] = asm["_memset"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var __GLOBAL__sub_I_bind_cpp1145 = Module["__GLOBAL__sub_I_bind_cpp1145"] = asm["__GLOBAL__sub_I_bind_cpp1145"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    function applyMemoryInitializer(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






